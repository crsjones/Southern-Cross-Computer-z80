0001   0000             ;---------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   N E O  (SCNEO)
0003   0000             ;---------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ;
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.0  07/2023  INITIAL RELEASE
0015   0000             ;
0016   0000             ;IF DEFINED THE TARGET IS THE TEC-1F ELSE SC
0017   0000             ;#DEFINE TEC-1F
0018   0000             ; IF DEFINED USE THE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0019   0000             #DEFINE 74C923
0020   0000             ;
0021   0000             ;---------------
0022   0000             ; RAM MEMORY MAP
0023   0000             ;---------------
0024   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0025   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0026   0000             ;
0027   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0028   0000             BUFFER	.EQU	VARBLS-0100H	;GENERAL PURPOSE BUFFER AREA
0029   0000             ;
0030   0000             TXBUFFER	.EQU	BUFFER-0100H	;TRANSMIT BUFFER
0031   0000             RXBUFFER	.EQU	TXBUFFER-0100H	;RECEIVE BUFFER
0032   0000             ;
0033   0000             ISTACK	.EQU	RXBUFFER	;INITIAL MONITOR STACK
0034   0000             ;
0035   0000             RAMEND	.EQU	ISTACK-0400H	;END OF USER RAM
0036   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0037   0000             ;
0038   0000             ; I/O PORT ADDRESSES
0039   0000             ;
0040   0000~            #IFDEF TEC-1F
0041   0000~            ;
0042   0000~            ; TEC-1 I/O ASSIGNMENTS
0043   0000~            ;
0044   0000~            KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0045   0000~            SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0046   0000~            DISPLY	.EQU	02H	;DISPLAY LATCH
0047   0000~            PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0048   0000~            PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0049   0000~            PORT5	.EQU	05H
0050   0000~            PORT6	.EQU	06H
0051   0000~            PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0052   0000             #ELSE
0053   0000             ;
0054   0000             ; SOUTHERN CROSS I/O ASSIGNMENTS
0055   0000             ;
0056   0000             IO0	.EQU	80H	;IO PORT 0
0057   0000             IO1	.EQU	81H	;IO PORT 1
0058   0000             IO2	.EQU	82H	;IO PORT 2
0059   0000             IO3	.EQU	83H	;IO PORT 3
0060   0000             DISPLY	.EQU	84H	;DISPLAY LATCH
0061   0000             SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0062   0000             KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0063   0000             IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0064   0000             #ENDIF
0065   0000             ;
0066   0000             ; 6850 ACIA REGISTERS
0067   0000             ;
0068   0000             CONTROL	.EQU	4EH	;(WRITE) CONTROL REGISTER
0069   0000             STATUS	.EQU	4EH	;(READ) STATUS REGISTER
0070   0000             TDR	.EQU	4FH	;(WRITE) TRANSMIT DATA REGISTER
0071   0000             RDR	.EQU	4FH	;(READ) RECEIVE DATA REGISTER
0072   0000             ;
0073   0000             ; BIT BANG BAUD RATE CONSTANTS
0074   0000             ;
0075   0000             B300	.EQU	0220H	;300 BAUD
0076   0000             B1200	.EQU	0080H	;1200 BAUD
0077   0000             B2400	.EQU	003FH	;2400 BAUD
0078   0000             B4800	.EQU	001BH	;4800 BAUD
0079   0000             B9600	.EQU	000BH	;9600 BAUD
0080   0000             ;
0081   0000             ; KEY CODES
0082   0000             ;
0083   0000             KEYFN	.EQU	10H	;FN OR GO KEY
0084   0000             KEYAD	.EQU	11H	;ADDRESS KEY
0085   0000             KEYINC	.EQU	12H	;PLUS KEY
0086   0000             KEYDEC	.EQU	13H	;MINUS KEY
0087   0000             ;-------------------------
0088   0000             ; MONITOR GLOBAL VARIABLES
0089   0000             ;-------------------------
0090   0000             ;
0091   3F00             	.ORG	VARBLS
0092   3F00             ;
0093   3F00             ;SERIAL MONITOR (SCBUG) VARIABLES
0094   3F00             ;
0095   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0096   3F10             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0097   3F12             ADDR	.BLOCK	2	;TEMP ADDRESS
0098   3F14             DATA	.BLOCK	1	;TEMP DATA @ ADDRESS
0099   3F15             ;
0100   3F15             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0101   3F17             ;
0102   3F17             ; DALLAS SMARTWATCH REGISTERS
0103   3F17             ;
0104   3F17             CALMDE	.BLOCK	2	;CALENDAR MODE
0105   3F19             SWREG0	.BLOCK	1	;10THS, 100THS
0106   3F1A             SWREG1	.BLOCK	1	;SECONDS
0107   3F1B             SWREG2	.BLOCK	1	;MINUTES
0108   3F1C             SWREG3	.BLOCK	1	;HOURS
0109   3F1D             SWREG4	.BLOCK	1	;DAY
0110   3F1E             SWREG5	.BLOCK	1	;DATE
0111   3F1F             SWREG6	.BLOCK	1	;MONTH
0112   3F20             SWREG7	.BLOCK	1	;YEAR
0113   3F21             ;
0114   3F21             BAUD	.BLOCK	2	;BIT BANG BAUD RATE
0115   3F23             KEYTIM	.BLOCK	2	;BEEP DELAY
0116   3F25             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0117   3F27             ;
0118   3F27             ; BLOCK FUNCTIONS
0119   3F27             ;
0120   3F27             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0121   3F29             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0122   3F2B             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0123   3F2D             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0124   3F2F             ;
0125   3F2F             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0126   3F31             ;
0127   3F31             ; DISPLAY SCAN REGISTERS
0128   3F31             ;
0129   3F31             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0130   3F37             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0131   3F38             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0132   3F39             ;
0133   3F39             ; MONITOR VARIABLES
0134   3F39             ;
0135   3F39             MODE	.BLOCK	2	;DISPLAY MODE
0136   3F3B             ADRESS	.BLOCK	2	;USER ADDRESS
0137   3F3D             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0138   3F3F             ;
0139   3F3F             ; TEMPORARY REGISTER STORAGE
0140   3F3F             ;
0141   3F3F             REGPNT	.BLOCK	2	;REGISTER POINTER
0142   3F41             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0143   3F43             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0144   3F45             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0145   3F47             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0146   3F49             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0147   3F4B             TMPIX	.BLOCK	2	;INDEX REGISTER X
0148   3F4D             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0149   3F4F             TMPSP	.BLOCK	2	;STACK POINTER
0150   3F51             ;
0151   3F51             ; RESTART JUMP TABLE AND HARWARE TEST
0152   3F51             ;
0153   3F51             RST08	.BLOCK	2	;RESTART 08H JUMP
0154   3F53             RST10	.BLOCK	2	;RESTART 10H JUMP
0155   3F55             RST18	.BLOCK	2	;RESTART 18H JUMP
0156   3F57             RST20	.BLOCK	2	;RESTART 20H JUMP
0157   3F59             RST28	.BLOCK	2	;RESTART 28H JUMP
0158   3F5B             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0159   3F5D             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0160   3F5F             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0161   3F60             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0162   3F61             SYSERR	.BLOCK	2	;SYSTEM CALL ERROR JUMP
0163   3F63             ;----------------------
0164   3F63             ; ACIA CIRCULAR BUFFERS
0165   3F63             ;----------------------
0166   3F63             TXHEAD	.BLOCK	1	;LOW BYTE OF TRANSMIT HEAD POINTER
0167   3F64             TXTAIL	.BLOCK	1	;LOW BYTE OF TRANSMIT TAIL POINTER
0168   3F65             TXCOUNT	.BLOCK	1	;TRANSMIT CHAR COUNT
0169   3F66             RXHEAD	.BLOCK	1	;LOW BYTE OF RECEIVE HEAD POINTER
0170   3F67             RXTAIL	.BLOCK	1	;LOW BYTE OF RECEIVE TAIL POINTER
0171   3F68             RXCOUNT	.BLOCK	1	;RECEIVE CHAR COUNT
0172   3F69             ;----------------
0173   3F69             ; RESTART VECTORS
0174   3F69             ;----------------
0175   3F69             ;
0176   3F69             ;  RESTART 00H - RST 0
0177   3F69             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0178   3F69             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0179   3F69             ;
0180   0000             	.ORG	0000H
0181   0000 C3 00 02    RSTVEC	JP	RESET
0182   0003             ;
0183   0003             ; RESTART 08H - RST 1
0184   0003             ;
0185   0008             	.ORG	0008H
0186   0008 E5          	PUSH	HL
0187   0009 2A 51 3F    	LD	HL,(RST08)
0188   000C E9          	JP	(HL)
0189   000D             ;
0190   000D             ; RESTART 10H - RST 2
0191   000D             ;
0192   0010             	.ORG	0010H
0193   0010 E5          	PUSH	HL
0194   0011 2A 53 3F    	LD	HL,(RST10)
0195   0014 E9          	JP	(HL)
0196   0015             ;
0197   0015             ; RESTART 18H - RST 3
0198   0015             ;
0199   0018             	.ORG	0018H
0200   0018 E5          	PUSH	HL
0201   0019 2A 55 3F    	LD	HL,(RST18)
0202   001C E9          	JP	(HL)
0203   001D             ;
0204   001D             ; RESTART 20H - RST 4
0205   001D             ;
0206   0020             	.ORG	0020H
0207   0020 E5          	PUSH	HL
0208   0021 2A 57 3F    	LD	HL,(RST20)
0209   0024 E9          	JP	(HL)
0210   0025             ;
0211   0025             ; RESTART 28H - RST 5
0212   0025             ;
0213   0028             	.ORG	0028H
0214   0028 E5          	PUSH	HL
0215   0029 2A 59 3F    	LD	HL,(RST28)
0216   002C E9          	JP	(HL)
0217   002D             ;
0218   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0219   002D             ;
0220   0030             	.ORG	0030H
0221   0030 C3 6D 00    RST30	JP	SYSCALL
0222   0033             ;
0223   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0224   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0225   0033             ;INT OCCURS- FURTHER INTERRUPTS
0226   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0227   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0228   0033             ;STARTS HERE
0229   0033             ;
0230   0038             	.ORG	0038H
0231   0038 08          	EX	AF,AF'
0232   0039 D9          	EXX
0233   003A 2A 5B 3F    	LD	HL,(RST38)
0234   003D E9          	JP	(HL)
0235   003E             ;
0236   003E             ; RESTART 66H NMI VECTOR
0237   003E             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0238   003E             ;
0239   0066             	.ORG	0066H
0240   0066 E5          	PUSH	HL
0241   0067 2A 5D 3F    	LD	HL,(RST66)
0242   006A E9          	JP	(HL)
0243   006B ED 45       NMIRET	RETN	;RETURN FROM NMI
0244   006D             ;--------------------
0245   006D             ; SYSTEM CALL HANDLER
0246   006D             ;--------------------
0247   006D             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0248   006D             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0249   006D             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0250   006D             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0251   006D             ;CHANGE IN SUBSEQUENT MONITORS
0252   006D             ;
0253   006D             ;ENTRY : C = CALL NUMBER
0254   006D             ;SEE ROUTINES FOR ENTRY AND EXIT
0255   006D             ;PARAMETERS
0256   006D             ;
0257   006D 3B          SYSCALL	DEC	SP
0258   006E 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0259   006F ED 73 25 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0260   0073 F5          	PUSH	AF
0261   0074 D5          	PUSH	DE
0262   0075 E5          	PUSH	HL	;SAVE REGISTERS
0263   0076 79          	LD	A,C	;GET CALL NUMBER
0264   0077 E6 7F       	AND	127	;ENSURE IN LIMITS
0265   0079 CB 27       	SLA	A	;MULTIPLY BY TWO
0266   007B 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0267   007D 6F          	LD	L,A	;LOAD INDEX
0268   007E 7E          	LD	A,(HL)
0269   007F 23          	INC	HL
0270   0080 56          	LD	D,(HL)	;GET JUMP ADDRESS
0271   0081 2A 25 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0272   0084 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0273   0085 23          	INC	HL
0274   0086 7A          	LD	A,D
0275   0087 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0276   0088 E1          	POP	HL
0277   0089 D1          	POP	DE
0278   008A F1          	POP	AF	;RESTORE REGISTERS
0279   008B C9          	RET		;JUMPS TO SYSTEM CALL
0280   008C             ;
0281   008C             ; ERROR TRAP
0282   008C             ; HALT THE MACHINE UNTIL RESET OR INTERRUPT
0283   008C 2A 61 3F    TRAP	LD	HL,(SYSERR)
0284   008F E9          	JP	(HL)
0285   0090             ;
0286   0090 76          STOP	HALT
0287   0091             ;-----------------------
0288   0091             ; SYSTEM CALL JUMP TABLE
0289   0091             ;-----------------------
0290   0100             	.ORG	0100H
0291   0100 83 02 B7 03 SYSJMP	.DW	MAIN,VERS,DISADD,DISBYT,CLRBUF,SCAND,CONBYT,CONVHI
0291   0104 E1 03 F6 03 
0291   0108 60 04 2F 04 
0291   010C FF 03 0C 04 
0292   0110 10 04 CA 04 	.DW CONVLO,SKEYIN,SKEYRL,KEYIN,KEYREL,MENU,CHKSUM,MUL16
0292   0114 D7 04 E4 04 
0292   0118 EE 04 F8 04 
0292   011C 1B 05 53 05 
0293   0120 3B 05 2B 05 	.DW RAND,INDEXB,INDEXW,MUSIC,TONE,BEEP,SKATE,TXBUF
0293   0124 32 05 6A 05 
0293   0128 E7 05 09 06 
0293   012C 0E 0D 95 14 
0294   0130 45 10 5A 08 	.DW WAITC,ASCHEX,WWATCH,RWATCH,ONESEC,RLSTEP,DELONE,SCANKEY
0294   0134 27 0F 9D 0E 
0294   0138 87 0F 3C 0C 
0294   013C 6A 0C 6F 04 
0295   0140             	
0296   0140 D2 07 14 0C 	.DW INTELH,SPLIT,SNDMSG,BITASC,WRDASC,BYTASC,NYBASC,PCBTYP
0296   0144 72 13 5D 13 
0296   0148 42 13 47 13 
0296   014C 50 13 B0 03 
0297   0150 45 14 BE 03 	.DW PRNTSZ,KBDTYP,UPDATE,VARRAM,SERINIT,SCBUG,ANYCHR,RXBUF
0297   0154 7C 03 A5 03 
0297   0158 53 14 9D 0F 
0297   015C 74 14 C6 14 
0298   0160 A9 03 8C 00 	.DW	MONNAME,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0298   0164 8C 00 8C 00 
0298   0168 8C 00 8C 00 
0298   016C 8C 00 8C 00 
0299   0170 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0299   0174 8C 00 8C 00 
0299   0178 8C 00 8C 00 
0299   017C 8C 00 8C 00 
0300   0180             	
0301   0180 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0301   0184 8C 00 8C 00 
0301   0188 8C 00 8C 00 
0301   018C 8C 00 8C 00 
0302   0190 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0302   0194 8C 00 8C 00 
0302   0198 8C 00 8C 00 
0302   019C 8C 00 8C 00 
0303   01A0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0303   01A4 8C 00 8C 00 
0303   01A8 8C 00 8C 00 
0303   01AC 8C 00 8C 00 
0304   01B0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0304   01B4 8C 00 8C 00 
0304   01B8 8C 00 8C 00 
0304   01BC 8C 00 8C 00 
0305   01C0             	
0306   01C0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0306   01C4 8C 00 8C 00 
0306   01C8 8C 00 8C 00 
0306   01CC 8C 00 8C 00 
0307   01D0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0307   01D4 8C 00 8C 00 
0307   01D8 8C 00 8C 00 
0307   01DC 8C 00 8C 00 
0308   01E0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0308   01E4 8C 00 8C 00 
0308   01E8 8C 00 8C 00 
0308   01EC 8C 00 8C 00 
0309   01F0 8C 00 8C 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0309   01F4 8C 00 8C 00 
0309   01F8 8C 00 8C 00 
0309   01FC 8C 00 8C 00 
0310   0200             ;------------------------------
0311   0200             ; POWER UP RESET / MANUAL RESET
0312   0200             ;------------------------------
0313   0200             	.ORG	0200H
0314   0200             ;
0315   0200             ; WAIT FOR SMART SOCKET
0316   0200             ; TO RECOVER FROM POWER DOWN
0317   0200             ;
0318   0200 3E 55       RESET	LD	A,55H
0319   0202 32 60 3F    	LD	(DALLAS),A	;WRITE TO RAM
0320   0205 AF          	XOR	A
0321   0206 D3 84       	OUT	(DISPLY),A	;WRITE NOTHING TO
0322   0208 D3 85       	OUT	(SCAN),A	;ON BOARD I/O
0323   020A DB 86       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0324   020C 3A 60 3F    	LD	A,(DALLAS)	;READ FROM RAM
0325   020F FE 55       	CP	55H	;IS IT READY?
0326   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0327   0214             ;
0328   0214             ; LOAD STACK POINTER
0329   0214             ;
0330   0214 31 00 3C    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0331   0217 ED 56       	IM	1	;SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0332   0219             ;
0333   0219             ; SET UP RESTART VECTORS
0334   0219             ;
0335   0219 21 14 02    	LD	HL,RESET1
0336   021C 22 51 3F    	LD	(RST08),HL
0337   021F 22 53 3F    	LD	(RST10),HL
0338   0222 22 55 3F    	LD	(RST18),HL
0339   0225 22 57 3F    	LD	(RST20),HL
0340   0228 21 6B 00    	LD	HL,NMIRET
0341   022B 22 5D 3F    	LD	(RST66),HL	;NMI INTERRUPT
0342   022E 21 33 06    	LD	HL,SSTEP	;SOFTWARE DEBUGGER
0343   0231 22 59 3F    	LD	(RST28),HL	;USE RST 28H AS THE SOFTWARE DEBUGGER
0344   0234 21 90 00    	LD	HL,STOP
0345   0237 22 61 3F    	LD	(SYSERR),HL	;INVALID SYSTEM CALL ERROR
0346   023A             ;
0347   023A CD 5D 14    	CALL	SERRST	;RESET THE 6850 ACIA
0348   023D CD 62 14    	CALL	SERVEC	;SET UP THE INTERRUPT VECTOR
0349   0240             ;
0350   0240             ; PERFORM CHECKSUM ON USER RAM
0351   0240             ;
0352   0240 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0353   0243 11 00 38    	LD	DE,RAMEND	;END OF USER RAM
0354   0246 CD 1B 05    	CALL	CHKSUM
0355   0249 32 5F 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0356   024C             ;
0357   024C             ; SET UP DEFAULT VARIABLES
0358   024C             ;
0359   024C 21 81 07    	LD	HL,FUNLST
0360   024F 22 15 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0361   0252             ;
0362   0252             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0363   0252             ;
0364   0252 21 9D 0F    	LD	HL,SCBUG	;SERIAL MONITOR
0365   0255 22 2F 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0366   0258 3E 00       	LD	A,00H
0367   025A 32 3F 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0368   025D 32 39 3F    	LD	(MODE),A	;START WITH SPEAKER ON
0369   0260             ;
0370   0260 21 1B 00    	LD	HL,B4800	;DEFAULT BAUD RATE
0371   0263 CD 63 08    	CALL SERINI	;INITIALISE THE SERIAL BIT BANG PORT
0372   0266             ;
0373   0266 21 00 01    	LD	HL,0100H
0374   0269 22 3D 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0375   026C 21 00 10    	LD	HL,1000H
0376   026F 22 23 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0377   0272             #IFDEF 74C923
0378   0272 3E 20       	LD	A,20H
0379   0274~            #ELSE
0380   0274~            	LD	A,08H
0381   0274             #ENDIF
0382   0274 32 38 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0383   0277 CD 09 06    	CALL	BEEP
0384   027A CD 09 06    	CALL	BEEP
0385   027D             #IFDEF 74C923
0386   027D 3E 08       	LD	A,08H
0387   027F~            #ELSE
0388   027F~            	LD	A,10H
0389   027F             #ENDIF
0390   027F 32 37 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0391   0282             ;
0392   0282 FB          	EI		;ENABLE INTERRUPTS
0393   0283             ;	CALL	SEREN	;ENABLE BUFFERED SERIAL
0394   0283             ;-----------------
0395   0283             ; SET UP MAIN LOOP
0396   0283             ;-----------------
0397   0283 31 00 3C    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0398   0286 21 00 20    	LD	HL,RAMSRT
0399   0289 22 3B 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0400   028C 3A 39 3F    	LD	A,(MODE)
0401   028F F6 80       	OR	80H	;START OFF IN DATA MODE
0402   0291 32 39 3F    	LD	(MODE),A
0403   0294             ;
0404   0294             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0405   0294             ;
0406   0294 CD 7C 03    MAIN1	CALL	UPDATE
0407   0297 CD CA 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0408   029A 21 A9 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0409   029D CD F8 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0410   02A0 CD 7C 03    	CALL	UPDATE	;UPDATE BUFFER AND
0411   02A3 CD D7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0412   02A6 C3 97 02    	JP	MAIN2
0413   02A9             ;
0414   02A9             ; MAIN MENU KEY TABLE
0415   02A9             ;
0416   02A9 14          MENLST	.DB	20
0417   02AA 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0417   02AE 04 05 06 07 
0418   02B2 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0418   02B6 0C 0D 0E 0F 
0419   02BA 10 11 12 13 	.DB	10H,11H,12H,13H
0420   02BE E6 02 E6 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0420   02C2 E6 02 E6 02 
0421   02C6 E6 02 E6 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0421   02CA E6 02 E6 02 
0422   02CE E6 02 E6 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0422   02D2 E6 02 E6 02 
0423   02D6 E6 02 E6 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0423   02DA E6 02 E6 02 
0424   02DE 5C 07 18 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0424   02E2 24 03 50 03 
0425   02E6             ;---------------------------------------------------
0426   02E6             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0427   02E6             ;---------------------------------------------------
0428   02E6 CD 09 06    HEXKEY	CALL	BEEP
0429   02E9 21 39 3F    	LD	HL,MODE
0430   02EC CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0431   02EE CA FF 02    	JP	Z,HEXKY2	;IN ADDR MODE
0432   02F1             ;
0433   02F1             ; IN DATA MODE
0434   02F1             ;
0435   02F1 2A 3B 3F    HEXKY1	LD	HL,(ADRESS)
0436   02F4 CB 26       	SLA	(HL)	;FROM THE CURRENT
0437   02F6 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0438   02F8 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0439   02FA CB 26       	SLA	(HL)	;PUT THE KEY IN
0440   02FC B6          	OR	(HL)	;THE NEW DATA BACK AT
0441   02FD 77          	LD	(HL),A	;THE CURRENT ADDRESS
0442   02FE C9          	RET
0443   02FF             ;
0444   02FF             ; IN ADDRESS MODE
0445   02FF             ;
0446   02FF 2A 3B 3F    HEXKY2	LD	HL,(ADRESS)
0447   0302 CB 25       	SLA	L	;CURRENT ADDRESS
0448   0304 CB 14       	RL	H	;AND DO A 16 BIT
0449   0306 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0450   0308 CB 14       	RL	H	;TO MAKE  ROOM
0451   030A CB 25       	SLA	L	;FOR THE NEW KEY
0452   030C CB 14       	RL	H
0453   030E CB 25       	SLA	L
0454   0310 CB 14       	RL	H
0455   0312 B5          	OR	L	;IT IN THE LEAST
0456   0313 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0457   0314 22 3B 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0458   0317 C9          	RET
0459   0318             ;-------------
0460   0318             ; CHANGE MODES
0461   0318             ;-------------
0462   0318 CD 09 06    ADDKEY	CALL	BEEP
0463   031B 3A 39 3F    	LD	A,(MODE)
0464   031E EE 80       	XOR	80H	;TOGGLE MODE
0465   0320 32 39 3F    	LD	(MODE),A
0466   0323 C9          	RET
0467   0324             ;------------------
0468   0324             ; INCREMENT ADDRESS
0469   0324             ;------------------
0470   0324 CD 09 06    INCKEY	CALL	BEEP
0471   0327 2A 3B 3F    INCKY1	LD	HL,(ADRESS)
0472   032A 23          	INC	HL	;INC ADDRESS
0473   032B 22 3B 3F    	LD	(ADRESS),HL
0474   032E CD 7C 03    	CALL	UPDATE
0475   0331 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0476   0334 CD 2F 04    INCKY2	CALL	SCAND
0477   0337 CD 6F 04    	CALL	SCANKEY
0478   033A CB 6F       	BIT	5,A	;RETURN IF
0479   033C 28 11       	JR	Z,INCKY3	; KEY RELEASED
0480   033E E6 1F       	AND	1FH	;STRIP UNUSED BITS
0481   0340 FE 12       	CP	KEYINC	; '+'
0482   0342 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0483   0344 11 01 00    	LD	DE,0001H
0484   0347 ED 52       	SBC	HL,DE
0485   0349 D2 34 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0486   034C C3 27 03    	JP	INCKY1	;INC ADDRESS
0487   034F C9          INCKY3	RET
0488   0350             ;------------------
0489   0350             ; DECREMENT ADDRESS
0490   0350             ;------------------
0491   0350 CD 09 06    DECKEY	CALL	BEEP
0492   0353 2A 3B 3F    DECKY1	LD	HL,(ADRESS)
0493   0356 2B          	DEC	HL	;DEC ADDRESS
0494   0357 22 3B 3F    	LD	(ADRESS),HL
0495   035A CD 7C 03    	CALL	UPDATE
0496   035D 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0497   0360 CD 2F 04    DECKY2	CALL	SCAND
0498   0363 CD 6F 04    	CALL	SCANKEY
0499   0366 CB 6F       	BIT	5,A	;RETURN IF
0500   0368 28 11       	JR	Z,DECKY3	;KEY RELEASED
0501   036A E6 1F       	AND	1FH
0502   036C FE 13       	CP	KEYDEC	; '-'
0503   036E 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0504   0370 11 01 00    	LD	DE,0001H
0505   0373 ED 52       	SBC	HL,DE
0506   0375 D2 60 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0507   0378 C3 53 03    	JP	DECKY1	;INC ADDRESS 
0508   037B C9          DECKY3	RET
0509   037C             ;-----------------------------------------
0510   037C             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0511   037C             ;-----------------------------------------
0512   037C             ;
0513   037C             ; UPDATE THE DISPLAY BUFFER WITH THE 
0514   037C             ; CURRENT ADDRESS, THE DATA AT THE CURRENT ADDRESS
0515   037C             ; AND SET THE DECIMAL POINTS TO
0516   037C             ; ADDRESS OR DATA MODE
0517   037C             ;
0518   037C             ;	ENTRY : NONE
0519   037C             ;	EXIT :  MODIFIES A
0520   037C             ;
0521   037C E5          UPDATE	PUSH	HL
0522   037D C5          	PUSH	BC
0523   037E 2A 3B 3F    	LD	HL,(ADRESS)
0524   0381 CD E1 03    	CALL	DISADD	;AND DATA, PUT IN
0525   0384 7E          	LD	A,(HL)
0526   0385 CD F6 03    	CALL	DISBYT	;DISPLAY BUFFER
0527   0388             ;
0528   0388             ; IN ADDRESS OR DATA MODE?
0529   0388             ;
0530   0388 21 39 3F    	LD	HL,MODE
0531   038B CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0532   038D CA 98 03    	JP	Z,ADMODE	;ADDRESS MODE
0533   0390             ;
0534   0390             ; SHOW DATA MODE
0535   0390             ;
0536   0390 21 31 3F    	LD	HL,DISBUF	;SET THE DP'S
0537   0393 06 02       	LD	B,2	;IN THE DATA
0538   0395 C3 9D 03    	JP	SETDP	;DISPLAY
0539   0398             ;
0540   0398             ; SHOW ADDRESS MODE
0541   0398             ;
0542   0398 21 33 3F    ADMODE	LD	HL,DISBUF+2
0543   039B 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0544   039D             ;
0545   039D             ; SET DECIMAL POINT
0546   039D             ;
0547   039D             ;SET DP IN THE BYTE POINTED TO BY HL
0548   039D             ;
0549   039D~            #IFDEF TEC-1F
0550   039D~            SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0551   039D             #ELSE
0552   039D CB FE       SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0553   039F             #ENDIF
0554   039F 23          	INC	HL	;POINT TO NEXT BYTE
0555   03A0 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0556   03A2 C1          	POP	BC
0557   03A3 E1          	POP	HL
0558   03A4 C9          	RET
0559   03A5             ;-----------------------------------------
0560   03A5             ; RETURN THE BASE ADDRESS OF RAM VARIABLES
0561   03A5             ;-----------------------------------------
0562   03A5             ;
0563   03A5             ;	ENTRY: NONE
0564   03A5             ;	EXIT: HL
0565   03A5             ;
0566   03A5 21 00 3F    VARRAM	LD	HL,VARBLS
0567   03A8 C9          		RET
0568   03A9             ;-------------
0569   03A9             ; MONITOR NAME
0570   03A9             ;-------------
0571   03A9             ; RETURNS THE MONITOR NAME
0572   03A9             ; ENTRY = NONE
0573   03A9             ; EXIT: HL -> 'SCNEO'    ACCA = 02H
0574   03A9             ;
0575   03A9 21 C5 03    MONNAME	LD	HL,NAMESZ
0576   03AC 3A CB 03    	LD	A,(NAMEBF)
0577   03AF C9          	RET
0578   03B0             ;-----------
0579   03B0             ; BOARD TYPE
0580   03B0             ;-----------
0581   03B0             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0582   03B0             ; ENTRY = NONE
0583   03B0             ; EXIT: HL -> 'SC-1'    ACCA = 01H
0584   03B0             ;             'TEC-1F'	ACCA = 02H
0585   03B0             ;
0586   03B0 21 CC 03    PCBTYP	LD	HL,TYPESZ
0587   03B3 3A D1 03    	LD	A,(TYPEBF)
0588   03B6 C9          	RET
0589   03B7             ;---------------
0590   03B7             ; VERSION NUMBER
0591   03B7             ;---------------
0592   03B7             ;RETURNS THE SOFTWARE VERSION NUMBER
0593   03B7             ;
0594   03B7             ;	ENTRY : NONE
0595   03B7             ; EXIT : HL -> VERSION NUMBER STRING
0596   03B7             ;        ACCA = BCD VERSION NUMBER D7-D4 = MAJOR, D3-D0 MINOR
0597   03B7             ;
0598   03B7 21 D2 03    VERS	LD	HL,VERSZ
0599   03BA 3A D6 03    	LD	A,(VERBCD)
0600   03BD C9          	RET
0601   03BE             ;--------------
0602   03BE             ; KEYBOARD TYPE
0603   03BE             ;--------------
0604   03BE             ; RETURNS THE TYPE OF KEYBOARD USED
0605   03BE             ; ENTRY = NONE
0606   03BE             ; EXIT: HL -> KEYBOARD TYPE STRING
0607   03BE             ;       ACCA = 01H MM74C923 HARDWARE ENCODER
0608   03BE             ;       ACCA = 02H SOFTWARE SCANNED
0609   03BE             ;
0610   03BE 21 D7 03    KBDTYP	LD	HL,KYBSZ
0611   03C1 3A E0 03    	LD	A,(KYBDBF)
0612   03C4 C9          	RET
0613   03C5             
0614   03C5 53 43 4E 45 NAMESZ	.DB	"SCNEO",0
0614   03C9 4F 00 
0615   03CB 02          NAMEBF	.DB 02H
0616   03CC             
0617   03CC~            #IFDEF TEC-1F
0618   03CC~            TYPESZ	.DB	"TEC-1F",0
0619   03CC~            TYPEBF	.DB	02H
0620   03CC             #ELSE
0621   03CC 53 43 2D 31 TYPESZ	.DB	"SC-1",0
0621   03D0 00 
0622   03D1 01          TYPEBF	.DB 01H
0623   03D2             #ENDIF
0624   03D2             
0625   03D2 31 2E 30 00 VERSZ	.DB	"1.0",0
0626   03D6 18          VERBCD	.DB 18H
0627   03D7             
0628   03D7             #IFDEF 74C923
0629   03D7 48 61 72 64 KYBSZ	.DB "Hardware",0
0629   03DB 77 61 72 65 
0629   03DF 00 
0630   03E0 01          KYBDBF	.DB	01H	
0631   03E1~            #ELSE
0632   03E1~            KYBSZ	.DB "Software",0
0633   03E1~            KYBDBF	.DB	02H	
0634   03E1             #ENDIF
0635   03E1             
0636   03E1             ;-------------------------
0637   03E1             ; ADDRESS > DISPLAY BUFFER
0638   03E1             ;-------------------------
0639   03E1             ;CONVERT HL TO SEVEN SEGMENT CODE
0640   03E1             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0641   03E1             ;
0642   03E1             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0643   03E1             ;
0644   03E1             ; EXIT  : NO REGISTERS MODIFIED
0645   03E1             ;
0646   03E1 F5          DISADD	PUSH	AF
0647   03E2 E5          	PUSH	HL
0648   03E3 E5          	PUSH	HL
0649   03E4 7C          	LD	A,H
0650   03E5 CD FF 03    	CALL	CONBYT
0651   03E8 22 35 3F    	LD	(DISBUF+4),HL
0652   03EB E1          	POP	HL
0653   03EC 7D          	LD	A,L
0654   03ED CD FF 03    	CALL	CONBYT
0655   03F0 22 33 3F    	LD	(DISBUF+2),HL
0656   03F3 E1          	POP	HL
0657   03F4 F1          	POP	AF
0658   03F5 C9          	RET
0659   03F6             ;---------------------------
0660   03F6             ; DATA BYTE > DISPLAY BUFFER
0661   03F6             ;---------------------------
0662   03F6             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0663   03F6             ;AND PUT IN DATA DISPLAY BUFFER.
0664   03F6             ;
0665   03F6             ; ENTRY :  A = DATA DISPLAY BYTE
0666   03F6             ;
0667   03F6             ; EXIT  : NO REGISTERS MODIFIED
0668   03F6             ;
0669   03F6 E5          DISBYT	PUSH	HL
0670   03F7 CD FF 03    	CALL	CONBYT
0671   03FA 22 31 3F    	LD	(DISBUF),HL
0672   03FD E1          	POP	HL
0673   03FE C9          	RET
0674   03FF             ;---------------------------------------
0675   03FF             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0676   03FF             ;---------------------------------------
0677   03FF             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0678   03FF             ; FOR DISPLAY
0679   03FF             ; ENTRY : A = BYTE TO BE CONVERTED
0680   03FF             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0681   03FF             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0682   03FF             ;         A = NOT MODIFIED
0683   03FF F5          CONBYT	PUSH	AF
0684   0400 F5          	PUSH	AF
0685   0401 CD 0C 04    	CALL	CONVHI	;CONVERT HI NYBBLE
0686   0404 67          	LD	H,A
0687   0405 F1          	POP	AF
0688   0406 CD 10 04    	CALL	CONVLO	;CONVERT LO NYBBLE
0689   0409 6F          	LD	L,A
0690   040A F1          	POP	AF
0691   040B C9          	RET
0692   040C             ;---------------------------------------------
0693   040C             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0694   040C             ;---------------------------------------------
0695   040C             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0696   040C             ; FOR SEVEN SEGMENT DISPLAYS
0697   040C             ; CONVHI = CONVERTS HIGH NYBBLE
0698   040C             ; CONVLO = CONVERTS LO NYBBLE
0699   040C             ;
0700   040C             ; ENTRY : A = NYBBLE TO BE CONVERTED
0701   040C             ; EXIT  : A = SEVEN SEGMENT CODE
0702   040C             ;
0703   040C 07          CONVHI	RLCA
0704   040D 07          	RLCA
0705   040E 07          	RLCA	;MOVE TO LO NYBBLE
0706   040F 07          	RLCA	;FOR CONVERSION
0707   0410 C5          CONVLO	PUSH	BC
0708   0411 E5          	PUSH	HL
0709   0412 21 1F 04    	LD	HL,SEGMNT	;USE THE HEX VALUE
0710   0415 E6 0F       	AND	0FH	;TO INDEX TO THE
0711   0417 4F          	LD	C,A	;THE SEVEN SEGMENT
0712   0418 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0713   041A 09          	ADD	HL,BC	;AND RETURN WITH
0714   041B 7E          	LD	A,(HL)	;CODE IN A
0715   041C E1          	POP	HL
0716   041D C1          	POP	BC
0717   041E C9          	RET
0718   041F             ;
0719   041F             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0720   041F             ;
0721   041F~            #IFDEF TEC-1F
0722   041F~            SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0723   041F~            	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0724   041F~            	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0725   041F~            	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0726   041F             #ELSE
0727   041F 3F 06 5B 4F SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0728   0423 66 6D 7D 07 	.DB	66H,6DH,7DH,07H	;4,5,6,7
0729   0427 7F 6F 77 7C 	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0730   042B 39 5E 79 71 	.DB	39H,5EH,79H,71H	;C,D,E,F
0731   042F             #ENDIF
0732   042F             ;-------------
0733   042F             ; SCAN DISPLAY
0734   042F             ;-------------
0735   042F             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0736   042F             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0737   042F             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0738   042F             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0739   042F             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0740   042F             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0741   042F             ;
0742   042F             ; ENTRY : NONE
0743   042F             ; EXIT  : NO REGISTERS MODIFIED
0744   042F             ;
0745   042F F5          SCAND   PUSH    AF
0746   0430 C5          	PUSH	BC
0747   0431 E5          	PUSH	HL	;SAVE REGISTERS
0748   0432 21 36 3F    	LD	HL,DISBUF+5
0749   0435 0E 20       	LD	C,20H
0750   0437 7E          SCAND1	LD	A,(HL)
0751   0438 D3 84       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0752   043A 79          	LD	A,C
0753   043B F6 40       	OR	40H	;KEEP D6 HIGH
0754   043D D3 85       	OUT	(SCAN),A	;TURN ON DISPLAY
0755   043F 3A 37 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0756   0442 47          	LD	B,A	;TO ADJUST ON TIME
0757   0443 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0758   0445 78          	LD	A,B	;B IS NOW CLEAR, USE
0759   0446 F6 40       	OR	40H	;KEEP D6 HIGH
0760   0448 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0761   044A 3A 38 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0762   044D 47          	LD	B,A	;TO ADJUST OFF TIME
0763   044E 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0764   0450 2B          	DEC	HL	;POINT TO NEXT
0765   0451 CB 09       	RRC	C	;ELEMENT IN BUFFER
0766   0453 30 E2       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0767   0455 78          	LD	A,B	;B IS NOW CLEAR, USE
0768   0456 D3 84       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0769   0458 F6 40       	OR	40H	;KEEP D6 HIGH
0770   045A D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0771   045C E1          	POP	HL
0772   045D C1          	POP	BC
0773   045E F1          	POP	AF	;RESTORE REGISTERS
0774   045F C9          	RET
0775   0460             ;---------------------
0776   0460             ; CLEAR DISPLAY BUFFER
0777   0460             ;---------------------
0778   0460 E5          CLRBUF	PUSH	HL
0779   0461 C5          	PUSH	BC
0780   0462 21 31 3F    	LD	HL,DISBUF
0781   0465 06 06       	LD	B,6
0782   0467 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0783   0469 23          	INC	HL	;LOCATIONS POINTED
0784   046A 10 FB       	DJNZ	CLRBF1	;TO BY HL
0785   046C C1          	POP	BC
0786   046D E1          	POP	HL
0787   046E C9          	RET
0788   046F             ;--------------
0789   046F             ; SCAN KEYBOARD
0790   046F             ;--------------
0791   046F             ; USE THE HARDWARE OR SOFTWARE SCANNED KEYBOARD
0792   046F             ;
0793   046F             ; BIT 7 NOT USED
0794   046F             ; BIT 6 SHIFT KEY. HIGH IF SHIFT KEY PRESSED
0795   046F             ;
0796   046F             ; BIT 5 DATA AVAILABLE FLAG HIGH IF KEY PRESSED
0797   046F             ; BITS 4 -0 KEY CODE
0798   046F             ;
0799   046F             ; SOFTWARE SCANNED KEYBOARD
0800   046F             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0801   046F             ; AND KEYBOARD BUFFER AS ROWS.
0802   046F             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0803   046F             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0804   046F             ;
0805   046F             ; MAPS KEYS AGAINST KEYMAP TABLE
0806   046F             ;
0807   046F             ; ENTRY : NONE
0808   046F             ; EXIT  : A = 00H IF NO KEY DETECTED
0809   046F             ;         A = DETECTED KEY BITS 0-4
0810   046F             ;             BIT 5 = KEY AVAILABLE
0811   046F             ;             BIT 6 = SHIFT KEY PUSHED
0812   046F C5          SCANKEY	PUSH	BC
0813   0470 D5          	PUSH	DE	;SAVE REGISTERS
0814   0471 E5          	PUSH	HL
0815   0472             ;
0816   0472             ;USE THE KEYBOARD ENCODER
0817   0472             ;
0818   0472             #IFDEF 74C923
0819   0472             ;
0820   0472             ; TEC-1F - 74C923 KEYBOARD ENCODER
0821   0472             ;
0822   0472~            #IFDEF TEC-1F
0823   0472~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0824   0472~            	AND	7FH	;STRIP UNUSED BIT
0825   0472~            	BIT	6,A	;DA LOW?
0826   0472~            	JR	Z,SCANKY1	;HANDLE THE KEY
0827   0472~            	LD	A,00H
0828   0472~            	JR	SCANKY4	;NO KEY
0829   0472~            ;
0830   0472~            SCANKY1	BIT	5,A	;SHIFT KEY LOW?
0831   0472~            	JR	Z,SCANKY2
0832   0472~            	RES	5,A
0833   0472~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0834   0472~            	CALL	REMAP	;RE MAP THE KEYS
0835   0472~            	RES	6,A	;RESET SHIFT BIT
0836   0472~            	JR	SCANKY3
0837   0472~            ;
0838   0472~            SCANKY2	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0839   0472~            	CALL REMAP
0840   0472~            	SET	6,A	;SET SHIFT BIT
0841   0472~            SCANKY3	SET	5,A	;SET DATA AVAILABLE FLAG
0842   0472~            SCANKY4	POP	HL
0843   0472~            	POP	DE
0844   0472~            	POP	BC
0845   0472~            	RET
0846   0472             #ELSE
0847   0472             ;
0848   0472             ;SC - 74C923 KEYBOARD ENCODER
0849   0472             ;
0850   0472 DB 86       	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0851   0474 E6 7F       	AND	7FH	;STRIP UNUSED BIT
0852   0476 CB 6F       	BIT	5,A	;DA HIGH?
0853   0478 20 04       	JR	NZ,SCANKY1	;HANDLE THE KEY
0854   047A 3E 00       	LD	A,00H
0855   047C 18 14       	JR SCANKY3	;NO KEY
0856   047E             ;
0857   047E CB 77       SCANKY1	BIT	6,A	;SHIFT KEY LOW?
0858   0480 28 09       	JR	Z,SCANKY2
0859   0482 CD 96 04    	CALL	REMAP
0860   0485 CB B7       	RES	6,A	;RESET SHIFT BIT
0861   0487 CB EF       	SET	5,A	;SET DA
0862   0489 18 07       	JR	SCANKY3
0863   048B             ;
0864   048B CD 96 04    SCANKY2	CALL	REMAP
0865   048E CB F7       	SET	6,A	;SET SHIFT BIT
0866   0490 CB EF       	SET	5,A	;SET DA
0867   0492 E1          SCANKY3		POP	HL
0868   0493 D1          	POP	DE
0869   0494 C1          	POP	BC
0870   0495 C9          	RET
0871   0496             #ENDIF
0872   0496~            #ELSE
0873   0496~            ;
0874   0496~            ; SOFTWARE SCAN KEYBOARD 
0875   0496~            ; SAME FOR TEC-1 AND SC
0876   0496~            ;
0877   0496~            SCANKY1	LD	A,00H
0878   0496~            	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0879   0496~            	LD	B,A		;KEY
0880   0496~            	LD	D,A		;COUNT
0881   0496~            	LD	E,01H	;MASK
0882   0496~            SCANKY2	LD	C,08H	;SCAN
0883   0496~            SCANKY3	LD	A,C
0884   0496~            	OR	40H	;KEEP SERIAL OUTPUT BIT HIGH
0885   0496~            	OUT	(SCAN),A	;OUTPUT SCAN
0886   0496~            	NOP
0887   0496~            	NOP
0888   0496~            	NOP
0889   0496~            	IN	A,(KEYBUF)	;READ KEY BUFFER
0890   0496~            	AND	E	;MASK
0891   0496~            	JR	Z,SCANKY4	;KEY NOT DETECTED
0892   0496~            	INC	D
0893   0496~            	LD	L,B		;SAVE KEY
0894   0496~            ;
0895   0496~            ; END OF ROWS?
0896   0496~            ;
0897   0496~            SCANKY4	INC	B	;NEXT KEY
0898   0496~            	SRA	C	;SHIFT SCAN RIGHT
0899   0496~            	JR	NC,SCANKY3	;NEXT ROW
0900   0496~            ;
0901   0496~            ; END OF COLUMNS?
0902   0496~            ;
0903   0496~            	SLA	E	;SHIFT MASK LEFT
0904   0496~            	BIT	5,E	;END OF KEYSCAN?
0905   0496~            	JR	Z,SCANKY2	;NEXT COLUMN
0906   0496~            ;
0907   0496~            ; END OF SCAN
0908   0496~            ;
0909   0496~            	LD	A,D
0910   0496~            	CP	00H
0911   0496~            	JR	Z,SCANKY6	;NO KEY PRESSED
0912   0496~            	CP	01H
0913   0496~            	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0914   0496~            ;
0915   0496~            ; ONE KEY DETECTED
0916   0496~            ;
0917   0496~            	LD	A,40H
0918   0496~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0919   0496~            ;
0920   0496~            ; HANDLE SHIFT KEY FOR TEC-1F SOFTWARE SCANNED KEYBOARD 
0921   0496~            ;
0922   0496~            #IFDEF TEC-1F
0923   0496~            	IN	A,(KEYBUF)
0924   0496~            	BIT 5,A	;SHIFT LOW?
0925   0496~            	JR	Z,SCANKY5
0926   0496~            ;
0927   0496~            	LD	A,L		;RETURN KEY IN A
0928   0496~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0929   0496~            	CALL	REMAP
0930   0496~            	SET	5,A	;SET DATA AVAILABLE FLAG
0931   0496~            	JR	SCANKY7
0932   0496~            ;
0933   0496~            SCANKY5	LD	A,L		;RETURN KEY IN A
0934   0496~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0935   0496~            	CALL	REMAP
0936   0496~            	SET	5,A	;SET DATA AVAILABLE FLAG
0937   0496~            	SET	6,A	;SET SHIFT KEY FLAG
0938   0496~            	JR	SCANKY7
0939   0496~            ;
0940   0496~            ; HANDLE SHIFT KEY FOR SC SOFTWARE SCANNED KEYBOARD
0941   0496~            ;
0942   0496~            #ELSE
0943   0496~            	IN	A,(KEYBUF)
0944   0496~            	BIT 6,A	;SHIFT LOW?
0945   0496~            	JR	Z,SCANKY5
0946   0496~            ;
0947   0496~            	LD	A,L		;RETURN KEY IN A
0948   0496~            	CALL	REMAP
0949   0496~            	SET	5,A	;SET DATA AVAILABLE FLAG
0950   0496~            	JR	SCANKY7
0951   0496~            ;	
0952   0496~            SCANKY5	LD	A,L		;RETURN KEY IN A
0953   0496~            	CALL	REMAP
0954   0496~            	SET	5,A	;SET DATA AVAILABLE FLAG
0955   0496~            	SET	6,A	;SET SHIFT KEY FLAG
0956   0496~            	JR	SCANKY7
0957   0496~            #ENDIF
0958   0496~            ;
0959   0496~            ; NO KEY
0960   0496~            ;
0961   0496~            SCANKY6	LD	A,40H
0962   0496~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0963   0496~            	XOR	A	;CLEAR A
0964   0496~            SCANKY7	POP	HL
0965   0496~            	POP	DE
0966   0496~            	POP	BC
0967   0496~            	RET
0968   0496             #ENDIF
0969   0496             
0970   0496~            #IFDEF TEC-1F 
0971   0496~            ;--------------------------------------------------
0972   0496~            ; CONVERT TEC KEY CODES TO SOUTHERN CROSS KEY CODES
0973   0496~            ;--------------------------------------------------
0974   0496~            ; CONVERT THE TEC KEYCODES;
0975   0496~            ; 'PLUS' (10H) TO 12H
0976   0496~            ; 'MINUS' (11H) TO 13H
0977   0496~            ; 'GO' (12H) TO 'FN' 10H
0978   0496~            ; 'AD' (13H) TO 11H
0979   0496~            KEYCVT	AND	1FH
0980   0496~            	BIT	4,A		;ONLY KEYS ABOVE 0FH
0981   0496~            	JR	Z,KEYCVT1
0982   0496~            	CP	12H		;TEC GO KEY?
0983   0496~            	JR	Z,DEC2
0984   0496~            	CP	13H		;TEC AD KEY?
0985   0496~            	JR	Z,DEC2
0986   0496~            INC2
0987   0496~            	INC	A
0988   0496~            	INC	A
0989   0496~            	RET
0990   0496~            DEC2
0991   0496~            	DEC	A
0992   0496~            	DEC	A
0993   0496~            KEYCVT1	RET
0994   0496             #ENDIF
0995   0496             ;----------------
0996   0496             ; REMAP KEY CODES
0997   0496             ;----------------
0998   0496             ; CONVERT THE OUTPUT KEY CODES
0999   0496             ; ACCORDING TO A REMAPPING TABLE
1000   0496             ; ENTRY : A = KEY CODE
1001   0496             ; EXIT  : A = REMAPPED KEY CODE
1002   0496             ;
1003   0496             ; REGISTERS MODIFIED A,F 
1004   0496             ;
1005   0496 E5          REMAP	PUSH	HL
1006   0497 21 A2 04    	LD	HL,KEYMAP	;CHANGE TO ALTMAP,OR SOMETHING ELSE IF DESIRED
1007   049A E6 1F       	AND	1FH
1008   049C CD 2B 05    	CALL	INDEXB
1009   049F 7E          	LD	A,(HL)
1010   04A0 E1          	POP	HL
1011   04A1 C9          	RET
1012   04A2             ;
1013   04A2             ;DEFAULT KEY MAP
1014   04A2             ; 0,1,2,3
1015   04A2             ; 4,5,6,7
1016   04A2             ; 8,9,A,B
1017   04A2             ; C,D,E,F
1018   04A2             ; FN,AD,+,-
1019   04A2 00 01 02 03 KEYMAP	.DB	00H,01H,02H,03H
1020   04A6 04 05 06 07 	.DB	04H,05H,06H,07H
1021   04AA 08 09 0A 0B 	.DB	08H,09H,0AH,0BH
1022   04AE 0C 0D 0E 0F 	.DB	0CH,0DH,0EH,0FH
1023   04B2 10 11 12 13 	.DB	10H,11H,12H,13H
1024   04B6             ;
1025   04B6             ; ALTERNATE MAP
1026   04B6             ; C,D,E,F
1027   04B6             ; 8,9,A,B
1028   04B6             ; 4,5,6,7
1029   04B6             ; 0,1,2,3
1030   04B6             ; FN,AD,-,+
1031   04B6 0C 0D 0E 0F ALTMAP	.DB	0CH,0DH,0EH,0FH
1032   04BA 08 09 0A 0B 	.DB	08H,09H,0AH,0BH
1033   04BE 04 05 06 07 	.DB	04H,05H,06H,07H
1034   04C2 00 01 02 03 	.DB	00H,01H,02H,03H
1035   04C6 10 11 13 12 	.DB	10H,11H,13H,12H
1036   04CA             ;-----------------------------
1037   04CA             ; SCAN DISPLAY UNTIL KEY PRESS
1038   04CA             ;-----------------------------
1039   04CA             ; ENTRY : NONE
1040   04CA             ; EXIT  : A = KEY VALUE 00H TO 1FH
1041   04CA             ;         FLAG REGISTER MODIFIED
1042   04CA             ;
1043   04CA CD 2F 04    SKEYIN	CALL	SCAND	;SCAN DISPLAY
1044   04CD CD 6F 04    	CALL	SCANKEY
1045   04D0 CB 6F       	BIT	5,A
1046   04D2 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
1047   04D4 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1048   04D6 C9          	RET
1049   04D7             ;-------------------------------
1050   04D7             ; SCAN DISPLAY UNTIL KEY RELEASE
1051   04D7             ;-------------------------------
1052   04D7             ; ENTRY : NONE
1053   04D7             ; EXIT  : NONE
1054   04D7             ;
1055   04D7 F5          SKEYRL	PUSH	AF
1056   04D8 CD 2F 04    SKEYL1	CALL	SCAND	;SCAN DISPLAY
1057   04DB CD 6F 04    	CALL	SCANKEY
1058   04DE CB 6F       	BIT	5,A
1059   04E0 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
1060   04E2 F1          	POP	AF
1061   04E3 C9          	RET
1062   04E4             ;-------------------
1063   04E4             ; WAIT FOR KEY PRESS
1064   04E4             ;-------------------
1065   04E4             ; ENTRY : NONE
1066   04E4             ; EXIT  : A = KEY VALUE 00H TO 1FH
1067   04E4             ;         FLAG REGISTER MODIFIED
1068   04E4             ;
1069   04E4 CD 6F 04    KEYIN	CALL	SCANKEY
1070   04E7 CB 6F       	BIT	5,A
1071   04E9 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
1072   04EB E6 1F       	AND	1FH	;STRIP UNUSED BITS
1073   04ED C9          	RET
1074   04EE             ;---------------------
1075   04EE             ; WAIT FOR KEY RELEASE
1076   04EE             ;---------------------
1077   04EE             ; ENTRY : NONE
1078   04EE             ; EXIT  : NONE
1079   04EE             ;
1080   04EE F5          KEYREL	PUSH	AF
1081   04EF CD 6F 04    KEYRL1	CALL	SCANKEY
1082   04F2 CB 6F       	BIT	5,A
1083   04F4 20 F9       	JR	NZ,KEYRL1
1084   04F6 F1          	POP	AF
1085   04F7 C9          	RET
1086   04F8             ;-----------------
1087   04F8             ; KEY MENU HANDLER
1088   04F8             ;-----------------
1089   04F8             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
1090   04F8             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
1091   04F8             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
1092   04F8             ; ENTRY :  A = ELEMENT TO LOOK FOR
1093   04F8             ;         HL = POINTS TO TABLE
1094   04F8             ; EXIT  :  ELEMENT NOT FOUND
1095   04F8             ;           HL HOLDS ADDRESS OF LAST ELEMENT
1096   04F8             ;          ELEMENT FOUND
1097   04F8             ;           CONTROL PASSES TO JUMP ADDRESS WITH
1098   04F8             ;          RETURN ADDRESS OF MENU CALL ON STACK
1099   04F8             ;
1100   04F8 F5          MENU	PUSH	AF
1101   04F9 C5          	PUSH	BC
1102   04FA D5          	PUSH	DE	;SAVE REGISTERS
1103   04FB E5          	PUSH	HL	;CALCULATE ADDRESS
1104   04FC 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
1105   04FE 5E          	LD	E,(HL)	;ADDING THE INDEX TO
1106   04FF 23          	INC	HL	;THE ELEMENTS
1107   0500 19          	ADD	HL,DE	;TO THE ADDR OF THE
1108   0501 54          	LD	D,H	;TABLE
1109   0502 5D          	LD	E,L
1110   0503 E1          	POP	HL
1111   0504 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
1112   0505 23          	INC	HL	;POINT TO LIST OF ENTRIES
1113   0506 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
1114   0507 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
1115   0509 23          	INC	HL	;NEXT ENTRY IN LIST
1116   050A 13          	INC	DE	;NEXT ENTRY IN
1117   050B 13          	INC	DE	;JUMP TABLE
1118   050C 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
1119   050E D1          	POP	DE
1120   050F C1          	POP	BC
1121   0510 F1          	POP	AF
1122   0511 C9          	RET	;NOT IN TABLE
1123   0512             ;
1124   0512             ; FOUND ELEMENT IN THE TABLE
1125   0512             ; PASS CONTROL TO THE JUMP HANDLER
1126   0512             ;
1127   0512 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
1128   0513 6F          	LD	L,A	;FROM THE TABLE
1129   0514 13          	INC	DE	;AND JUMP TO
1130   0515 1A          	LD	A,(DE)	;THE JUMP ADDRESS
1131   0516 67          	LD	H,A	;FOR THAT ENTRY
1132   0517 D1          	POP	DE
1133   0518 C1          	POP	BC
1134   0519 F1          	POP	AF	;RESTORE REGISTERS
1135   051A E9          	JP	(HL)
1136   051B             ;-------------------
1137   051B             ; CALCULATE CHECKSUM
1138   051B             ;-------------------
1139   051B             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
1140   051B             ;
1141   051B             ; ENTRY : HL = START OF BLOCK TO SUM
1142   051B             ;         DE = END OF BLOCK TO SUM
1143   051B             ; EXIT  : A =  CHECKSUM
1144   051B             ;         FLAG REGISTER MODIFIED
1145   051B             ;
1146   051B E5          CHKSUM	PUSH	HL
1147   051C D5          	PUSH	DE
1148   051D 13          	INC	DE	;END OF BLOCK+1
1149   051E AF          	XOR	A	;CLEAR CHECKSUM
1150   051F 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
1151   0520 23          	INC	HL	;POINT TO NEXT ELEMENT
1152   0521 A7          	AND	A	;SET CARRY
1153   0522 E5          	PUSH	HL
1154   0523 ED 52       	SBC	HL,DE	;SUBTRACT
1155   0525 E1          	POP	HL
1156   0526 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
1157   0528 D1          	POP	DE
1158   0529 E1          	POP	HL
1159   052A C9          	RET
1160   052B             ;--------------------------
1161   052B             ; ACCESS BYTE LOOK UP TABLE
1162   052B             ;--------------------------
1163   052B             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
1164   052B             ; UP TABLE
1165   052B             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1166   052B             ;         HL = ADDRESS OF LOOK UP TABLE
1167   052B             ; EXIT : HL = ADDRESS OF ELEMENT A
1168   052B             ;
1169   052B D5          INDEXB	PUSH	DE
1170   052C 5F          	LD	E,A	;USE DE AS INDEX
1171   052D 16 00       	LD	D,0	;TO ELEMENT IN TABLE
1172   052F 19          	ADD	HL,DE	;BY ADDING TO HL
1173   0530 D1          	POP	DE
1174   0531 C9          	RET
1175   0532             ;--------------------------
1176   0532             ; ACCESS WORD LOOK UP TABLE
1177   0532             ;--------------------------
1178   0532             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
1179   0532             ; UP TABLE
1180   0532             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1181   0532             ;         HL = ADDRESS OF LOOK UP TABLE
1182   0532             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
1183   0532             ;
1184   0532 D5          INDEXW	PUSH	DE
1185   0533 5F          	LD	E,A
1186   0534 CB 23       	SLA	E	;MULTIPLY BY TWO
1187   0536 16 00       	LD	D,0
1188   0538 19          	ADD	HL,DE
1189   0539 D1          	POP	DE
1190   053A C9          	RET
1191   053B             ;-------------------------------
1192   053B             ; GENERATE A QUASI-RANDOM NUMBER
1193   053B             ;-------------------------------
1194   053B             ; GENERATE AN 16 BIT RANDOM NUMBER
1195   053B             ; USING LINEAR CONGRUENTIAL METHOD.
1196   053B             ;     Rn+1 = (aRn+c) MOD m
1197   053B             ; REFRESH REGISTER USED FOR Rn AND c
1198   053B             ;	ENTRY : NONE
1199   053B             ;	EXIT  : HL = RANDOM WORD
1200   053B             ;	NO REGISTERS MODIFIED
1201   053B             ;
1202   053B F5          RAND	PUSH	AF
1203   053C C5          	PUSH	BC
1204   053D D5          	PUSH	DE	;SAVE REGISTERS
1205   053E             ;
1206   053E             ; CALCULATE aRn
1207   053E             ;
1208   053E ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
1209   0540 5F          	LD	E,A	;(Rn) BY
1210   0541 16 00       	LD	D,0
1211   0543 21 48 05    	LD	HL,0548H	;CONSTANT (a)
1212   0546 CD 53 05    	CALL	MUL16
1213   0549             ;
1214   0549             ; CALCULATE aRn+c
1215   0549             ;
1216   0549 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
1217   054B 06 00       	LD	B,0	;READ OF THE
1218   054D 4F          	LD	C,A	;THE REFRESH
1219   054E 09          	ADD	HL,BC	;REGISTER (c)
1220   054F D1          	POP	DE
1221   0550 C1          	POP	BC
1222   0551 F1          	POP	AF	;RESTORE REGISTERS
1223   0552 C9          	RET
1224   0553             ;----------------------
1225   0553             ; 16 BIT MULTIPLICATION
1226   0553             ;----------------------
1227   0553             ;16 BIT MULTIPLY
1228   0553             ; ENTRY : HL = MULTIPLICAND (MPD)
1229   0553             ;         DE = MULTIPLIER (MPR)
1230   0553             ; EXIT : HL = RESULT
1231   0553             ;FROM ZAKS 'PROGRAMMING THE Z80'
1232   0553             ;
1233   0553 F5          MUL16	PUSH	AF
1234   0554 C5          	PUSH	BC
1235   0555 4C          	LD	C,H	;MPR(H)
1236   0556 7D          	LD	A,L	;MPR(L)
1237   0557 06 10       	LD	B,16	;BIT COUNTER
1238   0559 21 00 00    	LD	HL,0	;CLEAR RESULT
1239   055C CB 39       MULT	SRL	C	;MPR (H)
1240   055E 1F          	RRA	;MPR (L)
1241   055F 30 01       	JR	NC,MULT1	;TEST CARRY
1242   0561 19          	ADD	HL,DE	;ADD MPD TO RESULT
1243   0562 EB          MULT1	EX	DE,HL
1244   0563 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1245   0564 EB          	EX	DE,HL
1246   0565 10 F5       	DJNZ	MULT	;DONE?
1247   0567 C1          	POP	BC
1248   0568 F1          	POP	AF
1249   0569 C9          	RET
1250   056A             ; MUSIC ROUTINE
1251   056A             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1252   056A             ; MONITOR MON-1
1253   056A             ; BY JOHN HARDY AND KEN STONE
1254   056A             ;
1255   056A             ;----------------
1256   056A             ; MUSIC SEQUENCER
1257   056A             ;----------------
1258   056A             ; SEQUENCES THROUGH A TABLE OF NOTES
1259   056A             ; 1EH = REPEAT TUNE UNTIL RESET
1260   056A             ; 1FH = PLAY ONCE AND RETURN
1261   056A             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1262   056A             ; EXIT : NO REGISTERS MODIFIED
1263   056A F5          MUSIC	PUSH	AF
1264   056B C5          	PUSH	BC
1265   056C D5          	PUSH	DE
1266   056D E5          	PUSH	HL	;SAVE REGISTERS
1267   056E E5          	PUSH	HL
1268   056F EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1269   0570             ;
1270   0570             ; PLAY EACH NOTE IN TURN
1271   0570             ;
1272   0570 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1273   0571 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1274   0573             ;
1275   0573             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1276   0573             ;
1277   0573 FE 00       	CP	00H
1278   0575 C2 85 05    	JP	NZ,STEP1
1279   0578 01 00 10    	LD	BC,1000H
1280   057B 0B          PAUSE	DEC	BC
1281   057C 78          	LD	A,B
1282   057D B1          	OR	C
1283   057E C2 7B 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1284   0581 13          	INC	DE	;POINT TO NEXT ELEMENT
1285   0582 C3 70 05    	JP	STEP
1286   0585             ;
1287   0585             ; IF ELEMENT IS 1EH REPEAT TUNE
1288   0585             ;
1289   0585 FE 1E       STEP1	CP	1EH
1290   0587 C2 8F 05    	JP	NZ,STEP2
1291   058A D1          	POP	DE	;GET TABLE ADDRESS BACK
1292   058B D5          	PUSH	DE	;SAVE IT FOR LATER
1293   058C C3 70 05    	JP	STEP
1294   058F             ;
1295   058F             ; IF ELEMENT IS 1FH RETURN
1296   058F             ;
1297   058F FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1298   0591 C2 9A 05    	JP	NZ,STEP3
1299   0594 E1          	POP	HL
1300   0595 E1          	POP	HL
1301   0596 D1          	POP	DE
1302   0597 C1          	POP	BC
1303   0598 F1          	POP	AF
1304   0599 C9          	RET
1305   059A             ;
1306   059A             ;NOW PLAY THE NOTE
1307   059A             ;
1308   059A 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1309   059B 21 B6 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1310   059E CD 2B 05    	CALL	INDEXB	;GET PERIOD/2
1311   05A1 7E          	LD	A,(HL)	;GET ELEMENT
1312   05A2 F5          	PUSH	AF	;SAVE FOR LATER
1313   05A3 78          	LD	A,B	;GET ELEMENT BACK IN A
1314   05A4 21 CE 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1315   05A7 CD 2B 05    	CALL	INDEXB	;GET DURATION/2
1316   05AA 7E          	LD	A,(HL)	;GET ELEMENT
1317   05AB 6F          	LD	L,A
1318   05AC 26 00       	LD	H,0	;HL = DURATION/2
1319   05AE F1          	POP	AF
1320   05AF CD E7 05    	CALL	TONE	;DO NOTE ROUTINE
1321   05B2 13          	INC	DE
1322   05B3 C3 70 05    	JP	STEP	;STEP TO NEXT ELEMENT
1323   05B6             ;
1324   05B6             ; PERIOD/2 OF NOTE
1325   05B6             ;
1326   05B6 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1326   05BA 70 67 62 5C 
1327   05BE 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1327   05C2 45 41 3C 39 
1328   05C6 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1328   05CA 2A 27 25 23 
1329   05CE             ;
1330   05CE             ; NOTE DURATION/2
1331   05CE             ;
1332   05CE 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1332   05D2 1E 20 23 25 
1333   05D6 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1333   05DA 31 33 37 3A 
1334   05DE 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1334   05E2 4D 52 57 5C 
1335   05E6 10          	.DB	10H
1336   05E7             ; TONE ROUTINE
1337   05E7             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1338   05E7             ; MONITOR MON-1
1339   05E7             ; BY JOHN HARDY AND KEN STONE
1340   05E7             ;
1341   05E7             ;--------------
1342   05E7             ; OUTPUT A TONE
1343   05E7             ;--------------
1344   05E7             ;
1345   05E7             ; ENTRY : A = PERIOD/2 OF NOTE
1346   05E7             ;         HL = DURATION/2 OF NOTE
1347   05E7             ; EXIT NO REGISTERS MODIFIED
1348   05E7 F5          TONE	PUSH	AF
1349   05E8 C5          	PUSH	BC
1350   05E9 D5          	PUSH	DE
1351   05EA E5          	PUSH	HL
1352   05EB 11 01 00    	LD	DE,0001H
1353   05EE 4F          	LD	C,A
1354   05EF 29          	ADD	HL,HL	;DOUBLE DURATION
1355   05F0 AF          	XOR	A
1356   05F1 EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1357   05F3 F6 40       	OR	40H	;KEEP D6 HIGH
1358   05F5 D3 85       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1359   05F7 41          	LD	B,C
1360   05F8 C5          TONE2	PUSH	BC
1361   05F9 06 02       	LD	B,02H
1362   05FB 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1363   05FD C1          	POP	BC
1364   05FE 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1365   0600 ED 52       	SBC	HL,DE	;END OF NOTE?
1366   0602 20 ED       	JR	NZ,TONE1	;DO AGAIN
1367   0604 E1          	POP	HL
1368   0605 D1          	POP	DE
1369   0606 C1          	POP	BC
1370   0607 F1          	POP	AF
1371   0608 C9          	RET
1372   0609             ;---------------
1373   0609             ; KEY ENTRY BEEP
1374   0609             ;---------------
1375   0609 E5          BEEP	PUSH	HL
1376   060A F5          	PUSH	AF
1377   060B 21 39 3F    	LD	HL,MODE
1378   060E CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1379   0610 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1380   0612             ;
1381   0612             ; DO KEYPRESS DELAY
1382   0612             ;
1383   0612 D5          	PUSH	DE	;DO A SHORT
1384   0613 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1385   0616 2A 23 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1386   0619 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1387   061B 30 FC       	JR	NC,BEEP1	;KEY STROKES
1388   061D D1          	POP	DE
1389   061E 18 10       	JR	BEEP3
1390   0620             ;
1391   0620             ; OUTPUT KEYPRESS TONES
1392   0620             ;
1393   0620 3E 24       BEEP2	LD	A,24H
1394   0622 21 30 00    	LD	HL,0030H
1395   0625 CD E7 05    	CALL	TONE	;DO FIRST TONE
1396   0628 3E 0E       	LD	A,0EH
1397   062A 21 50 00    	LD	HL,0050H
1398   062D CD E7 05    	CALL	TONE	;DO SECOND TONE
1399   0630 F1          BEEP3	POP	AF
1400   0631 E1          	POP	HL
1401   0632 C9          	RET
1402   0633             ;----------------------------------------
1403   0633             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1404   0633             ;----------------------------------------
1405   0633             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1406   0633             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1407   0633             ; ATTACHED).
1408   0633             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1409   0633             ; AND MODIFY REGISTERS.
1410   0633             ;
1411   0633 E1          SSTEP	POP	HL	;GET HL BACK
1412   0634 F5          	PUSH	AF	;SAVE AF FOR LATER
1413   0635 22 49 3F    	LD	(TMPHL),HL
1414   0638 ED 53 47 3F 	LD	(TMPDE),DE
1415   063C ED 43 45 3F 	LD	(TMPBC),BC
1416   0640 DD 22 4B 3F 	LD	(TMPIX),IX
1417   0644 FD 22 4D 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1418   0648 E1          	POP	HL	;GET AF BACK
1419   0649 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
1420   064C E1          	POP	HL	;GET PC RETURN ADDRESS
1421   064D 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
1422   0650 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1423   0654             ;
1424   0654             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1425   0654             ;
1426   0654 CD 09 06    	CALL	BEEP
1427   0657 3A 3F 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1428   065A E6 07       	AND	7	;MAKE SURE IN LIMITS
1429   065C 32 3F 3F    	LD	(REGPNT),A	;SAVE IT
1430   065F CD 3C 07    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1431   0662 CD D7 04    	CALL	SKEYRL	;WAIT FOR A KEY
1432   0665 CD CA 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1433   0668 21 71 06    	LD	HL,REGTBL	;HANDLE THE KEY
1434   066B CD F8 04    	CALL	MENU	;AND UPDATE DISPLAY
1435   066E C3 5F 06    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1436   0671             ;
1437   0671             ; REGISTER DISPLAY KEY TABLE
1438   0671             ;
1439   0671 14          REGTBL	.DB	14H
1440   0672 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1440   0676 04 05 06 07 
1441   067A 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1441   067E 0C 0D 0E 0F 
1442   0682 10 11 12 13 	.DB	10H,11H,12H,13H
1443   0686 BE 06 BE 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1443   068A BE 06 BE 06 
1444   068E BE 06 BE 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1444   0692 BE 06 BE 06 
1445   0696 BE 06 BE 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1445   069A BE 06 BE 06 
1446   069E BE 06 BE 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1446   06A2 BE 06 BE 06 
1447   06A6             ;
1448   06A6             ; MAKE THE GO KEY RETURN TO THE PROGRAM
1449   06A6             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
1450   06A6             ;
1451   06A6~            #IFDEF TEC-1F
1452   06A6~            	.DW RETPGM,RETMON,INCSTP,DECSTP
1453   06A6             #ELSE
1454   06A6 E5 06 EF 06 	.DW	RETMON,RETPGM,INCSTP,DECSTP
1454   06AA 11 07 26 07 
1455   06AE             #ENDIF
1456   06AE             ;
1457   06AE             ; REGISTER NAME CHARACTERS
1458   06AE             ;
1459   06AE~            #IFDEF TEC-1F
1460   06AE~            REGNAM	.DW	4FC3H
1461   06AE~            	.DW	6F47H,0E6C3H,0ECC7H
1462   06AE~            	.DW	66C2H,286EH,28AEH
1463   06AE~            	.DW	0A74FH
1464   06AE             #ELSE
1465   06AE 39 73       REGNAM	.DW	7339H
1466   06B0 71 77 39 7C 	.DW	7771H,7C39H,5E79H
1466   06B4 79 5E 
1467   06B6 38 74 76 06 	.DW	7438H,0676H,066EH
1467   06BA 6E 06 
1468   06BC 73 6D       	.DW	6D73H
1469   06BE             #ENDIF
1470   06BE             ;--------------
1471   06BE             ; EDIT REGISTER
1472   06BE             ;--------------
1473   06BE CD 09 06    REGKEY	CALL	BEEP
1474   06C1 F5          	PUSH	AF	;SAVE KEY FOR LATER
1475   06C2 3A 3F 3F    	LD	A,(REGPNT)
1476   06C5             ;
1477   06C5             ; EDIT REGISTER
1478   06C5             ;
1479   06C5 21 41 3F    	LD	HL,TMPPC
1480   06C8 CD 32 05    	CALL	INDEXW
1481   06CB 4E          	LD	C,(HL)
1482   06CC 23          	INC	HL
1483   06CD 46          	LD	B,(HL)	;GET REG CONTENTS
1484   06CE CB 21       	SLA	C
1485   06D0 CB 10       	RL	B
1486   06D2 CB 21       	SLA	C
1487   06D4 CB 10       	RL	B
1488   06D6 CB 21       	SLA	C
1489   06D8 CB 10       	RL	B	;SHIFT REGISTER
1490   06DA CB 21       	SLA	C	;FOUR BITS
1491   06DC CB 10       	RL	B	;LEFT AND
1492   06DE F1          	POP	AF	;PUT THE KEY
1493   06DF B1          	OR	C	;INTO THE LSN
1494   06E0 4F          	LD	C,A	;AND PUT THE
1495   06E1 70          	LD	(HL),B	;REGISTER BACK
1496   06E2 2B          	DEC	HL	;WHERE IT BELONGS
1497   06E3 71          	LD	(HL),C
1498   06E4 C9          	RET
1499   06E5             ;------------------
1500   06E5             ; RETURN TO MONITOR
1501   06E5             ;------------------
1502   06E5 CD 09 06    RETMON	CALL	BEEP
1503   06E8 CD D7 04    	CALL	SKEYRL
1504   06EB FB          	EI	;ENABLE INTERRUPTS AGAIN
1505   06EC C3 83 02    	JP	MAIN
1506   06EF             ;------------------
1507   06EF             ; RETURN TO PROGRAM
1508   06EF             ;------------------
1509   06EF ED 7B 4F 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1510   06F3 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
1511   06F6 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1512   06F7 2A 43 3F    	LD	HL,(TMPAF)
1513   06FA E5          	PUSH	HL	;SAVE AF REG FOR LATER
1514   06FB FD 2A 4D 3F 	LD	IY,(TMPIY)
1515   06FF DD 2A 4B 3F 	LD	IX,(TMPIX)
1516   0703 ED 4B 45 3F 	LD	BC,(TMPBC)
1517   0707 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1518   070B F1          	POP	AF	;RESTORE AF
1519   070C 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
1520   070F FB          	EI	;ENABLE INTERRUPTS
1521   0710 C9          	RET	;AND RETURN TO PROGRAM
1522   0711             ;----------------------
1523   0711             ; DISPLAY NEXT REGISTER
1524   0711             ;----------------------
1525   0711 CD 09 06    INCSTP	CALL	BEEP
1526   0714 3A 3F 3F    	LD	A,(REGPNT)
1527   0717 FE 07       	CP	7	;END OF REG TABLE?
1528   0719 CA 21 07    	JP	Z,INCSP1
1529   071C 3C          	INC	A
1530   071D 32 3F 3F    	LD	(REGPNT),A
1531   0720 C9          	RET
1532   0721 AF          INCSP1	XOR	A
1533   0722 32 3F 3F    	LD	(REGPNT),A
1534   0725 C9          	RET
1535   0726             ;--------------------------
1536   0726             ; DISPLAY PREVIOUS REGISTER
1537   0726             ;--------------------------
1538   0726 CD 09 06    DECSTP	CALL	BEEP
1539   0729 3A 3F 3F    	LD	A,(REGPNT)
1540   072C FE 00       	CP	0	;START OF REG TABLE?
1541   072E CA 36 07    	JP	Z,DECSP1
1542   0731 3D          	DEC	A
1543   0732 32 3F 3F    	LD	(REGPNT),A
1544   0735 C9          	RET
1545   0736 3E 07       DECSP1	LD	A,7
1546   0738 32 3F 3F    	LD	(REGPNT),A
1547   073B C9          	RET
1548   073C             ;-----------------
1549   073C             ; DISPLAY REGISTER
1550   073C             ;-----------------
1551   073C 3A 3F 3F    SETREG	LD	A,(REGPNT)
1552   073F 21 41 3F    	LD	HL,TMPPC	;START OF TABLE
1553   0742 CD 32 05    	CALL	INDEXW	;GET ELEMENT ADDRESS
1554   0745 5E          	LD	E,(HL)
1555   0746 23          	INC	HL
1556   0747 56          	LD	D,(HL)
1557   0748 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1558   0749 CD E1 03    	CALL	DISADD
1559   074C             ;
1560   074C             ; DISPLAY REGISTER NAME
1561   074C             ;
1562   074C 21 AE 06    	LD	HL,REGNAM
1563   074F CD 32 05    	CALL	INDEXW
1564   0752 7E          	LD	A,(HL)
1565   0753 32 31 3F    	LD	(DISBUF+0),A
1566   0756 23          	INC	HL
1567   0757 7E          	LD	A,(HL)
1568   0758 32 32 3F    	LD	(DISBUF+1),A
1569   075B C9          	RET
1570   075C             ;------------------
1571   075C             ; FUNCTION KEY MENU
1572   075C             ;------------------
1573   075C             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1574   075C             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1575   075C             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1576   075C             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1577   075C             ;
1578   075C CD 09 06    FUNKEY	CALL	BEEP
1579   075F 2A 3B 3F    FUNKY1	LD	HL,(ADRESS)
1580   0762 CD E1 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1581   0765~            #IFDEF TEC-1F
1582   0765~            	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1583   0765             #ELSE
1584   0765 21 54 71    	LD	HL,7154H	;FN
1585   0768             #ENDIF
1586   0768 22 31 3F    	LD	(DISBUF),HL	;DISPLAY FN
1587   076B CD D7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1588   076E CD CA 04    FUNKY2	CALL	SKEYIN
1589   0771 2A 15 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1590   0774 CD F8 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1591   0777             ;
1592   0777             ; RETURN TO MAIN
1593   0777             ;
1594   0777 CD 09 06    CANCEL	CALL	BEEP
1595   077A CD 7C 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1596   077D CD D7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1597   0780 C9          	RET
1598   0781             ;
1599   0781             ; FUNCTION MENU KEY TABLE
1600   0781             ;
1601   0781 11          FUNLST	.DB	11H
1602   0782 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1602   0786 04 05 06 07 
1603   078A 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1603   078E 0C 0D 0E 0F 
1604   0792 10          	.DB	10H	;FN KEY
1605   0793 B9 07 C3 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1605   0797 E2 08 F4 08 
1606   079B 06 09 5C 09 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1606   079F 9A 09 D1 09 
1607   07A3 DF 09 EE 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1607   07A7 FD 09 0C 0A 
1608   07AB A6 0A 27 0C 	.DW	SECRET,RELSQR,SCOPE,TIME
1608   07AF 80 0C 2F 0D 
1609   07B3 B5 07       	.DW	FUNFUN
1610   07B5             ;-----------------------
1611   07B5             ; CALL FUNCTION FUNCTION
1612   07B5             ;-----------------------
1613   07B5 2A 2F 3F    FUNFUN	LD	HL,(FUNJMP)
1614   07B8 E9          	JP	(HL)
1615   07B9             ;------------------------------------------
1616   07B9             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1617   07B9             ;------------------------------------------
1618   07B9 CD 09 06    GOEXEC	CALL	BEEP
1619   07BC CD EE 04    	CALL	KEYREL
1620   07BF             ;	POP	HL	;REMOVE EXEC RETURN
1621   07BF 2A 3B 3F    	LD	HL,(ADRESS)
1622   07C2 E9          	JP	(HL)	;START EXECUCTION
1623   07C3             ;------------------------------------
1624   07C3             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1625   07C3             ;------------------------------------
1626   07C3 CD 09 06    INTELFN	CALL	BEEP
1627   07C6 CD EE 04    	CALL	KEYREL
1628   07C9 CD D2 07    	CALL	INTELH
1629   07CC C2 25 09    	JP	NZ,BLKMV1	;SHOW THE ERROR
1630   07CF C3 77 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1631   07D2             ;-----------------------
1632   07D2             ; RECEIVE INTEL HEX FILE
1633   07D2             ;-----------------------
1634   07D2 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1635   07D6             ;
1636   07D6             ; WAIT FOR RECORD MARK
1637   07D6             ;
1638   07D6             INTEL1
1639   07D6 AF          	XOR	A
1640   07D7 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1641   07DA             INTELC
1642   07DA CD 45 10    	CALL	WAITC;WAIT FOR THE RECORD MARK
1643   07DD FE 3A       	CP	':'	;TO BE TRANSMITTED
1644   07DF 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1645   07E1             ;
1646   07E1             ; GET RECORD LENGTH
1647   07E1             ;
1648   07E1 CD 2E 08    	CALL	GETBYT
1649   07E4 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1650   07E7             ;
1651   07E7             ; GET ADDRESS FIELD
1652   07E7             ;
1653   07E7 CD 2E 08    	CALL	GETBYT
1654   07EA DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1655   07ED CD 2E 08    	CALL	GETBYT
1656   07F0 DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1657   07F3             ;
1658   07F3             ; GET RECORD TYPE
1659   07F3             ;
1660   07F3 CD 2E 08    	CALL	GETBYT
1661   07F6 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1662   07F8             ;
1663   07F8             ; READ IN THE DATA
1664   07F8             ;
1665   07F8 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1666   07FB DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1667   07FE DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1668   0801             
1669   0801 CD 2E 08    INTEL2	CALL	GETBYT	;GET DATA BYTE
1670   0804 77          	LD	(HL),A	;STORE DATA BYTE
1671   0805 23          	INC	HL
1672   0806 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1673   0808             ;
1674   0808             ; GET CHECKSUM AND COMPARE
1675   0808             ;
1676   0808 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1677   080B ED 44       	NEG		;TWO'S COMPLEMENT
1678   080D DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1679   0810 CD 2E 08    	CALL	GETBYT
1680   0813 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1681   0816 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1682   0819 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1683   081B C9          	RET	;NZ=CHECKSUM ERROR
1684   081C             ;
1685   081C             ; END OF FILE RECORD
1686   081C             ;
1687   081C DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1688   081F ED 44       	NEG		;TWO'S COMPLEMENT
1689   0821 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1690   0824 CD 2E 08    	CALL	GETBYT
1691   0827 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1692   082A DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1693   082D C9          	RET	;NZ=CHECKSUM ERROR
1694   082E             ;--------------------------
1695   082E             ; GET BYTE FROM SERIAL PORT
1696   082E             ;--------------------------
1697   082E C5          GETBYT	PUSH	BC
1698   082F CD 45 10    	CALL	WAITC
1699   0832 CB 77       	BIT	6,A
1700   0834 28 02       	JR	Z,GETBT1
1701   0836 C6 09       	ADD	A,09H
1702   0838 E6 0F       GETBT1	AND	0FH
1703   083A CB 27       	SLA 	A
1704   083C CB 27       	SLA	A
1705   083E CB 27       	SLA	A
1706   0840 CB 27       	SLA	A
1707   0842 4F          	LD	C,A
1708   0843             ;
1709   0843             ; GET LOW NYBBLE
1710   0843             ;
1711   0843 CD 45 10    	CALL	WAITC
1712   0846 CB 77       	BIT	6,A
1713   0848 28 02       	JR	Z,GETBT2
1714   084A C6 09       	ADD	A,09H
1715   084C E6 0F       GETBT2	AND	0FH
1716   084E B1          	OR	C
1717   084F 47          	LD	B,A
1718   0850 DD 86 03    	ADD	A,(IX+3)
1719   0853 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1720   0856 78          	LD	A,B
1721   0857 A7          	AND	A	;CLEAR CARRY
1722   0858 C1          	POP	BC
1723   0859 C9          	RET
1724   085A             ;-------------------------------
1725   085A             ; CONVERT ASCII CHARACTER TO HEX
1726   085A             ;-------------------------------
1727   085A             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1728   085A             ;ENTRY : A= ASCII 0-9,A-F
1729   085A             ;EXIT  : A= HEX 0-F IN LSN
1730   085A             ; A AND F REGISTERS MODIFIED
1731   085A             ;
1732   085A CB 77       ASCHEX	BIT	6,A
1733   085C 28 02       	JR	Z,ASCHX1
1734   085E C6 09       	ADD	A,09H
1735   0860 E6 0F       ASCHX1	AND	0FH
1736   0862 C9          	RET
1737   0863             ;------------------------------------
1738   0863             ; BIT BANG SERIAL PORT INITIALISATION
1739   0863             ;------------------------------------
1740   0863             ; SET THE SERIAL TRANSMIT PIN HIGH SO THE 
1741   0863             ; HOST CAN SEE THAT WE ARE PREPARING TO TRANSMIT
1742   0863             ; 
1743   0863             ; ENTRY : HL = BAUD RATE
1744   0863             ;         HL = 0 USE EXISTING BAUD CONSTANT
1745   0863             ; EXIT  : HL PRESERVED
1746   0863             ;       ; AF MODIFIED
1747   0863             ;
1748   0863 3E 40       SERINI	LD	A,40H
1749   0865 D3 85       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
1750   0867 06 32       	LD	B,50
1751   0869 CD 73 08    	CALL	MSDELAY	;WAIT SO THE HOST SEES TX HIGH
1752   086C 7C          	LD	A,H
1753   086D B5          	OR	L
1754   086E C8          	RET	Z	;HL IS ZERO DON'T UPDATE THE BAUD RATE
1755   086F 22 21 3F    	LD  (BAUD),HL	;UPDATE THE BAUD RATE
1756   0872 C9              RET	
1757   0873             ;------------------
1758   0873             ; MILLISECOND DELAY
1759   0873             ;------------------
1760   0873             ; APPROX. 1 MILLISECOND DELAY
1761   0873             ; 
1762   0873             ; ENTRY : B = 1 TO 255 MILLISECONDS
1763   0873             ; EXIT  : B = 0
1764   0873             ;
1765   0873 C5          MSDELAY	PUSH	BC	;11T
1766   0874 06 E9       	LD	B,233	;7T
1767   0876 00          MSDEL1	NOP	;4T
1768   0877 10 FD       	DJNZ	MSDEL1	;NZ=13T,Z=8T
1769   0879 C1          	POP	BC	;10T
1770   087A 10 F7       	DJNZ	MSDELAY	;NZ=13T,Z=8T
1771   087C C9          	RET	;10T
1772   087D             ;------------------------
1773   087D             ; SERIAL TRANSMIT ROUTINE
1774   087D             ;------------------------
1775   087D             ;TRANSMIT BYTE SERIALLY ON DOUT
1776   087D             ;
1777   087D             ; ENTRY : A = BYTE TO TRANSMIT
1778   087D             ;  EXIT : NO REGISTERS MODIFIED
1779   087D             ;
1780   087D F5          TXDATA	PUSH	AF
1781   087E C5          	PUSH	BC
1782   087F E5          	PUSH	HL
1783   0880 2A 21 3F    	LD	HL,(BAUD)
1784   0883 4F          	LD	C,A
1785   0884             ;
1786   0884             ; TRANSMIT START BIT
1787   0884             ;
1788   0884 AF          	XOR	A
1789   0885 D3 85       	OUT	(SCAN),A
1790   0887 CD D5 08    	CALL	BITIME
1791   088A             ;
1792   088A             ; TRANSMIT DATA
1793   088A             ;
1794   088A 06 08       	LD	B,08H
1795   088C CB 09       	RRC	C
1796   088E CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1797   0890 79          	LD	A,C	;LSB FIRST AND OUTPUT
1798   0891 E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1799   0893 D3 85       	OUT	(SCAN),A
1800   0895 CD D5 08    	CALL	BITIME
1801   0898 10 F4       	DJNZ	NXTBIT
1802   089A             ;
1803   089A             ; SEND STOP BITS
1804   089A             ;
1805   089A 3E 40       	LD	A,40H
1806   089C D3 85       	OUT	(SCAN),A
1807   089E CD D5 08    	CALL	BITIME
1808   08A1 CD D5 08    	CALL	BITIME
1809   08A4 E1          	POP	HL
1810   08A5 C1          	POP	BC
1811   08A6 F1          	POP	AF
1812   08A7 C9          	RET
1813   08A8             ;-----------------------
1814   08A8             ; SERIAL RECEIVE ROUTINE
1815   08A8             ;-----------------------
1816   08A8             ;RECEIVE SERIAL BYTE FROM DIN
1817   08A8             ;
1818   08A8             ; ENTRY : NONE
1819   08A8             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1820   08A8             ;
1821   08A8             ; REGISTERS MODIFIED A AND F
1822   08A8             ;
1823   08A8 C5          RXDATA	PUSH	BC
1824   08A9 E5          	PUSH	HL
1825   08AA             ;
1826   08AA             ; WAIT FOR START BIT
1827   08AA             ;
1828   08AA DB 86       RXDAT1	IN	A,(KEYBUF)
1829   08AC CB 7F       	BIT	7,A
1830   08AE 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1831   08B0             ;
1832   08B0             ; DETECTED START BIT
1833   08B0             ;
1834   08B0 2A 21 3F    	LD	HL,(BAUD)
1835   08B3 CB 3C       	SRL	H
1836   08B5 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1837   08B7 CD D5 08    	CALL	BITIME
1838   08BA DB 86       	IN	A,(KEYBUF)
1839   08BC CB 7F       	BIT	7,A
1840   08BE 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1841   08C0             ;
1842   08C0             ; DETECTED VALID START BIT,READ IN DATA
1843   08C0             ;
1844   08C0 06 08       	LD	B,08H
1845   08C2 2A 21 3F    RXDAT2	LD	HL,(BAUD)
1846   08C5 CD D5 08    	CALL	BITIME	;DELAY ONE BIT TIME
1847   08C8 DB 86       	IN	A,(KEYBUF)
1848   08CA CB 17       	RL	A
1849   08CC CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1850   08CE 10 F2       	DJNZ	RXDAT2
1851   08D0 79          	LD	A,C
1852   08D1 B7          	OR	A	;CLEAR CARRY FLAG
1853   08D2 E1          	POP	HL
1854   08D3 C1          	POP	BC
1855   08D4 C9          	RET
1856   08D5             ;---------------
1857   08D5             ; BIT TIME DELAY
1858   08D5             ;---------------
1859   08D5             ;DELAY FOR ONE SERIAL BIT TIME
1860   08D5             ;ENTRY : HL = DELAY TIME
1861   08D5             ; NO REGISTERS MODIFIED
1862   08D5             ;
1863   08D5 E5          BITIME	PUSH	HL
1864   08D6 D5          	PUSH	DE
1865   08D7 11 01 00    	LD	DE,0001H
1866   08DA ED 52       BITIM1	SBC	HL,DE
1867   08DC D2 DA 08    	JP	NC,BITIM1
1868   08DF D1          	POP	DE
1869   08E0 E1          	POP	HL
1870   08E1 C9          	RET
1871   08E2             ;-----------------------------
1872   08E2             ; FUNCTION 2 - ENTER ADDRESS 1
1873   08E2             ;-----------------------------
1874   08E2 CD 09 06    ADDRA	CALL	BEEP
1875   08E5 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1876   08E8 22 29 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1877   08EB~            #IFDEF TEC-1F
1878   08EB~            	LD	HL,0C300H	;ADDRESS [
1879   08EB             #ELSE
1880   08EB 21 00 39    	LD	HL,3900H	;ADDRESS [
1881   08EE             #ENDIF
1882   08EE CD 4E 09    	CALL	SDELAY
1883   08F1 C3 7A 07    	JP	CANCL1
1884   08F4             ;-----------------------------
1885   08F4             ; FUNCTION 3 - ENTER ADDRESS 2
1886   08F4             ;-----------------------------
1887   08F4 CD 09 06    ADDRB	CALL	BEEP
1888   08F7 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1889   08FA 22 2B 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1890   08FD~            #IFDEF TEC-1F
1891   08FD~            	LD	HL,00A9H	;ADDRESS ]
1892   08FD             #ELSE
1893   08FD 21 0F 00    	LD	HL,000FH	;ADDRESS ]
1894   0900             #ENDIF
1895   0900 CD 4E 09    	CALL	SDELAY
1896   0903 C3 7A 07    	JP	CANCL1
1897   0906             ;------------------------
1898   0906             ; FUNCTION 4 - BLOCK MOVE
1899   0906             ;------------------------
1900   0906 CD 09 06    BLKMVE	CALL	BEEP
1901   0909 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1902   090C 22 2D 3F    	LD	(BLKDST),HL	;ADDRESS AS
1903   090F~            #IFDEF TEC-1F
1904   090F~            	LD	HL,0C3A9H	;DESTINATION
1905   090F             #ELSE
1906   090F 21 0F 39    	LD	HL,390FH	;DESTINATION
1907   0912             #ENDIF
1908   0912 CD 4E 09    	CALL	SDELAY
1909   0915             ;
1910   0915             ; CALCULATE NUMBER OF BYTES TO MOVE
1911   0915             ;
1912   0915 2A 2B 3F    	LD	HL,(BLKEND)
1913   0918 ED 5B 29 3F 	LD	DE,(BLKSRT)
1914   091C A7          	AND	A
1915   091D ED 52       	SBC	HL,DE
1916   091F 23          	INC	HL	;MAKE MOVE INCLUSIVE
1917   0920 22 27 3F    	LD	(COUNT),HL
1918   0923 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1919   0925             ;
1920   0925             ; SHOW ERROR
1921   0925             ;
1922   0925~            #IFDEF TEC-1F
1923   0925~            BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1924   0925             #ELSE
1925   0925 21 79 00    BLKMV1	LD	HL,0079H	;SHOW ERROR E
1926   0928             #ENDIF
1927   0928 CD 09 06    BLKMV2	CALL	BEEP
1928   092B 22 31 3F    	LD	(DISBUF),HL	;AND WAIT
1929   092E CD CA 04    	CALL	SKEYIN	;FOR KEYPRESS
1930   0931 CD 09 06    	CALL	BEEP
1931   0934 CD D7 04    	CALL	SKEYRL
1932   0937 C3 7A 07    	JP	CANCL1
1933   093A             ;
1934   093A             ; MOVE BLOCK
1935   093A             ;
1936   093A CD 40 09    BLKMV3	CALL	MOVE
1937   093D C3 7A 07    	JP	CANCL1
1938   0940             ;-----------
1939   0940             ; BLOCK MOVE
1940   0940             ;-----------
1941   0940 ED 4B 27 3F MOVE	LD	BC,(COUNT)
1942   0944 2A 29 3F    	LD	HL,(BLKSRT)	;START ADDR
1943   0947 ED 5B 2D 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1944   094B ED B0       	LDIR
1945   094D C9          	RET
1946   094E             ;-------------------------------
1947   094E             ; SCAN DISPLAY UNTIL KEY RELEASE
1948   094E             ;-------------------------------
1949   094E 22 31 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1950   0951 06 FF       	LD	B,255	;IN DATA DISPLAYS
1951   0953 CD 2F 04    SDELY1	CALL	SCAND	;UNTIL KEY
1952   0956 10 FB       	DJNZ SDELY1	;IS RELEASED
1953   0958 CD D7 04    	CALL	SKEYRL
1954   095B C9          	RET
1955   095C             ;---------------------------
1956   095C             ;FUNCTION 5 - BLOCK CHECKSUM
1957   095C             ;---------------------------
1958   095C CD 09 06    BLKSUM	CALL	BEEP
1959   095F~            #IFDEF TEC-1F
1960   095F~            	LD	HL,0C3A7H	;CS
1961   095F             #ELSE
1962   095F 21 6D 39    	LD	HL,396DH	;CS
1963   0962             #ENDIF
1964   0962 CD 4E 09    	CALL	SDELAY	;SHOW PROMPT
1965   0965 ED 5B 29 3F 	LD	DE,(BLKSRT)
1966   0969 2A 2B 3F    	LD	HL,(BLKEND)
1967   096C A7          	AND	A
1968   096D ED 52       	SBC	HL,DE
1969   096F 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1970   0970 22 27 3F    	LD	(COUNT),HL
1971   0973 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1972   0975             ;
1973   0975             ; SHOW ERROR
1974   0975             ;
1975   0975 C3 25 09    	JP	BLKMV1
1976   0978             ;
1977   0978             ; CALCULATE CHECKSUM
1978   0978             ;
1979   0978 2A 29 3F    BLKSM1	LD	HL,(BLKSRT)
1980   097B ED 5B 2B 3F 	LD	DE,(BLKEND)
1981   097F CD 1B 05    	CALL	CHKSUM	;DO THE CHECKSUM,
1982   0982 CD F6 03    	CALL	DISBYT	;DISPLAY
1983   0985 2A 27 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1984   0988 CD E1 03    	CALL	DISADD	;SUMMED AND
1985   098B CD 09 06    	CALL	BEEP
1986   098E CD CA 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1987   0991 CD 09 06    	CALL	BEEP	;A KEY IS PRESSED
1988   0994 CD D7 04    	CALL	SKEYRL
1989   0997 C3 7A 07    	JP	CANCL1
1990   099A             ;----------------------------------------
1991   099A             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1992   099A             ;----------------------------------------
1993   099A CD 09 06    BRANCH	CALL	BEEP
1994   099D~            #IFDEF TEC-1F
1995   099D~            	LD	HL,44E6H	;RB
1996   099D             #ELSE
1997   099D 21 7C 50    	LD	HL,507CH	;RB
1998   09A0             #ENDIF
1999   09A0 CD 4E 09    	CALL	SDELAY
2000   09A3 2A 3B 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
2001   09A6 ED 5B 29 3F 	LD	DE,(BLKSRT)
2002   09AA 13          	INC	DE	;POINT TO PC+2
2003   09AB A7          	AND	A
2004   09AC ED 52       	SBC	HL,DE	;SUBTRACT
2005   09AE             ;
2006   09AE             ;TEST HIGH BYTE OF RESULT TO
2007   09AE             ;DETERMINE IF BACKWARD BRANCH
2008   09AE             ;
2009   09AE 7C          	LD	A,H
2010   09AF FE FF       	CP	255	;BACKWARD BRANCH?
2011   09B1 C2 BC 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
2012   09B4             ;
2013   09B4             ;CHECK IF WE HAVE BRANCHED BEYOND -128
2014   09B4             ;
2015   09B4 7D          	LD	A,L
2016   09B5 CB 7F       	BIT	7,A
2017   09B7 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
2018   09B9 C3 25 09    	JP	BLKMV1	;TOO FAR BACK
2019   09BC             ;
2020   09BC             ;TEST HIGH BYTE OF RESULT TO
2021   09BC             ;DETERMINE IF FORWARD BRANCH
2022   09BC             ;
2023   09BC FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
2024   09BE C2 25 09    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
2025   09C1             ;
2026   09C1             ; CHECK IF WE HAVE BRANCHED BEYOND +128
2027   09C1             ;
2028   09C1 7D          	LD	A,L
2029   09C2 CB 7F       	BIT	7,A
2030   09C4 C2 25 09    	JP	NZ,BLKMV1	;TOO FAR FORWARD
2031   09C7             ;
2032   09C7             ; WITHIN LIMITS PUT IN RAM
2033   09C7             ; AND SHOW AS CURRENT ADDRESS
2034   09C7             ;
2035   09C7 2A 29 3F    BRNCH2	LD	HL,(BLKSRT)
2036   09CA 22 3B 3F    	LD	(ADRESS),HL
2037   09CD 77          	LD	(HL),A
2038   09CE C3 7A 07    	JP	CANCL1
2039   09D1             ;-----------------------------------------
2040   09D1             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
2041   09D1             ;-----------------------------------------
2042   09D1 CD 09 06    TRACE	CALL	BEEP
2043   09D4~            #IFDEF TEC-1F
2044   09D4~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
2045   09D4~            	LD	HL,0046H	;SHOW T
2046   09D4             #ELSE
2047   09D4 D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
2048   09D6 21 70 00    	LD	HL,0070H	;SHOW T
2049   09D9             #ENDIF
2050   09D9 CD 4E 09    	CALL	SDELAY
2051   09DC C3 7A 07    	JP	CANCL1
2052   09DF             ;-------------------------
2053   09DF             ; FUNCTION 8 - PLAY TUNE 1
2054   09DF             ;-------------------------
2055   09DF CD 09 06    PLAY1	CALL	BEEP
2056   09E2 CD EE 04    	CALL	KEYREL
2057   09E5 21 1A 0A    	LD	HL,TUNE1
2058   09E8 CD 6A 05    	CALL	MUSIC
2059   09EB C3 7A 07    	JP	CANCL1
2060   09EE             ;-------------------------
2061   09EE             ; FUNCTION 9 - PLAY TUNE 2
2062   09EE             ;-------------------------
2063   09EE CD 09 06    PLAY2	CALL	BEEP
2064   09F1 CD EE 04    	CALL	KEYREL
2065   09F4 21 5A 0A    	LD	HL,TUNE2
2066   09F7 CD 6A 05    	CALL	MUSIC
2067   09FA C3 7A 07    	JP	CANCL1
2068   09FD             ;------------------------------
2069   09FD             ; FUNCTION A - PLAY TUNE IN RAM
2070   09FD             ;------------------------------
2071   09FD CD 09 06    PLAY3	CALL	BEEP
2072   0A00 CD EE 04    	CALL	KEYREL
2073   0A03 2A 3B 3F    	LD	HL,(ADRESS)
2074   0A06 CD 6A 05    	CALL	MUSIC
2075   0A09 C3 7A 07    	JP	CANCL1
2076   0A0C             ;-----------------------------
2077   0A0C             ; FUNCTION B - TOGGLE KEY BEEP
2078   0A0C             ;-----------------------------
2079   0A0C CD 09 06    SWBEEP	CALL	BEEP
2080   0A0F 3A 39 3F    	LD	A,(MODE)
2081   0A12 EE 40       	XOR	40H
2082   0A14 32 39 3F    	LD	(MODE),A
2083   0A17 C3 7A 07    	JP	CANCL1
2084   0A1A             ;
2085   0A1A             ; TUNE 1
2086   0A1A             ; FROM TALKING ELECTRONICS TEC-1
2087   0A1A             ; MONITOR MON-1
2088   0A1A             ; BY JOHN HARDY AND KEN STONE
2089   0A1A             ;
2090   0A1A 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2090   0A1E 06 0D 0A 0D 
2091   0A22 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2091   0A26 0F 11 12 0F 
2092   0A2A 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2092   0A2E 12 0F 0D 0A 
2093   0A32 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
2093   0A36 0F 0A 0D 0F 
2094   0A3A 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2094   0A3E 06 0D 0A 0D 
2095   0A42 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2095   0A46 0F 11 12 0F 
2096   0A4A 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2096   0A4E 12 0F 0D 0A 
2097   0A52 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
2097   0A56 06 12 00 1E 
2098   0A5A             ;
2099   0A5A             ; TUNE 2
2100   0A5A             ; FROM TALKING ELECTRONICS TEC-1
2101   0A5A             ; MONITOR MON-1
2102   0A5A             ; BY JOHN HARDY AND KEN STONE
2103   0A5A             ;
2104   0A5A 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
2104   0A5E 0A 0A 06 06 
2105   0A62 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
2105   0A66 0A 0A 0A 0A 
2106   0A6A 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
2106   0A6E 08 0A 0A 0A 
2107   0A72 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
2107   0A76 08 0A 0D 0D 
2108   0A7A 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
2108   0A7E 0D 05 08 0B 
2109   0A82 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
2109   0A86 06 0B 0A 08 
2110   0A8A 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
2110   0A8E 06 06 0B 0A 
2111   0A92 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
2111   0A96 08 08 0A 0B 
2112   0A9A 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
2112   0A9E 06 06 06 06 
2113   0AA2 00 00 00 1E 	.DB	00H,00H,00H,1EH
2114   0AA6             ;---------------------------
2115   0AA6             ; FUNCTION C - SECRET NUMBER
2116   0AA6             ;---------------------------
2117   0AA6 CD 09 06    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
2118   0AA9 CD EE 04    	CALL	KEYREL	;AND CLEAR DISPLAY
2119   0AAC CD 60 04    	CALL	CLRBUF	;BUFFER
2120   0AAF DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
2121   0AB3             ;
2122   0AB3             ; SEPARATE NYBBLES IN RANDOM NUMBER
2123   0AB3             ;
2124   0AB3 CD 3B 05    	CALL	RAND
2125   0AB6 DD 75 0B    	LD	(IX+11),L
2126   0AB9 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
2127   0ABC DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
2128   0ABF CD 14 0C    	CALL	SPLIT	;NUMBER INTO
2129   0AC2 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
2130   0AC5 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
2131   0AC8 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
2132   0ACB CD 14 0C    	CALL	SPLIT	;GUESS EASIER
2133   0ACE DD 75 06    	LD	(IX+6),L
2134   0AD1 DD 74 07    	LD	(IX+7),H
2135   0AD4 AF          	XOR	A
2136   0AD5 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
2137   0AD7 21 00 00    	LD	HL,0
2138   0ADA DD 75 08    	LD	(IX+8),L
2139   0ADD DD 74 09    	LD	(IX+9),H
2140   0AE0 CD E1 03    	CALL	DISADD	;AND DISPLAY GUESS
2141   0AE3             ;
2142   0AE3             ; SCAN THE KEYBOARD
2143   0AE3             ;
2144   0AE3 CD CA 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
2145   0AE6 21 F2 0A    	LD	HL,SECNUM
2146   0AE9 CD F8 04    	CALL	MENU	;EXECUTE KEY HANDLER
2147   0AEC CD D7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2148   0AEF C3 E3 0A    	JP	SECRT1
2149   0AF2             ;
2150   0AF2             ; SECRET NUMBER KEY TABLE
2151   0AF2             ;
2152   0AF2 12          SECNUM	.DB	12H
2153   0AF3 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
2153   0AF7 04 05 06 07 
2154   0AFB 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
2154   0AFF 0C 0D 0E 0F 
2155   0B03 10 11       	.DB	10H,11H
2156   0B05 29 0B 29 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2156   0B09 29 0B 29 0B 
2157   0B0D 29 0B 29 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2157   0B11 29 0B 29 0B 
2158   0B15 29 0B 29 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2158   0B19 29 0B 29 0B 
2159   0B1D 29 0B 29 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2159   0B21 29 0B 29 0B 
2160   0B25             ;
2161   0B25             ; MAKE THE GO KEY CHECK THE NUMBER
2162   0B25             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
2163   0B25             ;
2164   0B25~            #IFDEF TEC-1F
2165   0B25~            	.DW	CHKKEY,ENDKEY
2166   0B25             #ELSE
2167   0B25 50 0B 59 0B 	.DW	ENDKEY,CHKKEY
2168   0B29             #ENDIF
2169   0B29             ;---------------
2170   0B29             ; EDIT GUESS KEY
2171   0B29             ;---------------
2172   0B29 F5          EDTKEY	PUSH	AF
2173   0B2A DD 6E 08    	LD	L,(IX+8)
2174   0B2D DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
2175   0B30 CB 25       	SLA	L
2176   0B32 CB 14       	RL	H	;AND DO A 16 BIT
2177   0B34 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
2178   0B36 CB 14       	RL	H	;TO MAKE  ROOM
2179   0B38 CB 25       	SLA	L	;FOR THE NEW KEY
2180   0B3A CB 14       	RL	H
2181   0B3C CB 25       	SLA	L
2182   0B3E CB 14       	RL	H
2183   0B40 F1          	POP	AF
2184   0B41 B5          	OR	L	;IT IN THE LEAST
2185   0B42 6F          	LD	L,A	;SIGNIFICANT NYBBLE
2186   0B43 DD 75 08    	LD	(IX+8),L
2187   0B46 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
2188   0B49 CD E1 03    	CALL	DISADD
2189   0B4C CD 09 06    	CALL	BEEP
2190   0B4F C9          	RET
2191   0B50             ;----------
2192   0B50             ; QUIT GAME
2193   0B50             ;----------
2194   0B50 CD 09 06    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
2195   0B53 CD EE 04    	CALL	KEYREL	;AND RETURN TO
2196   0B56 C3 83 02    	JP	MAIN	;MONITOR
2197   0B59             ;---------------------------
2198   0B59             ; SEE IF ITS THE RIGHT GUESS
2199   0B59             ;---------------------------
2200   0B59 CD 09 06    CHKKEY	CALL	BEEP
2201   0B5C ED 57       	LD	A,I
2202   0B5E 3C          	INC	A
2203   0B5F 27          	DAA	;INC BCD NO. OF TRIES
2204   0B60             ;
2205   0B60             ; BRIEFLY SHOW GUESS NO.
2206   0B60             ;
2207   0B60 ED 47       	LD	I,A
2208   0B62 CD F6 03    	CALL	DISBYT
2209   0B65 06 FF       	LD	B,255
2210   0B67 CD 2F 04    CHKKY1	CALL	SCAND
2211   0B6A 10 FB       	DJNZ	CHKKY1
2212   0B6C             ;
2213   0B6C             ; SEPARATE GUESS INTO NYBBLES
2214   0B6C             ;
2215   0B6C DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
2216   0B6F CD 14 0C    	CALL	SPLIT	;NUMBER INTO
2217   0B72 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
2218   0B75 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
2219   0B78 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
2220   0B7B CD 14 0C    	CALL	SPLIT	;GUESS EASIER
2221   0B7E DD 75 02    	LD	(IX+2),L
2222   0B81 DD 74 03    	LD	(IX+3),H
2223   0B84             ;
2224   0B84             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
2225   0B84             ;
2226   0B84 AF          	XOR	A
2227   0B85 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
2228   0B88 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
2229   0B8B 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
2230   0B8E 06 04       	LD	B,4	;NUMBER OF DIGITS
2231   0B90 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
2232   0B91 EB          	EX	DE,HL
2233   0B92 BE          	CP	(HL)	;SAME AS GUESS?
2234   0B93 20 10       	JR	NZ,CHKKY4	;NOT SAME
2235   0B95 DD 7E 0A    	LD	A,(IX+10)
2236   0B98 C6 10       	ADD	A,10H	;RIGHT POSITION
2237   0B9A DD 77 0A    	LD	(IX+10),A
2238   0B9D 23          CHKKY3	INC	HL	;POINT TO NEXT
2239   0B9E EB          	EX	DE,HL	;DIGIT POSITION
2240   0B9F 23          	INC	HL	;AND GO
2241   0BA0 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
2242   0BA2 C3 C1 0B    	JP	CHKKY8
2243   0BA5             ;
2244   0BA5             ; CHECK IF NUMBER IS THERE
2245   0BA5             ;
2246   0BA5 C5          CHKKY4	PUSH	BC
2247   0BA6 E5          	PUSH	HL
2248   0BA7 06 04       	LD	B,4	;CHECK EACH DIGIT
2249   0BA9 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
2250   0BAC BE          CHKKY5	CP	(HL)	;NUMBER IS IN
2251   0BAD 23          	INC	HL	;THE WRONG
2252   0BAE 20 0A       	JR	NZ,CHKKY6	;POSITION
2253   0BB0 DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
2254   0BB3 3C          	INC	A	;THE RESULT
2255   0BB4 DD 77 0A    	LD	(IX+10),A
2256   0BB7 C3 BC 0B    	JP	CHKKY7
2257   0BBA 10 F0       CHKKY6	DJNZ	CHKKY5
2258   0BBC E1          CHKKY7	POP	HL
2259   0BBD C1          	POP	BC
2260   0BBE C3 9D 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
2261   0BC1             ;
2262   0BC1             ; CHECK IF CORRECT
2263   0BC1             ;
2264   0BC1 DD 7E 0A    CHKKY8	LD	A,(IX+10)
2265   0BC4 FE 40       	CP	40H	;IS IT CORRECT?
2266   0BC6 CA E6 0B    	JP	Z,CHKKY9	;YES!
2267   0BC9 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
2268   0BCC CD F6 03    	CALL	DISBYT	;IN DATA DISPLAYS
2269   0BCF ED 57       	LD	A,I	;WAS THAT THE
2270   0BD1 FE 20       	CP	20H	;LAST GUESS?
2271   0BD3 C0          	RET	NZ	;NO TRY AGAIN
2272   0BD4             ;
2273   0BD4             ; RAN OUT OF TRYS
2274   0BD4             ;
2275   0BD4 CD 60 04    	CALL	CLRBUF	;DISPLAY
2276   0BD7 DD 6E 0B    	LD	L,(IX+11)
2277   0BDA DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
2278   0BDD CD E1 03    	CALL	DISADD	;AND PLAY
2279   0BE0 21 0D 0C    	LD	HL,LOSE	;THE LOSE
2280   0BE3 C3 F4 0B    	JP	CHKKYA	;MUSIC
2281   0BE6             ;
2282   0BE6             ; GOT THE RIGHT ANSWER
2283   0BE6             ;
2284   0BE6 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2285   0BE8 CD F6 03    	CALL	DISBYT	;AND PLAY THE WIN
2286   0BEB DD 6E 0B    	LD	L,(IX+11)
2287   0BEE DD 66 0C    	LD	H,(IX+12)
2288   0BF1 21 04 0C    	LD	HL,WIN	;MUSIC
2289   0BF4             ;
2290   0BF4             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2291   0BF4             ;
2292   0BF4 CD 6A 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2293   0BF7 CD CA 04    	CALL	SKEYIN	;WAIT FOR A KEY
2294   0BFA CD 09 06    	CALL	BEEP
2295   0BFD CD D7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2296   0C00 E1          	POP	HL	;AND RESTART THE GAME
2297   0C01 C3 A6 0A    	JP	SECRET
2298   0C04             ;
2299   0C04             ; WIN AND LOSE MUSIC
2300   0C04             ; FROM TALKING ELECTRONICS TEC-1
2301   0C04             ; MONITOR MON-1
2302   0C04             ; BY JOHN HARDY AND KEN STONE
2303   0C04             ;
2304   0C04 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2304   0C08 17 12 14 10 
2304   0C0C 1F 
2305   0C0D 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2305   0C11 01 11 1F 
2306   0C14             ;-------------------------------
2307   0C14             ; SEPARATE BYTE INTO TWO NYBBLES
2308   0C14             ;-------------------------------
2309   0C14             ;SEPARATES A BYTE INTO TWO
2310   0C14             ;RIGHT JUSTIFIED NYBBLES
2311   0C14             ; ENTRY : A = BYTE TO BE SEPARATED
2312   0C14             ; EXIT  : H = MSN
2313   0C14             ;         L = LSN
2314   0C14             ;
2315   0C14 F5          SPLIT	PUSH	AF
2316   0C15 C5          	PUSH	BC
2317   0C16 47          	LD	B,A	;SAVE BYTE
2318   0C17 E6 0F       	AND	0FH	;STRIP BITS LSN
2319   0C19 6F          	LD	L,A	;RETURN LSN IN L
2320   0C1A 78          	LD	A,B
2321   0C1B CB 3F       	SRL	A
2322   0C1D CB 3F       	SRL	A
2323   0C1F CB 3F       	SRL	A	;MOVE MSN
2324   0C21 CB 3F       	SRL	A	;INTO LSN
2325   0C23 67          	LD	H,A	;RETURN MSN IN H
2326   0C24 C1          	POP	BC
2327   0C25 F1          	POP	AF
2328   0C26 C9          	RET
2329   0C27             ;-----------------------------------
2330   0C27             ; FUNCTION D - RELAY BOARD SEQUENCER
2331   0C27             ;-----------------------------------
2332   0C27 CD 09 06    RELSQR	CALL	BEEP
2333   0C2A CD EE 04    	CALL	KEYREL
2334   0C2D 21 36 0C    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2335   0C30 CD 3C 0C    	CALL	RLSTEP
2336   0C33 C3 7A 07    	JP	CANCL1
2337   0C36             ;--------------
2338   0C36             ; TEST SEQUENCE
2339   0C36             ;--------------
2340   0C36 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2340   0C3A 00 FF 
2341   0C3C             ;----------------
2342   0C3C             ; RELAY SEQUENCER
2343   0C3C             ;----------------
2344   0C3C             ; SEQUENCES RELAYS ON RELAY BOARD
2345   0C3C             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2346   0C3C             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2347   0C3C             ; OR REPEAT.
2348   0C3C             ;  TABLE:
2349   0C3C             ;  <BYTE1>,<BYTE2>
2350   0C3C             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2351   0C3C             ;  BYTE2 = FF - REPEAT
2352   0C3C             ;          00 - FINISHED
2353   0C3C             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2354   0C3C             ;  EXIT : NONE MODIFIED
2355   0C3C             ;
2356   0C3C F5          RLSTEP	PUSH	AF
2357   0C3D C5          	PUSH	BC
2358   0C3E D5          	PUSH	DE
2359   0C3F E5          	PUSH	HL	;SAVE REGISTERS
2360   0C40 E5          	PUSH	HL
2361   0C41 EB          	EX	DE,HL	;GET ADDRESS OF DATA
2362   0C42 1A          RELSR1	LD	A,(DE)
2363   0C43 4F          	LD	C,A	;GET OUTPUT DATA
2364   0C44 13          	INC	DE
2365   0C45 1A          	LD	A,(DE)	;GET TIME DELAY
2366   0C46 FE 00       	CP	0
2367   0C48 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2368   0C4A FE FF       	CP	255
2369   0C4C 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2370   0C4E 47          	LD	B,A
2371   0C4F 79          	LD	A,C
2372   0C50~            #IFDEF TEC-1F
2373   0C50~            	OUT	(PORT3),A	;STROBE
2374   0C50             #ELSE
2375   0C50 D3 81       	OUT	(IO1),A
2376   0C52             #ENDIF
2377   0C52 13          	INC	DE
2378   0C53 CD 6A 0C    RELSR2	CALL	DELONE	;1 SEC DELAY
2379   0C56 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2380   0C58 C3 42 0C    	JP	RELSR1
2381   0C5B             ;
2382   0C5B             ; REPEAT
2383   0C5B             ;
2384   0C5B D1          RELSR3	POP	DE	;GET START ADDRESS
2385   0C5C D5          	PUSH	DE	;SAVE FOR LATER
2386   0C5D C3 42 0C    	JP	RELSR1
2387   0C60             ;
2388   0C60             ; FINISHED
2389   0C60             ;
2390   0C60 3E 00       RELSR4	LD	A,00H
2391   0C62~            #IFDEF TEC-1F
2392   0C62~            	OUT	(PORT3),A	;STROBE
2393   0C62             #ELSE
2394   0C62 D3 81       	OUT	(IO1),A	;CLEAR OUTPUT REG
2395   0C64             #ENDIF
2396   0C64 E1          	POP	HL
2397   0C65 E1          	POP	HL
2398   0C66 D1          	POP	DE
2399   0C67 C1          	POP	BC
2400   0C68 F1          	POP	AF
2401   0C69 C9          	RET
2402   0C6A             ;-----------------
2403   0C6A             ; ONE SECOND DELAY
2404   0C6A             ;-----------------
2405   0C6A             ;
2406   0C6A             ; ENTRY : NONE
2407   0C6A             ; EXIT : FLAG REGISTER MODIFIED
2408   0C6A             ;
2409   0C6A C5          DELONE	PUSH	BC
2410   0C6B D5          	PUSH	DE
2411   0C6C E5          	PUSH	HL
2412   0C6D 11 01 00    	LD	DE,0001H
2413   0C70 21 70 08    	LD	HL,0870H
2414   0C73 06 92       DELON1	LD	B,92H
2415   0C75 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2416   0C77 ED 52       	SBC	HL,DE
2417   0C79 D2 73 0C    	JP	NC,DELON1	;OUTER LOOP
2418   0C7C E1          	POP	HL
2419   0C7D D1          	POP	DE
2420   0C7E C1          	POP	BC
2421   0C7F C9          	RET
2422   0C80             ;--------------------------
2423   0C80             ; FUNCTION E - KALEIDOSCOPE
2424   0C80             ;--------------------------
2425   0C80 CD 09 06    SCOPE	CALL	BEEP
2426   0C83 CD EE 04    	CALL	KEYREL
2427   0C86 CD 3B 05    	CALL	RAND	;GENERATE RANDOM
2428   0C89 EB          	EX	DE,HL
2429   0C8A 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2430   0C8D 7B          	LD	A,E	;THE FIRST QUADRANT
2431   0C8E CD FF 0C    	CALL	SEED	;WITH A RANDOM BIT
2432   0C91 7A          	LD	A,D	;PATTERN
2433   0C92 CD FF 0C    	CALL	SEED
2434   0C95             ;
2435   0C95             ; GENERATE MIRROR IMAGES
2436   0C95             ;
2437   0C95 06 04       SCOPE2	LD	B,04H
2438   0C97 21 00 3E    	LD	HL,BUFFER
2439   0C9A 11 07 3E    	LD	DE,BUFFER+7
2440   0C9D 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2441   0C9E 12          	LD	(DE),A	;QUADRANT INTO
2442   0C9F 23          	INC	HL	;THE FOURTH
2443   0CA0 1B          	DEC	DE	;QUADRANT
2444   0CA1 10 FA       	DJNZ	SCOPE3
2445   0CA3             ;
2446   0CA3             ; MIRROR ACROSS CENTRE OF DISPLAY
2447   0CA3             ;
2448   0CA3 06 08       	LD	B,8	;MIRROR THE FIRST
2449   0CA5 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2450   0CA8 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2451   0CA9 E6 0F       	AND	0FH	;OF THE DISPLAY
2452   0CAB 77          	LD	(HL),A	;INTO THE SECOND
2453   0CAC CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2454   0CAE CA B3 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2455   0CB1 CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2456   0CB3 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2457   0CB5 CA BA 0C    	JP	Z,SCOPE6	;CORRESPONDING
2458   0CB8 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2459   0CBA CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2460   0CBC CA C1 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2461   0CBF CB EE       	SET	5,(HL)	;DO THIS FOR
2462   0CC1 CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2463   0CC3 CA C8 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2464   0CC6 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2465   0CC8 23          SCOPE8	INC	HL
2466   0CC9 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2467   0CCB             ;
2468   0CCB             ; DISPLAY RANDOM BIT PATTERN
2469   0CCB             ;
2470   0CCB 11 01 00    	LD	DE,0001H	;SET UP DELAY
2471   0CCE 21 00 02    	LD	HL,0200H
2472   0CD1 E5          SCOPE9	PUSH	HL
2473   0CD2 21 00 3E    	LD	HL,BUFFER
2474   0CD5 CD 0E 0D    	CALL	SKATE	;SCAN 8X8
2475   0CD8 E1          	POP	HL
2476   0CD9 ED 52       	SBC	HL,DE
2477   0CDB C2 D1 0C    	JP	NZ,SCOPE9
2478   0CDE             ;
2479   0CDE             ; MANIPULATE BITS FOR NEXT IMAGE
2480   0CDE             ;
2481   0CDE 21 00 3E    SCOPEA	LD	HL,BUFFER
2482   0CE1 3E 05       	LD	A,5
2483   0CE3 86          	ADD	A,(HL)
2484   0CE4 E6 0F       	AND	0FH
2485   0CE6 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2486   0CE7 23          	INC	HL
2487   0CE8 3E 03       	LD	A,03H
2488   0CEA 86          	ADD	A,(HL)
2489   0CEB E6 0F       	AND	0FH
2490   0CED 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2491   0CEE 23          	INC	HL
2492   0CEF 3E 01       	LD	A,01H
2493   0CF1 86          	ADD	A,(HL)
2494   0CF2 E6 0F       	AND	0FH
2495   0CF4 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2496   0CF5 23          	INC	HL
2497   0CF6 3E 07       	LD	A,07H
2498   0CF8 86          	ADD	A,(HL)
2499   0CF9 E6 0F       	AND	0FH
2500   0CFB 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2501   0CFC C3 95 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2502   0CFF             ;
2503   0CFF             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2504   0CFF             ;
2505   0CFF 47          SEED	LD	B,A	;PUT THE
2506   0D00 E6 0F       	AND	0FH	;RANDOM NUMBER
2507   0D02 77          	LD	(HL),A	;INTO THE
2508   0D03 23          	INC	HL	;FIRST QUADRANT
2509   0D04 78          	LD	A,B	;OF THE
2510   0D05 E6 F0       	AND	240	;DISPLAY
2511   0D07 1F          	RRA
2512   0D08 1F          	RRA
2513   0D09 1F          	RRA
2514   0D0A 1F          	RRA
2515   0D0B 77          	LD	(HL),A
2516   0D0C 23          	INC	HL
2517   0D0D C9          	RET
2518   0D0E             ;-----------------
2519   0D0E             ; SCAN 8X8 DISPLAY
2520   0D0E             ;-----------------
2521   0D0E             ;PUT THE 8 RAM LOCATIONS POINTED TO
2522   0D0E             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2523   0D0E             ;ON TOP ROW.
2524   0D0E             ;  ROUTINE PERIOD IS 500uS
2525   0D0E             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2526   0D0E             ;
2527   0D0E             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2528   0D0E             ;	EXIT : NO REGISTERS MODIFIED
2529   0D0E             ;
2530   0D0E F5          SKATE	PUSH	AF
2531   0D0F C5          	PUSH	BC
2532   0D10 E5          	PUSH	HL	;SAVE REGISTERS
2533   0D11 0E 80       	LD	C,80H
2534   0D13 7E          SKATE1	LD	A,(HL)
2535   0D14~            #IFDEF TEC-1F
2536   0D14~            	OUT	(PORT3),A	;OUTPUT X
2537   0D14             #ELSE
2538   0D14 D3 80       	OUT	(IO0),A	;OUTPUT X
2539   0D16             #ENDIF
2540   0D16 79          	LD	A,C
2541   0D17~            #IFDEF TEC-1F
2542   0D17~            	OUT	(PORT4),A	;OUTPUT Y
2543   0D17             #ELSE
2544   0D17 D3 82       	OUT	(IO2),A	;OUTPUT Y
2545   0D19             #ENDIF
2546   0D19 06 02       	LD	B,02H
2547   0D1B 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2548   0D1D AF          	XOR	A
2549   0D1E~            #IFDEF TEC-1F
2550   0D1E~            	OUT	(PORT3),A
2551   0D1E~            	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2552   0D1E             #ELSE
2553   0D1E D3 80       	OUT	(IO0),A
2554   0D20 D3 82       	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2555   0D22             #ENDIF
2556   0D22 06 08       	LD	B,08H
2557   0D24 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2558   0D26 23          	INC	HL
2559   0D27 CB 09       	RRC	C
2560   0D29 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2561   0D2B E1          	POP	HL
2562   0D2C C1          	POP	BC
2563   0D2D F1          	POP	AF
2564   0D2E C9          	RET
2565   0D2F             ;----------------------------
2566   0D2F             ; FUNCTION F - CLOCK CALENDAR
2567   0D2F             ;----------------------------
2568   0D2F CD 09 06    TIME	CALL	BEEP
2569   0D32 CD EE 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2570   0D35 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2571   0D39 3A 37 3F    	LD	A,(ONTIM)
2572   0D3C DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2573   0D3F 3E 60       	LD	A,60H
2574   0D41 32 37 3F    	LD	(ONTIM),A	;USE NEW DELAY
2575   0D44 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2576   0D47             ;
2577   0D47             ; DISPLAY TIME,CHECK FOR KEY
2578   0D47             ;
2579   0D47 CD 9D 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2580   0D4A CD 87 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2581   0D4D CD 2F 04    	CALL	SCAND
2582   0D50 CD 6F 04    	CALL	SCANKEY
2583   0D53 CB 6F       	BIT	5,A
2584   0D55 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2585   0D57 E6 1F       	AND	1FH
2586   0D59 21 61 0D    	LD	HL,TIMKEY
2587   0D5C CD F8 04    	CALL	MENU
2588   0D5F 18 E6       	JR	TIME1
2589   0D61             
2590   0D61 04          TIMKEY	.DB	4
2591   0D62 10 11 12 13 	.DB	10H,11H,12H,13H
2592   0D66 6E 0D FF 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2592   0D6A 78 0D 78 0D 
2593   0D6E             ;--------------------
2594   0D6E             ; EXIT CLOCK CALENDAR
2595   0D6E             ;--------------------
2596   0D6E E1          CLKEXT	POP	HL	;REMOVE RETURN
2597   0D6F DD 7E 00    	LD	A,(IX+0)
2598   0D72 32 37 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2599   0D75 C3 77 07    	JP	CANCEL
2600   0D78             ;--------------------
2601   0D78             ; TOGGLE DISPLAY MODE
2602   0D78             ;--------------------
2603   0D78 CD 09 06    CALKEY	CALL	BEEP
2604   0D7B CD EE 04    	CALL	KEYREL
2605   0D7E DD 7E 01    	LD	A,(IX+1)
2606   0D81 EE 80       	XOR	80H	;TOGGLE DISPLAY
2607   0D83 DD 77 01    	LD	(IX+1),A
2608   0D86 C9          	RET
2609   0D87             ;----------------------
2610   0D87             ; UPDATE DISPLAY BUFFER
2611   0D87             ;----------------------
2612   0D87 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2613   0D8B 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2614   0D8D             ;
2615   0D8D             ; TIME DISPLAY
2616   0D8D             ;
2617   0D8D 3A 1A 3F    UPDBF1	LD	A,(SWREG1)
2618   0D90 CD FF 03    	CALL	CONBYT
2619   0D93~            #IFDEF	TEC-1F
2620   0D93~            	SET	4,L
2621   0D93             #ELSE
2622   0D93 CB FD       	SET	7,L	;SET DECIMAL POINT
2623   0D95             #ENDIF
2624   0D95 22 31 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2625   0D98 3A 1B 3F    	LD	A,(SWREG2)
2626   0D9B CD FF 03    	CALL	CONBYT
2627   0D9E~            #IFDEF	TEC-1F
2628   0D9E~            	SET	4,L
2629   0D9E             #ELSE
2630   0D9E CB FD       	SET	7,L	;SET DECIMAL POINT
2631   0DA0             #ENDIF	
2632   0DA0 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2633   0DA3 3A 1C 3F    	LD	A,(SWREG3)
2634   0DA6 CD FF 03    	CALL	CONBYT
2635   0DA9~            #IFDEF	TEC-1F
2636   0DA9~            	SET	4,L
2637   0DA9             #ELSE
2638   0DA9 CB FD       	SET	7,L	;SET DECIMAL POINT
2639   0DAB             #ENDIF
2640   0DAB 22 35 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2641   0DAE C9          	RET
2642   0DAF             ;
2643   0DAF             ; CALENDAR DISPLAY
2644   0DAF             ;
2645   0DAF 3A 20 3F    UPDBF2	LD	A,(SWREG7)
2646   0DB2 CD FF 03    	CALL	CONBYT
2647   0DB5 22 31 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2648   0DB8             ;
2649   0DB8             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2650   0DB8             ;
2651   0DB8 21 17 3F    	LD	HL,CALMDE
2652   0DBB CB 7E       	BIT	7,(HL)
2653   0DBD 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2654   0DBF             ;
2655   0DBF             ; DD/MM/YY MODE
2656   0DBF             ;
2657   0DBF 3A 1F 3F    	LD	A,(SWREG6)
2658   0DC2 CD FF 03    	CALL	CONBYT
2659   0DC5 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2660   0DC8 3A 1E 3F    	LD	A,(SWREG5)
2661   0DCB CD FF 03    	CALL	CONBYT
2662   0DCE 22 35 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2663   0DD1 18 12       	JR	UPDBF4
2664   0DD3             ;
2665   0DD3             ; MM/DD/YY MODE
2666   0DD3             ;
2667   0DD3 3A 1F 3F    UPDBF3	LD	A,(SWREG6)
2668   0DD6 CD FF 03    	CALL	CONBYT
2669   0DD9 22 35 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2670   0DDC 3A 1E 3F    	LD	A,(SWREG5)
2671   0DDF CD FF 03    	CALL	CONBYT
2672   0DE2 22 33 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2673   0DE5             ;
2674   0DE5             ; SHOW DAY
2675   0DE5             ;
2676   0DE5 3A 1D 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2677   0DE8 E6 07       	AND	07H
2678   0DEA 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2679   0DEC FE 07       	CP	07H
2680   0DEE 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2681   0DF0 2F          	CPL	;WORK OUT
2682   0DF1 D6 01       	SUB	01H	;WHICH DECIMAL POINT
2683   0DF3 E6 07       	AND	07H	;TO LIGHT
2684   0DF5 21 31 3F    	LD	HL,DISBUF	;ADDING THE DAY
2685   0DF8 06 00       	LD	B,00H	;TO A DISPLAY
2686   0DFA 4F          	LD	C,A	;BUFFER INDEX
2687   0DFB 09          	ADD	HL,BC	;AND SETTING THE
2688   0DFC~            #IFDEF	TEC-1F
2689   0DFC~            	SET	4,(HL)
2690   0DFC             #ELSE
2691   0DFC CB FE       	SET	7,(HL)	;DECIMAL POINT
2692   0DFE             #ENDIF	
2693   0DFE C9          UPDBF5	RET	;IN THAT DISPLAY
2694   0DFF             ;--------------
2695   0DFF             ; SET TIME/DATE
2696   0DFF             ;--------------
2697   0DFF CD 09 06    SETCLK	CALL	BEEP
2698   0E02 CD EE 04    	CALL	KEYREL
2699   0E05             ;
2700   0E05             ; EDIT THE DISPLAY BUFFER
2701   0E05             ;
2702   0E05 CD 87 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2703   0E08 CD CA 04    	CALL	SKEYIN
2704   0E0B CD EE 04    	CALL	KEYREL
2705   0E0E FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2706   0E10 C8          	RET	Z
2707   0E11 FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2708   0E13 28 6E       	JR	Z,SETCK8
2709   0E15 FE 12       	CP	12H
2710   0E17 28 3D       	JR	Z,SETCK4	;PLUS KEY
2711   0E19 FE 13       	CP	13H
2712   0E1B 28 4F       	JR	Z,SETCK6	;MINUS KEY
2713   0E1D FE 0A       	CP	0AH	;NO A-F KEYS
2714   0E1F 30 E4       	JR	NC,SETCK1
2715   0E21             ;
2716   0E21             ; IS IT SET CLOCK OR SET CALENDAR?
2717   0E21             ;
2718   0E21 DD CB 01 7E 	BIT	7,(IX+1)
2719   0E25 20 0D       	JR	NZ,SETCK2
2720   0E27             ;
2721   0E27             ; SET CLOCK DISPLAY
2722   0E27             ;
2723   0E27 21 1A 3F    	LD	HL,SWREG1
2724   0E2A ED 6F       	RLD	;MOVE THE NEW KEY
2725   0E2C 23          	INC	HL	;INTO THE CLOCK BUFFER
2726   0E2D ED 6F       	RLD
2727   0E2F 23          	INC	HL
2728   0E30 ED 6F       	RLD
2729   0E32 18 D1       	JR	SETCK1
2730   0E34             ;
2731   0E34             ; SET CALENDAR DISPLAY
2732   0E34             ;
2733   0E34 21 17 3F    SETCK2	LD	HL,CALMDE
2734   0E37 CB 7E       	BIT	7,(HL)
2735   0E39 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2736   0E3B             ;
2737   0E3B             ; SET CALENDAR AS DD/MM/YY
2738   0E3B             ;
2739   0E3B 21 20 3F    	LD	HL,SWREG7
2740   0E3E ED 6F       	RLD	;MOVE THE NEW KEY
2741   0E40 2B          	DEC	HL	;INTO THE CAL BUFFER
2742   0E41 ED 6F       	RLD
2743   0E43 2B          	DEC	HL
2744   0E44 ED 6F       	RLD
2745   0E46 18 BD       	JR	SETCK1
2746   0E48             ;
2747   0E48             ; SET CALENDAR AS MM/DD/YY
2748   0E48             ;
2749   0E48 21 20 3F    SETCK3	LD	HL,SWREG7
2750   0E4B ED 6F       	RLD	;MOVE THE NEW KEY
2751   0E4D 2B          	DEC	HL	;INTO THE CAL BUFFER
2752   0E4E 2B          	DEC	HL
2753   0E4F ED 6F       	RLD
2754   0E51 23          	INC	HL
2755   0E52 ED 6F       	RLD
2756   0E54 18 AF       	JR	SETCK1
2757   0E56             ;
2758   0E56             ; INC DAY
2759   0E56             ;
2760   0E56 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2761   0E5A 28 A9       	JR	Z,SETCK1
2762   0E5C 3A 1D 3F    	LD	A,(SWREG4)
2763   0E5F FE 07       	CP	07H	;IS THE DAY SUNDAY?
2764   0E61 20 02       	JR	NZ,SETCK5
2765   0E63 3E 00       	LD	A,00H	;SET MONDAY
2766   0E65 3C          SETCK5	INC	A	;DAY=DAY+1
2767   0E66 32 1D 3F    	LD	(SWREG4),A
2768   0E69 C3 05 0E    	JP	SETCK1
2769   0E6C             ;
2770   0E6C             ; DEC DAY
2771   0E6C             ;
2772   0E6C DD CB 01 7E SETCK6	BIT	7,(IX+1)
2773   0E70 CA 05 0E    	JP	Z,SETCK1
2774   0E73 3A 1D 3F    	LD	A,(SWREG4)
2775   0E76 FE 01       	CP	01H	;IS THE DAY MONDAY?
2776   0E78 20 02       	JR	NZ,SETCK7
2777   0E7A 3E 08       	LD	A,08H	;SET SUNDAY
2778   0E7C 3D          SETCK7	DEC	A	;DAY=DAY-1
2779   0E7D 32 1D 3F    	LD	(SWREG4),A
2780   0E80 C3 05 0E    	JP	SETCK1
2781   0E83             ;
2782   0E83             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2783   0E83             ;
2784   0E83 CD 09 06    SETCK8	CALL	BEEP
2785   0E86 CD EE 04    	CALL	KEYREL
2786   0E89 3A 1C 3F    	LD	A,(SWREG3)
2787   0E8C E6 3F       	AND	3FH	;24 HOUR MODE
2788   0E8E 32 1C 3F    	LD	(SWREG3),A
2789   0E91 3A 1D 3F    	LD	A,(SWREG4)
2790   0E94 E6 07       	AND	07H	;OSC ON,RST ENABLED
2791   0E96 32 1D 3F    	LD	(SWREG4),A
2792   0E99 CD 27 0F    	CALL	WWATCH	;WRITE CHANGES
2793   0E9C C9          	RET
2794   0E9D             ;---------------------
2795   0E9D             ; READ FROM SMARTWATCH
2796   0E9D             ;---------------------
2797   0E9D             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2798   0E9D             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2799   0E9D             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2800   0E9D             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2801   0E9D             ;
2802   0E9D             ;  ENTRY : NONE
2803   0E9D             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2804   0E9D             ;          (ALTERNATE SET MODIFIED)
2805   0E9D             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2806   0E9D             ;
2807   0E9D             ;
2808   0E9D             ; ENABLE SMARTWATCH
2809   0E9D             ;
2810   0E9D F5          RWATCH	PUSH	AF
2811   0E9E C5          	PUSH	BC
2812   0E9F D5          	PUSH	DE
2813   0EA0 E5          	PUSH	HL
2814   0EA1 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2815   0EA4 21 E7 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2816   0EA7 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2817   0EA9 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2818   0EAA 32 60 3F    	LD	(DALLAS),A
2819   0EAD 23          	INC	HL
2820   0EAE 10 F9       	DJNZ	RWACH1
2821   0EB0             ;
2822   0EB0             ; READ DATA FROM WATCH
2823   0EB0             ;
2824   0EB0 06 20       	LD	B,32
2825   0EB2 3A 60 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2826   0EB5 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2827   0EB7 CB 1A       	RR	D	;DE AND HL
2828   0EB9 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2829   0EBB CB 1C       	RR	H	;THE ALTERNATE PAIR
2830   0EBD CB 1D       	RR	L
2831   0EBF 10 F1       	DJNZ	RWACH2
2832   0EC1 D9          	EXX
2833   0EC2 06 20       	LD	B,32
2834   0EC4 3A 60 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2835   0EC7 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2836   0EC9 CB 1A       	RR	D
2837   0ECB CB 1B       	RR	E
2838   0ECD CB 1C       	RR	H
2839   0ECF CB 1D       	RR	L
2840   0ED1 10 F1       	DJNZ	RWACH3
2841   0ED3             ;
2842   0ED3             ; SAVE IN WATCH REGISTERS
2843   0ED3             ;
2844   0ED3 22 1D 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2845   0ED6 ED 53 1F 3F 	LD	(SWREG6),DE	;GET THE DATA
2846   0EDA D9          	EXX
2847   0EDB 22 19 3F    	LD	(SWREG0),HL
2848   0EDE ED 53 1B 3F 	LD	(SWREG2),DE
2849   0EE2 E1          	POP	HL
2850   0EE3 D1          	POP	DE
2851   0EE4 C1          	POP	BC
2852   0EE5 F1          	POP	AF
2853   0EE6 C9          	RET
2854   0EE7             ;
2855   0EE7             ; SMARTWATCH ACCESS PATTERN
2856   0EE7             ;
2857   0EE7 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2857   0EEB 5C 2E 17 8B 
2858   0EEF 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2858   0EF3 A3 D1 E8 74 
2859   0EF7 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2859   0EFB 3A 1D 8E 47 
2860   0EFF 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2860   0F03 C5 E2 71 B8 
2861   0F07 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2861   0F0B 5C 2E 17 8B 
2862   0F0F 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2862   0F13 A3 D1 E8 74 
2863   0F17 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2863   0F1B 3A 1D 8E 47 
2864   0F1F 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2864   0F23 C5 E2 71 B8 
2865   0F27             ;--------------------
2866   0F27             ; WRITE TO SMARTWATCH
2867   0F27             ;--------------------
2868   0F27             ;
2869   0F27             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2870   0F27             ; IT USING BIT MANIPULATION.
2871   0F27             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2872   0F27             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2873   0F27             ; SMARTWATCH IS ENABLED.
2874   0F27             ;
2875   0F27             ; ENTRY : NONE
2876   0F27             ; THE DATA TO WRITE TO THE SMARTWATCH
2877   0F27             ; MUST BE IN SWREG0 - SWREG7
2878   0F27             ;  EXIT : NO WORKING REGISTERS MODIFIED
2879   0F27             ;  (ALTERNATE SET MODIFIED)
2880   0F27             ; GET DATA TO WRITE TO WATCH
2881   0F27             ;
2882   0F27 F5          WWATCH	PUSH	AF
2883   0F28 C5          	PUSH	BC
2884   0F29 D5          	PUSH	DE
2885   0F2A E5          	PUSH	HL
2886   0F2B 2A 1D 3F    	LD	HL,(SWREG4)	;SET UP THE
2887   0F2E ED 5B 1F 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2888   0F32 D9          	EXX
2889   0F33 2A 19 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2890   0F36 ED 5B 1B 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2891   0F3A             ;
2892   0F3A             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2893   0F3A             ;
2894   0F3A 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2895   0F3D 3E C5       	LD	A,0C5H
2896   0F3F 0E 80       	LD	C,80H	;NUMBER OF BYTES
2897   0F41 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2898   0F43 32 60 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2899   0F46 CB 0F       	RRC	A
2900   0F48 CB 38       	SRL	B
2901   0F4A 30 F7       	JR	NC,WWACH2	;MORE BITS
2902   0F4C CB 39       	SRL	C
2903   0F4E 38 11       	JR	C,WWACH4	;NO MORE BYTES
2904   0F50 CB 47       	BIT	0,A
2905   0F52 20 0A       	JR	NZ,WWACH3
2906   0F54 CB 0F       	RRC	A
2907   0F56 CB 0F       	RRC	A
2908   0F58 CB 0F       	RRC	A
2909   0F5A CB 0F       	RRC	A
2910   0F5C 18 E3       	JR	WWACH1
2911   0F5E 2F          WWACH3	CPL
2912   0F5F 18 E0       	JR	WWACH1
2913   0F61             ;
2914   0F61             ; WRITE DATA TO WATCH
2915   0F61             ;
2916   0F61 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2917   0F63 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2918   0F65 CB 1B       	RR	E	;ONTO D0 AND INTO
2919   0F67 CB 1C       	RR	H	;THE SMARTWATCH
2920   0F69 CB 1D       	RR	L
2921   0F6B 17          	RLA
2922   0F6C 32 60 3F    	LD	(DALLAS),A
2923   0F6F 10 F2       	DJNZ	WWACH5
2924   0F71 D9          	EXX	;RESTORE REGISTERS
2925   0F72 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2926   0F74 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2927   0F76 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2928   0F78 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2929   0F7A CB 1D       	RR	L
2930   0F7C 17          	RLA
2931   0F7D 32 60 3F    	LD	(DALLAS),A
2932   0F80 10 F2       	DJNZ	WWACH6
2933   0F82 E1          	POP	HL
2934   0F83 D1          	POP	DE
2935   0F84 C1          	POP	BC
2936   0F85 F1          	POP	AF
2937   0F86 C9          	RET
2938   0F87             ;-----------------
2939   0F87             ; ONE SECOND DELAY
2940   0F87             ;-----------------
2941   0F87             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2942   0F87             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2943   0F87             ;
2944   0F87             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2945   0F87             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2946   0F87             ; READS THE SAME AS THE REFERENCE VALUE,
2947   0F87             ; THEN THE ROUTINE RETURNS
2948   0F87             ;
2949   0F87             ; ENTRY : NONE
2950   0F87             ; EXIT : NONE MODIFIED
2951   0F87             ;
2952   0F87 F5          ONESEC	PUSH	AF
2953   0F88 C5          	PUSH	BC
2954   0F89 CD 9D 0E    	CALL	RWATCH	;READ WATCH
2955   0F8C 3A 1A 3F    	LD	A,(SWREG1)
2956   0F8F 47          	LD	B,A	;SAVE REF COUNT
2957   0F90 CD 9D 0E    ONESC1	CALL	RWATCH
2958   0F93 3A 1A 3F    	LD	A,(SWREG1)
2959   0F96 B8          	CP	B	;SAME AS REF?
2960   0F97 CA 90 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2961   0F9A C1          	POP	BC
2962   0F9B F1          	POP	AF
2963   0F9C C9          	RET
2964   0F9D             ;---------------------
2965   0F9D             ; SCBUG SERIAL MONITOR
2966   0F9D             ;---------------------
2967   0F9D             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2968   0F9D             ; COMMS PARAMETERS ARE 115200,n,8,2
2969   0F9D             ;
2970   0F9D             ;------------
2971   0F9D             ; ASCII CODES
2972   0F9D             ;------------
2973   0F9D             ESC	.EQU	1BH
2974   0F9D             CR	.EQU	0DH
2975   0F9D             LF	.EQU	0AH
2976   0F9D             ;
2977   0F9D             ; START UP THE MONITOR
2978   0F9D             ;
2979   0F9D ED 73 10 3F SCBUG	LD	(SPSAVE),SP	;SAVE STACK POINTER
2980   0FA1 CD 45 14    	CALL	PRNTSZ
2981   0FA4 1B 5B 48 1B 	.DB	27,"[H",27,"[2J",0	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2981   0FA8 5B 32 4A 00 
2982   0FAC CD B0 03    	CALL	PCBTYP
2983   0FAF CD 72 13    	CALL	SNDMSG	;BOARD TYPE
2984   0FB2 CD 7B 10    	CALL	OUTSP
2985   0FB5 CD A9 03    	CALL	MONNAME
2986   0FB8 CD 72 13    	CALL	SNDMSG
2987   0FBB CD 45 14    	CALL	PRNTSZ
2988   0FBE 20 53 65 72 	.DB	" Serial Monitor ",0
2988   0FC2 69 61 6C 20 
2988   0FC6 4D 6F 6E 69 
2988   0FCA 74 6F 72 20 
2988   0FCE 00 
2989   0FCF CD B7 03    	CALL	VERS
2990   0FD2 CD 72 13    	CALL	SNDMSG	;MONITOR VERSION
2991   0FD5 CD 80 10    	CALL	TXCRLF
2992   0FD8 CD BE 03    	CALL	KBDTYP
2993   0FDB CD 72 13    	CALL	SNDMSG	;KEYBOARD TYPE
2994   0FDE CD 45 14    	CALL	PRNTSZ
2995   0FE1 20 4B 65 79 	.DB	" Keyboard",0
2995   0FE5 62 6F 61 72 
2995   0FE9 64 00 
2996   0FEB CD 45 14    	CALL	PRNTSZ
2997   0FEE 0D 0A 48 20 	.DB	CR,LF,"H for command list",CR,LF,0
2997   0FF2 66 6F 72 20 
2997   0FF6 63 6F 6D 6D 
2997   0FFA 61 6E 64 20 
2997   0FFE 6C 69 73 74 
2997   1002 0D 0A 00 
2998   1005             ;
2999   1005             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
3000   1005             ;
3001   1005             START2	
3002   1005 3E 3E       	LD	A,'>'
3003   1007 CD 95 14    	CALL	TXBUF	;DISPLAY THE PROMPT
3004   100A             START3
3005   100A CD 45 10    	CALL	WAITC	;GET A CHARACTER FROM THE CONSOLE
3006   100D 4F          	LD	C,A	;SAVE FOR LATER
3007   100E E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
3008   1010             ;
3009   1010             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
3010   1010             ;
3011   1010 21 2F 10    	LD	HL,MONMENU
3012   1013 46          	LD	B,(HL)	;NUMBER OF COMMANDS
3013   1014 23          	INC	HL
3014   1015 BE          START4	CP	(HL)	;IN THE LIST?
3015   1016 28 05       	JR	Z,START5	;OK DO IT
3016   1018 23          	INC	HL
3017   1019 10 FA       	DJNZ	START4	;KEEP LOOKING
3018   101B 18 ED       	JR	START3
3019   101D             START5	
3020   101D CD 95 14    	CALL	TXBUF	;ECHO THE VALID CHARACTER 
3021   1020 79          	LD	A,C	;GET THE CHARACTER BACK
3022   1021 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
3023   1023 21 2F 10    	LD	HL,MONMENU	;USE THE MENU HANDLER
3024   1026 CD F8 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
3025   1029             ;
3026   1029             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
3027   1029             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
3028   1029             ;
3029   1029 CD 80 10    WARM	CALL	TXCRLF	;START ON A NEW LINE
3030   102C C3 05 10    	JP	START2
3031   102F             ;
3032   102F             ; SCBUG MONITOR COMMANDS
3033   102F             ;
3034   102F 07          MONMENU	.DB 7
3035   1030 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
3035   1034 47 49 58 
3036   1037 B2 12 AC 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
3036   103B A8 11 C5 11 
3037   103F 8A 10 18 12 	.DW	GOJUMP,INTHEX,EXIT
3037   1043 69 12 
3038   1045             	
3039   1045             ;---------------------
3040   1045             ; WAIT FOR A CHARACTER
3041   1045             ;---------------------
3042   1045 CD C6 14    WAITC	CALL	RXBUF
3043   1048 38 FB       	JR	C,WAITC	;NO CHARACTER
3044   104A C9          	RET
3045   104B             ;-----------------------------
3046   104B             ; GET A BYTE FROM THE TERMINAL
3047   104B             ;-----------------------------
3048   104B CD 45 10    GETCHR	CALL	WAITC
3049   104E FE 1B       	CP	ESC
3050   1050 28 27       	JR	Z,GETOUT
3051   1052 47          	LD	B,A	;SAVE TO ECHO
3052   1053 CD 86 12    	CALL	ASC2HEX
3053   1056 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
3054   1058 21 14 3F    	LD	HL,DATA
3055   105B 77          	LD	(HL),A
3056   105C 78          	LD	A,B
3057   105D CD 95 14    	CALL	TXBUF	;ECHO VALID HEX
3058   1060             ;	
3059   1060 CD 45 10    GETNYB	CALL	WAITC
3060   1063 FE 1B       	CP	ESC
3061   1065 28 12       	JR	Z,GETOUT
3062   1067 47          	LD	B,A	;SAVE TO ECHO
3063   1068 CD 86 12    	CALL	ASC2HEX
3064   106B 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
3065   106D ED 6F       	RLD
3066   106F 78          	LD	A,B
3067   1070 CD 95 14    	CALL	TXBUF	;ECHO VALID HEX
3068   1073 7E          	LD	A,(HL)
3069   1074 CD 79 10    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
3070   1077 3F          	CCF	;AND THEN COMPLEMENTING IT
3071   1078 C9          	RET
3072   1079 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
3073   107A C9          	RET
3074   107B             ;---------------
3075   107B             ; OUTPUT A SPACE
3076   107B             ;---------------
3077   107B 3E 20       OUTSP	LD	A,' '
3078   107D C3 95 14    	    JP	TXBUF
3079   1080             ;-------------
3080   1080             ; OUTPUT CRLF
3081   1080             ;------------
3082   1080 3E 0D       TXCRLF	LD	A,CR
3083   1082 CD 95 14    	CALL	TXBUF
3084   1085 3E 0A       	LD	A,LF
3085   1087 C3 95 14    	JP	TXBUF
3086   108A             ;------------------------------
3087   108A             ; GO <ADDR>
3088   108A             ; TRANSFERS EXECUTION TO <ADDR>
3089   108A             ;------------------------------
3090   108A CD 7B 10    GOJUMP	CALL	OUTSP
3091   108D CD 4B 10    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
3092   1090 D8          	RET	C
3093   1091 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3094   1094 CD 4B 10    	CALL	GETCHR	;GET ADDRESS LOW BYTE
3095   1097 D8          	RET	C
3096   1098 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3097   109B             ;
3098   109B             ; WAIT FOR A CR OR ESC
3099   109B             ;
3100   109B CD 45 10    GOJMP1	CALL	WAITC
3101   109E FE 1B       	CP	ESC	;ESC KEY?
3102   10A0 C8          	RET	Z
3103   10A1 FE 0D       	CP	CR
3104   10A3 20 F6       	JR	NZ,GOJMP1
3105   10A5 CD 80 10    	CALL	TXCRLF
3106   10A8 2A 12 3F    	LD	HL,(ADDR)
3107   10AB E9          	JP	(HL)	;JUMP TO USER ADDRESS
3108   10AC             ;---------------------
3109   10AC             ; DISPLAY COMMAND HELP
3110   10AC             ;---------------------
3111   10AC CD 45 14    HELP	CALL	PRNTSZ
3112   10AF 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
3112   10B3 41 41 41 41 
3112   10B7 20 20 20 20 
3112   10BB 44 69 73 70 
3112   10BF 6C 61 79 20 
3112   10C3 44 61 74 61 
3112   10C7 20 61 74 20 
3112   10CB 41 64 64 72 
3112   10CF 65 73 73 20 
3112   10D3 41 41 41 41 
3113   10D7 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
3113   10DB 20 20 20 20 
3113   10DF 20 20 20 20 
3113   10E3 53 50 41 43 
3113   10E7 45 20 74 6F 
3113   10EB 20 43 4F 4E 
3113   10EF 54 49 4E 55 
3113   10F3 45 2C 20 45 
3113   10F7 53 43 20 74 
3113   10FB 6F 20 51 55 
3113   10FF 49 54 
3114   1101 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
3114   1105 20 20 20 20 
3114   1109 20 20 20 20 
3114   110D 54 6F 67 67 
3114   1111 6C 65 20 53 
3114   1115 69 6E 67 6C 
3114   1119 65 20 53 74 
3114   111D 65 70 70 65 
3114   1121 72 
3115   1122 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
3115   1126 41 41 41 41 
3115   112A 20 20 20 20 
3115   112E 4D 6F 64 69 
3115   1132 66 79 20 41 
3115   1136 64 64 72 65 
3115   113A 73 73 20 41 
3115   113E 41 41 41 
3116   1141 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
3116   1145 41 41 41 41 
3116   1149 20 20 20 20 
3116   114D 47 4F 20 66 
3116   1151 72 6F 6D 20 
3116   1155 41 41 41 41 
3117   1159 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
3117   115D 20 20 20 20 
3117   1161 20 20 20 20 
3117   1165 44 6F 77 6E 
3117   1169 6C 6F 61 64 
3117   116D 20 49 4E 54 
3117   1171 45 4C 20 48 
3117   1175 65 78 
3118   1177 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
3118   117B 20 20 20 20 
3118   117F 20 20 20 20 
3118   1183 45 78 69 74 
3119   1187 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
3119   118B 20 20 20 20 
3119   118F 20 20 20 20 
3119   1193 54 68 69 73 
3119   1197 20 48 65 6C 
3119   119B 70 20 4D 65 
3119   119F 73 73 61 67 
3119   11A3 65 0D 0A 00 
3120   11A7 C9          	RET
3121   11A8             ;-----------------------------------------------
3122   11A8             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
3123   11A8             ;-----------------------------------------------
3124   11A8             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
3125   11A8             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
3126   11A8             ;
3127   11A8 CD 45 14    SSTOGL	CALL	PRNTSZ
3128   11AB 0D 0A 53 69 	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3128   11AF 6E 67 6C 65 
3128   11B3 20 53 74 65 
3128   11B7 70 20 54 6F 
3128   11BB 67 67 6C 65 
3128   11BF 0D 0A 00 
3129   11C2~            #IFDEF TEC-1F
3130   11C2~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
3131   11C2             #ELSE
3132   11C2 D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
3133   11C4             #ENDIF
3134   11C4 C9          	RET
3135   11C5             ;----------------------------
3136   11C5             ; M DISPLAY AND MODIFY MEMORY
3137   11C5             ;----------------------------
3138   11C5 CD 7B 10    MODIFY	CALL	OUTSP
3139   11C8             ;
3140   11C8             ;GET THE ADDRESS
3141   11C8             ;
3142   11C8 CD 4B 10    	CALL	GETCHR
3143   11CB D8          	RET	C
3144   11CC 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3145   11CF CD 4B 10    	CALL	GETCHR
3146   11D2 D8          	RET	C
3147   11D3 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3148   11D6             ;
3149   11D6             ; DISPLAY ON A NEW LINE
3150   11D6             ;
3151   11D6 CD 80 10    MDIFY1	CALL	TXCRLF
3152   11D9 ED 5B 12 3F 	LD	DE,(ADDR)
3153   11DD 21 00 3E    	LD	HL,BUFFER
3154   11E0 CD 42 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3155   11E3 21 00 3E    	LD	HL,BUFFER
3156   11E6 CD 36 13    	CALL	WRDOUT	;OUTPUT THE ADDRESS
3157   11E9 CD 7B 10    	CALL	OUTSP
3158   11EC             ;
3159   11EC             ;GET THE DATA AT THE ADDRESS
3160   11EC             ;
3161   11EC 2A 12 3F    	LD	HL,(ADDR)
3162   11EF 7E          	LD	A,(HL)
3163   11F0             ;
3164   11F0             ; DISPLAY THE DATA
3165   11F0             ;
3166   11F0 21 00 3E    	LD	HL,BUFFER
3167   11F3 CD 47 13    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
3168   11F6 21 00 3E    	LD	HL,BUFFER
3169   11F9 CD 39 13    	CALL	BYTOUT	;OUTPUT THE BYTE
3170   11FC CD 7B 10    	CALL	OUTSP
3171   11FF             ;
3172   11FF             ; GET NEW DATA,EXIT OR CONTINUE
3173   11FF             ;
3174   11FF CD 4B 10    	CALL	GETCHR
3175   1202 D8          	RET	C
3176   1203 47          	LD	B,A	;SAVE IT FOR LATER
3177   1204 2A 12 3F    	LD	HL,(ADDR)
3178   1207 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
3179   1208 78          	LD	A,B
3180   1209 BE          	CP	(HL)
3181   120A 28 05       	JR	Z,MDIFY2
3182   120C 3E 3F       	LD	A,'?'
3183   120E CD 95 14    	CALL	TXBUF	;NOT THE SAME DATA, PROBABLY NO RAM THERE
3184   1211             ;
3185   1211             ; INCREMENT THE ADDRESS
3186   1211             ;
3187   1211 23          MDIFY2	INC	HL
3188   1212 22 12 3F    	LD	(ADDR),HL
3189   1215 C3 D6 11    	JP	MDIFY1
3190   1218             ;-----------------------
3191   1218             ; RECEIVE INTEL HEX FILE
3192   1218             ;-----------------------
3193   1218 CD 45 14    INTHEX	CALL	PRNTSZ
3194   121B 0D 0A 53 65 	.DB	CR,LF,"Send INTEL Hex File...",0
3194   121F 6E 64 20 49 
3194   1223 4E 54 45 4C 
3194   1227 20 48 65 78 
3194   122B 20 46 69 6C 
3194   122F 65 2E 2E 2E 
3194   1233 00 
3195   1234 CD D2 07    	CALL	INTELH
3196   1237 20 19       	JR	NZ,ITHEX1
3197   1239 CD 45 14    	CALL	PRNTSZ
3198   123C 0D 0A 46 69 	.DB	CR,LF,"File Received OK",CR,LF,0
3198   1240 6C 65 20 52 
3198   1244 65 63 65 69 
3198   1248 76 65 64 20 
3198   124C 4F 4B 0D 0A 
3198   1250 00 
3199   1251 C9          	RET
3200   1252 CD 45 14    ITHEX1	CALL	PRNTSZ
3201   1255 0D 0A 43 68 	.DB	CR,LF,"Checksum Error",CR,LF,0
3201   1259 65 63 6B 73 
3201   125D 75 6D 20 45 
3201   1261 72 72 6F 72 
3201   1265 0D 0A 00 
3202   1268 C9          	RET
3203   1269             ;------------------------
3204   1269             ; EXIT BACK TO SC MONITOR
3205   1269             ;------------------------
3206   1269             ; WE SAVED THE STACK POINTER WHEN WE ENTERED SCBUG
3207   1269             ; WE WILL USE IT NOW TO RETURN FROM WHERE WE CAME FROM
3208   1269             ;
3209   1269 CD 45 14    EXIT	CALL	PRNTSZ
3210   126C 0D 0A 42 79 	.DB	CR,LF,"Bye...",CR,LF,0
3210   1270 65 2E 2E 2E 
3210   1274 0D 0A 00 
3211   1277             ;
3212   1277 ED 7B 10 3F 	LD	SP,(SPSAVE)	;RESTORE STACK POINTER
3213   127B C9          	RET
3214   127C             ;------------------
3215   127C             ; DISPLAY REGISTERS
3216   127C             ;------------------
3217   127C CD E1 13    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
3218   127F 21 00 3E    	LD	HL,BUFFER
3219   1282 CD 72 13    	CALL	SNDMSG
3220   1285 C9          	RET
3221   1286             ;----------------------------------------
3222   1286             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
3223   1286             ;----------------------------------------
3224   1286             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
3225   1286             ; ENTRY OTHER THAN HEXADECIMAL KEYS
3226   1286             ;
3227   1286             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
3228   1286             ;ENTRY : A= ASCII 0-9,A-F
3229   1286             ;EXIT  : CARRY =  1
3230   1286             ;          A= HEX 0-F IN LSN
3231   1286             ;      : CARRY = 0
3232   1286             ;          A= OUT OF RANGE CHARACTER & 7FH
3233   1286             ; A AND F REGISTERS MODIFIED
3234   1286             ;
3235   1286 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
3236   1288 FE 30       	CP	'0'
3237   128A 38 23       	JR	C,AC2HEX4	;LESS THAN 0
3238   128C FE 3A       	CP	3AH
3239   128E 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
3240   1290 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
3241   1292 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
3242   1293 C9          	RET
3243   1294             ;
3244   1294 FE 41       AC2HEX2	CP	'A'
3245   1296 38 17       	JR	C,AC2HEX4	;LESS THAN A
3246   1298 FE 47       	CP	47H
3247   129A 30 04       	JR	NC,AC2HEX3	;MORE THAN F
3248   129C D6 07       	SUB	07H	;CONVERT TO NYBBLE
3249   129E 18 F2       	JR	AC2HEX1
3250   12A0             	
3251   12A0 FE 61       AC2HEX3	CP	'a'
3252   12A2 DA AF 12    	JP	C,AC2HEX4	;LESS THAN a
3253   12A5 FE 67       	CP	67H
3254   12A7 30 06       	JR	NC,AC2HEX4	;MORE THAN f
3255   12A9 E6 DF       	AND 0DFH
3256   12AB D6 07       	SUB 07H	;CONVERT TO NYBBLE
3257   12AD 18 E3       	JR	AC2HEX1
3258   12AF E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
3259   12B1 C9          	RET
3260   12B2             ;--------------------------
3261   12B2             ; D DISPLAY MEMORY LOCATION
3262   12B2             ;--------------------------
3263   12B2 CD 7B 10    DSPLAY	CALL	OUTSP	;A SPACE
3264   12B5 CD 4B 10    	CALL	GETCHR
3265   12B8 D8          	RET	C
3266   12B9 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3267   12BC CD 4B 10    	CALL	GETCHR
3268   12BF D8          	RET	C
3269   12C0 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3270   12C3             ;
3271   12C3             ; WAIT FOR CR OR ESC
3272   12C3             ;
3273   12C3 CD 45 10    DPLAY1	CALL	WAITC
3274   12C6 FE 1B       	CP	ESC
3275   12C8 C8          	RET	Z
3276   12C9 FE 0D       	CP	CR
3277   12CB 20 F6       	JR	NZ,DPLAY1
3278   12CD CD 80 10    	CALL	TXCRLF	;NEWLINE
3279   12D0             ;
3280   12D0             ; DISPLAY THE LINE
3281   12D0             ;
3282   12D0 CD E3 12    DPLAY2 CALL  DPLINE
3283   12D3 ED 53 12 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
3284   12D7             ;
3285   12D7             ; DISPLAY MORE LINES OR EXIT
3286   12D7             ;
3287   12D7 CD 45 10    DPLAY3	CALL	WAITC
3288   12DA FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
3289   12DC 28 F2       	JR	Z,DPLAY2
3290   12DE FE 1B       	CP	ESC	;ESC EXITS
3291   12E0 20 F5       	JR	NZ,DPLAY3
3292   12E2 C9          	RET
3293   12E3             ;-------------------------
3294   12E3             ; DISPLAY A LINE OF MEMORY
3295   12E3             ;-------------------------
3296   12E3 ED 5B 12 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
3297   12E7 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3298   12EA             ;
3299   12EA             ; DISPLAY THE ADDRESS
3300   12EA             ;
3301   12EA CD 42 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3302   12ED CD 26 13    	CALL	SPCBUF
3303   12F0             ;
3304   12F0             ; DISPLAY 16 BYTES
3305   12F0             ;
3306   12F0 06 10       	LD	B,16
3307   12F2 1A          DLINE1	LD	A,(DE)
3308   12F3 CD 47 13    	CALL	BYTASC
3309   12F6 CD 26 13    	CALL	SPCBUF
3310   12F9 13          	INC	DE
3311   12FA 10 F6       	DJNZ	DLINE1
3312   12FC CD 26 13    	CALL	SPCBUF
3313   12FF             ;
3314   12FF             ; NOW DISPLAY THE ASCII CHARACTER
3315   12FF             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3316   12FF             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3317   12FF             ;
3318   12FF ED 5B 12 3F 	LD	DE,(ADDR)
3319   1303 06 10       	LD	B,16
3320   1305 1A          DLINE2	LD	A,(DE)
3321   1306 FE 20       	CP	20H
3322   1308 38 07       	JR	C,DOT
3323   130A FE 7F       	CP	7FH
3324   130C 30 03       	JR	NC,DOT
3325   130E C3 13 13    	JP	NDOT
3326   1311 3E 2E       DOT	LD	A,'.'
3327   1313 CD 28 13    NDOT	CALL	INBUF
3328   1316 13          	INC	DE
3329   1317 10 EC       	DJNZ	DLINE2
3330   1319             ;
3331   1319             ;TERMINATE AND DISPLAY STRING
3332   1319             ;
3333   1319 CD 2B 13    	CALL	BCRLF
3334   131C 3E 00       	LD	A,00H
3335   131E 77          	LD	(HL),A
3336   131F 21 00 3E    	LD	HL,BUFFER
3337   1322 CD 72 13    	CALL	SNDMSG
3338   1325 C9          	RET
3339   1326             ;
3340   1326             ; PUT A SPACE IN THE BUFFER
3341   1326             ;
3342   1326 3E 20       SPCBUF	LD	A,' '
3343   1328 77          INBUF	LD	(HL),A
3344   1329 23          	INC	HL
3345   132A C9          	RET
3346   132B             ;
3347   132B             ; PUT A CR LF IN THE BUFFER
3348   132B             ;
3349   132B 3E 0D       BCRLF	LD	A,CR
3350   132D CD 28 13    	CALL	INBUF
3351   1330 3E 0A       	LD	A,LF
3352   1332 CD 28 13    	CALL	INBUF
3353   1335 C9          	RET
3354   1336             ;----------------------
3355   1336             ; SEND ASCII HEX VALUES
3356   1336             ;----------------------
3357   1336             ;
3358   1336             ; OUTPUT THE 4 BYTE, WRDOUT
3359   1336             ; THE 2 BYTE, BYTOUT
3360   1336             ; OR THE SINGLE BYTE, NYBOUT
3361   1336             ; ASCII STRING AT HL TO THE SERIAL PORT
3362   1336             ;
3363   1336 CD 39 13    WRDOUT	CALL	BYTOUT
3364   1339 CD 3C 13    BYTOUT	CALL	NYBOUT
3365   133C 7E          NYBOUT	LD	A,(HL)
3366   133D CD 95 14    	CALL	TXBUF
3367   1340 23          	INC	HL
3368   1341 C9          	RET
3369   1342             ;----------------
3370   1342             ;CONVERT TO ASCII
3371   1342             ;----------------
3372   1342             ;
3373   1342             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3374   1342             ;
3375   1342             ;        ENTRY :  WRDASC           DE = WORD TO CONVERT
3376   1342             ;                 BYTASC            A = BYTE TO CONVERT
3377   1342             ;                 NYBASC (B3-B0) OF A = NYBBLE TO CONVERT
3378   1342             ;                  HL = CHARACTER BUFFER ADDRESS
3379   1342             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3380   1342             ;                  AF IS MODIFIED
3381   1342             ;
3382   1342 7A          WRDASC	LD	A,D	;CONVERT AND
3383   1343 CD 47 13    	CALL	BYTASC	;OUTPUT D
3384   1346 7B          	LD	A,E	;THEN E
3385   1347             ;
3386   1347             ;CONVERT A BYTE TO ASCII 
3387   1347             ;
3388   1347 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3389   1348 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3390   1349 0F          	RRCA
3391   134A 0F          	RRCA
3392   134B 0F          	RRCA
3393   134C CD 50 13    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3394   134F F1          	POP	AF	;RESTORE LOW NYBBLE
3395   1350             ;
3396   1350             ; CONVERT A NYBBLE TO ASCII
3397   1350             ;
3398   1350 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3399   1352 C6 90       	ADD	A,90H	;CONVERT TO
3400   1354 27          	DAA	;ASCII
3401   1355 CE 40       	ADC	A,40H
3402   1357 27          	DAA
3403   1358             ;
3404   1358             ; SAVE IN STRING
3405   1358             ; ADD A CHARACTER TO BUILD THE STRING
3406   1358             ;
3407   1358 77          INSBUF	LD	(HL),A
3408   1359 23          	INC	HL
3409   135A AF          	XOR	A	;CLEAR A
3410   135B 77          	LD	(HL),A	;TERMINATE THE STRING
3411   135C C9          	RET
3412   135D             ;------------------------------------------------------
3413   135D             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3414   135D             ;------------------------------------------------------
3415   135D             ;
3416   135D             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3417   135D             ;                      INTO A STRING OF ASCII
3418   135D             ;                      ONES AND ZEROES.
3419   135D             ;
3420   135D             ;           ENTRY :  A = BINARY TO CONVERT
3421   135D             ;                   HL = CHARACTER BUFFER ADDRESS
3422   135D             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3423   135D             ;
3424   135D             ;        MODIFIES : NONE
3425   135D             ;
3426   135D C5          BITASC PUSH  BC
3427   135E 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3428   1360 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3429   1362 20 05       	JR	NZ,BTASC3
3430   1364 0E 30       	LD	C,30H	;IT'S A ZERO
3431   1366 71          BTASC2	LD	(HL),C
3432   1367 18 03       	JR	BTASC4
3433   1369 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3434   136B 71          	LD	(HL),C
3435   136C 23          BTASC4	INC	HL
3436   136D 17          	RLA
3437   136E 10 F0       	DJNZ	BTASC1	;NEXT BIT
3438   1370 C1          	POP	BC
3439   1371 C9          	RET
3440   1372             ;-----------------------------------------
3441   1372             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3442   1372             ;-----------------------------------------
3443   1372             ;
3444   1372             ; SENDS A ZERO TERMINATED STRING OR 
3445   1372             ; 255 CHARACTERS MAX. OUT THE SERIAL PORT
3446   1372             ;
3447   1372             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3448   1372             ;      EXIT  : SAME AS ENTRY
3449   1372             ;
3450   1372 C5          SNDMSG	PUSH	BC
3451   1373 E5          	PUSH	HL
3452   1374 F5          	PUSH	AF
3453   1375 06 FF       	LD	B,255	;255 CHARS MAX
3454   1377 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3455   1378 FE 00       	CP	00H	;ZERO TERMINATOR?
3456   137A 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3457   137C CD 95 14    	CALL	TXBUF	;TRANSMIT THE CHAR
3458   137F 23          	INC	HL
3459   1380 10 F5       	DJNZ	SDMSG1	;255 CHARS MAX!
3460   1382             	
3461   1382 F1          SDMSG2	POP	AF
3462   1383 E1          	POP	HL	
3463   1384 C1          	POP	BC	
3464   1385 C9          	RET
3465   1386             ;----------------------
3466   1386             ; SERIAL SINGLE STEPPER
3467   1386             ;----------------------
3468   1386 E1          SSSTEP	POP	HL	;GET HL BACK
3469   1387 F5          	PUSH	AF	;SAVE AF FOR LATER
3470   1388 22 49 3F    	LD	(TMPHL),HL
3471   138B ED 53 47 3F 	LD	(TMPDE),DE
3472   138F ED 43 45 3F 	LD	(TMPBC),BC
3473   1393 DD 22 4B 3F 	LD	(TMPIX),IX
3474   1397 FD 22 4D 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3475   139B E1          	POP	HL	;GET AF BACK
3476   139C 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
3477   139F E1          	POP	HL	;GET PC RETURN ADDRESS
3478   13A0 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
3479   13A3 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3480   13A7             ;
3481   13A7 CD E1 13    	CALL	DISREG	;DISPLAY REGISTERS
3482   13AA 21 00 3E    	LD	HL,BUFFER
3483   13AD CD 72 13    	CALL	SNDMSG
3484   13B0             ; WE HAVE DISPLAYED THE REGISTER CONTENTS NOW
3485   13B0             ; SPACE KEY CONTINUES EXECUTION, ESCAPE KEY
3486   13B0             ; RETURNS TO SERIAL MONITOR
3487   13B0             ;
3488   13B0 CD 45 10    SSTEP3	CALL	WAITC
3489   13B3 FE 20       	CP	' '	;IS IT SPACE
3490   13B5 28 08       	JR	Z,SSTEP4
3491   13B7 FE 1B       	CP	ESC	;ESC QUITS
3492   13B9 20 F5       	JR	NZ,SSTEP3
3493   13BB             ;
3494   13BB             ; RETURN TO MONITOR
3495   13BB             ;
3496   13BB FB          	EI	;RE-ENABLE INTERRUPTS
3497   13BC C3 29 10    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3498   13BF             ;
3499   13BF             ; RETURN TO PROGRAM
3500   13BF             ;
3501   13BF ED 7B 4F 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3502   13C3 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
3503   13C6 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3504   13C7 2A 43 3F    	LD	HL,(TMPAF)
3505   13CA E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3506   13CB FD 2A 4D 3F 	LD	IY,(TMPIY)
3507   13CF DD 2A 4B 3F 	LD	IX,(TMPIX)
3508   13D3 ED 4B 45 3F 	LD	BC,(TMPBC)
3509   13D7 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3510   13DB F1          	POP	AF	;RESTORE AF
3511   13DC 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
3512   13DF FB          	EI		;RE-ENABLE INTERRUPTS
3513   13E0 C9          	RET		;AND RETURN TO PROGRAM
3514   13E1             ;----------------------------
3515   13E1             ; DISPLAY THE SAVED REGISTERS
3516   13E1             ;----------------------------
3517   13E1 CD 45 14    DISREG	CALL	PRNTSZ
3518   13E4 0D 0A 50 43 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3518   13E8 20 20 20 41 
3518   13EC 46 20 20 20 
3518   13F0 42 43 20 20 
3518   13F4 20 44 45 20 
3518   13F8 20 20 48 4C 
3518   13FC 20 20 20 49 
3518   1400 58 20 20 20 
3518   1404 49 59 20 20 
3518   1408 20 53 50 20 
3518   140C 20 20 53 5A 
3518   1410 2D 48 2D 56 
3518   1414 4E 43 0D 0A 
3518   1418 00 
3519   1419             ;
3520   1419             ; DISPLAY THE REGISTERS
3521   1419             ;
3522   1419 06 08       	LD	B,08H
3523   141B 21 00 3E    	LD	HL,BUFFER
3524   141E DD 21 41 3F 	LD	IX,TMPPC
3525   1422 DD 7E 01    DSREG1	LD	A,(IX+1)
3526   1425 CD 47 13    	CALL	BYTASC
3527   1428 DD 7E 00    	LD	A,(IX+0)
3528   142B CD 47 13    	CALL	BYTASC
3529   142E DD 23       	INC	IX
3530   1430 DD 23       	INC	IX
3531   1432 3E 20       	LD	A,' '
3532   1434 77          	LD	(HL),A
3533   1435 23          	INC	HL
3534   1436 10 EA       	DJNZ	DSREG1
3535   1438             ;
3536   1438             ; DISPLAY THE FLAGS
3537   1438             ;
3538   1438 3A 43 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3539   143B CD 5D 13    	CALL	BITASC	;SHOW THEM AS BITS
3540   143E             
3541   143E CD 2B 13    SZCRLF CALL  BCRLF
3542   1441 3E 00       	LD	A,0
3543   1443 77          	LD	(HL),A	;TERMINATE THE STRING
3544   1444 C9          	RET
3545   1445             ;-----------------------------------------
3546   1445             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3547   1445             ;-----------------------------------------
3548   1445             ; PUT THE STRING IN THE CODE LIKE THE EXAMPLE BELOW
3549   1445             ; THE ROUTINE SENDS THE STRING FROM THE RETURN ADDRESS,
3550   1445             ; (THE ADDRESS PUT ON THE STACK AS THE RETURN ADDRESS FROM THE 'CALL PRNTSZ') TO THE ZERO TERMINATOR.
3551   1445             ; THEN JUMPS TO THE 'NEXT INSTRUCTION ADDRESS' (AFTER THE ZERO TERMINATOR) TO RESUME THE PROGRAM. 
3552   1445             ;
3553   1445             ;      CALL PRNTSZ
3554   1445             ;      .DB  "STRING TO PRINT",0
3555   1445             ;      NEXT INSTRUCTION
3556   1445             ;
3557   1445             PRNTSZ	
3558   1445 E1          	POP	HL	;RETURN ADDRESS IS START OF STRING
3559   1446             PRTSZ1	
3560   1446 7E          	LD	A,(HL)	;GET CHARACTER
3561   1447 B7          	OR	A
3562   1448 CA 51 14    	JP	Z,PRTSZ2	;RETURN IF CHAR = 0
3563   144B CD 95 14    	CALL	TXBUF	;SEND IT
3564   144E 23          	INC	HL	;POINT TO NEXT CHARACTER
3565   144F 18 F5       	JR	PRTSZ1	;AND DO IT AGAIN
3566   1451 23          PRTSZ2	INC	HL
3567   1452 E9          	JP	(HL)	;RETURN TO ADDRESS AFTER ZERO TERMINATOR
3568   1453             ;----------------------------------------------
3569   1453             ; MC6850 INTERRUPT DRIVEN BUFFERED SERIAL COMMS
3570   1453             ;----------------------------------------------
3571   1453             ;
3572   1453             ;CLOCK DIVISOR
3573   1453             ;
3574   1453             MRESET	.EQU  03H	;MASTER RESET THE ACIA
3575   1453             DIV0	.EQU  00H	;CLOCK/1
3576   1453             DIV16	.EQU  01H	;CLOCK/16
3577   1453             DIV64	.EQU  02H	;CLOCK/64
3578   1453             ;---------------------
3579   1453             ; COMMUNICATION FORMAT
3580   1453             ;---------------------
3581   1453             F7E2	.EQU	00H	;7 DATA BITS, EVEN PARITY, 2 STOP BITS (1+7+1+2= 11 BITS)
3582   1453             F7O2	.EQU	04H	;7 DATA BITS, ODD PARITY, 2 STOP BITS (1+7+1+2= 11 BITS)
3583   1453             F7E1	.EQU	08H	;7 DATA BITS, EVEN PARITY, 1 STOP BIT (1+7+1+1= 10 BITS)
3584   1453             F7O1	.EQU	0CH	;7 DATA BITS, ODD PARITY, 1 STOP BIT (1+7+1+1= 10 BITS)
3585   1453             F8N2	.EQU	10H	;8 DATA BITS, NO PARITY, 2 STOP BITS (1+8+0+2= 11 BITS)
3586   1453             F8N1	.EQU	14H	;8 DATA BITS, NO PARITY, 1 STOP BIT (1+8+0+1= 10 BITS)
3587   1453             F8E1	.EQU	18H	;8 DATA BITS, EVEN PARITY, 1 STOP BIT (1+8+1+1= 11 BITS)
3588   1453             F8O1	.EQU	1CH	;8 DATA BITS, ODD PARITY,1 STOP BIT (1+8+1+1= 11 BITS)
3589   1453             ;--------------------
3590   1453             ; TRANSMITTER CONTROL
3591   1453             ;--------------------
3592   1453             RTSLID .EQU	00H	;RTS LOW, TRANSMIT INTERRUPT DISABLED
3593   1453             RTSLIE .EQU	20H	;RTS LOW, TRANSMIT INTERRUPT ENABLED
3594   1453             RTSHID .EQU	40H	;RTS HIGH, TRANSMIT INTERRUPT DISABLED
3595   1453             RTSLIDB .EQU  60H	;RTS LOW, TRANSMIT INTERRUPT DISABLED AND 'BREAK' TRANSMITTED
3596   1453             ;
3597   1453             ; RECEIVER INTERRUPT
3598   1453             ;
3599   1453             RIE	.EQU	80H	;RECEIVER INTERRUPT ENABLED
3600   1453             ;---------------------
3601   1453             ; STATUS REGISTER BITS
3602   1453             ;---------------------
3603   1453             RDRF	.EQU	0	;RECEIVE DATA REGISTER FULL
3604   1453             TDRE	.EQU	1	;TRANSMIT DATA REGISTER EMPTY
3605   1453             DCD	.EQU	2	;DATA CARRIER DETECT
3606   1453             CTS	.EQU	3	;CLEAR TO SEND
3607   1453             FE	.EQU	4	;FRAMING ERROR
3608   1453             OVRN	.EQU	5	;OVERRUN
3609   1453             PE	.EQU	6	;PARITY ERROR
3610   1453             IRQ	.EQU	7	;INTERRUPT REQUEST
3611   1453             ;-------------------------------
3612   1453             ;INITIALISE THE ACIA AND BUFFERS
3613   1453             ;-------------------------------
3614   1453             SERINIT
3615   1453 CD 5D 14    	CALL	SERRST
3616   1456 CD 62 14    	CALL	SERVEC
3617   1459 CD 69 14    	CALL	SEREN
3618   145C C9          	RET
3619   145D             ;RESET THE ACIA
3620   145D             SERRST
3621   145D 3E 03       	LD	A,MRESET
3622   145F D3 4E       	OUT	(CONTROL),A	;RESET THE ACIA
3623   1461 C9          	RET
3624   1462             ; POINT THE INTERRUPT VECTOR AT THE SERIAL INTERRUPT ROUTINE
3625   1462             SERVEC
3626   1462 21 ED 14    	LD	HL,SERISR
3627   1465 22 5B 3F    	LD	(RST38),HL
3628   1468 C9          	RET
3629   1469             ;INITIALISE THE ACIA AND SERIAL BUFFERS
3630   1469             SEREN
3631   1469             ;
3632   1469             ;INITIALISE THE SERIAL BUFFERS
3633   1469             ;
3634   1469 CD 7B 14    	CALL	TXFLUSH
3635   146C CD 88 14    	CALL	RXFLUSH
3636   146F             ;
3637   146F             ; INITIALISE THE ACIA; 8 BIT WORD, NO PARITY 2 STOP, DIVIDE BY 64 FOR 115200 BAUD ( 7.3728 MHZ CRYSTAL)
3638   146F             ; ENABLE THE RECEIVE INTERRUPT
3639   146F             ; DISABLE THE TRANSMIT INTERRUPT UNTIL WE HAVE CHARACTERS TO SEND
3640   146F             ;
3641   146F 3E 92       	LD	A,RTSLID+F8N2+DIV64+RIE
3642   1471 D3 4E       	OUT	(CONTROL),A
3643   1473 C9          	RET
3644   1474             ;--------------------------------
3645   1474             ;ANY CHARS IN THE RECEIVE BUFFER?
3646   1474             ;--------------------------------
3647   1474 F3          ANYCHR	DI
3648   1475 3A 68 3F    	LD	A,(RXCOUNT)	;GET THE RECEIVED CHAR COUNT
3649   1478 B7          	OR	A	;SET THE FLAGS
3650   1479 FB          	EI
3651   147A C9          	RET
3652   147B             ;---------------------
3653   147B             ;FLUSH TRANSMIT BUFFER
3654   147B             ;---------------------
3655   147B             ; CLEAR THE POINTERS TO EMPTY THE BUFFER
3656   147B F3          TXFLUSH	DI
3657   147C AF          	XOR	A
3658   147D 32 63 3F    	LD	(TXHEAD),A
3659   1480 32 64 3F    	LD	(TXTAIL),A	;HEAD = TAIL = BUFFER IS EMPTY
3660   1483 32 65 3F    	LD	(TXCOUNT),A	;CLEAR THE CHARACTER COUNT
3661   1486 FB          	EI
3662   1487 C9          	RET
3663   1488             ;--------------------
3664   1488             ;FLUSH RECEIVE BUFFER
3665   1488             ;--------------------
3666   1488             ; CLEAR THE POINTERS TO EMPTY THE BUFFER
3667   1488 F3          RXFLUSH	DI
3668   1489 AF          	XOR	A
3669   148A 32 66 3F    	LD	(RXHEAD),A
3670   148D 32 67 3F    	LD	(RXTAIL),A	;HEAD = TAIL = BUFFER IS EMPTY
3671   1490 32 68 3F    	LD	(RXCOUNT),A	;CLEAR THE CHARACTER COUNT
3672   1493 FB          	EI
3673   1494 C9          	RET
3674   1495             ;---------------------------------------
3675   1495             ; PUT A CHARACTER IN THE TRANSMIT BUFFER
3676   1495             ;---------------------------------------
3677   1495             ; ENTRY: CHARACTER IN A
3678   1495             ; EXIT: CHARACTER IN A
3679   1495             ; IF UNSUCCESSFUL, CARRY SET
3680   1495             ; IF SUCCESSFUL, CARRY CLEAR
3681   1495             ; NO OTHER REGISTERS MODIFIED
3682   1495             ;
3683   1495             TXBUF
3684   1495 F3          	DI	;NO INTERRUPTS WHILE USING THE BUFFER
3685   1496 C5          	PUSH	BC
3686   1497 E5          	PUSH	HL
3687   1498 47          	LD	B,A	;SAVE BYTE TO TRANSMIT
3688   1499 3A 64 3F    	LD	A,(TXTAIL)
3689   149C 6F          	LD	L,A
3690   149D 3A 63 3F    	LD	A,(TXHEAD)	;IF HEAD+1 = TAIL THE BUFFER IS FULL
3691   14A0 3C          	INC	A
3692   14A1 BD          	CP	L	;IS BUFFER FULL?
3693   14A2 20 04       	JR	NZ,TXBUF1
3694   14A4 78          	LD	A,B	;GET CHARACTER BACK
3695   14A5 37          	SCF	;SET CARRY FLAG
3696   14A6 18 1A       	JR	TXBUF2	;BUFFER IS FULL, RETURN
3697   14A8             ;
3698   14A8             ; PUT THE CHARACTER IN THE BUFFER
3699   14A8             ;
3700   14A8             TXBUF1
3701   14A8 3A 65 3F    	LD	A,(TXCOUNT)
3702   14AB 3C          	INC	A
3703   14AC 32 65 3F    	LD	(TXCOUNT),A	;INCREMENT THE CHARACTER COUNT
3704   14AF             ;
3705   14AF 21 00 3D    	LD	HL,TXBUFFER
3706   14B2 3A 63 3F    	LD	A,(TXHEAD)	;HEAD POINTER
3707   14B5 6F          	LD	L,A
3708   14B6 3C          	INC	A	;HEAD = HEAD + 1
3709   14B7 32 63 3F    	LD	(TXHEAD),A	;SAVE THE NEW HEAD POINTER
3710   14BA 78          	LD	A,B	;GET CHARACTER
3711   14BB 77          	LD	(HL),A	;PUT THE CHAR AT HEAD
3712   14BC             ;
3713   14BC             ; ENABLE THE TRANSMIT INTERRUPT
3714   14BC             ;
3715   14BC 3E B2       	LD	A,RTSLIE+F8N2+DIV64+RIE
3716   14BE D3 4E       	OUT	(CONTROL),A
3717   14C0 78          	LD	A,B	;CHARACTER SUCCESSFULLY INSERTED
3718   14C1 B7          	OR	A	;CLEAR CARRY FLAG
3719   14C2             TXBUF2
3720   14C2 E1          	POP	HL
3721   14C3 C1          	POP	BC
3722   14C4 FB          	EI	;RE-ENABLE INTERRUPTS AND RETURN
3723   14C5 C9          	RET
3724   14C6             ;----------------------------------------
3725   14C6             ; GET A CHARACTER FROM THE RECEIVE BUFFER
3726   14C6             ;----------------------------------------
3727   14C6             ; ENTRY: NONE
3728   14C6             ; EXIT: 
3729   14C6             ; IF SUCCESSFUL, CARRY CLEAR
3730   14C6             ; A= RECEIVED CHARACTER
3731   14C6             ; IF UNSUCCESSFUL, CARRY SET
3732   14C6             ; A= 0
3733   14C6             ; NO OTHER REGISTERS MODIFIED
3734   14C6             ;
3735   14C6             RXBUF
3736   14C6 F3          	DI	;NO INTERRUPTS WHILE USING THE BUFFER
3737   14C7 E5          	PUSH	HL
3738   14C8 3A 67 3F    	LD	A,(RXTAIL)
3739   14CB 6F          	LD	L,A
3740   14CC 3A 66 3F    	LD	A,(RXHEAD)	;IF HEAD = TAIL THE BUFFER IS EMPTY
3741   14CF BD          	CP	L	;IS BUFFER EMPTY?
3742   14D0 20 04       	JR	NZ,RXBUF1
3743   14D2 AF          	XOR	A	;BUFFER IS EMPTY - CLEAR A
3744   14D3 37          	SCF	;SET CARRY FLAG
3745   14D4 18 14       	JR	RXBUF2	;AND RETURN
3746   14D6             ;
3747   14D6             ; GET A CHARACTER FROM THE BUFFER
3748   14D6             ;
3749   14D6             RXBUF1
3750   14D6 3A 68 3F    	LD	A,(RXCOUNT)
3751   14D9 3D          	DEC	A
3752   14DA 32 68 3F    	LD	(RXCOUNT),A	;DECREMENT THE CHARACTER COUNT
3753   14DD             ;
3754   14DD 21 00 3C    	LD	HL,RXBUFFER
3755   14E0 3A 67 3F    	LD	A,(RXTAIL)	;TAIL POINTER
3756   14E3 6F          	LD	L,A
3757   14E4 3C          	INC	A	;TAIL = TAIL+1
3758   14E5 32 67 3F    	LD	(RXTAIL),A	;SAVE THE NEW TAIL POINTER
3759   14E8 7E          	LD	A,(HL)	;GET THE CHARACTER FROM TAIL
3760   14E9 B7          	OR	A		;CLEAR CARRY FLAG
3761   14EA             RXBUF2
3762   14EA E1          	POP	HL
3763   14EB FB          	EI	;RE-ENABLE INTERRUPTS AND RETURN
3764   14EC C9          	RET
3765   14ED             ;-----------------------
3766   14ED             ; ACIA INTERRUPT ROUTINE
3767   14ED             ;-----------------------
3768   14ED             SERISR
3769   14ED DB 4E       	IN	A,(STATUS)
3770   14EF CB 7F       	BIT	IRQ,A	;DID THE ACIA CAUSE THE INTERRUPT?
3771   14F1 28 08       	JR	Z,ISREND	;NOT THE ACIA
3772   14F3             
3773   14F3 CB 47       	BIT	RDRF,A	;RECEIVE DATA REGISTER FULL?
3774   14F5 20 08       	JR	NZ,RXINTR
3775   14F7             
3776   14F7 CB 4F       	BIT	TDRE,A	;TRANSMIT DATA REGISTER EMPTY?
3777   14F9 20 2E       	JR	NZ,TXINTR
3778   14FB             ;
3779   14FB             ; RESTORE REGISTERS AND RETURN FROM INTERRUPT
3780   14FB             ; LINK OTHER ISR'S HERE...
3781   14FB             ISREND
3782   14FB D9          	EXX
3783   14FC 08          	EX	AF,AF'
3784   14FD FB          	EI
3785   14FE C9          	RET
3786   14FF             ;
3787   14FF             ; RECEIVE DATA REGISTER FULL (RDRF) HANDLER
3788   14FF             ;
3789   14FF             RXINTR
3790   14FF 3A 67 3F    	LD	A,(RXTAIL)
3791   1502 6F          	LD	L,A
3792   1503 3A 66 3F    	LD	A,(RXHEAD)	;IF HEAD+1 = TAIL  THE BUFFER IS FULL
3793   1506 3C          	INC	A
3794   1507 BD          	CP	L	;IS BUFFER FULL?
3795   1508 20 06       	JR	NZ,RXINTA
3796   150A DB 4F       	IN	A,(TDR)	;BUFFER OVERFLOW - JUST READ AND DROP THE CHARACTER
3797   150C D9          	EXX
3798   150D 08          	EX	AF,AF'
3799   150E FB          	EI
3800   150F C9          	RET
3801   1510             RXINTA
3802   1510 21 00 3C    	LD	HL,RXBUFFER
3803   1513 3A 66 3F    	LD	A,(RXHEAD)	;HEAD POINTER
3804   1516 6F          	LD	L,A
3805   1517 3C          	INC	A	;HEAD = HEAD+1
3806   1518 32 66 3F    	LD	(RXHEAD),A		;SAVE THE NEW HEAD POINTER
3807   151B DB 4F       	IN	A,(TDR)
3808   151D 77          	LD	(HL),A	;PUT THE CHAR AT HEAD
3809   151E             ;
3810   151E             ;INCREMENT THE CHARACTER COUNT IN THE RECEIVE BUFFER
3811   151E             ;
3812   151E 3A 68 3F    	LD	A,(RXCOUNT)
3813   1521 3C          	INC	A
3814   1522 32 68 3F    	LD	(RXCOUNT),A
3815   1525 D9          	EXX
3816   1526 08          	EX	AF,AF'
3817   1527 FB          	EI
3818   1528 C9          	RET
3819   1529             ;-----------------------------------
3820   1529             ;TRANSMIT DATA REGISTER EMPTY (TDRE)
3821   1529             ;-----------------------------------
3822   1529             TXINTR
3823   1529 3A 63 3F    	LD	A,(TXHEAD)
3824   152C 6F          	LD	L,A
3825   152D 3A 64 3F    	LD	A,(TXTAIL)	;IF TAIL+1 = HEAD  ONLY ONE CHAR IN BUFFER
3826   1530 3C          	INC	A
3827   1531 BD          	CP	L
3828   1532 20 04       	JR	NZ,TXINTA
3829   1534             ;
3830   1534             ;DISABLE THE TRANSMIT INTERRUPT
3831   1534             ;
3832   1534 3E 92       	LD	A,RTSLID+F8N2+DIV64+RIE
3833   1536 D3 4E       	OUT	(CONTROL),A
3834   1538             ;
3835   1538             ; OUTPUT THE CHARACTER
3836   1538             ;
3837   1538             TXINTA
3838   1538 21 00 3D    	LD	HL,TXBUFFER
3839   153B 3A 64 3F    	LD	A,(TXTAIL);TAIL POINTER
3840   153E 6F          	LD	L,A
3841   153F 3C          	INC	A	;TAIL = TAIL + 1
3842   1540 32 64 3F    	LD	(TXTAIL),A	;SAVE THE NEW TAIL POINTER
3843   1543 7E          	LD	A,(HL)	;GET THE CHARACTER FROM TAIL
3844   1544 D3 4F       	OUT	(TDR),A
3845   1546             ;
3846   1546             ;DECREMENT THE CHARACTER COUNT IN THE TRANSMIT BUFFER
3847   1546             ;
3848   1546 3A 65 3F    	LD	A,(TXCOUNT)
3849   1549 3D          	DEC	A
3850   154A 32 65 3F    	LD	(TXCOUNT),A
3851   154D D9          	EXX
3852   154E 08          	EX	AF,AF'
3853   154F FB          	EI
3854   1550 C9          	RET
3855   1551             	.END
3856   1551             



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F12      ADRESS        3F3B      ADDKEY        0318      
ADMODE        0398      ALTMAP        04B6      ASCHEX        085A      
ASCHX1        0860      ADDRA         08E2      ADDRB         08F4      
ASC2HEX       1286      AC2HEX1       1292      AC2HEX2       1294      
AC2HEX3       12A0      AC2HEX4       12AF      ANYCHR        1474      
BOTRAM        2000      BUFFER        3E00      B300          0220      
B1200         0080      B2400         003F      B4800         001B      
B9600         000B      BAUD          3F21      BLKSRT        3F29      
BLKEND        3F2B      BLKDST        3F2D      BEEP          0609      
BEEP1         0619      BEEP2         0620      BEEP3         0630      
BITIME        08D5      BITIM1        08DA      BLKMVE        0906      
BLKMV1        0925      BLKMV2        0928      BLKMV3        093A      
BLKSUM        095C      BLKSM1        0978      BRANCH        099A      
BRNCH1        09BC      BRNCH2        09C7      BCRLF         132B      
BYTOUT        1339      BYTASC        1347      BITASC        135D      
BTASC1        1360      BTASC2        1366      BTASC3        1369      
BTASC4        136C      CONTROL       004E      CALMDE        3F17      
COUNT         3F27      CONBYT        03FF      CONVHI        040C      
CONVLO        0410      CLRBUF        0460      CLRBF1        0467      
CHKSUM        051B      CHKSM1        051F      CANCEL        0777      
CANCL1        077A      CHKKEY        0B59      CHKKY1        0B67      
CHKKY2        0B90      CHKKY3        0B9D      CHKKY4        0BA5      
CHKKY5        0BAC      CHKKY6        0BBA      CHKKY7        0BBC      
CHKKY8        0BC1      CHKKY9        0BE6      CHKKYA        0BF4      
CLKEXT        0D6E      CALKEY        0D78      CR            000D      
CTS           0003      DISPLY        0084      DATA          3F14      
DISBUF        3F31      DALLAS        3F60      DECKEY        0350      
DECKY1        0353      DECKY2        0360      DECKY3        037B      
DISADD        03E1      DISBYT        03F6      DECSTP        0726      
DECSP1        0736      DELONE        0C6A      DELON1        0C73      
DELON2        0C75      DSPLAY        12B2      DPLAY1        12C3      
DPLAY2        12D0      DPLAY3        12D7      DPLINE        12E3      
DLINE1        12F2      DLINE2        1305      DOT           1311      
DISREG        13E1      DSREG1        1422      DIV0          0000      
DIV16         0001      DIV64         0002      DCD           0002      
EDTKEY        0B29      ENDKEY        0B50      ESC           001B      
EXIT          1269      FUNTBL        3F15      FUNJMP        3F2F      
FUNKEY        075C      FUNKY1        075F      FUNKY2        076E      
FUNLST        0781      FUNFUN        07B5      F7E2          0000      
F7O2          0004      F7E1          0008      F7O1          000C      
F8N2          0010      F8N1          0014      F8E1          0018      
F8O1          001C      FE            0004      GOEXEC        07B9      
GETBYT        082E      GETBT1        0838      GETBT2        084C      
GETCHR        104B      GETNYB        1060      GETOUT        1079      
GOJUMP        108A      GOJMP1        109B      HEXKEY        02E6      
HEXKY1        02F1      HEXKY2        02FF      HELP          10AC      
ISTACK        3C00      IO0           0080      IO1           0081      
IO2           0082      IO3           0083      IO7           0087      
INCKEY        0324      INCKY1        0327      INCKY2        0334      
INCKY3        034F      INDEXB        052B      INDEXW        0532      
INCSTP        0711      INCSP1        0721      INTELFN       07C3      
INTELH        07D2      INTEL1        07D6      INTELC        07DA      
INTEL2        0801      INTEL4        081C      INTHEX        1218      
ITHEX1        1252      INBUF         1328      INSBUF        1358      
IRQ           0007      ISREND        14FB      KEYBUF        0086      
KEYFN         0010      KEYAD         0011      KEYINC        0012      
KEYDEC        0013      KEYTIM        3F23      KEYDEL        3F3D      
KBDTYP        03BE      KYBSZ         03D7      KYBDBF        03E0      
KEYMAP        04A2      KEYIN         04E4      KEYREL        04EE      
KEYRL1        04EF      LENGTH        05CE      LOSE          0C0D      
LF            000A      MODE          3F39      MAIN          0283      
MAIN1         0294      MAIN2         0297      MENLST        02A9      
MONNAME       03A9      MENU          04F8      MENU1         0506      
MENU2         0512      MUL16         0553      MULT          055C      
MULT1         0562      MUSIC         056A      MSDELAY       0873      
MSDEL1        0876      MOVE          0940      MONMENU       102F      
MODIFY        11C5      MDIFY1        11D6      MDIFY2        1211      
MRESET        0003      NMIRET        006B      NAMESZ        03C5      
NAMEBF        03CB      NXTBIT        088E      NDOT          1313      
NYBOUT        133C      NYBASC        1350      ONTIM         3F37      
OFTIM         3F38      ONESEC        0F87      ONESC1        0F90      
OUTSP         107B      OVRN          0005      PCBTYP        03B0      
PAUSE         057B      PERIOD        05B6      PLAY1         09DF      
PLAY2         09EE      PLAY3         09FD      PATERN        0EE7      
PRNTSZ        1445      PRTSZ1        1446      PRTSZ2        1451      
PE            0006      RXBUFFER      3C00      RAMEND        3800      
RAMSRT        2000      RDR           004F      REGPNT        3F3F      
RST08         3F51      RST10         3F53      RST18         3F55      
RST20         3F57      RST28         3F59      RST38         3F5B      
RST66         3F5D      RAMSUM        3F5F      RXHEAD        3F66      
RXTAIL        3F67      RXCOUNT       3F68      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
REMAP         0496      RAND          053B      REGTBL        0671      
REGNAM        06AE      REGKEY        06BE      RETMON        06E5      
RETPGM        06EF      RXDATA        08A8      RXDAT1        08AA      
RXDAT2        08C2      RELSQR        0C27      RLTEST        0C36      
RLSTEP        0C3C      RELSR1        0C42      RELSR2        0C53      
RELSR3        0C5B      RELSR4        0C60      RWATCH        0E9D      
RWACH1        0EA9      RWACH2        0EB2      RWACH3        0EC4      
REGSTR        127C      RTSLID        0000      RTSLIE        0020      
RTSHID        0040      RTSLIDB       0060      RIE           0080      
RDRF          0000      RXFLUSH       1488      RXBUF         14C6      
RXBUF1        14D6      RXBUF2        14EA      RXINTR        14FF      
RXINTA        1510      SCAN          0085      STATUS        004E      
SPSAVE        3F10      SWREG0        3F19      SWREG1        3F1A      
SWREG2        3F1B      SWREG3        3F1C      SWREG4        3F1D      
SWREG5        3F1E      SWREG6        3F1F      SWREG7        3F20      
SPTEMP        3F25      SYSERR        3F61      SYSCALL       006D      
STOP          0090      SYSJMP        0100      SETDP         039D      
SEGMNT        041F      SCAND         042F      SCAND1        0437      
SCAND2        0443      SCAND3        044E      SCANKEY       046F      
SCANKY1       047E      SCANKY2       048B      SCANKY3       0492      
SKEYIN        04CA      SKEYRL        04D7      SKEYL1        04D8      
STEP          0570      STEP1         0585      STEP2         058F      
STEP3         059A      SSTEP         0633      SSTEP1        065F      
SETREG        073C      SERINI        0863      SDELAY        094E      
SDELY1        0953      SWBEEP        0A0C      SECRET        0AA6      
SECRT1        0AE3      SECNUM        0AF2      SPLIT         0C14      
SCOPE         0C80      SCOPE2        0C95      SCOPE3        0C9D      
SCOPE4        0CAC      SCOPE5        0CB3      SCOPE6        0CBA      
SCOPE7        0CC1      SCOPE8        0CC8      SCOPE9        0CD1      
SCOPEA        0CDE      SEED          0CFF      SKATE         0D0E      
SKATE1        0D13      SKATE2        0D1B      SKATE3        0D24      
SETCLK        0DFF      SETCK1        0E05      SETCK2        0E34      
SETCK3        0E48      SETCK4        0E56      SETCK5        0E65      
SETCK6        0E6C      SETCK7        0E7C      SETCK8        0E83      
SCBUG         0F9D      START2        1005      START3        100A      
START4        1015      START5        101D      SSTOGL        11A8      
SPCBUF        1326      SNDMSG        1372      SDMSG1        1377      
SDMSG2        1382      SSSTEP        1386      SSTEP3        13B0      
SSTEP4        13BF      SZCRLF        143E      SERINIT       1453      
SERRST        145D      SERVEC        1462      SEREN         1469      
SERISR        14ED      TOPRAM        3FFF      TXBUFFER      3D00      
TDR           004F      TMPPC         3F41      TMPAF         3F43      
TMPBC         3F45      TMPDE         3F47      TMPHL         3F49      
TMPIX         3F4B      TMPIY         3F4D      TMPSP         3F4F      
TXHEAD        3F63      TXTAIL        3F64      TXCOUNT       3F65      
TRAP          008C      TYPESZ        03CC      TYPEBF        03D1      
TONE          05E7      TONE1         05F1      TONE2         05F8      
TONE3         05FB      TXDATA        087D      TRACE         09D1      
TUNE1         0A1A      TUNE2         0A5A      TIME          0D2F      
TIME1         0D47      TIMKEY        0D61      TXCRLF        1080      
TDRE          0001      TXFLUSH       147B      TXBUF         1495      
TXBUF1        14A8      TXBUF2        14C2      TXINTR        1529      
TXINTA        1538      UPDATE        037C      UPDBUF        0D87      
UPDBF1        0D8D      UPDBF2        0DAF      UPDBF3        0DD3      
UPDBF4        0DE5      UPDBF5        0DFE      VARBLS        3F00      
VARIDX        3F00      VARRAM        03A5      VERS          03B7      
VERSZ         03D2      VERBCD        03D6      WIN           0C04      
WWATCH        0F27      WWACH1        0F41      WWACH2        0F43      
WWACH3        0F5E      WWACH4        0F61      WWACH5        0F63      
WWACH6        0F74      WARM          1029      WAITC         1045      
WRDOUT        1336      WRDASC        1342      

tasm: Number of errors = 0
