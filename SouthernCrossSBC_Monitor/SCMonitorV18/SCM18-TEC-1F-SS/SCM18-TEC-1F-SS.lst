0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ;
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ; VERSION 1.8  03/2023  ADD 'UPDATE','SCBUG' TO SYSTEM CALLS
0028   0000             ;                       ADD A SYSTEM CALL TO RETURN THE BASE ADDRESS OF THE RAM VARIABLES
0029   0000             ;                       ADDED SYSTEM CALLS FOR STRINGS AND BIT FIELDS TO RETURN BOARD TYPE AND KEYBOARD TYPE
0030   0000             ;                       FIXED THE SERIAL GO ROUTINE SO IT RETURNS TO THE SERIAL MONITOR WHEN RET
0031   0000             ;                       REMOVE INCH/PUTCH SERIAL REDIRECTION
0032   0000             ;                       ADDED A BIT BANG SERIAL INITIALISATION SYSTEM CALL
0033   0000             ;                       TRAPPED UNUSED SYSTEM CALLS
0034   0000             ;                       CONVERT TEC-1F KEY CODES FOR KEYS ABOVE 'F' INTO SC KEY CODES
0035   0000             ;                       SCANKEY ROUTINE RETURNS SHIFT KEY STATUS WITH KEYPRESS
0036   0000             ;                       TURN ON THE SPEAKER AT STARTUP
0037   0000             ;
0038   0000             ;IF DEFINED THE TARGET IS THE TEC-1F ELSE SC
0039   0000             #DEFINE TEC-1F
0040   0000             ; IF DEFINED USE THE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0041   0000             ;#DEFINE 74C923
0042   0000             ;
0043   0000             ;---------------
0044   0000             ; RAM MEMORY MAP
0045   0000             ;---------------
0046   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0047   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0048   0000             ;
0049   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0050   0000             BUFFER	.EQU	VARBLS-0100H	;GENERAL PURPOSE BUFFER AREA
0051   0000             ISTACK	.EQU	BUFFER-0200H	;INITIAL MONITOR STACK
0052   0000             ;
0053   0000             RAMEND	.EQU	ISTACK-0400H	;END OF USER RAM
0054   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0055   0000             ;
0056   0000             ; I/O PORT ADDRESSES
0057   0000             ;
0058   0000             #IFDEF TEC-1F
0059   0000             ;
0060   0000             ; TEC-1 I/O ASSIGNMENTS
0061   0000             ;
0062   0000             KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0063   0000             SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0064   0000             DISPLY	.EQU	02H	;DISPLAY LATCH
0065   0000             PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0066   0000             PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0067   0000             PORT5	.EQU	05H
0068   0000             PORT6	.EQU	06H
0069   0000             PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0070   0000~            #ELSE
0071   0000~            ;
0072   0000~            ; SOUTHERN CROSS I/O ASSIGNMENTS
0073   0000~            ;
0074   0000~            IO0	.EQU	80H	;IO PORT 0
0075   0000~            IO1	.EQU	81H	;IO PORT 1
0076   0000~            IO2	.EQU	82H	;IO PORT 2
0077   0000~            IO3	.EQU	83H	;IO PORT 3
0078   0000~            DISPLY	.EQU	84H	;DISPLAY LATCH
0079   0000~            SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0080   0000~            KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0081   0000~            IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0082   0000             #ENDIF
0083   0000             ;
0084   0000             ; BIT BANG BAUD RATE CONSTANTS
0085   0000             ;
0086   0000             B300	.EQU	0220H	;300 BAUD
0087   0000             B1200	.EQU	0080H	;1200 BAUD
0088   0000             B2400	.EQU	003FH	;2400 BAUD
0089   0000             B4800	.EQU	001BH	;4800 BAUD
0090   0000             B9600	.EQU	000BH	;9600 BAUD
0091   0000             ;
0092   0000             ; KEY CODES
0093   0000             ;
0094   0000             KEYFN	.EQU	10H	;FN OR GO KEY
0095   0000             KEYAD	.EQU	11H	;ADDRESS KEY
0096   0000             KEYINC	.EQU	12H	;PLUS KEY
0097   0000             KEYDEC	.EQU	13H	;MINUS KEY
0098   0000             
0099   0000             ;-------------------------
0100   0000             ; MONITOR GLOBAL VARIABLES
0101   0000             ;-------------------------
0102   0000             ;
0103   3F00             	.ORG	VARBLS
0104   3F00             ;
0105   3F00             ;BIT BANG SERIAL MONITOR (SCBUG) VARIABLES
0106   3F00             ;
0107   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0108   3F10             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0109   3F12             ADDR	.BLOCK	2	;TEMP ADDRESS
0110   3F14             DATA	.BLOCK	1	;TEMP DATA @ ADDRESS
0111   3F15             ;
0112   3F15             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0113   3F17             ;
0114   3F17             ; DALLAS SMARTWATCH REGISTERS
0115   3F17             ;
0116   3F17             CALMDE	.BLOCK	2	;CALENDAR MODE
0117   3F19             SWREG0	.BLOCK	1	;10THS, 100THS
0118   3F1A             SWREG1	.BLOCK	1	;SECONDS
0119   3F1B             SWREG2	.BLOCK	1	;MINUTES
0120   3F1C             SWREG3	.BLOCK	1	;HOURS
0121   3F1D             SWREG4	.BLOCK	1	;DAY
0122   3F1E             SWREG5	.BLOCK	1	;DATE
0123   3F1F             SWREG6	.BLOCK	1	;MONTH
0124   3F20             SWREG7	.BLOCK	1	;YEAR
0125   3F21             ;
0126   3F21             BAUD	.BLOCK	2	;BIT BANG BAUD RATE
0127   3F23             KEYTIM	.BLOCK	2	;BEEP DELAY
0128   3F25             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0129   3F27             ;
0130   3F27             ; BLOCK FUNCTIONS
0131   3F27             ;
0132   3F27             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0133   3F29             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0134   3F2B             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0135   3F2D             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0136   3F2F             ;
0137   3F2F             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0138   3F31             ;
0139   3F31             ; DISPLAY SCAN REGISTERS
0140   3F31             ;
0141   3F31             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0142   3F37             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0143   3F38             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0144   3F39             ;
0145   3F39             ; MONITOR VARIABLES
0146   3F39             ;
0147   3F39             MODE	.BLOCK	2	;DISPLAY MODE
0148   3F3B             ADRESS	.BLOCK	2	;USER ADDRESS
0149   3F3D             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0150   3F3F             ;
0151   3F3F             ; TEMPORARY REGISTER STORAGE
0152   3F3F             ;
0153   3F3F             REGPNT	.BLOCK	2	;REGISTER POINTER
0154   3F41             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0155   3F43             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0156   3F45             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0157   3F47             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0158   3F49             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0159   3F4B             TMPIX	.BLOCK	2	;INDEX REGISTER X
0160   3F4D             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0161   3F4F             TMPSP	.BLOCK	2	;STACK POINTER
0162   3F51             ;
0163   3F51             ; RESTART JUMP TABLE AND HARWARE TEST
0164   3F51             ;
0165   3F51             RST08	.BLOCK	2	;RESTART 08H JUMP
0166   3F53             RST10	.BLOCK	2	;RESTART 10H JUMP
0167   3F55             RST18	.BLOCK	2	;RESTART 18H JUMP
0168   3F57             RST20	.BLOCK	2	;RESTART 20H JUMP
0169   3F59             RST28	.BLOCK	2	;RESTART 28H JUMP
0170   3F5B             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0171   3F5D             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0172   3F5F             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0173   3F60             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0174   3F61             SYSERR	.BLOCK	2	;SYSTEM CALL ERROR JUMP
0175   3F63             ;----------------
0176   3F63             ; RESTART VECTORS
0177   3F63             ;----------------
0178   3F63             ;
0179   3F63             ;  RESTART 00H - RST 0
0180   3F63             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0181   3F63             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0182   3F63             ;
0183   0000             	.ORG	0000H
0184   0000 C3 00 02    RSTVEC	JP	RESET
0185   0003             ;
0186   0003             ; RESTART 08H - RST 1
0187   0003             ;
0188   0008             	.ORG	0008H
0189   0008 E5          	PUSH	HL
0190   0009 2A 51 3F    	LD	HL,(RST08)
0191   000C E9          	JP	(HL)
0192   000D             ;
0193   000D             ; RESTART 10H - RST 2
0194   000D             ;
0195   0010             	.ORG	0010H
0196   0010 E5          	PUSH	HL
0197   0011 2A 53 3F    	LD	HL,(RST10)
0198   0014 E9          	JP	(HL)
0199   0015             ;
0200   0015             ; RESTART 18H - RST 3
0201   0015             ;
0202   0018             	.ORG	0018H
0203   0018 E5          	PUSH	HL
0204   0019 2A 55 3F    	LD	HL,(RST18)
0205   001C E9          	JP	(HL)
0206   001D             ;
0207   001D             ; RESTART 20H - RST 4
0208   001D             ;
0209   0020             	.ORG	0020H
0210   0020 E5          	PUSH	HL
0211   0021 2A 57 3F    	LD	HL,(RST20)
0212   0024 E9          	JP	(HL)
0213   0025             ;
0214   0025             ; RESTART 28H - RST 5
0215   0025             ;
0216   0028             	.ORG	0028H
0217   0028 E5          	PUSH	HL
0218   0029 2A 59 3F    	LD	HL,(RST28)
0219   002C E9          	JP	(HL)
0220   002D             ;
0221   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0222   002D             ;
0223   0030             	.ORG	0030H
0224   0030 C3 68 00    RST30	JP	SYSCALL
0225   0033             ;
0226   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0227   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0228   0033             ;INT OCCURS- FURTHER INTERRUPTS
0229   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0230   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0231   0033             ;STARTS HERE
0232   0033             ;
0233   0038             	.ORG	0038H
0234   0038 E5          	PUSH	HL
0235   0039 2A 5B 3F    	LD	HL,(RST38)
0236   003C E9          	JP	(HL)
0237   003D             ;
0238   003D             ; RESTART 66H NMI VECTOR
0239   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0240   003D             ;
0241   0066             	.ORG	0066H
0242   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0243   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0244   0066             #IFDEF TEC-1F
0245   0066 ED 4D           RETI
0246   0068~            #ELSE
0247   0068~            	PUSH	HL
0248   0068~            	LD	HL,(RST66)
0249   0068~            	JP	(HL)
0250   0068             #ENDIF
0251   0068             ;--------------------
0252   0068             ; SYSTEM CALL HANDLER
0253   0068             ;--------------------
0254   0068             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0255   0068             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0256   0068             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0257   0068             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0258   0068             ;CHANGE IN SUBSEQUENT MONITORS
0259   0068             ;
0260   0068             ;ENTRY : C = CALL NUMBER
0261   0068             ;SEE ROUTINES FOR ENTRY AND EXIT
0262   0068             ;PARAMETERS
0263   0068             ;
0264   0068 3B          SYSCALL	DEC	SP
0265   0069 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0266   006A ED 73 25 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0267   006E F5          	PUSH	AF
0268   006F D5          	PUSH	DE
0269   0070 E5          	PUSH	HL	;SAVE REGISTERS
0270   0071 79          	LD	A,C	;GET CALL NUMBER
0271   0072 E6 7F       	AND	127	;ENSURE IN LIMITS
0272   0074 CB 27       	SLA	A	;MULTIPLY BY TWO
0273   0076 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0274   0078 6F          	LD	L,A	;LOAD INDEX
0275   0079 7E          	LD	A,(HL)
0276   007A 23          	INC	HL
0277   007B 56          	LD	D,(HL)	;GET JUMP ADDRESS
0278   007C 2A 25 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0279   007F 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0280   0080 23          	INC	HL
0281   0081 7A          	LD	A,D
0282   0082 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0283   0083 E1          	POP	HL
0284   0084 D1          	POP	DE
0285   0085 F1          	POP	AF	;RESTORE REGISTERS
0286   0086 C9          	RET		;JUMPS TO SYSTEM CALL
0287   0087             ;
0288   0087             ; ERROR TRAP
0289   0087             ; HALT THE MACHINE UNTIL RESET OR INTERRUPT
0290   0087 2A 61 3F    TRAP	LD	HL,(SYSERR)
0291   008A E9          	JP	(HL)
0292   008B             ;
0293   008B 76          STOP	HALT
0294   008C             ;-----------------------
0295   008C             ; SYSTEM CALL JUMP TABLE
0296   008C             ;-----------------------
0297   0100             	.ORG	0100H
0298   0100 7D 02 AA 03 SYSJMP	.DW	MAIN,VERS,DISADD,DISBYT,CLRBUF,SCAND,CONBYT,CONVHI
0298   0104 CF 03 E4 03 
0298   0108 4E 04 1D 04 
0298   010C ED 03 FA 03 
0299   0110 FE 03 C6 04 	.DW CONVLO,SKEYIN,SKEYRL,KEYIN,KEYREL,MENU,CHKSUM,MUL16
0299   0114 D3 04 E0 04 
0299   0118 EA 04 F4 04 
0299   011C 17 05 4F 05 
0300   0120 37 05 27 05 	.DW RAND,INDEXB,INDEXW,MUSIC,TONE,BEEP,SKATE,TXDATA
0300   0124 2E 05 66 05 
0300   0128 E3 05 05 06 
0300   012C 0A 0D 79 08 
0301   0130 A4 08 56 08 	.DW RXDATA,ASCHEX,WWATCH,RWATCH,ONESEC,RLSTEP,DELONE,SCANKEY
0301   0134 23 0F 99 0E 
0301   0138 83 0F 38 0C 
0301   013C 66 0C 5D 04 
0302   0140             	
0303   0140 CE 07 10 0C 	.DW INTELH,SPLIT,SNDMSG,BITASC,WRDASC,BYTASC,NYBASC,PCBTYP
0303   0144 80 13 6B 13 
0303   0148 52 13 57 13 
0303   014C 60 13 A3 03 
0304   0150 55 14 B1 03 	.DW PRNTSZ,KBDTYP,UPDATE,VARRAM,SERINI,SCBUG,TRAP,TRAP
0304   0154 76 03 9F 03 
0304   0158 5F 08 99 0F 
0304   015C 87 00 87 00 
0305   0160 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0305   0164 87 00 87 00 
0305   0168 87 00 87 00 
0305   016C 87 00 87 00 
0306   0170 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0306   0174 87 00 87 00 
0306   0178 87 00 87 00 
0306   017C 87 00 87 00 
0307   0180             	
0308   0180 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0308   0184 87 00 87 00 
0308   0188 87 00 87 00 
0308   018C 87 00 87 00 
0309   0190 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0309   0194 87 00 87 00 
0309   0198 87 00 87 00 
0309   019C 87 00 87 00 
0310   01A0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0310   01A4 87 00 87 00 
0310   01A8 87 00 87 00 
0310   01AC 87 00 87 00 
0311   01B0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0311   01B4 87 00 87 00 
0311   01B8 87 00 87 00 
0311   01BC 87 00 87 00 
0312   01C0             	
0313   01C0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0313   01C4 87 00 87 00 
0313   01C8 87 00 87 00 
0313   01CC 87 00 87 00 
0314   01D0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0314   01D4 87 00 87 00 
0314   01D8 87 00 87 00 
0314   01DC 87 00 87 00 
0315   01E0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0315   01E4 87 00 87 00 
0315   01E8 87 00 87 00 
0315   01EC 87 00 87 00 
0316   01F0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0316   01F4 87 00 87 00 
0316   01F8 87 00 87 00 
0316   01FC 87 00 87 00 
0317   0200             ;------------------------------
0318   0200             ; POWER UP RESET / MANUAL RESET
0319   0200             ;------------------------------
0320   0200             	.ORG	0200H
0321   0200             ;
0322   0200             ; WAIT FOR SMART SOCKET
0323   0200             ; TO RECOVER FROM POWER DOWN
0324   0200             ;
0325   0200 3E 55       RESET	LD	A,55H
0326   0202 32 60 3F    	LD	(DALLAS),A	;WRITE TO RAM
0327   0205 AF          	XOR	A
0328   0206 D3 02       	OUT	(DISPLY),A	;WRITE NOTHING TO
0329   0208 D3 01       	OUT	(SCAN),A	;ON BOARD I/O
0330   020A DB 00       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0331   020C 3A 60 3F    	LD	A,(DALLAS)	;READ FROM RAM
0332   020F FE 55       	CP	55H	;IS IT READY?
0333   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0334   0214             ;
0335   0214             ; LOAD STACK POINTER
0336   0214             ;
0337   0214 31 00 3C    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0338   0217 ED 56       	IM	1	;SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0339   0219             ;
0340   0219             ; SET UP RESTART VECTORS
0341   0219             ;
0342   0219 21 14 02    	LD	HL,RESET1
0343   021C 22 51 3F    	LD	(RST08),HL
0344   021F 22 53 3F    	LD	(RST10),HL
0345   0222 22 55 3F    	LD	(RST18),HL
0346   0225 22 57 3F    	LD	(RST20),HL
0347   0228 22 59 3F    	LD	(RST28),HL
0348   022B 22 5D 3F    	LD	(RST66),HL	;NMI INTERRUPT
0349   022E 21 2F 06    	LD	HL,SSTEP
0350   0231 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
0351   0234 21 8B 00    	LD	HL,STOP
0352   0237 22 61 3F    	LD	(SYSERR),HL	;INVALID SYSTEM CALL ERROR
0353   023A             ;
0354   023A             ; PERFORM CHECKSUM ON USER RAM
0355   023A             ;
0356   023A 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0357   023D 11 00 38    	LD	DE,RAMEND	;END OF USER RAM
0358   0240 CD 17 05    	CALL	CHKSUM
0359   0243 32 5F 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0360   0246             ;
0361   0246             ; SET UP DEFAULT VARIABLES
0362   0246             ;
0363   0246 21 7D 07    	LD	HL,FUNLST
0364   0249 22 15 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0365   024C             ;
0366   024C             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0367   024C             ;
0368   024C 21 99 0F    	LD	HL,SCBUG	;SERIAL MONITOR
0369   024F 22 2F 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0370   0252 3E 00       	LD	A,00H
0371   0254 32 3F 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0372   0257 32 39 3F    	LD	(MODE),A	;START WITH SPEAKER ON
0373   025A             ;
0374   025A 21 1B 00    	LD	HL,B4800	;DEFAULT BAUD RATE
0375   025D CD 5F 08    	CALL SERINI	;INITIALISE THE SERIAL PORT
0376   0260             ;
0377   0260 21 00 01    	LD	HL,0100H
0378   0263 22 3D 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0379   0266 21 00 10    	LD	HL,1000H
0380   0269 22 23 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0381   026C~            #IFDEF 74C923
0382   026C~            	LD	A,20H
0383   026C             #ELSE
0384   026C 3E 08       	LD	A,08H
0385   026E             #ENDIF
0386   026E 32 38 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0387   0271 CD 05 06    	CALL	BEEP
0388   0274 CD 05 06    	CALL	BEEP
0389   0277~            #IFDEF 74C923
0390   0277~            	LD	A,08H
0391   0277             #ELSE
0392   0277 3E 10       	LD	A,10H
0393   0279             #ENDIF
0394   0279 32 37 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0395   027C             ;
0396   027C FB          	EI		;ENABLE INTERRUPTS
0397   027D             ;
0398   027D             ;-----------------
0399   027D             ; SET UP MAIN LOOP
0400   027D             ;-----------------
0401   027D 31 00 3C    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0402   0280 21 00 20    	LD	HL,RAMSRT
0403   0283 22 3B 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0404   0286 3A 39 3F    	LD	A,(MODE)
0405   0289 F6 80       	OR	80H	;START OFF IN DATA MODE
0406   028B 32 39 3F    	LD	(MODE),A
0407   028E             ;
0408   028E             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0409   028E             ;
0410   028E CD 76 03    MAIN1	CALL	UPDATE
0411   0291 CD C6 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0412   0294 21 A3 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0413   0297 CD F4 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0414   029A CD 76 03    	CALL	UPDATE	;UPDATE BUFFER AND
0415   029D CD D3 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0416   02A0 C3 91 02    	JP	MAIN2
0417   02A3             ;
0418   02A3             ; MAIN MENU KEY TABLE
0419   02A3             ;
0420   02A3 14          MENLST	.DB	20
0421   02A4 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0421   02A8 04 05 06 07 
0422   02AC 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0422   02B0 0C 0D 0E 0F 
0423   02B4 10 11 12 13 	.DB	10H,11H,12H,13H
0424   02B8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0424   02BC E0 02 E0 02 
0425   02C0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0425   02C4 E0 02 E0 02 
0426   02C8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0426   02CC E0 02 E0 02 
0427   02D0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0427   02D4 E0 02 E0 02 
0428   02D8 58 07 12 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0428   02DC 1E 03 4A 03 
0429   02E0             ;---------------------------------------------------
0430   02E0             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0431   02E0             ;---------------------------------------------------
0432   02E0 CD 05 06    HEXKEY	CALL	BEEP
0433   02E3 21 39 3F    	LD	HL,MODE
0434   02E6 CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0435   02E8 CA F9 02    	JP	Z,HEXKY2	;IN ADDR MODE
0436   02EB             ;
0437   02EB             ; IN DATA MODE
0438   02EB             ;
0439   02EB 2A 3B 3F    HEXKY1	LD	HL,(ADRESS)
0440   02EE CB 26       	SLA	(HL)	;FROM THE CURRENT
0441   02F0 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0442   02F2 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0443   02F4 CB 26       	SLA	(HL)	;PUT THE KEY IN
0444   02F6 B6          	OR	(HL)	;THE NEW DATA BACK AT
0445   02F7 77          	LD	(HL),A	;THE CURRENT ADDRESS
0446   02F8 C9          	RET
0447   02F9             ;
0448   02F9             ; IN ADDRESS MODE
0449   02F9             ;
0450   02F9 2A 3B 3F    HEXKY2	LD	HL,(ADRESS)
0451   02FC CB 25       	SLA	L	;CURRENT ADDRESS
0452   02FE CB 14       	RL	H	;AND DO A 16 BIT
0453   0300 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0454   0302 CB 14       	RL	H	;TO MAKE  ROOM
0455   0304 CB 25       	SLA	L	;FOR THE NEW KEY
0456   0306 CB 14       	RL	H
0457   0308 CB 25       	SLA	L
0458   030A CB 14       	RL	H
0459   030C B5          	OR	L	;IT IN THE LEAST
0460   030D 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0461   030E 22 3B 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0462   0311 C9          	RET
0463   0312             ;-------------
0464   0312             ; CHANGE MODES
0465   0312             ;-------------
0466   0312 CD 05 06    ADDKEY	CALL	BEEP
0467   0315 3A 39 3F    	LD	A,(MODE)
0468   0318 EE 80       	XOR	80H	;TOGGLE MODE
0469   031A 32 39 3F    	LD	(MODE),A
0470   031D C9          	RET
0471   031E             ;------------------
0472   031E             ; INCREMENT ADDRESS
0473   031E             ;------------------
0474   031E CD 05 06    INCKEY	CALL	BEEP
0475   0321 2A 3B 3F    INCKY1	LD	HL,(ADRESS)
0476   0324 23          	INC	HL	;INC ADDRESS
0477   0325 22 3B 3F    	LD	(ADRESS),HL
0478   0328 CD 76 03    	CALL	UPDATE
0479   032B 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0480   032E CD 1D 04    INCKY2	CALL	SCAND
0481   0331 CD 5D 04    	CALL	SCANKEY
0482   0334 CB 6F       	BIT	5,A	;RETURN IF
0483   0336 28 11       	JR	Z,INCKY3	; KEY RELEASED
0484   0338 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0485   033A FE 12       	CP	KEYINC	; '+'
0486   033C 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0487   033E 11 01 00    	LD	DE,0001H
0488   0341 ED 52       	SBC	HL,DE
0489   0343 D2 2E 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0490   0346 C3 21 03    	JP	INCKY1	;INC ADDRESS
0491   0349 C9          INCKY3	RET
0492   034A             ;------------------
0493   034A             ; DECREMENT ADDRESS
0494   034A             ;------------------
0495   034A CD 05 06    DECKEY	CALL	BEEP
0496   034D 2A 3B 3F    DECKY1	LD	HL,(ADRESS)
0497   0350 2B          	DEC	HL	;DEC ADDRESS
0498   0351 22 3B 3F    	LD	(ADRESS),HL
0499   0354 CD 76 03    	CALL	UPDATE
0500   0357 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0501   035A CD 1D 04    DECKY2	CALL	SCAND
0502   035D CD 5D 04    	CALL	SCANKEY
0503   0360 CB 6F       	BIT	5,A	;RETURN IF
0504   0362 28 11       	JR	Z,DECKY3	;KEY RELEASED
0505   0364 E6 1F       	AND	1FH
0506   0366 FE 13       	CP	KEYDEC	; '-'
0507   0368 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0508   036A 11 01 00    	LD	DE,0001H
0509   036D ED 52       	SBC	HL,DE
0510   036F D2 5A 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0511   0372 C3 4D 03    	JP	DECKY1	;INC ADDRESS 
0512   0375 C9          DECKY3	RET
0513   0376             ;-----------------------------------------
0514   0376             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0515   0376             ;-----------------------------------------
0516   0376             ;
0517   0376             ; UPDATE THE DISPLAY BUFFER WITH THE 
0518   0376             ; CURRENT ADDRESS, THE DATA AT THE CURRENT ADDRESS
0519   0376             ; AND SET THE DECIMAL POINTS TO
0520   0376             ; ADDRESS OR DATA MODE
0521   0376             ;
0522   0376             ;	ENTRY : NONE
0523   0376             ;	EXIT :  MODIFIES A
0524   0376             ;
0525   0376 E5          UPDATE	PUSH	HL
0526   0377 C5          	PUSH	BC
0527   0378 2A 3B 3F    	LD	HL,(ADRESS)
0528   037B CD CF 03    	CALL	DISADD	;AND DATA, PUT IN
0529   037E 7E          	LD	A,(HL)
0530   037F CD E4 03    	CALL	DISBYT	;DISPLAY BUFFER
0531   0382             ;
0532   0382             ; IN ADDRESS OR DATA MODE?
0533   0382             ;
0534   0382 21 39 3F    	LD	HL,MODE
0535   0385 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0536   0387 CA 92 03    	JP	Z,ADMODE	;ADDRESS MODE
0537   038A             ;
0538   038A             ; SHOW DATA MODE
0539   038A             ;
0540   038A 21 31 3F    	LD	HL,DISBUF	;SET THE DP'S
0541   038D 06 02       	LD	B,2	;IN THE DATA
0542   038F C3 97 03    	JP	SETDP	;DISPLAY
0543   0392             ;
0544   0392             ; SHOW ADDRESS MODE
0545   0392             ;
0546   0392 21 33 3F    ADMODE	LD	HL,DISBUF+2
0547   0395 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0548   0397             ;
0549   0397             ; SET DECIMAL POINT
0550   0397             ;
0551   0397             ;SET DP IN THE BYTE POINTED TO BY HL
0552   0397             ;
0553   0397             #IFDEF TEC-1F
0554   0397 CB E6       SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0555   0399~            #ELSE
0556   0399~            SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0557   0399             #ENDIF
0558   0399 23          	INC	HL	;POINT TO NEXT BYTE
0559   039A 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0560   039C C1          	POP	BC
0561   039D E1          	POP	HL
0562   039E C9          	RET
0563   039F             ;-----------------------------------------
0564   039F             ; RETURN THE BASE ADDRESS OF RAM VARIABLES
0565   039F             ;-----------------------------------------
0566   039F             ;
0567   039F             ;	ENTRY: NONE
0568   039F             ;	EXIT: HL
0569   039F             ;
0570   039F 21 00 3F    VARRAM	LD	HL,VARBLS
0571   03A2 C9          		RET
0572   03A3             ;-----------
0573   03A3             ; BOARD TYPE
0574   03A3             ;-----------
0575   03A3             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0576   03A3             ; ENTRY = NONE
0577   03A3             ; EXIT: HL -> 'SC-1'    ACCA = 01H
0578   03A3             ;             'TEC-1F'	ACCA = 02H
0579   03A3             ;
0580   03A3 21 B8 03    PCBTYP	LD	HL,TYPESZ
0581   03A6 3A BF 03    	LD	A,(TYPEBF)
0582   03A9 C9          	RET
0583   03AA             ;---------------
0584   03AA             ; VERSION NUMBER
0585   03AA             ;---------------
0586   03AA             ;RETURNS THE SOFTWARE VERSION NUMBER
0587   03AA             ;
0588   03AA             ;	ENTRY : NONE
0589   03AA             ; EXIT : HL -> VERSION NUMBER STRING
0590   03AA             ;        ACCA = BCD VERSION NUMBER D7-D4 = MAJOR, D3-D0 MINOR
0591   03AA             ;
0592   03AA 21 C0 03    VERS	LD	HL,VERSZ
0593   03AD 3A C4 03    	LD	A,(VERBCD)
0594   03B0 C9          	RET
0595   03B1             ;--------------
0596   03B1             ; KEYBOARD TYPE
0597   03B1             ;--------------
0598   03B1             ; RETURNS THE TYPE OF KEYBOARD USED
0599   03B1             ; ENTRY = NONE
0600   03B1             ; EXIT: HL -> KEYBOARD TYPE STRING
0601   03B1             ;       ACCA = 01H MM74C923 HARDWARE ENCODER
0602   03B1             ;       ACCA = 02H SOFTWARE SCANNED
0603   03B1             ;
0604   03B1 21 C5 03    KBDTYP	LD	HL,KYBSZ
0605   03B4 3A CE 03    	LD	A,(KYBDBF)
0606   03B7 C9          	RET
0607   03B8             
0608   03B8             #IFDEF TEC-1F
0609   03B8 54 45 43 2D TYPESZ	.DB	"TEC-1F",0
0609   03BC 31 46 00 
0610   03BF 02          TYPEBF	.DB	02H
0611   03C0~            #ELSE
0612   03C0~            TYPESZ	.DB	"SC-1",0
0613   03C0~            TYPEBF	.DB 01H
0614   03C0             #ENDIF
0615   03C0             
0616   03C0 31 2E 38 00 VERSZ	.DB	"1.8",0
0617   03C4 18          VERBCD	.DB 18H
0618   03C5             
0619   03C5~            #IFDEF 74C923
0620   03C5~            KYBSZ	.DB "Hardware",0
0621   03C5~            KYBDBF	.DB	01H	
0622   03C5             #ELSE
0623   03C5 53 6F 66 74 KYBSZ	.DB "Software",0
0623   03C9 77 61 72 65 
0623   03CD 00 
0624   03CE 02          KYBDBF	.DB	02H	
0625   03CF             #ENDIF
0626   03CF             
0627   03CF             ;-------------------------
0628   03CF             ; ADDRESS > DISPLAY BUFFER
0629   03CF             ;-------------------------
0630   03CF             ;CONVERT HL TO SEVEN SEGMENT CODE
0631   03CF             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0632   03CF             ;
0633   03CF             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0634   03CF             ;
0635   03CF             ; EXIT  : NO REGISTERS MODIFIED
0636   03CF             ;
0637   03CF F5          DISADD	PUSH	AF
0638   03D0 E5          	PUSH	HL
0639   03D1 E5          	PUSH	HL
0640   03D2 7C          	LD	A,H
0641   03D3 CD ED 03    	CALL	CONBYT
0642   03D6 22 35 3F    	LD	(DISBUF+4),HL
0643   03D9 E1          	POP	HL
0644   03DA 7D          	LD	A,L
0645   03DB CD ED 03    	CALL	CONBYT
0646   03DE 22 33 3F    	LD	(DISBUF+2),HL
0647   03E1 E1          	POP	HL
0648   03E2 F1          	POP	AF
0649   03E3 C9          	RET
0650   03E4             ;---------------------------
0651   03E4             ; DATA BYTE > DISPLAY BUFFER
0652   03E4             ;---------------------------
0653   03E4             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0654   03E4             ;AND PUT IN DATA DISPLAY BUFFER.
0655   03E4             ;
0656   03E4             ; ENTRY :  A = DATA DISPLAY BYTE
0657   03E4             ;
0658   03E4             ; EXIT  : NO REGISTERS MODIFIED
0659   03E4             ;
0660   03E4 E5          DISBYT	PUSH	HL
0661   03E5 CD ED 03    	CALL	CONBYT
0662   03E8 22 31 3F    	LD	(DISBUF),HL
0663   03EB E1          	POP	HL
0664   03EC C9          	RET
0665   03ED             ;---------------------------------------
0666   03ED             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0667   03ED             ;---------------------------------------
0668   03ED             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0669   03ED             ; FOR DISPLAY
0670   03ED             ; ENTRY : A = BYTE TO BE CONVERTED
0671   03ED             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0672   03ED             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0673   03ED             ;         A = NOT MODIFIED
0674   03ED F5          CONBYT	PUSH	AF
0675   03EE F5          	PUSH	AF
0676   03EF CD FA 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0677   03F2 67          	LD	H,A
0678   03F3 F1          	POP	AF
0679   03F4 CD FE 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0680   03F7 6F          	LD	L,A
0681   03F8 F1          	POP	AF
0682   03F9 C9          	RET
0683   03FA             ;---------------------------------------------
0684   03FA             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0685   03FA             ;---------------------------------------------
0686   03FA             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0687   03FA             ; FOR SEVEN SEGMENT DISPLAYS
0688   03FA             ; CONVHI = CONVERTS HIGH NYBBLE
0689   03FA             ; CONVLO = CONVERTS LO NYBBLE
0690   03FA             ;
0691   03FA             ; ENTRY : A = NYBBLE TO BE CONVERTED
0692   03FA             ; EXIT  : A = SEVEN SEGMENT CODE
0693   03FA             ;
0694   03FA 07          CONVHI	RLCA
0695   03FB 07          	RLCA
0696   03FC 07          	RLCA	;MOVE TO LO NYBBLE
0697   03FD 07          	RLCA	;FOR CONVERSION
0698   03FE C5          CONVLO	PUSH	BC
0699   03FF E5          	PUSH	HL
0700   0400 21 0D 04    	LD	HL,SEGMNT	;USE THE HEX VALUE
0701   0403 E6 0F       	AND	0FH	;TO INDEX TO THE
0702   0405 4F          	LD	C,A	;THE SEVEN SEGMENT
0703   0406 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0704   0408 09          	ADD	HL,BC	;AND RETURN WITH
0705   0409 7E          	LD	A,(HL)	;CODE IN A
0706   040A E1          	POP	HL
0707   040B C1          	POP	BC
0708   040C C9          	RET
0709   040D             ;
0710   040D             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0711   040D             ;
0712   040D             #IFDEF TEC-1F
0713   040D EB 28 CD AD SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0714   0411 2E A7 E7 29 	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0715   0415 EF 2F 6F E6 	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0716   0419 C3 EC C7 47 	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0717   041D~            #ELSE
0718   041D~            SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0719   041D~            	.DB	66H,6DH,7DH,07H	;4,5,6,7
0720   041D~            	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0721   041D~            	.DB	39H,5EH,79H,71H	;C,D,E,F
0722   041D             #ENDIF
0723   041D             ;-------------
0724   041D             ; SCAN DISPLAY
0725   041D             ;-------------
0726   041D             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0727   041D             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0728   041D             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0729   041D             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0730   041D             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0731   041D             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0732   041D             ;
0733   041D             ; ENTRY : NONE
0734   041D             ; EXIT  : NO REGISTERS MODIFIED
0735   041D             ;
0736   041D F5          SCAND   PUSH    AF
0737   041E C5          	PUSH	BC
0738   041F E5          	PUSH	HL	;SAVE REGISTERS
0739   0420 21 36 3F    	LD	HL,DISBUF+5
0740   0423 0E 20       	LD	C,20H
0741   0425 7E          SCAND1	LD	A,(HL)
0742   0426 D3 02       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0743   0428 79          	LD	A,C
0744   0429 F6 40       	OR	40H	;KEEP D6 HIGH
0745   042B D3 01       	OUT	(SCAN),A	;TURN ON DISPLAY
0746   042D 3A 37 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0747   0430 47          	LD	B,A	;TO ADJUST ON TIME
0748   0431 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0749   0433 78          	LD	A,B	;B IS NOW CLEAR, USE
0750   0434 F6 40       	OR	40H	;KEEP D6 HIGH
0751   0436 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0752   0438 3A 38 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0753   043B 47          	LD	B,A	;TO ADJUST OFF TIME
0754   043C 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0755   043E 2B          	DEC	HL	;POINT TO NEXT
0756   043F CB 09       	RRC	C	;ELEMENT IN BUFFER
0757   0441 30 E2       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0758   0443 78          	LD	A,B	;B IS NOW CLEAR, USE
0759   0444 D3 02       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0760   0446 F6 40       	OR	40H	;KEEP D6 HIGH
0761   0448 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0762   044A E1          	POP	HL
0763   044B C1          	POP	BC
0764   044C F1          	POP	AF	;RESTORE REGISTERS
0765   044D C9          	RET
0766   044E             ;---------------------
0767   044E             ; CLEAR DISPLAY BUFFER
0768   044E             ;---------------------
0769   044E E5          CLRBUF	PUSH	HL
0770   044F C5          	PUSH	BC
0771   0450 21 31 3F    	LD	HL,DISBUF
0772   0453 06 06       	LD	B,6
0773   0455 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0774   0457 23          	INC	HL	;LOCATIONS POINTED
0775   0458 10 FB       	DJNZ	CLRBF1	;TO BY HL
0776   045A C1          	POP	BC
0777   045B E1          	POP	HL
0778   045C C9          	RET
0779   045D             ;--------------
0780   045D             ; SCAN KEYBOARD
0781   045D             ;--------------
0782   045D             ; USE THE HARDWARE OR SOFTWARE SCANNED KEYBOARD
0783   045D             ;
0784   045D             ; BIT 7 NOT USED
0785   045D             ; BIT 6 SHIFT KEY. HIGH IF SHIFT KEY PRESSED
0786   045D             ;
0787   045D             ; BIT 5 DATA AVAILABLE FLAG HIGH IF KEY PRESSED
0788   045D             ; BITS 4 -0 KEY CODE
0789   045D             ;
0790   045D             ; SOFTWARE SCANNED KEYBOARD
0791   045D             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0792   045D             ; AND KEYBOARD BUFFER AS ROWS.
0793   045D             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0794   045D             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0795   045D             ;
0796   045D             ; ENTRY : NONE
0797   045D             ; EXIT  : A = 00H IF NO KEY DETECTED
0798   045D             ;         A = DETECTED KEY BITS 0-4
0799   045D             ;             BIT 5 = KEY AVAILABLE
0800   045D             ;             BIT 6 = SHIFT KEY PUSHED
0801   045D C5          SCANKEY	PUSH	BC
0802   045E D5          	PUSH	DE	;SAVE REGISTERS
0803   045F E5          	PUSH	HL
0804   0460             ;
0805   0460             ;USE THE KEYBOARD ENCODER
0806   0460             ;
0807   0460~            #IFDEF 74C923
0808   0460~            ;
0809   0460~            ; TEC-1F - 74C923 KEYBOARD ENCODER
0810   0460~            ;
0811   0460~            #IFDEF TEC-1F
0812   0460~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0813   0460~            	AND	7FH	;STRIP UNUSED BIT
0814   0460~            	BIT	6,A	;DA LOW?
0815   0460~            	JR	Z,SCANKY1	;HANDLE THE KEY
0816   0460~            	LD	A,00H
0817   0460~            	JR	SCANKY4	;NO KEY
0818   0460~            ;
0819   0460~            SCANKY1	BIT	5,A	;SHIFT KEY LOW?
0820   0460~            	JR	Z,SCANKY2
0821   0460~            	RES	5,A
0822   0460~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0823   0460~            	RES	6,A	;RESET SHIFT BIT
0824   0460~            	JR	SCANKY3
0825   0460~            ;
0826   0460~            SCANKY2	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0827   0460~            	SET	6,A	;SET SHIFT BIT
0828   0460~            SCANKY3	SET	5,A	;SET DATA AVAILABLE FLAG
0829   0460~            SCANKY4	POP	HL
0830   0460~            	POP	DE
0831   0460~            	POP	BC
0832   0460~            	RET
0833   0460~            #ELSE
0834   0460~            ;
0835   0460~            ;SC - 74C923 KEYBOARD ENCODER
0836   0460~            ;
0837   0460~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0838   0460~            	AND	7FH	;STRIP UNUSED BIT
0839   0460~            	BIT	5,A	;DA HIGH?
0840   0460~            	JR	NZ,SCANKY1	;HANDLE THE KEY
0841   0460~            	LD	A,00H
0842   0460~            	JR SCANKY3	;NO KEY
0843   0460~            ;
0844   0460~            SCANKY1	BIT	6,A	;SHIFT KEY LOW?
0845   0460~            	JR	Z,SCANKY2
0846   0460~            	RES	6,A	;RESET SHIFT BIT
0847   0460~            	JR	SCANKY3
0848   0460~            ;
0849   0460~            SCANKY2	SET	6,A	;SET SHIFT BIT
0850   0460~            SCANKY3	POP	HL
0851   0460~            	POP	DE
0852   0460~            	POP	BC
0853   0460~            	RET
0854   0460~            #ENDIF
0855   0460             #ELSE
0856   0460             ;
0857   0460             ; SOFTWARE SCAN KEYBOARD 
0858   0460             ; SAME FOR TEC-1 AND SC
0859   0460             ;
0860   0460 3E 00       SCANKY1	LD	A,00H
0861   0462 D3 02       	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0862   0464 47          	LD	B,A		;KEY
0863   0465 57          	LD	D,A		;COUNT
0864   0466 1E 01       	LD	E,01H	;MASK
0865   0468 0E 08       SCANKY2	LD	C,08H	;SCAN
0866   046A 79          SCANKY3	LD	A,C
0867   046B F6 40       	OR	40H	;KEEP SERIAL OUTPUT BIT HIGH
0868   046D D3 01       	OUT	(SCAN),A	;OUTPUT SCAN
0869   046F 00          	NOP
0870   0470 00          	NOP
0871   0471 00          	NOP
0872   0472 DB 00       	IN	A,(KEYBUF)	;READ KEY BUFFER
0873   0474 A3          	AND	E	;MASK
0874   0475 28 02       	JR	Z,SCANKY4	;KEY NOT DETECTED
0875   0477 14          	INC	D
0876   0478 68          	LD	L,B		;SAVE KEY
0877   0479             ;
0878   0479             ; END OF ROWS?
0879   0479             ;
0880   0479 04          SCANKY4	INC	B	;NEXT KEY
0881   047A CB 29       	SRA	C	;SHIFT SCAN RIGHT
0882   047C 30 EC       	JR	NC,SCANKY3	;NEXT ROW
0883   047E             ;
0884   047E             ; END OF COLUMNS?
0885   047E             ;
0886   047E CB 23       	SLA	E	;SHIFT MASK LEFT
0887   0480 CB 6B       	BIT	5,E	;END OF KEYSCAN?
0888   0482 28 E4       	JR	Z,SCANKY2	;NEXT COLUMN
0889   0484             ;
0890   0484             ; END OF SCAN
0891   0484             ;
0892   0484 7A          	LD	A,D
0893   0485 FE 00       	CP	00H
0894   0487 28 20       	JR	Z,SCANKY6	;NO KEY PRESSED
0895   0489 FE 01       	CP	01H
0896   048B 20 D3       	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0897   048D             ;
0898   048D             ; ONE KEY DETECTED
0899   048D             ;
0900   048D 3E 40       	LD	A,40H
0901   048F D3 01       	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0902   0491             ;
0903   0491             ; HANDLE SHIFT KEY FOR TEC-1F SOFTWARE SCANNED KEYBOARD 
0904   0491             ;
0905   0491             #IFDEF TEC-1F
0906   0491 DB 00       	IN	A,(KEYBUF)
0907   0493 CB 6F       	BIT 5,A	;SHIFT LOW?
0908   0495 28 08       	JR	Z,SCANKY5
0909   0497             ;
0910   0497 7D          	LD	A,L		;RETURN KEY IN A
0911   0498 CD B2 04    	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0912   049B CB EF       	SET	5,A	;SET DATA AVAILABLE FLAG
0913   049D 18 0F       	JR	SCANKY7
0914   049F             ;
0915   049F 7D          SCANKY5	LD	A,L		;RETURN KEY IN A
0916   04A0 CD B2 04    	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0917   04A3 CB EF       	SET	5,A	;SET DATA AVAILABLE FLAG
0918   04A5 CB F7       	SET	6,A	;SET SHIFT KEY FLAG
0919   04A7 18 05       	JR	SCANKY7
0920   04A9             ;
0921   04A9             ; HANDLE SHIFT KEY FOR SC SOFTWARE SCANNED KEYBOARD
0922   04A9             ;
0923   04A9~            #ELSE
0924   04A9~            	IN	A,(KEYBUF)
0925   04A9~            	BIT 6,A	;SHIFT LOW?
0926   04A9~            	JR	Z,SCANKY5
0927   04A9~            ;
0928   04A9~            	LD	A,L		;RETURN KEY IN A
0929   04A9~            	SET	5,A	;SET DATA AVAILABLE FLAG
0930   04A9~            	JR	SCANKY7
0931   04A9~            ;	
0932   04A9~            SCANKY5	LD	A,L		;RETURN KEY IN A
0933   04A9~            	SET	5,A	;SET DATA AVAILABLE FLAG
0934   04A9~            	SET	6,A	;SET SHIFT KEY FLAG
0935   04A9~            	JR	SCANKY7
0936   04A9             #ENDIF
0937   04A9             ;
0938   04A9             ; NO KEY
0939   04A9             ;
0940   04A9 3E 40       SCANKY6	LD	A,40H
0941   04AB D3 01       	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0942   04AD AF          	XOR	A	;CLEAR A
0943   04AE E1          SCANKY7	POP	HL
0944   04AF D1          	POP	DE
0945   04B0 C1          	POP	BC
0946   04B1 C9          	RET
0947   04B2             #ENDIF
0948   04B2             
0949   04B2             #IFDEF TEC-1F 
0950   04B2             ;--------------------------------------------------
0951   04B2             ; CONVERT TEC KEY CODES TO SOUTHERN CROSS KEY CODES
0952   04B2             ;--------------------------------------------------
0953   04B2             ; CONVERT THE TEC KEYCODES;
0954   04B2             ; 'PLUS' (10H) TO 12H
0955   04B2             ; 'MINUS' (11H) TO 13H
0956   04B2             ; 'GO' (12H) TO 'FN' 10H
0957   04B2             ; 'AD' (13H) TO 11H
0958   04B2 E6 1F       KEYCVT	AND	1FH
0959   04B4 CB 67       	BIT	4,A		;ONLY KEYS ABOVE 0FH
0960   04B6 28 0D       	JR	Z,KEYCVT1
0961   04B8 FE 12       	CP	12H		;TEC GO KEY?
0962   04BA 28 07       	JR	Z,DEC2
0963   04BC FE 13       	CP	13H		;TEC AD KEY?
0964   04BE 28 03       	JR	Z,DEC2
0965   04C0             INC2
0966   04C0 3C          	INC	A
0967   04C1 3C          	INC	A
0968   04C2 C9          	RET
0969   04C3             DEC2
0970   04C3 3D          	DEC	A
0971   04C4 3D          	DEC	A
0972   04C5 C9          KEYCVT1	RET
0973   04C6             #ENDIF
0974   04C6             ;-----------------------------
0975   04C6             ; SCAN DISPLAY UNTIL KEY PRESS
0976   04C6             ;-----------------------------
0977   04C6             ; ENTRY : NONE
0978   04C6             ; EXIT  : A = KEY VALUE 00H TO 1FH
0979   04C6             ;         FLAG REGISTER MODIFIED
0980   04C6             ;
0981   04C6 CD 1D 04    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0982   04C9 CD 5D 04    	CALL	SCANKEY
0983   04CC CB 6F       	BIT	5,A
0984   04CE 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0985   04D0 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0986   04D2 C9          	RET
0987   04D3             ;-------------------------------
0988   04D3             ; SCAN DISPLAY UNTIL KEY RELEASE
0989   04D3             ;-------------------------------
0990   04D3             ; ENTRY : NONE
0991   04D3             ; EXIT  : NONE
0992   04D3             ;
0993   04D3 F5          SKEYRL	PUSH	AF
0994   04D4 CD 1D 04    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0995   04D7 CD 5D 04    	CALL	SCANKEY
0996   04DA CB 6F       	BIT	5,A
0997   04DC 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0998   04DE F1          	POP	AF
0999   04DF C9          	RET
1000   04E0             ;-------------------
1001   04E0             ; WAIT FOR KEY PRESS
1002   04E0             ;-------------------
1003   04E0             ; ENTRY : NONE
1004   04E0             ; EXIT  : A = KEY VALUE 00H TO 1FH
1005   04E0             ;         FLAG REGISTER MODIFIED
1006   04E0             ;
1007   04E0 CD 5D 04    KEYIN	CALL	SCANKEY
1008   04E3 CB 6F       	BIT	5,A
1009   04E5 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
1010   04E7 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1011   04E9 C9          	RET
1012   04EA             ;---------------------
1013   04EA             ; WAIT FOR KEY RELEASE
1014   04EA             ;---------------------
1015   04EA             ; ENTRY : NONE
1016   04EA             ; EXIT  : NONE
1017   04EA             ;
1018   04EA F5          KEYREL	PUSH	AF
1019   04EB CD 5D 04    KEYRL1	CALL	SCANKEY
1020   04EE CB 6F       	BIT	5,A
1021   04F0 20 F9       	JR	NZ,KEYRL1
1022   04F2 F1          	POP	AF
1023   04F3 C9          	RET
1024   04F4             ;-----------------
1025   04F4             ; KEY MENU HANDLER
1026   04F4             ;-----------------
1027   04F4             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
1028   04F4             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
1029   04F4             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
1030   04F4             ; ENTRY :  A = ELEMENT TO LOOK FOR
1031   04F4             ;         HL = POINTS TO TABLE
1032   04F4             ; EXIT  :  ELEMENT NOT FOUND
1033   04F4             ;           HL HOLDS ADDRESS OF LAST ELEMENT
1034   04F4             ;          ELEMENT FOUND
1035   04F4             ;           CONTROL PASSES TO JUMP ADDRESS WITH
1036   04F4             ;          RETURN ADDRESS OF MENU CALL ON STACK
1037   04F4             ;
1038   04F4 F5          MENU	PUSH	AF
1039   04F5 C5          	PUSH	BC
1040   04F6 D5          	PUSH	DE	;SAVE REGISTERS
1041   04F7 E5          	PUSH	HL	;CALCULATE ADDRESS
1042   04F8 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
1043   04FA 5E          	LD	E,(HL)	;ADDING THE INDEX TO
1044   04FB 23          	INC	HL	;THE ELEMENTS
1045   04FC 19          	ADD	HL,DE	;TO THE ADDR OF THE
1046   04FD 54          	LD	D,H	;TABLE
1047   04FE 5D          	LD	E,L
1048   04FF E1          	POP	HL
1049   0500 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
1050   0501 23          	INC	HL	;POINT TO LIST OF ENTRIES
1051   0502 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
1052   0503 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
1053   0505 23          	INC	HL	;NEXT ENTRY IN LIST
1054   0506 13          	INC	DE	;NEXT ENTRY IN
1055   0507 13          	INC	DE	;JUMP TABLE
1056   0508 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
1057   050A D1          	POP	DE
1058   050B C1          	POP	BC
1059   050C F1          	POP	AF
1060   050D C9          	RET	;NOT IN TABLE
1061   050E             ;
1062   050E             ; FOUND ELEMENT IN THE TABLE
1063   050E             ; PASS CONTROL TO THE JUMP HANDLER
1064   050E             ;
1065   050E 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
1066   050F 6F          	LD	L,A	;FROM THE TABLE
1067   0510 13          	INC	DE	;AND JUMP TO
1068   0511 1A          	LD	A,(DE)	;THE JUMP ADDRESS
1069   0512 67          	LD	H,A	;FOR THAT ENTRY
1070   0513 D1          	POP	DE
1071   0514 C1          	POP	BC
1072   0515 F1          	POP	AF	;RESTORE REGISTERS
1073   0516 E9          	JP	(HL)
1074   0517             ;-------------------
1075   0517             ; CALCULATE CHECKSUM
1076   0517             ;-------------------
1077   0517             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
1078   0517             ;
1079   0517             ; ENTRY : HL = START OF BLOCK TO SUM
1080   0517             ;         DE = END OF BLOCK TO SUM
1081   0517             ; EXIT  : A =  CHECKSUM
1082   0517             ;         FLAG REGISTER MODIFIED
1083   0517             ;
1084   0517 E5          CHKSUM	PUSH	HL
1085   0518 D5          	PUSH	DE
1086   0519 13          	INC	DE	;END OF BLOCK+1
1087   051A AF          	XOR	A	;CLEAR CHECKSUM
1088   051B 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
1089   051C 23          	INC	HL	;POINT TO NEXT ELEMENT
1090   051D A7          	AND	A	;SET CARRY
1091   051E E5          	PUSH	HL
1092   051F ED 52       	SBC	HL,DE	;SUBTRACT
1093   0521 E1          	POP	HL
1094   0522 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
1095   0524 D1          	POP	DE
1096   0525 E1          	POP	HL
1097   0526 C9          	RET
1098   0527             ;--------------------------
1099   0527             ; ACCESS BYTE LOOK UP TABLE
1100   0527             ;--------------------------
1101   0527             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
1102   0527             ; UP TABLE
1103   0527             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1104   0527             ;         HL = ADDRESS OF LOOK UP TABLE
1105   0527             ; EXIT : HL = ADDRESS OF ELEMENT A
1106   0527             ;
1107   0527 D5          INDEXB	PUSH	DE
1108   0528 5F          	LD	E,A	;USE DE AS INDEX
1109   0529 16 00       	LD	D,0	;TO ELEMENT IN TABLE
1110   052B 19          	ADD	HL,DE	;BY ADDING TO HL
1111   052C D1          	POP	DE
1112   052D C9          	RET
1113   052E             ;--------------------------
1114   052E             ; ACCESS WORD LOOK UP TABLE
1115   052E             ;--------------------------
1116   052E             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
1117   052E             ; UP TABLE
1118   052E             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1119   052E             ;         HL = ADDRESS OF LOOK UP TABLE
1120   052E             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
1121   052E             ;
1122   052E D5          INDEXW	PUSH	DE
1123   052F 5F          	LD	E,A
1124   0530 CB 23       	SLA	E	;MULTIPLY BY TWO
1125   0532 16 00       	LD	D,0
1126   0534 19          	ADD	HL,DE
1127   0535 D1          	POP	DE
1128   0536 C9          	RET
1129   0537             ;-------------------------------
1130   0537             ; GENERATE A QUASI-RANDOM NUMBER
1131   0537             ;-------------------------------
1132   0537             ; GENERATE AN 16 BIT RANDOM NUMBER
1133   0537             ; USING LINEAR CONGRUENTIAL METHOD.
1134   0537             ;     Rn+1 = (aRn+c) MOD m
1135   0537             ; REFRESH REGISTER USED FOR Rn AND c
1136   0537             ;	ENTRY : NONE
1137   0537             ;	EXIT  : HL = RANDOM WORD
1138   0537             ;	NO REGISTERS MODIFIED
1139   0537             ;
1140   0537 F5          RAND	PUSH	AF
1141   0538 C5          	PUSH	BC
1142   0539 D5          	PUSH	DE	;SAVE REGISTERS
1143   053A             ;
1144   053A             ; CALCULATE aRn
1145   053A             ;
1146   053A ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
1147   053C 5F          	LD	E,A	;(Rn) BY
1148   053D 16 00       	LD	D,0
1149   053F 21 48 05    	LD	HL,0548H	;CONSTANT (a)
1150   0542 CD 4F 05    	CALL	MUL16
1151   0545             ;
1152   0545             ; CALCULATE aRn+c
1153   0545             ;
1154   0545 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
1155   0547 06 00       	LD	B,0	;READ OF THE
1156   0549 4F          	LD	C,A	;THE REFRESH
1157   054A 09          	ADD	HL,BC	;REGISTER (c)
1158   054B D1          	POP	DE
1159   054C C1          	POP	BC
1160   054D F1          	POP	AF	;RESTORE REGISTERS
1161   054E C9          	RET
1162   054F             ;----------------------
1163   054F             ; 16 BIT MULTIPLICATION
1164   054F             ;----------------------
1165   054F             ;16 BIT MULTIPLY
1166   054F             ; ENTRY : HL = MULTIPLICAND (MPD)
1167   054F             ;         DE = MULTIPLIER (MPR)
1168   054F             ; EXIT : HL = RESULT
1169   054F             ;FROM ZAKS 'PROGRAMMING THE Z80'
1170   054F             ;
1171   054F F5          MUL16	PUSH	AF
1172   0550 C5          	PUSH	BC
1173   0551 4C          	LD	C,H	;MPR(H)
1174   0552 7D          	LD	A,L	;MPR(L)
1175   0553 06 10       	LD	B,16	;BIT COUNTER
1176   0555 21 00 00    	LD	HL,0	;CLEAR RESULT
1177   0558 CB 39       MULT	SRL	C	;MPR (H)
1178   055A 1F          	RRA	;MPR (L)
1179   055B 30 01       	JR	NC,MULT1	;TEST CARRY
1180   055D 19          	ADD	HL,DE	;ADD MPD TO RESULT
1181   055E EB          MULT1	EX	DE,HL
1182   055F 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1183   0560 EB          	EX	DE,HL
1184   0561 10 F5       	DJNZ	MULT	;DONE?
1185   0563 C1          	POP	BC
1186   0564 F1          	POP	AF
1187   0565 C9          	RET
1188   0566             ; MUSIC ROUTINE
1189   0566             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1190   0566             ; MONITOR MON-1
1191   0566             ; BY JOHN HARDY AND KEN STONE
1192   0566             ;
1193   0566             ;----------------
1194   0566             ; MUSIC SEQUENCER
1195   0566             ;----------------
1196   0566             ; SEQUENCES THROUGH A TABLE OF NOTES
1197   0566             ; 1EH = REPEAT TUNE UNTIL RESET
1198   0566             ; 1FH = PLAY ONCE AND RETURN
1199   0566             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1200   0566             ; EXIT : NO REGISTERS MODIFIED
1201   0566 F5          MUSIC	PUSH	AF
1202   0567 C5          	PUSH	BC
1203   0568 D5          	PUSH	DE
1204   0569 E5          	PUSH	HL	;SAVE REGISTERS
1205   056A E5          	PUSH	HL
1206   056B EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1207   056C             ;
1208   056C             ; PLAY EACH NOTE IN TURN
1209   056C             ;
1210   056C 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1211   056D E6 1F       	AND	1FH	;STRIP UNUSED BITS
1212   056F             ;
1213   056F             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1214   056F             ;
1215   056F FE 00       	CP	00H
1216   0571 C2 81 05    	JP	NZ,STEP1
1217   0574 01 00 10    	LD	BC,1000H
1218   0577 0B          PAUSE	DEC	BC
1219   0578 78          	LD	A,B
1220   0579 B1          	OR	C
1221   057A C2 77 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1222   057D 13          	INC	DE	;POINT TO NEXT ELEMENT
1223   057E C3 6C 05    	JP	STEP
1224   0581             ;
1225   0581             ; IF ELEMENT IS 1EH REPEAT TUNE
1226   0581             ;
1227   0581 FE 1E       STEP1	CP	1EH
1228   0583 C2 8B 05    	JP	NZ,STEP2
1229   0586 D1          	POP	DE	;GET TABLE ADDRESS BACK
1230   0587 D5          	PUSH	DE	;SAVE IT FOR LATER
1231   0588 C3 6C 05    	JP	STEP
1232   058B             ;
1233   058B             ; IF ELEMENT IS 1FH RETURN
1234   058B             ;
1235   058B FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1236   058D C2 96 05    	JP	NZ,STEP3
1237   0590 E1          	POP	HL
1238   0591 E1          	POP	HL
1239   0592 D1          	POP	DE
1240   0593 C1          	POP	BC
1241   0594 F1          	POP	AF
1242   0595 C9          	RET
1243   0596             ;
1244   0596             ;NOW PLAY THE NOTE
1245   0596             ;
1246   0596 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1247   0597 21 B2 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1248   059A CD 27 05    	CALL	INDEXB	;GET PERIOD/2
1249   059D 7E          	LD	A,(HL)	;GET ELEMENT
1250   059E F5          	PUSH	AF	;SAVE FOR LATER
1251   059F 78          	LD	A,B	;GET ELEMENT BACK IN A
1252   05A0 21 CA 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1253   05A3 CD 27 05    	CALL	INDEXB	;GET DURATION/2
1254   05A6 7E          	LD	A,(HL)	;GET ELEMENT
1255   05A7 6F          	LD	L,A
1256   05A8 26 00       	LD	H,0	;HL = DURATION/2
1257   05AA F1          	POP	AF
1258   05AB CD E3 05    	CALL	TONE	;DO NOTE ROUTINE
1259   05AE 13          	INC	DE
1260   05AF C3 6C 05    	JP	STEP	;STEP TO NEXT ELEMENT
1261   05B2             ;
1262   05B2             ; PERIOD/2 OF NOTE
1263   05B2             ;
1264   05B2 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1264   05B6 70 67 62 5C 
1265   05BA 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1265   05BE 45 41 3C 39 
1266   05C2 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1266   05C6 2A 27 25 23 
1267   05CA             ;
1268   05CA             ; NOTE DURATION/2
1269   05CA             ;
1270   05CA 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1270   05CE 1E 20 23 25 
1271   05D2 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1271   05D6 31 33 37 3A 
1272   05DA 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1272   05DE 4D 52 57 5C 
1273   05E2 10          	.DB	10H
1274   05E3             ; TONE ROUTINE
1275   05E3             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1276   05E3             ; MONITOR MON-1
1277   05E3             ; BY JOHN HARDY AND KEN STONE
1278   05E3             ;
1279   05E3             ;--------------
1280   05E3             ; OUTPUT A TONE
1281   05E3             ;--------------
1282   05E3             ;
1283   05E3             ; ENTRY : A = PERIOD/2 OF NOTE
1284   05E3             ;         HL = DURATION/2 OF NOTE
1285   05E3             ; EXIT NO REGISTERS MODIFIED
1286   05E3 F5          TONE	PUSH	AF
1287   05E4 C5          	PUSH	BC
1288   05E5 D5          	PUSH	DE
1289   05E6 E5          	PUSH	HL
1290   05E7 11 01 00    	LD	DE,0001H
1291   05EA 4F          	LD	C,A
1292   05EB 29          	ADD	HL,HL	;DOUBLE DURATION
1293   05EC AF          	XOR	A
1294   05ED EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1295   05EF F6 40       	OR	40H	;KEEP D6 HIGH
1296   05F1 D3 01       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1297   05F3 41          	LD	B,C
1298   05F4 C5          TONE2	PUSH	BC
1299   05F5 06 02       	LD	B,02H
1300   05F7 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1301   05F9 C1          	POP	BC
1302   05FA 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1303   05FC ED 52       	SBC	HL,DE	;END OF NOTE?
1304   05FE 20 ED       	JR	NZ,TONE1	;DO AGAIN
1305   0600 E1          	POP	HL
1306   0601 D1          	POP	DE
1307   0602 C1          	POP	BC
1308   0603 F1          	POP	AF
1309   0604 C9          	RET
1310   0605             ;---------------
1311   0605             ; KEY ENTRY BEEP
1312   0605             ;---------------
1313   0605 E5          BEEP	PUSH	HL
1314   0606 F5          	PUSH	AF
1315   0607 21 39 3F    	LD	HL,MODE
1316   060A CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1317   060C 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1318   060E             ;
1319   060E             ; DO KEYPRESS DELAY
1320   060E             ;
1321   060E D5          	PUSH	DE	;DO A SHORT
1322   060F 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1323   0612 2A 23 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1324   0615 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1325   0617 30 FC       	JR	NC,BEEP1	;KEY STROKES
1326   0619 D1          	POP	DE
1327   061A 18 10       	JR	BEEP3
1328   061C             ;
1329   061C             ; OUTPUT KEYPRESS TONES
1330   061C             ;
1331   061C 3E 24       BEEP2	LD	A,24H
1332   061E 21 30 00    	LD	HL,0030H
1333   0621 CD E3 05    	CALL	TONE	;DO FIRST TONE
1334   0624 3E 0E       	LD	A,0EH
1335   0626 21 50 00    	LD	HL,0050H
1336   0629 CD E3 05    	CALL	TONE	;DO SECOND TONE
1337   062C F1          BEEP3	POP	AF
1338   062D E1          	POP	HL
1339   062E C9          	RET
1340   062F             ;----------------------------------------
1341   062F             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1342   062F             ;----------------------------------------
1343   062F             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1344   062F             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1345   062F             ; ATTACHED).
1346   062F             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1347   062F             ; AND MODIFY REGISTERS.
1348   062F             ;
1349   062F E1          SSTEP	POP	HL	;GET HL BACK
1350   0630 F5          	PUSH	AF	;SAVE AF FOR LATER
1351   0631 22 49 3F    	LD	(TMPHL),HL
1352   0634 ED 53 47 3F 	LD	(TMPDE),DE
1353   0638 ED 43 45 3F 	LD	(TMPBC),BC
1354   063C DD 22 4B 3F 	LD	(TMPIX),IX
1355   0640 FD 22 4D 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1356   0644 E1          	POP	HL	;GET AF BACK
1357   0645 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
1358   0648 E1          	POP	HL	;GET PC RETURN ADDRESS
1359   0649 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
1360   064C ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1361   0650             ;
1362   0650             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1363   0650             ;
1364   0650 CD 05 06    	CALL	BEEP
1365   0653 3A 3F 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1366   0656 E6 07       	AND	7	;MAKE SURE IN LIMITS
1367   0658 32 3F 3F    	LD	(REGPNT),A	;SAVE IT
1368   065B CD 38 07    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1369   065E CD D3 04    	CALL	SKEYRL	;WAIT FOR A KEY
1370   0661 CD C6 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1371   0664 21 6D 06    	LD	HL,REGTBL	;HANDLE THE KEY
1372   0667 CD F4 04    	CALL	MENU	;AND UPDATE DISPLAY
1373   066A C3 5B 06    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1374   066D             ;
1375   066D             ; REGISTER DISPLAY KEY TABLE
1376   066D             ;
1377   066D 14          REGTBL	.DB	14H
1378   066E 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1378   0672 04 05 06 07 
1379   0676 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1379   067A 0C 0D 0E 0F 
1380   067E 10 11 12 13 	.DB	10H,11H,12H,13H
1381   0682 BA 06 BA 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1381   0686 BA 06 BA 06 
1382   068A BA 06 BA 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1382   068E BA 06 BA 06 
1383   0692 BA 06 BA 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1383   0696 BA 06 BA 06 
1384   069A BA 06 BA 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1384   069E BA 06 BA 06 
1385   06A2             ;
1386   06A2             ; MAKE THE GO KEY RETURN TO THE PROGRAM
1387   06A2             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
1388   06A2             ;
1389   06A2             #IFDEF TEC-1F
1390   06A2 EB 06 E1 06 	.DW RETPGM,RETMON,INCSTP,DECSTP
1390   06A6 0D 07 22 07 
1391   06AA~            #ELSE
1392   06AA~            	.DW	RETMON,RETPGM,INCSTP,DECSTP
1393   06AA             #ENDIF
1394   06AA             ;
1395   06AA             ; REGISTER NAME CHARACTERS
1396   06AA             ;
1397   06AA             #IFDEF TEC-1F
1398   06AA C3 4F       REGNAM	.DW	4FC3H
1399   06AC 47 6F C3 E6 	.DW	6F47H,0E6C3H,0ECC7H
1399   06B0 C7 EC 
1400   06B2 C2 66 6E 28 	.DW	66C2H,286EH,28AEH
1400   06B6 AE 28 
1401   06B8 4F A7       	.DW	0A74FH
1402   06BA~            #ELSE
1403   06BA~            REGNAM	.DW	7339H
1404   06BA~            	.DW	7771H,7C39H,5E79H
1405   06BA~            	.DW	7438H,0676H,066EH
1406   06BA~            	.DW	6D73H
1407   06BA             #ENDIF
1408   06BA             ;--------------
1409   06BA             ; EDIT REGISTER
1410   06BA             ;--------------
1411   06BA CD 05 06    REGKEY	CALL	BEEP
1412   06BD F5          	PUSH	AF	;SAVE KEY FOR LATER
1413   06BE 3A 3F 3F    	LD	A,(REGPNT)
1414   06C1             ;
1415   06C1             ; EDIT REGISTER
1416   06C1             ;
1417   06C1 21 41 3F    	LD	HL,TMPPC
1418   06C4 CD 2E 05    	CALL	INDEXW
1419   06C7 4E          	LD	C,(HL)
1420   06C8 23          	INC	HL
1421   06C9 46          	LD	B,(HL)	;GET REG CONTENTS
1422   06CA CB 21       	SLA	C
1423   06CC CB 10       	RL	B
1424   06CE CB 21       	SLA	C
1425   06D0 CB 10       	RL	B
1426   06D2 CB 21       	SLA	C
1427   06D4 CB 10       	RL	B	;SHIFT REGISTER
1428   06D6 CB 21       	SLA	C	;FOUR BITS
1429   06D8 CB 10       	RL	B	;LEFT AND
1430   06DA F1          	POP	AF	;PUT THE KEY
1431   06DB B1          	OR	C	;INTO THE LSN
1432   06DC 4F          	LD	C,A	;AND PUT THE
1433   06DD 70          	LD	(HL),B	;REGISTER BACK
1434   06DE 2B          	DEC	HL	;WHERE IT BELONGS
1435   06DF 71          	LD	(HL),C
1436   06E0 C9          	RET
1437   06E1             ;------------------
1438   06E1             ; RETURN TO MONITOR
1439   06E1             ;------------------
1440   06E1 CD 05 06    RETMON	CALL	BEEP
1441   06E4 CD D3 04    	CALL	SKEYRL
1442   06E7 FB          	EI	;ENABLE INTERRUPTS AGAIN
1443   06E8 C3 7D 02    	JP	MAIN
1444   06EB             ;------------------
1445   06EB             ; RETURN TO PROGRAM
1446   06EB             ;------------------
1447   06EB ED 7B 4F 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1448   06EF 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
1449   06F2 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1450   06F3 2A 43 3F    	LD	HL,(TMPAF)
1451   06F6 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1452   06F7 FD 2A 4D 3F 	LD	IY,(TMPIY)
1453   06FB DD 2A 4B 3F 	LD	IX,(TMPIX)
1454   06FF ED 4B 45 3F 	LD	BC,(TMPBC)
1455   0703 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1456   0707 F1          	POP	AF	;RESTORE AF
1457   0708 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
1458   070B FB          	EI	;ENABLE INTERRUPTS
1459   070C C9          	RET	;AND RETURN TO PROGRAM
1460   070D             ;----------------------
1461   070D             ; DISPLAY NEXT REGISTER
1462   070D             ;----------------------
1463   070D CD 05 06    INCSTP	CALL	BEEP
1464   0710 3A 3F 3F    	LD	A,(REGPNT)
1465   0713 FE 07       	CP	7	;END OF REG TABLE?
1466   0715 CA 1D 07    	JP	Z,INCSP1
1467   0718 3C          	INC	A
1468   0719 32 3F 3F    	LD	(REGPNT),A
1469   071C C9          	RET
1470   071D AF          INCSP1	XOR	A
1471   071E 32 3F 3F    	LD	(REGPNT),A
1472   0721 C9          	RET
1473   0722             ;--------------------------
1474   0722             ; DISPLAY PREVIOUS REGISTER
1475   0722             ;--------------------------
1476   0722 CD 05 06    DECSTP	CALL	BEEP
1477   0725 3A 3F 3F    	LD	A,(REGPNT)
1478   0728 FE 00       	CP	0	;START OF REG TABLE?
1479   072A CA 32 07    	JP	Z,DECSP1
1480   072D 3D          	DEC	A
1481   072E 32 3F 3F    	LD	(REGPNT),A
1482   0731 C9          	RET
1483   0732 3E 07       DECSP1	LD	A,7
1484   0734 32 3F 3F    	LD	(REGPNT),A
1485   0737 C9          	RET
1486   0738             ;-----------------
1487   0738             ; DISPLAY REGISTER
1488   0738             ;-----------------
1489   0738 3A 3F 3F    SETREG	LD	A,(REGPNT)
1490   073B 21 41 3F    	LD	HL,TMPPC	;START OF TABLE
1491   073E CD 2E 05    	CALL	INDEXW	;GET ELEMENT ADDRESS
1492   0741 5E          	LD	E,(HL)
1493   0742 23          	INC	HL
1494   0743 56          	LD	D,(HL)
1495   0744 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1496   0745 CD CF 03    	CALL	DISADD
1497   0748             ;
1498   0748             ; DISPLAY REGISTER NAME
1499   0748             ;
1500   0748 21 AA 06    	LD	HL,REGNAM
1501   074B CD 2E 05    	CALL	INDEXW
1502   074E 7E          	LD	A,(HL)
1503   074F 32 31 3F    	LD	(DISBUF+0),A
1504   0752 23          	INC	HL
1505   0753 7E          	LD	A,(HL)
1506   0754 32 32 3F    	LD	(DISBUF+1),A
1507   0757 C9          	RET
1508   0758             ;------------------
1509   0758             ; FUNCTION KEY MENU
1510   0758             ;------------------
1511   0758             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1512   0758             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1513   0758             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1514   0758             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1515   0758             ;
1516   0758 CD 05 06    FUNKEY	CALL	BEEP
1517   075B 2A 3B 3F    FUNKY1	LD	HL,(ADRESS)
1518   075E CD CF 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1519   0761             #IFDEF TEC-1F
1520   0761 21 0F AF    	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1521   0764~            #ELSE
1522   0764~            	LD	HL,7154H	;FN
1523   0764             #ENDIF
1524   0764 22 31 3F    	LD	(DISBUF),HL	;DISPLAY FN
1525   0767 CD D3 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1526   076A CD C6 04    FUNKY2	CALL	SKEYIN
1527   076D 2A 15 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1528   0770 CD F4 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1529   0773             ;
1530   0773             ; RETURN TO MAIN
1531   0773             ;
1532   0773 CD 05 06    CANCEL	CALL	BEEP
1533   0776 CD 76 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1534   0779 CD D3 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1535   077C C9          	RET
1536   077D             ;
1537   077D             ; FUNCTION MENU KEY TABLE
1538   077D             ;
1539   077D 11          FUNLST	.DB	11H
1540   077E 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1540   0782 04 05 06 07 
1541   0786 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1541   078A 0C 0D 0E 0F 
1542   078E 10          	.DB	10H	;FN KEY
1543   078F B5 07 BF 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1543   0793 DE 08 F0 08 
1544   0797 02 09 58 09 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1544   079B 96 09 CD 09 
1545   079F DB 09 EA 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1545   07A3 F9 09 08 0A 
1546   07A7 A2 0A 23 0C 	.DW	SECRET,RELSQR,SCOPE,TIME
1546   07AB 7C 0C 2B 0D 
1547   07AF B1 07       	.DW	FUNFUN
1548   07B1             ;-----------------------
1549   07B1             ; CALL FUNCTION FUNCTION
1550   07B1             ;-----------------------
1551   07B1 2A 2F 3F    FUNFUN	LD	HL,(FUNJMP)
1552   07B4 E9          	JP	(HL)
1553   07B5             ;------------------------------------------
1554   07B5             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1555   07B5             ;------------------------------------------
1556   07B5 CD 05 06    GOEXEC	CALL	BEEP
1557   07B8 CD EA 04    	CALL	KEYREL
1558   07BB             ;	POP	HL	;REMOVE EXEC RETURN
1559   07BB 2A 3B 3F    	LD	HL,(ADRESS)
1560   07BE E9          	JP	(HL)	;START EXECUCTION
1561   07BF             ;------------------------------------
1562   07BF             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1563   07BF             ;------------------------------------
1564   07BF CD 05 06    INTELFN	CALL	BEEP
1565   07C2 CD EA 04    	CALL	KEYREL
1566   07C5 CD CE 07    	CALL	INTELH
1567   07C8 C2 21 09    	JP	NZ,BLKMV1	;SHOW THE ERROR
1568   07CB C3 73 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1569   07CE             ;-----------------------
1570   07CE             ; RECEIVE INTEL HEX FILE
1571   07CE             ;-----------------------
1572   07CE DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1573   07D2             ;
1574   07D2             ; WAIT FOR RECORD MARK
1575   07D2             ;
1576   07D2 AF          INTEL1	XOR	A
1577   07D3 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1578   07D6 CD A4 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1579   07D9 FE 3A       	CP	':'	;TO BE TRANSMITTED
1580   07DB 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1581   07DD             ;
1582   07DD             ; GET RECORD LENGTH
1583   07DD             ;
1584   07DD CD 2A 08    	CALL	GETBYT
1585   07E0 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1586   07E3             ;
1587   07E3             ; GET ADDRESS FIELD
1588   07E3             ;
1589   07E3 CD 2A 08    	CALL	GETBYT
1590   07E6 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1591   07E9 CD 2A 08    	CALL	GETBYT
1592   07EC DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1593   07EF             ;
1594   07EF             ; GET RECORD TYPE
1595   07EF             ;
1596   07EF CD 2A 08    	CALL	GETBYT
1597   07F2 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1598   07F4             ;
1599   07F4             ; READ IN THE DATA
1600   07F4             ;
1601   07F4 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1602   07F7 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1603   07FA DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1604   07FD             
1605   07FD CD 2A 08    INTEL2	CALL	GETBYT	;GET DATA BYTE
1606   0800 77          	LD	(HL),A	;STORE DATA BYTE
1607   0801 23          	INC	HL
1608   0802 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1609   0804             ;
1610   0804             ; GET CHECKSUM AND COMPARE
1611   0804             ;
1612   0804 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1613   0807 ED 44       	NEG		;TWO'S COMPLEMENT
1614   0809 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1615   080C CD 2A 08    	CALL	GETBYT
1616   080F DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1617   0812 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1618   0815 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1619   0817 C9          	RET	;NZ=CHECKSUM ERROR
1620   0818             ;
1621   0818             ; END OF FILE RECORD
1622   0818             ;
1623   0818 DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1624   081B ED 44       	NEG		;TWO'S COMPLEMENT
1625   081D DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1626   0820 CD 2A 08    	CALL	GETBYT
1627   0823 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1628   0826 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1629   0829 C9          	RET	;NZ=CHECKSUM ERROR
1630   082A             ;--------------------------
1631   082A             ; GET BYTE FROM SERIAL PORT
1632   082A             ;--------------------------
1633   082A C5          GETBYT	PUSH	BC
1634   082B CD A4 08    	CALL	RXDATA
1635   082E CB 77       	BIT	6,A
1636   0830 28 02       	JR	Z,GETBT1
1637   0832 C6 09       	ADD	A,09H
1638   0834 E6 0F       GETBT1	AND	0FH
1639   0836 CB 27       	SLA 	A
1640   0838 CB 27       	SLA	A
1641   083A CB 27       	SLA	A
1642   083C CB 27       	SLA	A
1643   083E 4F          	LD	C,A
1644   083F             ;
1645   083F             ; GET LOW NYBBLE
1646   083F             ;
1647   083F CD A4 08    	CALL	RXDATA
1648   0842 CB 77       	BIT	6,A
1649   0844 28 02       	JR	Z,GETBT2
1650   0846 C6 09       	ADD	A,09H
1651   0848 E6 0F       GETBT2	AND	0FH
1652   084A B1          	OR	C
1653   084B 47          	LD	B,A
1654   084C DD 86 03    	ADD	A,(IX+3)
1655   084F DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1656   0852 78          	LD	A,B
1657   0853 A7          	AND	A	;CLEAR CARRY
1658   0854 C1          	POP	BC
1659   0855 C9          	RET
1660   0856             ;-------------------------------
1661   0856             ; CONVERT ASCII CHARACTER TO HEX
1662   0856             ;-------------------------------
1663   0856             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1664   0856             ;ENTRY : A= ASCII 0-9,A-F
1665   0856             ;EXIT  : A= HEX 0-F IN LSN
1666   0856             ; A AND F REGISTERS MODIFIED
1667   0856             ;
1668   0856 CB 77       ASCHEX	BIT	6,A
1669   0858 28 02       	JR	Z,ASCHX1
1670   085A C6 09       	ADD	A,09H
1671   085C E6 0F       ASCHX1	AND	0FH
1672   085E C9          	RET
1673   085F             ;------------------------------------
1674   085F             ; BIT BANG SERIAL PORT INITIALISATION
1675   085F             ;------------------------------------
1676   085F             ; SET THE SERIAL TRANSMIT PIN HIGH SO THE 
1677   085F             ; HOST CAN SEE THAT WE ARE PREPARING TO TRANSMIT
1678   085F             ; 
1679   085F             ; ENTRY : HL = BAUD RATE
1680   085F             ;         HL = 0 USE EXISTING BAUD CONSTANT
1681   085F             ; EXIT  : HL PRESERVED
1682   085F             ;       ; AF MODIFIED
1683   085F             ;
1684   085F 3E 40       SERINI	LD	A,40H
1685   0861 D3 01       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
1686   0863 06 32       	LD	B,50
1687   0865 CD 6F 08    	CALL	MSDELAY	;WAIT SO THE HOST SEES TX HIGH
1688   0868 7C          	LD	A,H
1689   0869 B5          	OR	L
1690   086A C8          	RET	Z	;HL IS ZERO DON'T UPDATE THE BAUD RATE
1691   086B 22 21 3F    	LD  (BAUD),HL	;UPDATE THE BAUD RATE
1692   086E C9              RET	
1693   086F             ;------------------
1694   086F             ; MILLISECOND DELAY
1695   086F             ;------------------
1696   086F             ; APPROX. 1 MILLISECOND DELAY
1697   086F             ; 
1698   086F             ; ENTRY : B = 1 TO 255 MILLISECONDS
1699   086F             ; EXIT  : B = 0
1700   086F             ;
1701   086F C5          MSDELAY	PUSH	BC	;11T
1702   0870 06 E9       	LD	B,233	;7T
1703   0872 00          MSDEL1	NOP	;4T
1704   0873 10 FD       	DJNZ	MSDEL1	;NZ=13T,Z=8T
1705   0875 C1          	POP	BC	;10T
1706   0876 10 F7       	DJNZ	MSDELAY	;NZ=13T,Z=8T
1707   0878 C9          	RET	;10T
1708   0879             ;------------------------
1709   0879             ; SERIAL TRANSMIT ROUTINE
1710   0879             ;------------------------
1711   0879             ;TRANSMIT BYTE SERIALLY ON DOUT
1712   0879             ;
1713   0879             ; ENTRY : A = BYTE TO TRANSMIT
1714   0879             ;  EXIT : NO REGISTERS MODIFIED
1715   0879             ;
1716   0879 F5          TXDATA	PUSH	AF
1717   087A C5          	PUSH	BC
1718   087B E5          	PUSH	HL
1719   087C 2A 21 3F    	LD	HL,(BAUD)
1720   087F 4F          	LD	C,A
1721   0880             ;
1722   0880             ; TRANSMIT START BIT
1723   0880             ;
1724   0880 AF          	XOR	A
1725   0881 D3 01       	OUT	(SCAN),A
1726   0883 CD D1 08    	CALL	BITIME
1727   0886             ;
1728   0886             ; TRANSMIT DATA
1729   0886             ;
1730   0886 06 08       	LD	B,08H
1731   0888 CB 09       	RRC	C
1732   088A CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1733   088C 79          	LD	A,C	;LSB FIRST AND OUTPUT
1734   088D E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1735   088F D3 01       	OUT	(SCAN),A
1736   0891 CD D1 08    	CALL	BITIME
1737   0894 10 F4       	DJNZ	NXTBIT
1738   0896             ;
1739   0896             ; SEND STOP BITS
1740   0896             ;
1741   0896 3E 40       	LD	A,40H
1742   0898 D3 01       	OUT	(SCAN),A
1743   089A CD D1 08    	CALL	BITIME
1744   089D CD D1 08    	CALL	BITIME
1745   08A0 E1          	POP	HL
1746   08A1 C1          	POP	BC
1747   08A2 F1          	POP	AF
1748   08A3 C9          	RET
1749   08A4             ;-----------------------
1750   08A4             ; SERIAL RECEIVE ROUTINE
1751   08A4             ;-----------------------
1752   08A4             ;RECEIVE SERIAL BYTE FROM DIN
1753   08A4             ;
1754   08A4             ; ENTRY : NONE
1755   08A4             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1756   08A4             ;
1757   08A4             ; REGISTERS MODIFIED A AND F
1758   08A4             ;
1759   08A4 C5          RXDATA	PUSH	BC
1760   08A5 E5          	PUSH	HL
1761   08A6             ;
1762   08A6             ; WAIT FOR START BIT
1763   08A6             ;
1764   08A6 DB 00       RXDAT1	IN	A,(KEYBUF)
1765   08A8 CB 7F       	BIT	7,A
1766   08AA 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1767   08AC             ;
1768   08AC             ; DETECTED START BIT
1769   08AC             ;
1770   08AC 2A 21 3F    	LD	HL,(BAUD)
1771   08AF CB 3C       	SRL	H
1772   08B1 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1773   08B3 CD D1 08    	CALL	BITIME
1774   08B6 DB 00       	IN	A,(KEYBUF)
1775   08B8 CB 7F       	BIT	7,A
1776   08BA 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1777   08BC             ;
1778   08BC             ; DETECTED VALID START BIT,READ IN DATA
1779   08BC             ;
1780   08BC 06 08       	LD	B,08H
1781   08BE 2A 21 3F    RXDAT2	LD	HL,(BAUD)
1782   08C1 CD D1 08    	CALL	BITIME	;DELAY ONE BIT TIME
1783   08C4 DB 00       	IN	A,(KEYBUF)
1784   08C6 CB 17       	RL	A
1785   08C8 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1786   08CA 10 F2       	DJNZ	RXDAT2
1787   08CC 79          	LD	A,C
1788   08CD B7          	OR	A	;CLEAR CARRY FLAG
1789   08CE E1          	POP	HL
1790   08CF C1          	POP	BC
1791   08D0 C9          	RET
1792   08D1             ;---------------
1793   08D1             ; BIT TIME DELAY
1794   08D1             ;---------------
1795   08D1             ;DELAY FOR ONE SERIAL BIT TIME
1796   08D1             ;ENTRY : HL = DELAY TIME
1797   08D1             ; NO REGISTERS MODIFIED
1798   08D1             ;
1799   08D1 E5          BITIME	PUSH	HL
1800   08D2 D5          	PUSH	DE
1801   08D3 11 01 00    	LD	DE,0001H
1802   08D6 ED 52       BITIM1	SBC	HL,DE
1803   08D8 D2 D6 08    	JP	NC,BITIM1
1804   08DB D1          	POP	DE
1805   08DC E1          	POP	HL
1806   08DD C9          	RET
1807   08DE             ;-----------------------------
1808   08DE             ; FUNCTION 2 - ENTER ADDRESS 1
1809   08DE             ;-----------------------------
1810   08DE CD 05 06    ADDRA	CALL	BEEP
1811   08E1 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1812   08E4 22 29 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1813   08E7             #IFDEF TEC-1F
1814   08E7 21 00 C3    	LD	HL,0C300H	;ADDRESS [
1815   08EA~            #ELSE
1816   08EA~            	LD	HL,3900H	;ADDRESS [
1817   08EA             #ENDIF
1818   08EA CD 4A 09    	CALL	SDELAY
1819   08ED C3 76 07    	JP	CANCL1
1820   08F0             ;-----------------------------
1821   08F0             ; FUNCTION 3 - ENTER ADDRESS 2
1822   08F0             ;-----------------------------
1823   08F0 CD 05 06    ADDRB	CALL	BEEP
1824   08F3 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1825   08F6 22 2B 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1826   08F9             #IFDEF TEC-1F
1827   08F9 21 A9 00    	LD	HL,00A9H	;ADDRESS ]
1828   08FC~            #ELSE
1829   08FC~            	LD	HL,000FH	;ADDRESS ]
1830   08FC             #ENDIF
1831   08FC CD 4A 09    	CALL	SDELAY
1832   08FF C3 76 07    	JP	CANCL1
1833   0902             ;------------------------
1834   0902             ; FUNCTION 4 - BLOCK MOVE
1835   0902             ;------------------------
1836   0902 CD 05 06    BLKMVE	CALL	BEEP
1837   0905 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1838   0908 22 2D 3F    	LD	(BLKDST),HL	;ADDRESS AS
1839   090B             #IFDEF TEC-1F
1840   090B 21 A9 C3    	LD	HL,0C3A9H	;DESTINATION
1841   090E~            #ELSE
1842   090E~            	LD	HL,390FH	;DESTINATION
1843   090E             #ENDIF
1844   090E CD 4A 09    	CALL	SDELAY
1845   0911             ;
1846   0911             ; CALCULATE NUMBER OF BYTES TO MOVE
1847   0911             ;
1848   0911 2A 2B 3F    	LD	HL,(BLKEND)
1849   0914 ED 5B 29 3F 	LD	DE,(BLKSRT)
1850   0918 A7          	AND	A
1851   0919 ED 52       	SBC	HL,DE
1852   091B 23          	INC	HL	;MAKE MOVE INCLUSIVE
1853   091C 22 27 3F    	LD	(COUNT),HL
1854   091F 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1855   0921             ;
1856   0921             ; SHOW ERROR
1857   0921             ;
1858   0921             #IFDEF TEC-1F
1859   0921 21 C7 00    BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1860   0924~            #ELSE
1861   0924~            BLKMV1	LD	HL,0079H	;SHOW ERROR E
1862   0924             #ENDIF
1863   0924 CD 05 06    BLKMV2	CALL	BEEP
1864   0927 22 31 3F    	LD	(DISBUF),HL	;AND WAIT
1865   092A CD C6 04    	CALL	SKEYIN	;FOR KEYPRESS
1866   092D CD 05 06    	CALL	BEEP
1867   0930 CD D3 04    	CALL	SKEYRL
1868   0933 C3 76 07    	JP	CANCL1
1869   0936             ;
1870   0936             ; MOVE BLOCK
1871   0936             ;
1872   0936 CD 3C 09    BLKMV3	CALL	MOVE
1873   0939 C3 76 07    	JP	CANCL1
1874   093C             ;-----------
1875   093C             ; BLOCK MOVE
1876   093C             ;-----------
1877   093C ED 4B 27 3F MOVE	LD	BC,(COUNT)
1878   0940 2A 29 3F    	LD	HL,(BLKSRT)	;START ADDR
1879   0943 ED 5B 2D 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1880   0947 ED B0       	LDIR
1881   0949 C9          	RET
1882   094A             ;-------------------------------
1883   094A             ; SCAN DISPLAY UNTIL KEY RELEASE
1884   094A             ;-------------------------------
1885   094A 22 31 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1886   094D 06 FF       	LD	B,255	;IN DATA DISPLAYS
1887   094F CD 1D 04    SDELY1	CALL	SCAND	;UNTIL KEY
1888   0952 10 FB       	DJNZ SDELY1	;IS RELEASED
1889   0954 CD D3 04    	CALL	SKEYRL
1890   0957 C9          	RET
1891   0958             ;---------------------------
1892   0958             ;FUNCTION 5 - BLOCK CHECKSUM
1893   0958             ;---------------------------
1894   0958 CD 05 06    BLKSUM	CALL	BEEP
1895   095B             #IFDEF TEC-1F
1896   095B 21 A7 C3    	LD	HL,0C3A7H	;CS
1897   095E~            #ELSE
1898   095E~            	LD	HL,396DH	;CS
1899   095E             #ENDIF
1900   095E CD 4A 09    	CALL	SDELAY	;SHOW PROMPT
1901   0961 ED 5B 29 3F 	LD	DE,(BLKSRT)
1902   0965 2A 2B 3F    	LD	HL,(BLKEND)
1903   0968 A7          	AND	A
1904   0969 ED 52       	SBC	HL,DE
1905   096B 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1906   096C 22 27 3F    	LD	(COUNT),HL
1907   096F 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1908   0971             ;
1909   0971             ; SHOW ERROR
1910   0971             ;
1911   0971 C3 21 09    	JP	BLKMV1
1912   0974             ;
1913   0974             ; CALCULATE CHECKSUM
1914   0974             ;
1915   0974 2A 29 3F    BLKSM1	LD	HL,(BLKSRT)
1916   0977 ED 5B 2B 3F 	LD	DE,(BLKEND)
1917   097B CD 17 05    	CALL	CHKSUM	;DO THE CHECKSUM,
1918   097E CD E4 03    	CALL	DISBYT	;DISPLAY
1919   0981 2A 27 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1920   0984 CD CF 03    	CALL	DISADD	;SUMMED AND
1921   0987 CD 05 06    	CALL	BEEP
1922   098A CD C6 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1923   098D CD 05 06    	CALL	BEEP	;A KEY IS PRESSED
1924   0990 CD D3 04    	CALL	SKEYRL
1925   0993 C3 76 07    	JP	CANCL1
1926   0996             ;----------------------------------------
1927   0996             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1928   0996             ;----------------------------------------
1929   0996 CD 05 06    BRANCH	CALL	BEEP
1930   0999             #IFDEF TEC-1F
1931   0999 21 E6 44    	LD	HL,44E6H	;RB
1932   099C~            #ELSE
1933   099C~            	LD	HL,507CH	;RB
1934   099C             #ENDIF
1935   099C CD 4A 09    	CALL	SDELAY
1936   099F 2A 3B 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1937   09A2 ED 5B 29 3F 	LD	DE,(BLKSRT)
1938   09A6 13          	INC	DE	;POINT TO PC+2
1939   09A7 A7          	AND	A
1940   09A8 ED 52       	SBC	HL,DE	;SUBTRACT
1941   09AA             ;
1942   09AA             ;TEST HIGH BYTE OF RESULT TO
1943   09AA             ;DETERMINE IF BACKWARD BRANCH
1944   09AA             ;
1945   09AA 7C          	LD	A,H
1946   09AB FE FF       	CP	255	;BACKWARD BRANCH?
1947   09AD C2 B8 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1948   09B0             ;
1949   09B0             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1950   09B0             ;
1951   09B0 7D          	LD	A,L
1952   09B1 CB 7F       	BIT	7,A
1953   09B3 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1954   09B5 C3 21 09    	JP	BLKMV1	;TOO FAR BACK
1955   09B8             ;
1956   09B8             ;TEST HIGH BYTE OF RESULT TO
1957   09B8             ;DETERMINE IF FORWARD BRANCH
1958   09B8             ;
1959   09B8 FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1960   09BA C2 21 09    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1961   09BD             ;
1962   09BD             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1963   09BD             ;
1964   09BD 7D          	LD	A,L
1965   09BE CB 7F       	BIT	7,A
1966   09C0 C2 21 09    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1967   09C3             ;
1968   09C3             ; WITHIN LIMITS PUT IN RAM
1969   09C3             ; AND SHOW AS CURRENT ADDRESS
1970   09C3             ;
1971   09C3 2A 29 3F    BRNCH2	LD	HL,(BLKSRT)
1972   09C6 22 3B 3F    	LD	(ADRESS),HL
1973   09C9 77          	LD	(HL),A
1974   09CA C3 76 07    	JP	CANCL1
1975   09CD             ;-----------------------------------------
1976   09CD             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1977   09CD             ;-----------------------------------------
1978   09CD CD 05 06    TRACE	CALL	BEEP
1979   09D0             #IFDEF TEC-1F
1980   09D0 D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1981   09D2 21 46 00    	LD	HL,0046H	;SHOW T
1982   09D5~            #ELSE
1983   09D5~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1984   09D5~            	LD	HL,0070H	;SHOW T
1985   09D5             #ENDIF
1986   09D5 CD 4A 09    	CALL	SDELAY
1987   09D8 C3 76 07    	JP	CANCL1
1988   09DB             ;-------------------------
1989   09DB             ; FUNCTION 8 - PLAY TUNE 1
1990   09DB             ;-------------------------
1991   09DB CD 05 06    PLAY1	CALL	BEEP
1992   09DE CD EA 04    	CALL	KEYREL
1993   09E1 21 16 0A    	LD	HL,TUNE1
1994   09E4 CD 66 05    	CALL	MUSIC
1995   09E7 C3 76 07    	JP	CANCL1
1996   09EA             ;-------------------------
1997   09EA             ; FUNCTION 9 - PLAY TUNE 2
1998   09EA             ;-------------------------
1999   09EA CD 05 06    PLAY2	CALL	BEEP
2000   09ED CD EA 04    	CALL	KEYREL
2001   09F0 21 56 0A    	LD	HL,TUNE2
2002   09F3 CD 66 05    	CALL	MUSIC
2003   09F6 C3 76 07    	JP	CANCL1
2004   09F9             ;------------------------------
2005   09F9             ; FUNCTION A - PLAY TUNE IN RAM
2006   09F9             ;------------------------------
2007   09F9 CD 05 06    PLAY3	CALL	BEEP
2008   09FC CD EA 04    	CALL	KEYREL
2009   09FF 2A 3B 3F    	LD	HL,(ADRESS)
2010   0A02 CD 66 05    	CALL	MUSIC
2011   0A05 C3 76 07    	JP	CANCL1
2012   0A08             ;-----------------------------
2013   0A08             ; FUNCTION B - TOGGLE KEY BEEP
2014   0A08             ;-----------------------------
2015   0A08 CD 05 06    SWBEEP	CALL	BEEP
2016   0A0B 3A 39 3F    	LD	A,(MODE)
2017   0A0E EE 40       	XOR	40H
2018   0A10 32 39 3F    	LD	(MODE),A
2019   0A13 C3 76 07    	JP	CANCL1
2020   0A16             ;
2021   0A16             ; TUNE 1
2022   0A16             ; FROM TALKING ELECTRONICS TEC-1
2023   0A16             ; MONITOR MON-1
2024   0A16             ; BY JOHN HARDY AND KEN STONE
2025   0A16             ;
2026   0A16 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2026   0A1A 06 0D 0A 0D 
2027   0A1E 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2027   0A22 0F 11 12 0F 
2028   0A26 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2028   0A2A 12 0F 0D 0A 
2029   0A2E 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
2029   0A32 0F 0A 0D 0F 
2030   0A36 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2030   0A3A 06 0D 0A 0D 
2031   0A3E 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2031   0A42 0F 11 12 0F 
2032   0A46 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2032   0A4A 12 0F 0D 0A 
2033   0A4E 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
2033   0A52 06 12 00 1E 
2034   0A56             ;
2035   0A56             ; TUNE 2
2036   0A56             ; FROM TALKING ELECTRONICS TEC-1
2037   0A56             ; MONITOR MON-1
2038   0A56             ; BY JOHN HARDY AND KEN STONE
2039   0A56             ;
2040   0A56 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
2040   0A5A 0A 0A 06 06 
2041   0A5E 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
2041   0A62 0A 0A 0A 0A 
2042   0A66 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
2042   0A6A 08 0A 0A 0A 
2043   0A6E 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
2043   0A72 08 0A 0D 0D 
2044   0A76 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
2044   0A7A 0D 05 08 0B 
2045   0A7E 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
2045   0A82 06 0B 0A 08 
2046   0A86 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
2046   0A8A 06 06 0B 0A 
2047   0A8E 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
2047   0A92 08 08 0A 0B 
2048   0A96 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
2048   0A9A 06 06 06 06 
2049   0A9E 00 00 00 1E 	.DB	00H,00H,00H,1EH
2050   0AA2             ;---------------------------
2051   0AA2             ; FUNCTION C - SECRET NUMBER
2052   0AA2             ;---------------------------
2053   0AA2 CD 05 06    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
2054   0AA5 CD EA 04    	CALL	KEYREL	;AND CLEAR DISPLAY
2055   0AA8 CD 4E 04    	CALL	CLRBUF	;BUFFER
2056   0AAB DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
2057   0AAF             ;
2058   0AAF             ; SEPARATE NYBBLES IN RANDOM NUMBER
2059   0AAF             ;
2060   0AAF CD 37 05    	CALL	RAND
2061   0AB2 DD 75 0B    	LD	(IX+11),L
2062   0AB5 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
2063   0AB8 DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
2064   0ABB CD 10 0C    	CALL	SPLIT	;NUMBER INTO
2065   0ABE DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
2066   0AC1 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
2067   0AC4 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
2068   0AC7 CD 10 0C    	CALL	SPLIT	;GUESS EASIER
2069   0ACA DD 75 06    	LD	(IX+6),L
2070   0ACD DD 74 07    	LD	(IX+7),H
2071   0AD0 AF          	XOR	A
2072   0AD1 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
2073   0AD3 21 00 00    	LD	HL,0
2074   0AD6 DD 75 08    	LD	(IX+8),L
2075   0AD9 DD 74 09    	LD	(IX+9),H
2076   0ADC CD CF 03    	CALL	DISADD	;AND DISPLAY GUESS
2077   0ADF             ;
2078   0ADF             ; SCAN THE KEYBOARD
2079   0ADF             ;
2080   0ADF CD C6 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
2081   0AE2 21 EE 0A    	LD	HL,SECNUM
2082   0AE5 CD F4 04    	CALL	MENU	;EXECUTE KEY HANDLER
2083   0AE8 CD D3 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2084   0AEB C3 DF 0A    	JP	SECRT1
2085   0AEE             ;
2086   0AEE             ; SECRET NUMBER KEY TABLE
2087   0AEE             ;
2088   0AEE 12          SECNUM	.DB	12H
2089   0AEF 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
2089   0AF3 04 05 06 07 
2090   0AF7 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
2090   0AFB 0C 0D 0E 0F 
2091   0AFF 10 11       	.DB	10H,11H
2092   0B01 25 0B 25 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2092   0B05 25 0B 25 0B 
2093   0B09 25 0B 25 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2093   0B0D 25 0B 25 0B 
2094   0B11 25 0B 25 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2094   0B15 25 0B 25 0B 
2095   0B19 25 0B 25 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2095   0B1D 25 0B 25 0B 
2096   0B21             ;
2097   0B21             ; MAKE THE GO KEY CHECK THE NUMBER
2098   0B21             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
2099   0B21             ;
2100   0B21             #IFDEF TEC-1F
2101   0B21 55 0B 4C 0B 	.DW	CHKKEY,ENDKEY
2102   0B25~            #ELSE
2103   0B25~            	.DW	ENDKEY,CHKKEY
2104   0B25             #ENDIF
2105   0B25             ;---------------
2106   0B25             ; EDIT GUESS KEY
2107   0B25             ;---------------
2108   0B25 F5          EDTKEY	PUSH	AF
2109   0B26 DD 6E 08    	LD	L,(IX+8)
2110   0B29 DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
2111   0B2C CB 25       	SLA	L
2112   0B2E CB 14       	RL	H	;AND DO A 16 BIT
2113   0B30 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
2114   0B32 CB 14       	RL	H	;TO MAKE  ROOM
2115   0B34 CB 25       	SLA	L	;FOR THE NEW KEY
2116   0B36 CB 14       	RL	H
2117   0B38 CB 25       	SLA	L
2118   0B3A CB 14       	RL	H
2119   0B3C F1          	POP	AF
2120   0B3D B5          	OR	L	;IT IN THE LEAST
2121   0B3E 6F          	LD	L,A	;SIGNIFICANT NYBBLE
2122   0B3F DD 75 08    	LD	(IX+8),L
2123   0B42 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
2124   0B45 CD CF 03    	CALL	DISADD
2125   0B48 CD 05 06    	CALL	BEEP
2126   0B4B C9          	RET
2127   0B4C             ;----------
2128   0B4C             ; QUIT GAME
2129   0B4C             ;----------
2130   0B4C CD 05 06    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
2131   0B4F CD EA 04    	CALL	KEYREL	;AND RETURN TO
2132   0B52 C3 7D 02    	JP	MAIN	;MONITOR
2133   0B55             ;---------------------------
2134   0B55             ; SEE IF ITS THE RIGHT GUESS
2135   0B55             ;---------------------------
2136   0B55 CD 05 06    CHKKEY	CALL	BEEP
2137   0B58 ED 57       	LD	A,I
2138   0B5A 3C          	INC	A
2139   0B5B 27          	DAA	;INC BCD NO. OF TRIES
2140   0B5C             ;
2141   0B5C             ; BRIEFLY SHOW GUESS NO.
2142   0B5C             ;
2143   0B5C ED 47       	LD	I,A
2144   0B5E CD E4 03    	CALL	DISBYT
2145   0B61 06 FF       	LD	B,255
2146   0B63 CD 1D 04    CHKKY1	CALL	SCAND
2147   0B66 10 FB       	DJNZ	CHKKY1
2148   0B68             ;
2149   0B68             ; SEPARATE GUESS INTO NYBBLES
2150   0B68             ;
2151   0B68 DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
2152   0B6B CD 10 0C    	CALL	SPLIT	;NUMBER INTO
2153   0B6E DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
2154   0B71 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
2155   0B74 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
2156   0B77 CD 10 0C    	CALL	SPLIT	;GUESS EASIER
2157   0B7A DD 75 02    	LD	(IX+2),L
2158   0B7D DD 74 03    	LD	(IX+3),H
2159   0B80             ;
2160   0B80             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
2161   0B80             ;
2162   0B80 AF          	XOR	A
2163   0B81 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
2164   0B84 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
2165   0B87 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
2166   0B8A 06 04       	LD	B,4	;NUMBER OF DIGITS
2167   0B8C 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
2168   0B8D EB          	EX	DE,HL
2169   0B8E BE          	CP	(HL)	;SAME AS GUESS?
2170   0B8F 20 10       	JR	NZ,CHKKY4	;NOT SAME
2171   0B91 DD 7E 0A    	LD	A,(IX+10)
2172   0B94 C6 10       	ADD	A,10H	;RIGHT POSITION
2173   0B96 DD 77 0A    	LD	(IX+10),A
2174   0B99 23          CHKKY3	INC	HL	;POINT TO NEXT
2175   0B9A EB          	EX	DE,HL	;DIGIT POSITION
2176   0B9B 23          	INC	HL	;AND GO
2177   0B9C 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
2178   0B9E C3 BD 0B    	JP	CHKKY8
2179   0BA1             ;
2180   0BA1             ; CHECK IF NUMBER IS THERE
2181   0BA1             ;
2182   0BA1 C5          CHKKY4	PUSH	BC
2183   0BA2 E5          	PUSH	HL
2184   0BA3 06 04       	LD	B,4	;CHECK EACH DIGIT
2185   0BA5 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
2186   0BA8 BE          CHKKY5	CP	(HL)	;NUMBER IS IN
2187   0BA9 23          	INC	HL	;THE WRONG
2188   0BAA 20 0A       	JR	NZ,CHKKY6	;POSITION
2189   0BAC DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
2190   0BAF 3C          	INC	A	;THE RESULT
2191   0BB0 DD 77 0A    	LD	(IX+10),A
2192   0BB3 C3 B8 0B    	JP	CHKKY7
2193   0BB6 10 F0       CHKKY6	DJNZ	CHKKY5
2194   0BB8 E1          CHKKY7	POP	HL
2195   0BB9 C1          	POP	BC
2196   0BBA C3 99 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
2197   0BBD             ;
2198   0BBD             ; CHECK IF CORRECT
2199   0BBD             ;
2200   0BBD DD 7E 0A    CHKKY8	LD	A,(IX+10)
2201   0BC0 FE 40       	CP	40H	;IS IT CORRECT?
2202   0BC2 CA E2 0B    	JP	Z,CHKKY9	;YES!
2203   0BC5 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
2204   0BC8 CD E4 03    	CALL	DISBYT	;IN DATA DISPLAYS
2205   0BCB ED 57       	LD	A,I	;WAS THAT THE
2206   0BCD FE 20       	CP	20H	;LAST GUESS?
2207   0BCF C0          	RET	NZ	;NO TRY AGAIN
2208   0BD0             ;
2209   0BD0             ; RAN OUT OF TRYS
2210   0BD0             ;
2211   0BD0 CD 4E 04    	CALL	CLRBUF	;DISPLAY
2212   0BD3 DD 6E 0B    	LD	L,(IX+11)
2213   0BD6 DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
2214   0BD9 CD CF 03    	CALL	DISADD	;AND PLAY
2215   0BDC 21 09 0C    	LD	HL,LOSE	;THE LOSE
2216   0BDF C3 F0 0B    	JP	CHKKYA	;MUSIC
2217   0BE2             ;
2218   0BE2             ; GOT THE RIGHT ANSWER
2219   0BE2             ;
2220   0BE2 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2221   0BE4 CD E4 03    	CALL	DISBYT	;AND PLAY THE WIN
2222   0BE7 DD 6E 0B    	LD	L,(IX+11)
2223   0BEA DD 66 0C    	LD	H,(IX+12)
2224   0BED 21 00 0C    	LD	HL,WIN	;MUSIC
2225   0BF0             ;
2226   0BF0             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2227   0BF0             ;
2228   0BF0 CD 66 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2229   0BF3 CD C6 04    	CALL	SKEYIN	;WAIT FOR A KEY
2230   0BF6 CD 05 06    	CALL	BEEP
2231   0BF9 CD D3 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2232   0BFC E1          	POP	HL	;AND RESTART THE GAME
2233   0BFD C3 A2 0A    	JP	SECRET
2234   0C00             ;
2235   0C00             ; WIN AND LOSE MUSIC
2236   0C00             ; FROM TALKING ELECTRONICS TEC-1
2237   0C00             ; MONITOR MON-1
2238   0C00             ; BY JOHN HARDY AND KEN STONE
2239   0C00             ;
2240   0C00 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2240   0C04 17 12 14 10 
2240   0C08 1F 
2241   0C09 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2241   0C0D 01 11 1F 
2242   0C10             ;-------------------------------
2243   0C10             ; SEPARATE BYTE INTO TWO NYBBLES
2244   0C10             ;-------------------------------
2245   0C10             ;SEPARATES A BYTE INTO TWO
2246   0C10             ;RIGHT JUSTIFIED NYBBLES
2247   0C10             ; ENTRY : A = BYTE TO BE SEPARATED
2248   0C10             ; EXIT  : H = MSN
2249   0C10             ;         L = LSN
2250   0C10             ;
2251   0C10 F5          SPLIT	PUSH	AF
2252   0C11 C5          	PUSH	BC
2253   0C12 47          	LD	B,A	;SAVE BYTE
2254   0C13 E6 0F       	AND	0FH	;STRIP BITS LSN
2255   0C15 6F          	LD	L,A	;RETURN LSN IN L
2256   0C16 78          	LD	A,B
2257   0C17 CB 3F       	SRL	A
2258   0C19 CB 3F       	SRL	A
2259   0C1B CB 3F       	SRL	A	;MOVE MSN
2260   0C1D CB 3F       	SRL	A	;INTO LSN
2261   0C1F 67          	LD	H,A	;RETURN MSN IN H
2262   0C20 C1          	POP	BC
2263   0C21 F1          	POP	AF
2264   0C22 C9          	RET
2265   0C23             ;-----------------------------------
2266   0C23             ; FUNCTION D - RELAY BOARD SEQUENCER
2267   0C23             ;-----------------------------------
2268   0C23 CD 05 06    RELSQR	CALL	BEEP
2269   0C26 CD EA 04    	CALL	KEYREL
2270   0C29 21 32 0C    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2271   0C2C CD 38 0C    	CALL	RLSTEP
2272   0C2F C3 76 07    	JP	CANCL1
2273   0C32             ;--------------
2274   0C32             ; TEST SEQUENCE
2275   0C32             ;--------------
2276   0C32 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2276   0C36 00 FF 
2277   0C38             ;----------------
2278   0C38             ; RELAY SEQUENCER
2279   0C38             ;----------------
2280   0C38             ; SEQUENCES RELAYS ON RELAY BOARD
2281   0C38             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2282   0C38             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2283   0C38             ; OR REPEAT.
2284   0C38             ;  TABLE:
2285   0C38             ;  <BYTE1>,<BYTE2>
2286   0C38             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2287   0C38             ;  BYTE2 = FF - REPEAT
2288   0C38             ;          00 - FINISHED
2289   0C38             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2290   0C38             ;  EXIT : NONE MODIFIED
2291   0C38             ;
2292   0C38 F5          RLSTEP	PUSH	AF
2293   0C39 C5          	PUSH	BC
2294   0C3A D5          	PUSH	DE
2295   0C3B E5          	PUSH	HL	;SAVE REGISTERS
2296   0C3C E5          	PUSH	HL
2297   0C3D EB          	EX	DE,HL	;GET ADDRESS OF DATA
2298   0C3E 1A          RELSR1	LD	A,(DE)
2299   0C3F 4F          	LD	C,A	;GET OUTPUT DATA
2300   0C40 13          	INC	DE
2301   0C41 1A          	LD	A,(DE)	;GET TIME DELAY
2302   0C42 FE 00       	CP	0
2303   0C44 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2304   0C46 FE FF       	CP	255
2305   0C48 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2306   0C4A 47          	LD	B,A
2307   0C4B 79          	LD	A,C
2308   0C4C             #IFDEF TEC-1F
2309   0C4C D3 03       	OUT	(PORT3),A	;STROBE
2310   0C4E~            #ELSE
2311   0C4E~            	OUT	(IO1),A
2312   0C4E             #ENDIF
2313   0C4E 13          	INC	DE
2314   0C4F CD 66 0C    RELSR2	CALL	DELONE	;1 SEC DELAY
2315   0C52 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2316   0C54 C3 3E 0C    	JP	RELSR1
2317   0C57             ;
2318   0C57             ; REPEAT
2319   0C57             ;
2320   0C57 D1          RELSR3	POP	DE	;GET START ADDRESS
2321   0C58 D5          	PUSH	DE	;SAVE FOR LATER
2322   0C59 C3 3E 0C    	JP	RELSR1
2323   0C5C             ;
2324   0C5C             ; FINISHED
2325   0C5C             ;
2326   0C5C 3E 00       RELSR4	LD	A,00H
2327   0C5E             #IFDEF TEC-1F
2328   0C5E D3 03       	OUT	(PORT3),A	;STROBE
2329   0C60~            #ELSE
2330   0C60~            	OUT	(IO1),A	;CLEAR OUTPUT REG
2331   0C60             #ENDIF
2332   0C60 E1          	POP	HL
2333   0C61 E1          	POP	HL
2334   0C62 D1          	POP	DE
2335   0C63 C1          	POP	BC
2336   0C64 F1          	POP	AF
2337   0C65 C9          	RET
2338   0C66             ;-----------------
2339   0C66             ; ONE SECOND DELAY
2340   0C66             ;-----------------
2341   0C66             ;
2342   0C66             ; ENTRY : NONE
2343   0C66             ; EXIT : FLAG REGISTER MODIFIED
2344   0C66             ;
2345   0C66 C5          DELONE	PUSH	BC
2346   0C67 D5          	PUSH	DE
2347   0C68 E5          	PUSH	HL
2348   0C69 11 01 00    	LD	DE,0001H
2349   0C6C 21 70 08    	LD	HL,0870H
2350   0C6F 06 92       DELON1	LD	B,92H
2351   0C71 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2352   0C73 ED 52       	SBC	HL,DE
2353   0C75 D2 6F 0C    	JP	NC,DELON1	;OUTER LOOP
2354   0C78 E1          	POP	HL
2355   0C79 D1          	POP	DE
2356   0C7A C1          	POP	BC
2357   0C7B C9          	RET
2358   0C7C             ;--------------------------
2359   0C7C             ; FUNCTION E - KALEIDOSCOPE
2360   0C7C             ;--------------------------
2361   0C7C CD 05 06    SCOPE	CALL	BEEP
2362   0C7F CD EA 04    	CALL	KEYREL
2363   0C82 CD 37 05    	CALL	RAND	;GENERATE RANDOM
2364   0C85 EB          	EX	DE,HL
2365   0C86 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2366   0C89 7B          	LD	A,E	;THE FIRST QUADRANT
2367   0C8A CD FB 0C    	CALL	SEED	;WITH A RANDOM BIT
2368   0C8D 7A          	LD	A,D	;PATTERN
2369   0C8E CD FB 0C    	CALL	SEED
2370   0C91             ;
2371   0C91             ; GENERATE MIRROR IMAGES
2372   0C91             ;
2373   0C91 06 04       SCOPE2	LD	B,04H
2374   0C93 21 00 3E    	LD	HL,BUFFER
2375   0C96 11 07 3E    	LD	DE,BUFFER+7
2376   0C99 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2377   0C9A 12          	LD	(DE),A	;QUADRANT INTO
2378   0C9B 23          	INC	HL	;THE FOURTH
2379   0C9C 1B          	DEC	DE	;QUADRANT
2380   0C9D 10 FA       	DJNZ	SCOPE3
2381   0C9F             ;
2382   0C9F             ; MIRROR ACROSS CENTRE OF DISPLAY
2383   0C9F             ;
2384   0C9F 06 08       	LD	B,8	;MIRROR THE FIRST
2385   0CA1 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2386   0CA4 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2387   0CA5 E6 0F       	AND	0FH	;OF THE DISPLAY
2388   0CA7 77          	LD	(HL),A	;INTO THE SECOND
2389   0CA8 CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2390   0CAA CA AF 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2391   0CAD CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2392   0CAF CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2393   0CB1 CA B6 0C    	JP	Z,SCOPE6	;CORRESPONDING
2394   0CB4 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2395   0CB6 CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2396   0CB8 CA BD 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2397   0CBB CB EE       	SET	5,(HL)	;DO THIS FOR
2398   0CBD CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2399   0CBF CA C4 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2400   0CC2 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2401   0CC4 23          SCOPE8	INC	HL
2402   0CC5 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2403   0CC7             ;
2404   0CC7             ; DISPLAY RANDOM BIT PATTERN
2405   0CC7             ;
2406   0CC7 11 01 00    	LD	DE,0001H	;SET UP DELAY
2407   0CCA 21 00 02    	LD	HL,0200H
2408   0CCD E5          SCOPE9	PUSH	HL
2409   0CCE 21 00 3E    	LD	HL,BUFFER
2410   0CD1 CD 0A 0D    	CALL	SKATE	;SCAN 8X8
2411   0CD4 E1          	POP	HL
2412   0CD5 ED 52       	SBC	HL,DE
2413   0CD7 C2 CD 0C    	JP	NZ,SCOPE9
2414   0CDA             ;
2415   0CDA             ; MANIPULATE BITS FOR NEXT IMAGE
2416   0CDA             ;
2417   0CDA 21 00 3E    SCOPEA	LD	HL,BUFFER
2418   0CDD 3E 05       	LD	A,5
2419   0CDF 86          	ADD	A,(HL)
2420   0CE0 E6 0F       	AND	0FH
2421   0CE2 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2422   0CE3 23          	INC	HL
2423   0CE4 3E 03       	LD	A,03H
2424   0CE6 86          	ADD	A,(HL)
2425   0CE7 E6 0F       	AND	0FH
2426   0CE9 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2427   0CEA 23          	INC	HL
2428   0CEB 3E 01       	LD	A,01H
2429   0CED 86          	ADD	A,(HL)
2430   0CEE E6 0F       	AND	0FH
2431   0CF0 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2432   0CF1 23          	INC	HL
2433   0CF2 3E 07       	LD	A,07H
2434   0CF4 86          	ADD	A,(HL)
2435   0CF5 E6 0F       	AND	0FH
2436   0CF7 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2437   0CF8 C3 91 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2438   0CFB             ;
2439   0CFB             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2440   0CFB             ;
2441   0CFB 47          SEED	LD	B,A	;PUT THE
2442   0CFC E6 0F       	AND	0FH	;RANDOM NUMBER
2443   0CFE 77          	LD	(HL),A	;INTO THE
2444   0CFF 23          	INC	HL	;FIRST QUADRANT
2445   0D00 78          	LD	A,B	;OF THE
2446   0D01 E6 F0       	AND	240	;DISPLAY
2447   0D03 1F          	RRA
2448   0D04 1F          	RRA
2449   0D05 1F          	RRA
2450   0D06 1F          	RRA
2451   0D07 77          	LD	(HL),A
2452   0D08 23          	INC	HL
2453   0D09 C9          	RET
2454   0D0A             ;-----------------
2455   0D0A             ; SCAN 8X8 DISPLAY
2456   0D0A             ;-----------------
2457   0D0A             ;PUT THE 8 RAM LOCATIONS POINTED TO
2458   0D0A             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2459   0D0A             ;ON TOP ROW.
2460   0D0A             ;  ROUTINE PERIOD IS 500uS
2461   0D0A             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2462   0D0A             ;
2463   0D0A             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2464   0D0A             ;	EXIT : NO REGISTERS MODIFIED
2465   0D0A             ;
2466   0D0A F5          SKATE	PUSH	AF
2467   0D0B C5          	PUSH	BC
2468   0D0C E5          	PUSH	HL	;SAVE REGISTERS
2469   0D0D 0E 80       	LD	C,80H
2470   0D0F 7E          SKATE1	LD	A,(HL)
2471   0D10             #IFDEF TEC-1F
2472   0D10 D3 03       	OUT	(PORT3),A	;OUTPUT X
2473   0D12~            #ELSE
2474   0D12~            	OUT	(IO0),A	;OUTPUT X
2475   0D12             #ENDIF
2476   0D12 79          	LD	A,C
2477   0D13             #IFDEF TEC-1F
2478   0D13 D3 04       	OUT	(PORT4),A	;OUTPUT Y
2479   0D15~            #ELSE
2480   0D15~            	OUT	(IO2),A	;OUTPUT Y
2481   0D15             #ENDIF
2482   0D15 06 02       	LD	B,02H
2483   0D17 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2484   0D19 AF          	XOR	A
2485   0D1A             #IFDEF TEC-1F
2486   0D1A D3 03       	OUT	(PORT3),A
2487   0D1C D3 04       	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2488   0D1E~            #ELSE
2489   0D1E~            	OUT	(IO0),A
2490   0D1E~            	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2491   0D1E             #ENDIF
2492   0D1E 06 08       	LD	B,08H
2493   0D20 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2494   0D22 23          	INC	HL
2495   0D23 CB 09       	RRC	C
2496   0D25 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2497   0D27 E1          	POP	HL
2498   0D28 C1          	POP	BC
2499   0D29 F1          	POP	AF
2500   0D2A C9          	RET
2501   0D2B             ;----------------------------
2502   0D2B             ; FUNCTION F - CLOCK CALENDAR
2503   0D2B             ;----------------------------
2504   0D2B CD 05 06    TIME	CALL	BEEP
2505   0D2E CD EA 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2506   0D31 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2507   0D35 3A 37 3F    	LD	A,(ONTIM)
2508   0D38 DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2509   0D3B 3E 60       	LD	A,60H
2510   0D3D 32 37 3F    	LD	(ONTIM),A	;USE NEW DELAY
2511   0D40 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2512   0D43             ;
2513   0D43             ; DISPLAY TIME,CHECK FOR KEY
2514   0D43             ;
2515   0D43 CD 99 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2516   0D46 CD 83 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2517   0D49 CD 1D 04    	CALL	SCAND
2518   0D4C CD 5D 04    	CALL	SCANKEY
2519   0D4F CB 6F       	BIT	5,A
2520   0D51 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2521   0D53 E6 1F       	AND	1FH
2522   0D55 21 5D 0D    	LD	HL,TIMKEY
2523   0D58 CD F4 04    	CALL	MENU
2524   0D5B 18 E6       	JR	TIME1
2525   0D5D             
2526   0D5D 04          TIMKEY	.DB	4
2527   0D5E 10 11 12 13 	.DB	10H,11H,12H,13H
2528   0D62 6A 0D FB 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2528   0D66 74 0D 74 0D 
2529   0D6A             ;--------------------
2530   0D6A             ; EXIT CLOCK CALENDAR
2531   0D6A             ;--------------------
2532   0D6A E1          CLKEXT	POP	HL	;REMOVE RETURN
2533   0D6B DD 7E 00    	LD	A,(IX+0)
2534   0D6E 32 37 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2535   0D71 C3 73 07    	JP	CANCEL
2536   0D74             ;--------------------
2537   0D74             ; TOGGLE DISPLAY MODE
2538   0D74             ;--------------------
2539   0D74 CD 05 06    CALKEY	CALL	BEEP
2540   0D77 CD EA 04    	CALL	KEYREL
2541   0D7A DD 7E 01    	LD	A,(IX+1)
2542   0D7D EE 80       	XOR	80H	;TOGGLE DISPLAY
2543   0D7F DD 77 01    	LD	(IX+1),A
2544   0D82 C9          	RET
2545   0D83             ;----------------------
2546   0D83             ; UPDATE DISPLAY BUFFER
2547   0D83             ;----------------------
2548   0D83 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2549   0D87 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2550   0D89             ;
2551   0D89             ; TIME DISPLAY
2552   0D89             ;
2553   0D89 3A 1A 3F    UPDBF1	LD	A,(SWREG1)
2554   0D8C CD ED 03    	CALL	CONBYT
2555   0D8F             #IFDEF	TEC-1F
2556   0D8F CB E5       	SET	4,L
2557   0D91~            #ELSE
2558   0D91~            	SET	7,L	;SET DECIMAL POINT
2559   0D91             #ENDIF
2560   0D91 22 31 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2561   0D94 3A 1B 3F    	LD	A,(SWREG2)
2562   0D97 CD ED 03    	CALL	CONBYT
2563   0D9A             #IFDEF	TEC-1F
2564   0D9A CB E5       	SET	4,L
2565   0D9C~            #ELSE
2566   0D9C~            	SET	7,L	;SET DECIMAL POINT
2567   0D9C             #ENDIF	
2568   0D9C 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2569   0D9F 3A 1C 3F    	LD	A,(SWREG3)
2570   0DA2 CD ED 03    	CALL	CONBYT
2571   0DA5             #IFDEF	TEC-1F
2572   0DA5 CB E5       	SET	4,L
2573   0DA7~            #ELSE
2574   0DA7~            	SET	7,L	;SET DECIMAL POINT
2575   0DA7             #ENDIF
2576   0DA7 22 35 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2577   0DAA C9          	RET
2578   0DAB             ;
2579   0DAB             ; CALENDAR DISPLAY
2580   0DAB             ;
2581   0DAB 3A 20 3F    UPDBF2	LD	A,(SWREG7)
2582   0DAE CD ED 03    	CALL	CONBYT
2583   0DB1 22 31 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2584   0DB4             ;
2585   0DB4             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2586   0DB4             ;
2587   0DB4 21 17 3F    	LD	HL,CALMDE
2588   0DB7 CB 7E       	BIT	7,(HL)
2589   0DB9 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2590   0DBB             ;
2591   0DBB             ; DD/MM/YY MODE
2592   0DBB             ;
2593   0DBB 3A 1F 3F    	LD	A,(SWREG6)
2594   0DBE CD ED 03    	CALL	CONBYT
2595   0DC1 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2596   0DC4 3A 1E 3F    	LD	A,(SWREG5)
2597   0DC7 CD ED 03    	CALL	CONBYT
2598   0DCA 22 35 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2599   0DCD 18 12       	JR	UPDBF4
2600   0DCF             ;
2601   0DCF             ; MM/DD/YY MODE
2602   0DCF             ;
2603   0DCF 3A 1F 3F    UPDBF3	LD	A,(SWREG6)
2604   0DD2 CD ED 03    	CALL	CONBYT
2605   0DD5 22 35 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2606   0DD8 3A 1E 3F    	LD	A,(SWREG5)
2607   0DDB CD ED 03    	CALL	CONBYT
2608   0DDE 22 33 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2609   0DE1             ;
2610   0DE1             ; SHOW DAY
2611   0DE1             ;
2612   0DE1 3A 1D 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2613   0DE4 E6 07       	AND	07H
2614   0DE6 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2615   0DE8 FE 07       	CP	07H
2616   0DEA 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2617   0DEC 2F          	CPL	;WORK OUT
2618   0DED D6 01       	SUB	01H	;WHICH DECIMAL POINT
2619   0DEF E6 07       	AND	07H	;TO LIGHT
2620   0DF1 21 31 3F    	LD	HL,DISBUF	;ADDING THE DAY
2621   0DF4 06 00       	LD	B,00H	;TO A DISPLAY
2622   0DF6 4F          	LD	C,A	;BUFFER INDEX
2623   0DF7 09          	ADD	HL,BC	;AND SETTING THE
2624   0DF8             #IFDEF	TEC-1F
2625   0DF8 CB E6       	SET	4,(HL)
2626   0DFA~            #ELSE
2627   0DFA~            	SET	7,(HL)	;DECIMAL POINT
2628   0DFA             #ENDIF	
2629   0DFA C9          UPDBF5	RET	;IN THAT DISPLAY
2630   0DFB             ;--------------
2631   0DFB             ; SET TIME/DATE
2632   0DFB             ;--------------
2633   0DFB CD 05 06    SETCLK	CALL	BEEP
2634   0DFE CD EA 04    	CALL	KEYREL
2635   0E01             ;
2636   0E01             ; EDIT THE DISPLAY BUFFER
2637   0E01             ;
2638   0E01 CD 83 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2639   0E04 CD C6 04    	CALL	SKEYIN
2640   0E07 CD EA 04    	CALL	KEYREL
2641   0E0A FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2642   0E0C C8          	RET	Z
2643   0E0D FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2644   0E0F 28 6E       	JR	Z,SETCK8
2645   0E11 FE 12       	CP	12H
2646   0E13 28 3D       	JR	Z,SETCK4	;PLUS KEY
2647   0E15 FE 13       	CP	13H
2648   0E17 28 4F       	JR	Z,SETCK6	;MINUS KEY
2649   0E19 FE 0A       	CP	0AH	;NO A-F KEYS
2650   0E1B 30 E4       	JR	NC,SETCK1
2651   0E1D             ;
2652   0E1D             ; IS IT SET CLOCK OR SET CALENDAR?
2653   0E1D             ;
2654   0E1D DD CB 01 7E 	BIT	7,(IX+1)
2655   0E21 20 0D       	JR	NZ,SETCK2
2656   0E23             ;
2657   0E23             ; SET CLOCK DISPLAY
2658   0E23             ;
2659   0E23 21 1A 3F    	LD	HL,SWREG1
2660   0E26 ED 6F       	RLD	;MOVE THE NEW KEY
2661   0E28 23          	INC	HL	;INTO THE CLOCK BUFFER
2662   0E29 ED 6F       	RLD
2663   0E2B 23          	INC	HL
2664   0E2C ED 6F       	RLD
2665   0E2E 18 D1       	JR	SETCK1
2666   0E30             ;
2667   0E30             ; SET CALENDAR DISPLAY
2668   0E30             ;
2669   0E30 21 17 3F    SETCK2	LD	HL,CALMDE
2670   0E33 CB 7E       	BIT	7,(HL)
2671   0E35 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2672   0E37             ;
2673   0E37             ; SET CALENDAR AS DD/MM/YY
2674   0E37             ;
2675   0E37 21 20 3F    	LD	HL,SWREG7
2676   0E3A ED 6F       	RLD	;MOVE THE NEW KEY
2677   0E3C 2B          	DEC	HL	;INTO THE CAL BUFFER
2678   0E3D ED 6F       	RLD
2679   0E3F 2B          	DEC	HL
2680   0E40 ED 6F       	RLD
2681   0E42 18 BD       	JR	SETCK1
2682   0E44             ;
2683   0E44             ; SET CALENDAR AS MM/DD/YY
2684   0E44             ;
2685   0E44 21 20 3F    SETCK3	LD	HL,SWREG7
2686   0E47 ED 6F       	RLD	;MOVE THE NEW KEY
2687   0E49 2B          	DEC	HL	;INTO THE CAL BUFFER
2688   0E4A 2B          	DEC	HL
2689   0E4B ED 6F       	RLD
2690   0E4D 23          	INC	HL
2691   0E4E ED 6F       	RLD
2692   0E50 18 AF       	JR	SETCK1
2693   0E52             ;
2694   0E52             ; INC DAY
2695   0E52             ;
2696   0E52 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2697   0E56 28 A9       	JR	Z,SETCK1
2698   0E58 3A 1D 3F    	LD	A,(SWREG4)
2699   0E5B FE 07       	CP	07H	;IS THE DAY SUNDAY?
2700   0E5D 20 02       	JR	NZ,SETCK5
2701   0E5F 3E 00       	LD	A,00H	;SET MONDAY
2702   0E61 3C          SETCK5	INC	A	;DAY=DAY+1
2703   0E62 32 1D 3F    	LD	(SWREG4),A
2704   0E65 C3 01 0E    	JP	SETCK1
2705   0E68             ;
2706   0E68             ; DEC DAY
2707   0E68             ;
2708   0E68 DD CB 01 7E SETCK6	BIT	7,(IX+1)
2709   0E6C CA 01 0E    	JP	Z,SETCK1
2710   0E6F 3A 1D 3F    	LD	A,(SWREG4)
2711   0E72 FE 01       	CP	01H	;IS THE DAY MONDAY?
2712   0E74 20 02       	JR	NZ,SETCK7
2713   0E76 3E 08       	LD	A,08H	;SET SUNDAY
2714   0E78 3D          SETCK7	DEC	A	;DAY=DAY-1
2715   0E79 32 1D 3F    	LD	(SWREG4),A
2716   0E7C C3 01 0E    	JP	SETCK1
2717   0E7F             ;
2718   0E7F             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2719   0E7F             ;
2720   0E7F CD 05 06    SETCK8	CALL	BEEP
2721   0E82 CD EA 04    	CALL	KEYREL
2722   0E85 3A 1C 3F    	LD	A,(SWREG3)
2723   0E88 E6 3F       	AND	3FH	;24 HOUR MODE
2724   0E8A 32 1C 3F    	LD	(SWREG3),A
2725   0E8D 3A 1D 3F    	LD	A,(SWREG4)
2726   0E90 E6 07       	AND	07H	;OSC ON,RST ENABLED
2727   0E92 32 1D 3F    	LD	(SWREG4),A
2728   0E95 CD 23 0F    	CALL	WWATCH	;WRITE CHANGES
2729   0E98 C9          	RET
2730   0E99             ;---------------------
2731   0E99             ; READ FROM SMARTWATCH
2732   0E99             ;---------------------
2733   0E99             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2734   0E99             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2735   0E99             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2736   0E99             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2737   0E99             ;
2738   0E99             ;  ENTRY : NONE
2739   0E99             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2740   0E99             ;          (ALTERNATE SET MODIFIED)
2741   0E99             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2742   0E99             ;
2743   0E99             ;
2744   0E99             ; ENABLE SMARTWATCH
2745   0E99             ;
2746   0E99 F5          RWATCH	PUSH	AF
2747   0E9A C5          	PUSH	BC
2748   0E9B D5          	PUSH	DE
2749   0E9C E5          	PUSH	HL
2750   0E9D 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2751   0EA0 21 E3 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2752   0EA3 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2753   0EA5 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2754   0EA6 32 60 3F    	LD	(DALLAS),A
2755   0EA9 23          	INC	HL
2756   0EAA 10 F9       	DJNZ	RWACH1
2757   0EAC             ;
2758   0EAC             ; READ DATA FROM WATCH
2759   0EAC             ;
2760   0EAC 06 20       	LD	B,32
2761   0EAE 3A 60 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2762   0EB1 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2763   0EB3 CB 1A       	RR	D	;DE AND HL
2764   0EB5 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2765   0EB7 CB 1C       	RR	H	;THE ALTERNATE PAIR
2766   0EB9 CB 1D       	RR	L
2767   0EBB 10 F1       	DJNZ	RWACH2
2768   0EBD D9          	EXX
2769   0EBE 06 20       	LD	B,32
2770   0EC0 3A 60 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2771   0EC3 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2772   0EC5 CB 1A       	RR	D
2773   0EC7 CB 1B       	RR	E
2774   0EC9 CB 1C       	RR	H
2775   0ECB CB 1D       	RR	L
2776   0ECD 10 F1       	DJNZ	RWACH3
2777   0ECF             ;
2778   0ECF             ; SAVE IN WATCH REGISTERS
2779   0ECF             ;
2780   0ECF 22 1D 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2781   0ED2 ED 53 1F 3F 	LD	(SWREG6),DE	;GET THE DATA
2782   0ED6 D9          	EXX
2783   0ED7 22 19 3F    	LD	(SWREG0),HL
2784   0EDA ED 53 1B 3F 	LD	(SWREG2),DE
2785   0EDE E1          	POP	HL
2786   0EDF D1          	POP	DE
2787   0EE0 C1          	POP	BC
2788   0EE1 F1          	POP	AF
2789   0EE2 C9          	RET
2790   0EE3             ;
2791   0EE3             ; SMARTWATCH ACCESS PATTERN
2792   0EE3             ;
2793   0EE3 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2793   0EE7 5C 2E 17 8B 
2794   0EEB 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2794   0EEF A3 D1 E8 74 
2795   0EF3 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2795   0EF7 3A 1D 8E 47 
2796   0EFB 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2796   0EFF C5 E2 71 B8 
2797   0F03 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2797   0F07 5C 2E 17 8B 
2798   0F0B 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2798   0F0F A3 D1 E8 74 
2799   0F13 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2799   0F17 3A 1D 8E 47 
2800   0F1B 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2800   0F1F C5 E2 71 B8 
2801   0F23             ;--------------------
2802   0F23             ; WRITE TO SMARTWATCH
2803   0F23             ;--------------------
2804   0F23             ;
2805   0F23             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2806   0F23             ; IT USING BIT MANIPULATION.
2807   0F23             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2808   0F23             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2809   0F23             ; SMARTWATCH IS ENABLED.
2810   0F23             ;
2811   0F23             ; ENTRY : NONE
2812   0F23             ; THE DATA TO WRITE TO THE SMARTWATCH
2813   0F23             ; MUST BE IN SWREG0 - SWREG7
2814   0F23             ;  EXIT : NO WORKING REGISTERS MODIFIED
2815   0F23             ;  (ALTERNATE SET MODIFIED)
2816   0F23             ; GET DATA TO WRITE TO WATCH
2817   0F23             ;
2818   0F23 F5          WWATCH	PUSH	AF
2819   0F24 C5          	PUSH	BC
2820   0F25 D5          	PUSH	DE
2821   0F26 E5          	PUSH	HL
2822   0F27 2A 1D 3F    	LD	HL,(SWREG4)	;SET UP THE
2823   0F2A ED 5B 1F 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2824   0F2E D9          	EXX
2825   0F2F 2A 19 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2826   0F32 ED 5B 1B 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2827   0F36             ;
2828   0F36             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2829   0F36             ;
2830   0F36 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2831   0F39 3E C5       	LD	A,0C5H
2832   0F3B 0E 80       	LD	C,80H	;NUMBER OF BYTES
2833   0F3D 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2834   0F3F 32 60 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2835   0F42 CB 0F       	RRC	A
2836   0F44 CB 38       	SRL	B
2837   0F46 30 F7       	JR	NC,WWACH2	;MORE BITS
2838   0F48 CB 39       	SRL	C
2839   0F4A 38 11       	JR	C,WWACH4	;NO MORE BYTES
2840   0F4C CB 47       	BIT	0,A
2841   0F4E 20 0A       	JR	NZ,WWACH3
2842   0F50 CB 0F       	RRC	A
2843   0F52 CB 0F       	RRC	A
2844   0F54 CB 0F       	RRC	A
2845   0F56 CB 0F       	RRC	A
2846   0F58 18 E3       	JR	WWACH1
2847   0F5A 2F          WWACH3	CPL
2848   0F5B 18 E0       	JR	WWACH1
2849   0F5D             ;
2850   0F5D             ; WRITE DATA TO WATCH
2851   0F5D             ;
2852   0F5D 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2853   0F5F CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2854   0F61 CB 1B       	RR	E	;ONTO D0 AND INTO
2855   0F63 CB 1C       	RR	H	;THE SMARTWATCH
2856   0F65 CB 1D       	RR	L
2857   0F67 17          	RLA
2858   0F68 32 60 3F    	LD	(DALLAS),A
2859   0F6B 10 F2       	DJNZ	WWACH5
2860   0F6D D9          	EXX	;RESTORE REGISTERS
2861   0F6E 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2862   0F70 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2863   0F72 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2864   0F74 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2865   0F76 CB 1D       	RR	L
2866   0F78 17          	RLA
2867   0F79 32 60 3F    	LD	(DALLAS),A
2868   0F7C 10 F2       	DJNZ	WWACH6
2869   0F7E E1          	POP	HL
2870   0F7F D1          	POP	DE
2871   0F80 C1          	POP	BC
2872   0F81 F1          	POP	AF
2873   0F82 C9          	RET
2874   0F83             ;-----------------
2875   0F83             ; ONE SECOND DELAY
2876   0F83             ;-----------------
2877   0F83             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2878   0F83             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2879   0F83             ;
2880   0F83             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2881   0F83             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2882   0F83             ; READS THE SAME AS THE REFERENCE VALUE,
2883   0F83             ; THEN THE ROUTINE RETURNS
2884   0F83             ;
2885   0F83             ; ENTRY : NONE
2886   0F83             ; EXIT : NONE MODIFIED
2887   0F83             ;
2888   0F83 F5          ONESEC	PUSH	AF
2889   0F84 C5          	PUSH	BC
2890   0F85 CD 99 0E    	CALL	RWATCH	;READ WATCH
2891   0F88 3A 1A 3F    	LD	A,(SWREG1)
2892   0F8B 47          	LD	B,A	;SAVE REF COUNT
2893   0F8C CD 99 0E    ONESC1	CALL	RWATCH
2894   0F8F 3A 1A 3F    	LD	A,(SWREG1)
2895   0F92 B8          	CP	B	;SAME AS REF?
2896   0F93 CA 8C 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2897   0F96 C1          	POP	BC
2898   0F97 F1          	POP	AF
2899   0F98 C9          	RET
2900   0F99             ;---------------------
2901   0F99             ; SCBUG SERIAL MONITOR
2902   0F99             ;---------------------
2903   0F99             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2904   0F99             ; COMMS PARAMETERS ARE 4800,n,8,2
2905   0F99             ;
2906   0F99             ;------------
2907   0F99             ; ASCII CODES
2908   0F99             ;------------
2909   0F99             ESC	.EQU	1BH
2910   0F99             CR	.EQU	0DH
2911   0F99             LF	.EQU	0AH
2912   0F99             ;
2913   0F99 21 1B 00    SCBUG	LD	HL,B4800	;INITIALISE THE BAUD RATE
2914   0F9C CD 5F 08    	CALL SERINI	;SET UP TX OUTPUT PIN
2915   0F9F             ;
2916   0F9F             ; START UP THE MONITOR
2917   0F9F             ;
2918   0F9F ED 73 10 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2919   0FA3 21 94 13    	LD	HL,SSSTEP
2920   0FA6 22 5B 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2921   0FA9 CD 55 14    	CALL	PRNTSZ
2922   0FAC 1B 5B 48 1B 	.DB	27,"[H",27,"[2J",0	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2922   0FB0 5B 32 4A 00 
2923   0FB4 CD A3 03    	CALL	PCBTYP
2924   0FB7 CD 80 13    	CALL	SNDMSG	;BOARD TYPE
2925   0FBA CD 55 14    	CALL	PRNTSZ
2926   0FBD 20 53 6F 75 	.DB	" Southern Cross Serial Monitor ",0
2926   0FC1 74 68 65 72 
2926   0FC5 6E 20 43 72 
2926   0FC9 6F 73 73 20 
2926   0FCD 53 65 72 69 
2926   0FD1 61 6C 20 4D 
2926   0FD5 6F 6E 69 74 
2926   0FD9 6F 72 20 00 
2927   0FDD CD AA 03    	CALL	VERS
2928   0FE0 CD 80 13    	CALL	SNDMSG	;MONITOR VERSION
2929   0FE3 CD 88 10    	CALL	TXCRLF
2930   0FE6 CD B1 03    	CALL	KBDTYP
2931   0FE9 CD 80 13    	CALL	SNDMSG	;KEYBOARD TYPE
2932   0FEC CD 55 14    	CALL	PRNTSZ
2933   0FEF 20 4B 65 79 	.DB	" Keyboard",0
2933   0FF3 62 6F 61 72 
2933   0FF7 64 00 
2934   0FF9 CD 55 14    	CALL	PRNTSZ
2935   0FFC 0D 0A 48 20 	.DB	CR,LF,"H for command list",CR,LF,0
2935   1000 66 6F 72 20 
2935   1004 63 6F 6D 6D 
2935   1008 61 6E 64 20 
2935   100C 6C 69 73 74 
2935   1010 0D 0A 00 
2936   1013             ;
2937   1013             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2938   1013             ;
2939   1013 3E 3E       START2	LD	A,'>'
2940   1015 CD 79 08    	CALL	TXDATA	;DISPLAY THE PROMPT
2941   1018 CD A4 08    START3	CALL	RXDATA	;GET A CHARACTER FROM THE CONSOLE
2942   101B 4F          	LD	C,A	;SAVE FOR LATER
2943   101C E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2944   101E             ;
2945   101E             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2946   101E             ;
2947   101E 21 3D 10    	LD	HL,MONMENU
2948   1021 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2949   1022 23          	INC	HL
2950   1023 BE          START4	CP	(HL)	;IN THE LIST?
2951   1024 28 05       	JR	Z,START5	;OK DO IT
2952   1026 23          	INC	HL
2953   1027 10 FA       	DJNZ	START4	;KEEP LOOKING
2954   1029 18 ED       	JR	START3
2955   102B 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2956   102C CD 79 08    	CALL	TXDATA	;TO ECHO IT
2957   102F E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2958   1031 21 3D 10    	LD	HL,MONMENU	;USE THE MENU HANDLER
2959   1034 CD F4 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2960   1037             ;
2961   1037             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2962   1037             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2963   1037             ;
2964   1037 CD 88 10    WARM	CALL	TXCRLF	;START ON A NEW LINE
2965   103A C3 13 10    	JP	START2
2966   103D             ;
2967   103D             ; SCBUG MONITOR COMMANDS
2968   103D             ;
2969   103D 07          MONMENU	.DB 7
2970   103E 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2970   1042 47 49 58 
2971   1045 C0 12 B4 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2971   1049 B0 11 CD 11 
2972   104D 92 10 20 12 	.DW	GOJUMP,INTHEX,EXIT
2972   1051 71 12 
2973   1053             ;-----------------------------
2974   1053             ; GET A BYTE FROM THE TERMINAL
2975   1053             ;-----------------------------
2976   1053 CD A4 08    GETCHR	CALL	RXDATA
2977   1056 FE 1B       	CP	ESC
2978   1058 28 27       	JR	Z,GETOUT
2979   105A 47          	LD	B,A	;SAVE TO ECHO
2980   105B CD 94 12    	CALL	ASC2HEX
2981   105E 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2982   1060 21 14 3F    	LD	HL,DATA
2983   1063 77          	LD	(HL),A
2984   1064 78          	LD	A,B
2985   1065 CD 79 08    	CALL	TXDATA	;ECHO VALID HEX
2986   1068             ;	
2987   1068 CD A4 08    GETNYB	CALL	RXDATA
2988   106B FE 1B       	CP	ESC
2989   106D 28 12       	JR	Z,GETOUT
2990   106F 47          	LD	B,A	;SAVE TO ECHO
2991   1070 CD 94 12    	CALL	ASC2HEX
2992   1073 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2993   1075 ED 6F       	RLD
2994   1077 78          	LD	A,B
2995   1078 CD 79 08    	CALL	TXDATA	;ECHO VALID HEX
2996   107B 7E          	LD	A,(HL)
2997   107C CD 81 10    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2998   107F 3F          	CCF	;AND THEN COMPLEMENTING IT
2999   1080 C9          	RET
3000   1081 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
3001   1082 C9          	RET
3002   1083             ;---------------
3003   1083             ; OUTPUT A SPACE
3004   1083             ;---------------
3005   1083 3E 20       OUTSP	LD	A,' '
3006   1085 C3 79 08    	    JP	TXDATA
3007   1088             ;-------------
3008   1088             ; OUTPUT CRLF
3009   1088             ;------------
3010   1088 3E 0D       TXCRLF	LD	A,CR
3011   108A CD 79 08    	CALL	TXDATA
3012   108D 3E 0A       	LD	A,LF
3013   108F C3 79 08    	JP	TXDATA
3014   1092             ;------------------------------
3015   1092             ; GO <ADDR>
3016   1092             ; TRANSFERS EXECUTION TO <ADDR>
3017   1092             ;------------------------------
3018   1092 CD 83 10    GOJUMP	CALL	OUTSP
3019   1095 CD 53 10    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
3020   1098 D8          	RET	C
3021   1099 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3022   109C CD 53 10    	CALL	GETCHR	;GET ADDRESS LOW BYTE
3023   109F D8          	RET	C
3024   10A0 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3025   10A3             ;
3026   10A3             ; WAIT FOR A CR OR ESC
3027   10A3             ;
3028   10A3 CD A4 08    GOJMP1	CALL	RXDATA
3029   10A6 FE 1B       	CP	ESC	;ESC KEY?
3030   10A8 C8          	RET	Z
3031   10A9 FE 0D       	CP	CR
3032   10AB 20 F6       	JR	NZ,GOJMP1
3033   10AD CD 88 10    	CALL	TXCRLF
3034   10B0 2A 12 3F    	LD	HL,(ADDR)
3035   10B3 E9          	JP	(HL)	;JUMP TO USER ADDRESS
3036   10B4             ;---------------------
3037   10B4             ; DISPLAY COMMAND HELP
3038   10B4             ;---------------------
3039   10B4 CD 55 14    HELP	CALL	PRNTSZ
3040   10B7 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
3040   10BB 41 41 41 41 
3040   10BF 20 20 20 20 
3040   10C3 44 69 73 70 
3040   10C7 6C 61 79 20 
3040   10CB 44 61 74 61 
3040   10CF 20 61 74 20 
3040   10D3 41 64 64 72 
3040   10D7 65 73 73 20 
3040   10DB 41 41 41 41 
3041   10DF 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
3041   10E3 20 20 20 20 
3041   10E7 20 20 20 20 
3041   10EB 53 50 41 43 
3041   10EF 45 20 74 6F 
3041   10F3 20 43 4F 4E 
3041   10F7 54 49 4E 55 
3041   10FB 45 2C 20 45 
3041   10FF 53 43 20 74 
3041   1103 6F 20 51 55 
3041   1107 49 54 
3042   1109 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
3042   110D 20 20 20 20 
3042   1111 20 20 20 20 
3042   1115 54 6F 67 67 
3042   1119 6C 65 20 53 
3042   111D 69 6E 67 6C 
3042   1121 65 20 53 74 
3042   1125 65 70 70 65 
3042   1129 72 
3043   112A 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
3043   112E 41 41 41 41 
3043   1132 20 20 20 20 
3043   1136 4D 6F 64 69 
3043   113A 66 79 20 41 
3043   113E 64 64 72 65 
3043   1142 73 73 20 41 
3043   1146 41 41 41 
3044   1149 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
3044   114D 41 41 41 41 
3044   1151 20 20 20 20 
3044   1155 47 4F 20 66 
3044   1159 72 6F 6D 20 
3044   115D 41 41 41 41 
3045   1161 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
3045   1165 20 20 20 20 
3045   1169 20 20 20 20 
3045   116D 44 6F 77 6E 
3045   1171 6C 6F 61 64 
3045   1175 20 49 4E 54 
3045   1179 45 4C 20 48 
3045   117D 65 78 
3046   117F 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
3046   1183 20 20 20 20 
3046   1187 20 20 20 20 
3046   118B 45 78 69 74 
3047   118F 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
3047   1193 20 20 20 20 
3047   1197 20 20 20 20 
3047   119B 54 68 69 73 
3047   119F 20 48 65 6C 
3047   11A3 70 20 4D 65 
3047   11A7 73 73 61 67 
3047   11AB 65 0D 0A 00 
3048   11AF C9          	RET
3049   11B0             ;-----------------------------------------------
3050   11B0             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
3051   11B0             ;-----------------------------------------------
3052   11B0             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
3053   11B0             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
3054   11B0             ;
3055   11B0 CD 55 14    SSTOGL	CALL	PRNTSZ
3056   11B3 0D 0A 53 69 	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3056   11B7 6E 67 6C 65 
3056   11BB 20 53 74 65 
3056   11BF 70 20 54 6F 
3056   11C3 67 67 6C 65 
3056   11C7 0D 0A 00 
3057   11CA             #IFDEF TEC-1F
3058   11CA D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
3059   11CC~            #ELSE
3060   11CC~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
3061   11CC             #ENDIF
3062   11CC C9          	RET
3063   11CD             ;----------------------------
3064   11CD             ; M DISPLAY AND MODIFY MEMORY
3065   11CD             ;----------------------------
3066   11CD CD 83 10    MODIFY	CALL	OUTSP
3067   11D0             ;
3068   11D0             ;GET THE ADDRESS
3069   11D0             ;
3070   11D0 CD 53 10    	CALL	GETCHR
3071   11D3 D8          	RET	C
3072   11D4 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3073   11D7 CD 53 10    	CALL	GETCHR
3074   11DA D8          	RET	C
3075   11DB 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3076   11DE             ;
3077   11DE             ; DISPLAY ON A NEW LINE
3078   11DE             ;
3079   11DE CD 88 10    MDIFY1	CALL	TXCRLF
3080   11E1 ED 5B 12 3F 	LD	DE,(ADDR)
3081   11E5 21 00 3E    	LD	HL,BUFFER
3082   11E8 CD 52 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3083   11EB 21 00 3E    	LD	HL,BUFFER
3084   11EE CD 46 13    	CALL	WRDOUT	;OUTPUT THE ADDRESS
3085   11F1 CD 83 10    	CALL	OUTSP
3086   11F4             ;
3087   11F4             ;GET THE DATA AT THE ADDRESS
3088   11F4             ;
3089   11F4 2A 12 3F    	LD	HL,(ADDR)
3090   11F7 7E          	LD	A,(HL)
3091   11F8             ;
3092   11F8             ; DISPLAY THE DATA
3093   11F8             ;
3094   11F8 21 00 3E    	LD	HL,BUFFER
3095   11FB CD 57 13    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
3096   11FE 21 00 3E    	LD	HL,BUFFER
3097   1201 CD 49 13    	CALL	BYTOUT	;OUTPUT THE BYTE
3098   1204 CD 83 10    	CALL	OUTSP
3099   1207             ;
3100   1207             ; GET NEW DATA,EXIT OR CONTINUE
3101   1207             ;
3102   1207 CD 53 10    	CALL	GETCHR
3103   120A D8          	RET	C
3104   120B 47          	LD	B,A	;SAVE IT FOR LATER
3105   120C 2A 12 3F    	LD	HL,(ADDR)
3106   120F 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
3107   1210 78          	LD	A,B
3108   1211 BE          	CP	(HL)
3109   1212 28 05       	JR	Z,MDIFY2
3110   1214 3E 3F       	LD	A,'?'
3111   1216 CD 79 08    	CALL	TXDATA	;NOT THE SAME DATA, PROBABLY NO RAM THERE
3112   1219             ;
3113   1219             ; INCREMENT THE ADDRESS
3114   1219             ;
3115   1219 23          MDIFY2	INC	HL
3116   121A 22 12 3F    	LD	(ADDR),HL
3117   121D C3 DE 11    	JP	MDIFY1
3118   1220             ;-----------------------
3119   1220             ; RECEIVE INTEL HEX FILE
3120   1220             ;-----------------------
3121   1220 CD 55 14    INTHEX	CALL	PRNTSZ
3122   1223 0D 0A 53 65 	.DB	CR,LF,"Send INTEL Hex File...",0
3122   1227 6E 64 20 49 
3122   122B 4E 54 45 4C 
3122   122F 20 48 65 78 
3122   1233 20 46 69 6C 
3122   1237 65 2E 2E 2E 
3122   123B 00 
3123   123C CD CE 07    	CALL	INTELH
3124   123F 20 19       	JR	NZ,ITHEX1
3125   1241 CD 55 14    	CALL	PRNTSZ
3126   1244 0D 0A 46 69 	.DB	CR,LF,"File Received OK",CR,LF,0
3126   1248 6C 65 20 52 
3126   124C 65 63 65 69 
3126   1250 76 65 64 20 
3126   1254 4F 4B 0D 0A 
3126   1258 00 
3127   1259 C9          	RET
3128   125A CD 55 14    ITHEX1	CALL	PRNTSZ
3129   125D 0D 0A 43 68 	.DB	CR,LF,"Checksum Error",CR,LF,0
3129   1261 65 63 6B 73 
3129   1265 75 6D 20 45 
3129   1269 72 72 6F 72 
3129   126D 0D 0A 00 
3130   1270 C9          	RET
3131   1271             ;------------------------
3132   1271             ; EXIT BACK TO SC MONITOR
3133   1271             ;------------------------
3134   1271             ; WE SAVED THE STACK POINTER WHEN WE ENTERED SCBUG
3135   1271             ; WE WILL USE IT NOW TO RETURN FROM WHERE WE CAME FROM
3136   1271             ;
3137   1271 21 2F 06    EXIT	LD	HL,SSTEP	;	RESTORE THE 
3138   1274 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
3139   1277 CD 55 14    	CALL	PRNTSZ
3140   127A 0D 0A 42 79 	.DB	CR,LF,"Bye...",CR,LF,0
3140   127E 65 2E 2E 2E 
3140   1282 0D 0A 00 
3141   1285             ;
3142   1285 ED 7B 10 3F 	LD	SP,(SPSAVE)	;RESTORE STACK POINTER
3143   1289 C9          	RET
3144   128A             ;------------------
3145   128A             ; DISPLAY REGISTERS
3146   128A             ;------------------
3147   128A CD F1 13    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
3148   128D 21 00 3E    	LD	HL,BUFFER
3149   1290 CD 80 13    	CALL	SNDMSG
3150   1293 C9          	RET
3151   1294             ;----------------------------------------
3152   1294             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
3153   1294             ;----------------------------------------
3154   1294             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
3155   1294             ; ENTRY OTHER THAN HEXADECIMAL KEYS
3156   1294             ;
3157   1294             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
3158   1294             ;ENTRY : A= ASCII 0-9,A-F
3159   1294             ;EXIT  : CARRY =  1
3160   1294             ;          A= HEX 0-F IN LSN
3161   1294             ;      : CARRY = 0
3162   1294             ;          A= OUT OF RANGE CHARACTER & 7FH
3163   1294             ; A AND F REGISTERS MODIFIED
3164   1294             ;
3165   1294 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
3166   1296 FE 30       	CP	'0'
3167   1298 38 23       	JR	C,AC2HEX4	;LESS THAN 0
3168   129A FE 3A       	CP	3AH
3169   129C 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
3170   129E E6 0F       	AND	0FH	;CONVERT TO NYBBLE
3171   12A0 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
3172   12A1 C9          	RET
3173   12A2             ;
3174   12A2 FE 41       AC2HEX2	CP	'A'
3175   12A4 38 17       	JR	C,AC2HEX4	;LESS THAN A
3176   12A6 FE 47       	CP	47H
3177   12A8 30 04       	JR	NC,AC2HEX3	;MORE THAN F
3178   12AA D6 07       	SUB	07H	;CONVERT TO NYBBLE
3179   12AC 18 F2       	JR	AC2HEX1
3180   12AE             	
3181   12AE FE 61       AC2HEX3	CP	'a'
3182   12B0 DA BD 12    	JP	C,AC2HEX4	;LESS THAN a
3183   12B3 FE 67       	CP	67H
3184   12B5 30 06       	JR	NC,AC2HEX4	;MORE THAN f
3185   12B7 E6 DF       	AND 0DFH
3186   12B9 D6 07       	SUB 07H	;CONVERT TO NYBBLE
3187   12BB 18 E3       	JR	AC2HEX1
3188   12BD E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
3189   12BF C9          	RET
3190   12C0             ;--------------------------
3191   12C0             ; D DISPLAY MEMORY LOCATION
3192   12C0             ;--------------------------
3193   12C0 CD 83 10    DSPLAY	CALL	OUTSP	;A SPACE
3194   12C3 CD 53 10    	CALL	GETCHR
3195   12C6 D8          	RET	C
3196   12C7 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3197   12CA CD 53 10    	CALL	GETCHR
3198   12CD D8          	RET	C
3199   12CE 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3200   12D1             ;
3201   12D1             ; WAIT FOR CR OR ESC
3202   12D1             ;
3203   12D1 CD A4 08    DPLAY1	CALL	RXDATA
3204   12D4 FE 1B       	CP	ESC
3205   12D6 C8          	RET	Z
3206   12D7 FE 0D       	CP	CR
3207   12D9 20 F6       	JR	NZ,DPLAY1
3208   12DB CD 88 10    	CALL	TXCRLF	;NEWLINE
3209   12DE             ;
3210   12DE             ; DISPLAY THE LINE
3211   12DE             ;
3212   12DE CD F3 12    DPLAY2 CALL  DPLINE
3213   12E1 ED 53 12 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
3214   12E5             ;
3215   12E5             ; DISPLAY MORE LINES OR EXIT
3216   12E5             ;
3217   12E5 CD A4 08    DPLAY3	CALL	RXDATA
3218   12E8 38 FB       	JR	C,DPLAY3
3219   12EA FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
3220   12EC 28 F0       	JR	Z,DPLAY2
3221   12EE FE 1B       	CP	ESC	;ESC EXITS
3222   12F0 20 F3       	JR	NZ,DPLAY3
3223   12F2 C9          	RET
3224   12F3             ;-------------------------
3225   12F3             ; DISPLAY A LINE OF MEMORY
3226   12F3             ;-------------------------
3227   12F3 ED 5B 12 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
3228   12F7 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3229   12FA             ;
3230   12FA             ; DISPLAY THE ADDRESS
3231   12FA             ;
3232   12FA CD 52 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3233   12FD CD 36 13    	CALL	SPCBUF
3234   1300             ;
3235   1300             ; DISPLAY 16 BYTES
3236   1300             ;
3237   1300 06 10       	LD	B,16
3238   1302 1A          DLINE1	LD	A,(DE)
3239   1303 CD 57 13    	CALL	BYTASC
3240   1306 CD 36 13    	CALL	SPCBUF
3241   1309 13          	INC	DE
3242   130A 10 F6       	DJNZ	DLINE1
3243   130C CD 36 13    	CALL	SPCBUF
3244   130F             ;
3245   130F             ; NOW DISPLAY THE ASCII CHARACTER
3246   130F             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3247   130F             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3248   130F             ;
3249   130F ED 5B 12 3F 	LD	DE,(ADDR)
3250   1313 06 10       	LD	B,16
3251   1315 1A          DLINE2	LD	A,(DE)
3252   1316 FE 20       	CP	20H
3253   1318 38 07       	JR	C,DOT
3254   131A FE 7F       	CP	7FH
3255   131C 30 03       	JR	NC,DOT
3256   131E C3 23 13    	JP	NDOT
3257   1321 3E 2E       DOT	LD	A,'.'
3258   1323 CD 38 13    NDOT	CALL	INBUF
3259   1326 13          	INC	DE
3260   1327 10 EC       	DJNZ	DLINE2
3261   1329             ;
3262   1329             ;TERMINATE AND DISPLAY STRING
3263   1329             ;
3264   1329 CD 3B 13    	CALL	BCRLF
3265   132C 3E 00       	LD	A,00H
3266   132E 77          	LD	(HL),A
3267   132F 21 00 3E    	LD	HL,BUFFER
3268   1332 CD 80 13    	CALL	SNDMSG
3269   1335 C9          	RET
3270   1336             ;
3271   1336             ; PUT A SPACE IN THE BUFFER
3272   1336             ;
3273   1336 3E 20       SPCBUF	LD	A,' '
3274   1338 77          INBUF	LD	(HL),A
3275   1339 23          	INC	HL
3276   133A C9          	RET
3277   133B             ;
3278   133B             ; PUT A CR LF IN THE BUFFER
3279   133B             ;
3280   133B 3E 0D       BCRLF	LD	A,CR
3281   133D CD 38 13    	CALL	INBUF
3282   1340 3E 0A       	LD	A,LF
3283   1342 CD 38 13    	CALL	INBUF
3284   1345 C9          	RET
3285   1346             ;----------------------
3286   1346             ; SEND ASCII HEX VALUES
3287   1346             ;----------------------
3288   1346             ;
3289   1346             ; OUTPUT THE 4 BYTE, WRDOUT
3290   1346             ; THE 2 BYTE, BYTOUT
3291   1346             ; OR THE SINGLE BYTE, NYBOUT
3292   1346             ; ASCII STRING AT HL TO THE SERIAL PORT
3293   1346             ;
3294   1346 CD 49 13    WRDOUT	CALL	BYTOUT
3295   1349 CD 4C 13    BYTOUT	CALL	NYBOUT
3296   134C 7E          NYBOUT	LD	A,(HL)
3297   134D CD 79 08    	CALL	TXDATA
3298   1350 23          	INC	HL
3299   1351 C9          	RET
3300   1352             ;----------------
3301   1352             ;CONVERT TO ASCII
3302   1352             ;----------------
3303   1352             ;
3304   1352             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3305   1352             ;
3306   1352             ;        ENTRY :  WRDASC           DE = WORD TO CONVERT
3307   1352             ;                 BYTASC            A = BYTE TO CONVERT
3308   1352             ;                 NYBASC (B3-B0) OF A = NYBBLE TO CONVERT
3309   1352             ;                  HL = CHARACTER BUFFER ADDRESS
3310   1352             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3311   1352             ;                  AF IS MODIFIED
3312   1352             ;
3313   1352 7A          WRDASC	LD	A,D	;CONVERT AND
3314   1353 CD 57 13    	CALL	BYTASC	;OUTPUT D
3315   1356 7B          	LD	A,E	;THEN E
3316   1357             ;
3317   1357             ;CONVERT A BYTE TO ASCII 
3318   1357             ;
3319   1357 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3320   1358 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3321   1359 0F          	RRCA
3322   135A 0F          	RRCA
3323   135B 0F          	RRCA
3324   135C CD 60 13    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3325   135F F1          	POP	AF	;RESTORE LOW NYBBLE
3326   1360             ;
3327   1360             ; CONVERT A NYBBLE TO ASCII
3328   1360             ;
3329   1360 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3330   1362 C6 90       	ADD	A,90H	;CONVERT TO
3331   1364 27          	DAA	;ASCII
3332   1365 CE 40       	ADC	A,40H
3333   1367 27          	DAA
3334   1368             ;
3335   1368             ; SAVE IN STRING
3336   1368             ;
3337   1368 77          INSBUF	LD	(HL),A
3338   1369 23          	INC	HL
3339   136A C9          	RET
3340   136B             ;------------------------------------------------------
3341   136B             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3342   136B             ;------------------------------------------------------
3343   136B             ;
3344   136B             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3345   136B             ;                      INTO A STRING OF ASCII
3346   136B             ;                      ONES AND ZEROES.
3347   136B             ;
3348   136B             ;           ENTRY :  A = BINARY TO CONVERT
3349   136B             ;                   HL = CHARACTER BUFFER ADDRESS
3350   136B             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3351   136B             ;
3352   136B             ;        MODIFIES : NONE
3353   136B             ;
3354   136B C5          BITASC PUSH  BC
3355   136C 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3356   136E CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3357   1370 20 05       	JR	NZ,BTASC3
3358   1372 0E 30       	LD	C,30H	;IT'S A ZERO
3359   1374 71          BTASC2	LD	(HL),C
3360   1375 18 03       	JR	BTASC4
3361   1377 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3362   1379 71          	LD	(HL),C
3363   137A 23          BTASC4	INC	HL
3364   137B 17          	RLA
3365   137C 10 F0       	DJNZ	BTASC1	;NEXT BIT
3366   137E C1          	POP	BC
3367   137F C9          	RET
3368   1380             ;-----------------------------------------
3369   1380             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3370   1380             ;-----------------------------------------
3371   1380             ;
3372   1380             ; SENDS A ZERO TERMINATED STRING OR 
3373   1380             ; 255 CHARACTERS MAX. OUT THE SERIAL PORT
3374   1380             ;
3375   1380             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3376   1380             ;      EXIT  : SAME AS ENTRY
3377   1380             ;
3378   1380 C5          SNDMSG	PUSH	BC
3379   1381 E5          	PUSH	HL
3380   1382 F5          	PUSH	AF
3381   1383 06 FF       	LD	B,255	;255 CHARS MAX
3382   1385 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3383   1386 FE 00       	CP	00H	;ZERO TERMINATOR?
3384   1388 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3385   138A CD 79 08    	CALL	TXDATA	;TRANSMIT THE CHAR
3386   138D 23          	INC	HL
3387   138E 10 F5       	DJNZ	SDMSG1	;255 CHARS MAX!
3388   1390             	
3389   1390 F1          SDMSG2	POP	AF
3390   1391 E1          	POP	HL	
3391   1392 C1          	POP	BC	
3392   1393 C9          	RET
3393   1394             ;----------------------
3394   1394             ; SERIAL SINGLE STEPPER
3395   1394             ;----------------------
3396   1394 E1          SSSTEP	POP	HL	;GET HL BACK
3397   1395 F5          	PUSH	AF	;SAVE AF FOR LATER
3398   1396 22 49 3F    	LD	(TMPHL),HL
3399   1399 ED 53 47 3F 	LD	(TMPDE),DE
3400   139D ED 43 45 3F 	LD	(TMPBC),BC
3401   13A1 DD 22 4B 3F 	LD	(TMPIX),IX
3402   13A5 FD 22 4D 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3403   13A9 E1          	POP	HL	;GET AF BACK
3404   13AA 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
3405   13AD E1          	POP	HL	;GET PC RETURN ADDRESS
3406   13AE 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
3407   13B1 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3408   13B5             ;
3409   13B5 CD F1 13    	CALL	DISREG	;DISPLAY REGISTERS
3410   13B8 21 00 3E    	LD	HL,BUFFER
3411   13BB CD 80 13    	CALL	SNDMSG
3412   13BE             ; WE HAVE DISPLAYED THE REGISTER CONTENTS NOW
3413   13BE             ; SPACE KEY CONTINUES EXECUTION, ESCAPE KEY
3414   13BE             ; RETURNS TO SERIAL MONITOR
3415   13BE             ;
3416   13BE CD A4 08    SSTEP3	CALL	RXDATA
3417   13C1 38 FB       	JR	C,SSTEP3
3418   13C3 FE 20       	CP	' '	;IS IT SPACE
3419   13C5 28 08       	JR	Z,SSTEP4
3420   13C7 FE 1B       	CP	ESC	;ESC QUITS
3421   13C9 20 F3       	JR	NZ,SSTEP3
3422   13CB             ;
3423   13CB             ; RETURN TO MONITOR
3424   13CB             ;
3425   13CB FB          	EI	;RE-ENABLE INTERRUPTS
3426   13CC C3 37 10    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3427   13CF             ;
3428   13CF             ; RETURN TO PROGRAM
3429   13CF             ;
3430   13CF ED 7B 4F 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3431   13D3 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
3432   13D6 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3433   13D7 2A 43 3F    	LD	HL,(TMPAF)
3434   13DA E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3435   13DB FD 2A 4D 3F 	LD	IY,(TMPIY)
3436   13DF DD 2A 4B 3F 	LD	IX,(TMPIX)
3437   13E3 ED 4B 45 3F 	LD	BC,(TMPBC)
3438   13E7 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3439   13EB F1          	POP	AF	;RESTORE AF
3440   13EC 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
3441   13EF FB          	EI		;RE-ENABLE INTERRUPTS
3442   13F0 C9          	RET		;AND RETURN TO PROGRAM
3443   13F1             ;----------------------------
3444   13F1             ; DISPLAY THE SAVED REGISTERS
3445   13F1             ;----------------------------
3446   13F1 CD 55 14    DISREG	CALL	PRNTSZ
3447   13F4 0D 0A 50 43 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3447   13F8 20 20 20 41 
3447   13FC 46 20 20 20 
3447   1400 42 43 20 20 
3447   1404 20 44 45 20 
3447   1408 20 20 48 4C 
3447   140C 20 20 20 49 
3447   1410 58 20 20 20 
3447   1414 49 59 20 20 
3447   1418 20 53 50 20 
3447   141C 20 20 53 5A 
3447   1420 2D 48 2D 56 
3447   1424 4E 43 0D 0A 
3447   1428 00 
3448   1429             ;
3449   1429             ; DISPLAY THE REGISTERS
3450   1429             ;
3451   1429 06 08       	LD	B,08H
3452   142B 21 00 3E    	LD	HL,BUFFER
3453   142E DD 21 41 3F 	LD	IX,TMPPC
3454   1432 DD 7E 01    DSREG1	LD	A,(IX+1)
3455   1435 CD 57 13    	CALL	BYTASC
3456   1438 DD 7E 00    	LD	A,(IX+0)
3457   143B CD 57 13    	CALL	BYTASC
3458   143E DD 23       	INC	IX
3459   1440 DD 23       	INC	IX
3460   1442 3E 20       	LD	A,' '
3461   1444 77          	LD	(HL),A
3462   1445 23          	INC	HL
3463   1446 10 EA       	DJNZ	DSREG1
3464   1448             ;
3465   1448             ; DISPLAY THE FLAGS
3466   1448             ;
3467   1448 3A 43 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3468   144B CD 6B 13    	CALL	BITASC	;SHOW THEM AS BITS
3469   144E             
3470   144E CD 3B 13    SZCRLF CALL  BCRLF
3471   1451 3E 00       	LD	A,0
3472   1453 77          	LD	(HL),A	;TERMINATE THE STRING
3473   1454 C9          	RET
3474   1455             ;-----------------------------------------
3475   1455             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3476   1455             ;-----------------------------------------
3477   1455             ; PUT THE STRING IN THE CODE LIKE THE EXAMPLE BELOW
3478   1455             ; THE ROUTINE SENDS THE STRING FROM THE RETURN ADDRESS,
3479   1455             ; (THE ADDRESS PUT ON THE STACK AS THE RETURN ADDRESS FROM THE 'CALL PRNTSZ') TO THE ZERO TERMINATOR.
3480   1455             ; THEN JUMPS TO THE 'NEXT INSTRUCTION ADDRESS' (AFTER THE ZERO TERMINATOR) TO RESUME THE PROGRAM. 
3481   1455             ;
3482   1455             ;      CALL PRNTSZ
3483   1455             ;      .DB  "STRING TO PRINT",0
3484   1455             ;      NEXT INSTRUCTION
3485   1455             ;
3486   1455 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3487   1456 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3488   1457 CD 79 08    	CALL	TXDATA	;AND SEND IT
3489   145A 23          	INC	HL	;POINT TO THE NEXT
3490   145B B7          	OR	A	;CHARACTER AND
3491   145C 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3492   145E E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3493   145F             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F12      ADRESS        3F3B      ADDKEY        0312      
ADMODE        0392      ASCHEX        0856      ASCHX1        085C      
ADDRA         08DE      ADDRB         08F0      ASC2HEX       1294      
AC2HEX1       12A0      AC2HEX2       12A2      AC2HEX3       12AE      
AC2HEX4       12BD      BOTRAM        2000      BUFFER        3E00      
B300          0220      B1200         0080      B2400         003F      
B4800         001B      B9600         000B      BAUD          3F21      
BLKSRT        3F29      BLKEND        3F2B      BLKDST        3F2D      
BEEP          0605      BEEP1         0615      BEEP2         061C      
BEEP3         062C      BITIME        08D1      BITIM1        08D6      
BLKMVE        0902      BLKMV1        0921      BLKMV2        0924      
BLKMV3        0936      BLKSUM        0958      BLKSM1        0974      
BRANCH        0996      BRNCH1        09B8      BRNCH2        09C3      
BCRLF         133B      BYTOUT        1349      BYTASC        1357      
BITASC        136B      BTASC1        136E      BTASC2        1374      
BTASC3        1377      BTASC4        137A      CALMDE        3F17      
COUNT         3F27      CONBYT        03ED      CONVHI        03FA      
CONVLO        03FE      CLRBUF        044E      CLRBF1        0455      
CHKSUM        0517      CHKSM1        051B      CANCEL        0773      
CANCL1        0776      CHKKEY        0B55      CHKKY1        0B63      
CHKKY2        0B8C      CHKKY3        0B99      CHKKY4        0BA1      
CHKKY5        0BA8      CHKKY6        0BB6      CHKKY7        0BB8      
CHKKY8        0BBD      CHKKY9        0BE2      CHKKYA        0BF0      
CLKEXT        0D6A      CALKEY        0D74      CR            000D      
COLD          0F9F      DISPLY        0002      DATA          3F14      
DISBUF        3F31      DALLAS        3F60      DECKEY        034A      
DECKY1        034D      DECKY2        035A      DECKY3        0375      
DISADD        03CF      DISBYT        03E4      DEC2          04C3      
DECSTP        0722      DECSP1        0732      DELONE        0C66      
DELON1        0C6F      DELON2        0C71      DSPLAY        12C0      
DPLAY1        12D1      DPLAY2        12DE      DPLAY3        12E5      
DPLINE        12F3      DLINE1        1302      DLINE2        1315      
DOT           1321      DISREG        13F1      DSREG1        1432      
EDTKEY        0B25      ENDKEY        0B4C      ESC           001B      
EXIT          1271      FUNTBL        3F15      FUNJMP        3F2F      
FUNKEY        0758      FUNKY1        075B      FUNKY2        076A      
FUNLST        077D      FUNFUN        07B1      GOEXEC        07B5      
GETBYT        082A      GETBT1        0834      GETBT2        0848      
GETCHR        1053      GETNYB        1068      GETOUT        1081      
GOJUMP        1092      GOJMP1        10A3      HEXKEY        02E0      
HEXKY1        02EB      HEXKY2        02F9      HELP          10B4      
ISTACK        3C00      INCKEY        031E      INCKY1        0321      
INCKY2        032E      INCKY3        0349      INC2          04C0      
INDEXB        0527      INDEXW        052E      INCSTP        070D      
INCSP1        071D      INTELFN       07BF      INTELH        07CE      
INTEL1        07D2      INTEL2        07FD      INTEL4        0818      
INTHEX        1220      ITHEX1        125A      INBUF         1338      
INSBUF        1368      KEYBUF        0000      KEYFN         0010      
KEYAD         0011      KEYINC        0012      KEYDEC        0013      
KEYTIM        3F23      KEYDEL        3F3D      KBDTYP        03B1      
KYBSZ         03C5      KYBDBF        03CE      KEYCVT        04B2      
KEYCVT1       04C5      KEYIN         04E0      KEYREL        04EA      
KEYRL1        04EB      LENGTH        05CA      LOSE          0C09      
LF            000A      LOOPSZ        1456      MODE          3F39      
MAIN          027D      MAIN1         028E      MAIN2         0291      
MENLST        02A3      MENU          04F4      MENU1         0502      
MENU2         050E      MUL16         054F      MULT          0558      
MULT1         055E      MUSIC         0566      MSDELAY       086F      
MSDEL1        0872      MOVE          093C      MONMENU       103D      
MODIFY        11CD      MDIFY1        11DE      MDIFY2        1219      
NXTBIT        088A      NDOT          1323      NYBOUT        134C      
NYBASC        1360      ONTIM         3F37      OFTIM         3F38      
ONESEC        0F83      ONESC1        0F8C      OUTSP         1083      
PORT3         0003      PORT4         0004      PORT5         0005      
PORT6         0006      PORT7         0007      PCBTYP        03A3      
PAUSE         0577      PERIOD        05B2      PLAY1         09DB      
PLAY2         09EA      PLAY3         09F9      PATERN        0EE3      
PRNTSZ        1455      RAMEND        3800      RAMSRT        2000      
REGPNT        3F3F      RST08         3F51      RST10         3F53      
RST18         3F55      RST20         3F57      RST28         3F59      
RST38         3F5B      RST66         3F5D      RAMSUM        3F5F      
RSTVEC        0000      RST30         0030      RESET         0200      
RESET1        0214      RAND          0537      REGTBL        066D      
REGNAM        06AA      REGKEY        06BA      RETMON        06E1      
RETPGM        06EB      RXDATA        08A4      RXDAT1        08A6      
RXDAT2        08BE      RELSQR        0C23      RLTEST        0C32      
RLSTEP        0C38      RELSR1        0C3E      RELSR2        0C4F      
RELSR3        0C57      RELSR4        0C5C      RWATCH        0E99      
RWACH1        0EA5      RWACH2        0EAE      RWACH3        0EC0      
REGSTR        128A      SCAN          0001      SPSAVE        3F10      
SWREG0        3F19      SWREG1        3F1A      SWREG2        3F1B      
SWREG3        3F1C      SWREG4        3F1D      SWREG5        3F1E      
SWREG6        3F1F      SWREG7        3F20      SPTEMP        3F25      
SYSERR        3F61      SYSCALL       0068      STOP          008B      
SYSJMP        0100      SETDP         0397      SEGMNT        040D      
SCAND         041D      SCAND1        0425      SCAND2        0431      
SCAND3        043C      SCANKEY       045D      SCANKY1       0460      
SCANKY2       0468      SCANKY3       046A      SCANKY4       0479      
SCANKY5       049F      SCANKY6       04A9      SCANKY7       04AE      
SKEYIN        04C6      SKEYRL        04D3      SKEYL1        04D4      
STEP          056C      STEP1         0581      STEP2         058B      
STEP3         0596      SSTEP         062F      SSTEP1        065B      
SETREG        0738      SERINI        085F      SDELAY        094A      
SDELY1        094F      SWBEEP        0A08      SECRET        0AA2      
SECRT1        0ADF      SECNUM        0AEE      SPLIT         0C10      
SCOPE         0C7C      SCOPE2        0C91      SCOPE3        0C99      
SCOPE4        0CA8      SCOPE5        0CAF      SCOPE6        0CB6      
SCOPE7        0CBD      SCOPE8        0CC4      SCOPE9        0CCD      
SCOPEA        0CDA      SEED          0CFB      SKATE         0D0A      
SKATE1        0D0F      SKATE2        0D17      SKATE3        0D20      
SETCLK        0DFB      SETCK1        0E01      SETCK2        0E30      
SETCK3        0E44      SETCK4        0E52      SETCK5        0E61      
SETCK6        0E68      SETCK7        0E78      SETCK8        0E7F      
SCBUG         0F99      START2        1013      START3        1018      
START4        1023      START5        102B      SSTOGL        11B0      
SPCBUF        1336      SNDMSG        1380      SDMSG1        1385      
SDMSG2        1390      SSSTEP        1394      SSTEP3        13BE      
SSTEP4        13CF      SZCRLF        144E      TOPRAM        3FFF      
TMPPC         3F41      TMPAF         3F43      TMPBC         3F45      
TMPDE         3F47      TMPHL         3F49      TMPIX         3F4B      
TMPIY         3F4D      TMPSP         3F4F      TRAP          0087      
TYPESZ        03B8      TYPEBF        03BF      TONE          05E3      
TONE1         05ED      TONE2         05F4      TONE3         05F7      
TXDATA        0879      TRACE         09CD      TUNE1         0A16      
TUNE2         0A56      TIME          0D2B      TIME1         0D43      
TIMKEY        0D5D      TXCRLF        1088      UPDATE        0376      
UPDBUF        0D83      UPDBF1        0D89      UPDBF2        0DAB      
UPDBF3        0DCF      UPDBF4        0DE1      UPDBF5        0DFA      
VARBLS        3F00      VARIDX        3F00      VARRAM        039F      
VERS          03AA      VERSZ         03C0      VERBCD        03C4      
WIN           0C00      WWATCH        0F23      WWACH1        0F3D      
WWACH2        0F3F      WWACH3        0F5A      WWACH4        0F5D      
WWACH5        0F5F      WWACH6        0F70      WARM          1037      
WRDOUT        1346      WRDASC        1352      

tasm: Number of errors = 0
