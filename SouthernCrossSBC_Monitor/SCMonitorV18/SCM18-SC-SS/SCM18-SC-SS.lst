0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ;
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ; VERSION 1.8  03/2023  ADD 'UPDATE','SCBUG' TO SYSTEM CALLS
0028   0000             ;                       ADD A SYSTEM CALL TO RETURN THE BASE ADDRESS OF THE RAM VARIABLES
0029   0000             ;                       ADDED SYSTEM CALLS FOR STRINGS AND BIT FIELDS TO RETURN BOARD TYPE AND KEYBOARD TYPE
0030   0000             ;                       FIXED THE SERIAL GO ROUTINE SO IT RETURNS TO THE SERIAL MONITOR WHEN RET
0031   0000             ;                       REMOVE INCH/PUTCH SERIAL REDIRECTION
0032   0000             ;                       ADDED A BIT BANG SERIAL INITIALISATION SYSTEM CALL
0033   0000             ;                       TRAPPED UNUSED SYSTEM CALLS
0034   0000             ;                       CONVERT TEC-1F KEY CODES FOR KEYS ABOVE 'F' INTO SC KEY CODES
0035   0000             ;                       SCANKEY ROUTINE RETURNS SHIFT KEY STATUS WITH KEYPRESS
0036   0000             ;                       TURN ON THE SPEAKER AT STARTUP
0037   0000             ;
0038   0000             ;IF DEFINED THE TARGET IS THE TEC-1F ELSE SC
0039   0000             ;#DEFINE TEC-1F
0040   0000             ; IF DEFINED USE THE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0041   0000             ;#DEFINE 74C923
0042   0000             ;
0043   0000             ;---------------
0044   0000             ; RAM MEMORY MAP
0045   0000             ;---------------
0046   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0047   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0048   0000             ;
0049   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0050   0000             BUFFER	.EQU	VARBLS-0100H	;GENERAL PURPOSE BUFFER AREA
0051   0000             ISTACK	.EQU	BUFFER-0200H	;INITIAL MONITOR STACK
0052   0000             ;
0053   0000             RAMEND	.EQU	ISTACK-0400H	;END OF USER RAM
0054   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0055   0000             ;
0056   0000             ; I/O PORT ADDRESSES
0057   0000             ;
0058   0000~            #IFDEF TEC-1F
0059   0000~            ;
0060   0000~            ; TEC-1 I/O ASSIGNMENTS
0061   0000~            ;
0062   0000~            KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0063   0000~            SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0064   0000~            DISPLY	.EQU	02H	;DISPLAY LATCH
0065   0000~            PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0066   0000~            PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0067   0000~            PORT5	.EQU	05H
0068   0000~            PORT6	.EQU	06H
0069   0000~            PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0070   0000             #ELSE
0071   0000             ;
0072   0000             ; SOUTHERN CROSS I/O ASSIGNMENTS
0073   0000             ;
0074   0000             IO0	.EQU	80H	;IO PORT 0
0075   0000             IO1	.EQU	81H	;IO PORT 1
0076   0000             IO2	.EQU	82H	;IO PORT 2
0077   0000             IO3	.EQU	83H	;IO PORT 3
0078   0000             DISPLY	.EQU	84H	;DISPLAY LATCH
0079   0000             SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0080   0000             KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0081   0000             IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0082   0000             #ENDIF
0083   0000             ;
0084   0000             ; BIT BANG BAUD RATE CONSTANTS
0085   0000             ;
0086   0000             B300	.EQU	0220H	;300 BAUD
0087   0000             B1200	.EQU	0080H	;1200 BAUD
0088   0000             B2400	.EQU	003FH	;2400 BAUD
0089   0000             B4800	.EQU	001BH	;4800 BAUD
0090   0000             B9600	.EQU	000BH	;9600 BAUD
0091   0000             ;
0092   0000             ; KEY CODES
0093   0000             ;
0094   0000             KEYFN	.EQU	10H	;FN OR GO KEY
0095   0000             KEYAD	.EQU	11H	;ADDRESS KEY
0096   0000             KEYINC	.EQU	12H	;PLUS KEY
0097   0000             KEYDEC	.EQU	13H	;MINUS KEY
0098   0000             
0099   0000             ;-------------------------
0100   0000             ; MONITOR GLOBAL VARIABLES
0101   0000             ;-------------------------
0102   0000             ;
0103   3F00             	.ORG	VARBLS
0104   3F00             ;
0105   3F00             ;BIT BANG SERIAL MONITOR (SCBUG) VARIABLES
0106   3F00             ;
0107   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0108   3F10             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0109   3F12             ADDR	.BLOCK	2	;TEMP ADDRESS
0110   3F14             DATA	.BLOCK	1	;TEMP DATA @ ADDRESS
0111   3F15             ;
0112   3F15             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0113   3F17             ;
0114   3F17             ; DALLAS SMARTWATCH REGISTERS
0115   3F17             ;
0116   3F17             CALMDE	.BLOCK	2	;CALENDAR MODE
0117   3F19             SWREG0	.BLOCK	1	;10THS, 100THS
0118   3F1A             SWREG1	.BLOCK	1	;SECONDS
0119   3F1B             SWREG2	.BLOCK	1	;MINUTES
0120   3F1C             SWREG3	.BLOCK	1	;HOURS
0121   3F1D             SWREG4	.BLOCK	1	;DAY
0122   3F1E             SWREG5	.BLOCK	1	;DATE
0123   3F1F             SWREG6	.BLOCK	1	;MONTH
0124   3F20             SWREG7	.BLOCK	1	;YEAR
0125   3F21             ;
0126   3F21             BAUD	.BLOCK	2	;BIT BANG BAUD RATE
0127   3F23             KEYTIM	.BLOCK	2	;BEEP DELAY
0128   3F25             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0129   3F27             ;
0130   3F27             ; BLOCK FUNCTIONS
0131   3F27             ;
0132   3F27             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0133   3F29             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0134   3F2B             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0135   3F2D             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0136   3F2F             ;
0137   3F2F             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0138   3F31             ;
0139   3F31             ; DISPLAY SCAN REGISTERS
0140   3F31             ;
0141   3F31             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0142   3F37             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0143   3F38             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0144   3F39             ;
0145   3F39             ; MONITOR VARIABLES
0146   3F39             ;
0147   3F39             MODE	.BLOCK	2	;DISPLAY MODE
0148   3F3B             ADRESS	.BLOCK	2	;USER ADDRESS
0149   3F3D             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0150   3F3F             ;
0151   3F3F             ; TEMPORARY REGISTER STORAGE
0152   3F3F             ;
0153   3F3F             REGPNT	.BLOCK	2	;REGISTER POINTER
0154   3F41             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0155   3F43             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0156   3F45             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0157   3F47             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0158   3F49             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0159   3F4B             TMPIX	.BLOCK	2	;INDEX REGISTER X
0160   3F4D             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0161   3F4F             TMPSP	.BLOCK	2	;STACK POINTER
0162   3F51             ;
0163   3F51             ; RESTART JUMP TABLE AND HARWARE TEST
0164   3F51             ;
0165   3F51             RST08	.BLOCK	2	;RESTART 08H JUMP
0166   3F53             RST10	.BLOCK	2	;RESTART 10H JUMP
0167   3F55             RST18	.BLOCK	2	;RESTART 18H JUMP
0168   3F57             RST20	.BLOCK	2	;RESTART 20H JUMP
0169   3F59             RST28	.BLOCK	2	;RESTART 28H JUMP
0170   3F5B             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0171   3F5D             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0172   3F5F             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0173   3F60             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0174   3F61             SYSERR	.BLOCK	2	;SYSTEM CALL ERROR JUMP
0175   3F63             ;----------------
0176   3F63             ; RESTART VECTORS
0177   3F63             ;----------------
0178   3F63             ;
0179   3F63             ;  RESTART 00H - RST 0
0180   3F63             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0181   3F63             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0182   3F63             ;
0183   0000             	.ORG	0000H
0184   0000 C3 00 02    RSTVEC	JP	RESET
0185   0003             ;
0186   0003             ; RESTART 08H - RST 1
0187   0003             ;
0188   0008             	.ORG	0008H
0189   0008 E5          	PUSH	HL
0190   0009 2A 51 3F    	LD	HL,(RST08)
0191   000C E9          	JP	(HL)
0192   000D             ;
0193   000D             ; RESTART 10H - RST 2
0194   000D             ;
0195   0010             	.ORG	0010H
0196   0010 E5          	PUSH	HL
0197   0011 2A 53 3F    	LD	HL,(RST10)
0198   0014 E9          	JP	(HL)
0199   0015             ;
0200   0015             ; RESTART 18H - RST 3
0201   0015             ;
0202   0018             	.ORG	0018H
0203   0018 E5          	PUSH	HL
0204   0019 2A 55 3F    	LD	HL,(RST18)
0205   001C E9          	JP	(HL)
0206   001D             ;
0207   001D             ; RESTART 20H - RST 4
0208   001D             ;
0209   0020             	.ORG	0020H
0210   0020 E5          	PUSH	HL
0211   0021 2A 57 3F    	LD	HL,(RST20)
0212   0024 E9          	JP	(HL)
0213   0025             ;
0214   0025             ; RESTART 28H - RST 5
0215   0025             ;
0216   0028             	.ORG	0028H
0217   0028 E5          	PUSH	HL
0218   0029 2A 59 3F    	LD	HL,(RST28)
0219   002C E9          	JP	(HL)
0220   002D             ;
0221   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0222   002D             ;
0223   0030             	.ORG	0030H
0224   0030 C3 6B 00    RST30	JP	SYSCALL
0225   0033             ;
0226   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0227   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0228   0033             ;INT OCCURS- FURTHER INTERRUPTS
0229   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0230   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0231   0033             ;STARTS HERE
0232   0033             ;
0233   0038             	.ORG	0038H
0234   0038 E5          	PUSH	HL
0235   0039 2A 5B 3F    	LD	HL,(RST38)
0236   003C E9          	JP	(HL)
0237   003D             ;
0238   003D             ; RESTART 66H NMI VECTOR
0239   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0240   003D             ;
0241   0066             	.ORG	0066H
0242   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0243   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0244   0066~            #IFDEF TEC-1F
0245   0066~                RETI
0246   0066             #ELSE
0247   0066 E5          	PUSH	HL
0248   0067 2A 5D 3F    	LD	HL,(RST66)
0249   006A E9          	JP	(HL)
0250   006B             #ENDIF
0251   006B             ;--------------------
0252   006B             ; SYSTEM CALL HANDLER
0253   006B             ;--------------------
0254   006B             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0255   006B             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0256   006B             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0257   006B             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0258   006B             ;CHANGE IN SUBSEQUENT MONITORS
0259   006B             ;
0260   006B             ;ENTRY : C = CALL NUMBER
0261   006B             ;SEE ROUTINES FOR ENTRY AND EXIT
0262   006B             ;PARAMETERS
0263   006B             ;
0264   006B 3B          SYSCALL	DEC	SP
0265   006C 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0266   006D ED 73 25 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0267   0071 F5          	PUSH	AF
0268   0072 D5          	PUSH	DE
0269   0073 E5          	PUSH	HL	;SAVE REGISTERS
0270   0074 79          	LD	A,C	;GET CALL NUMBER
0271   0075 E6 7F       	AND	127	;ENSURE IN LIMITS
0272   0077 CB 27       	SLA	A	;MULTIPLY BY TWO
0273   0079 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0274   007B 6F          	LD	L,A	;LOAD INDEX
0275   007C 7E          	LD	A,(HL)
0276   007D 23          	INC	HL
0277   007E 56          	LD	D,(HL)	;GET JUMP ADDRESS
0278   007F 2A 25 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0279   0082 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0280   0083 23          	INC	HL
0281   0084 7A          	LD	A,D
0282   0085 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0283   0086 E1          	POP	HL
0284   0087 D1          	POP	DE
0285   0088 F1          	POP	AF	;RESTORE REGISTERS
0286   0089 C9          	RET		;JUMPS TO SYSTEM CALL
0287   008A             ;
0288   008A             ; ERROR TRAP
0289   008A             ; HALT THE MACHINE UNTIL RESET OR INTERRUPT
0290   008A 2A 61 3F    TRAP	LD	HL,(SYSERR)
0291   008D E9          	JP	(HL)
0292   008E             ;
0293   008E 76          STOP	HALT
0294   008F             ;-----------------------
0295   008F             ; SYSTEM CALL JUMP TABLE
0296   008F             ;-----------------------
0297   0100             	.ORG	0100H
0298   0100 7D 02 AA 03 SYSJMP	.DW	MAIN,VERS,DISADD,DISBYT,CLRBUF,SCAND,CONBYT,CONVHI
0298   0104 CD 03 E2 03 
0298   0108 4C 04 1B 04 
0298   010C EB 03 F8 03 
0299   0110 FC 03 AA 04 	.DW CONVLO,SKEYIN,SKEYRL,KEYIN,KEYREL,MENU,CHKSUM,MUL16
0299   0114 B7 04 C4 04 
0299   0118 CE 04 D8 04 
0299   011C FB 04 33 05 
0300   0120 1B 05 0B 05 	.DW RAND,INDEXB,INDEXW,MUSIC,TONE,BEEP,SKATE,TXDATA
0300   0124 12 05 4A 05 
0300   0128 C7 05 E9 05 
0300   012C EE 0C 5D 08 
0301   0130 88 08 3A 08 	.DW RXDATA,ASCHEX,WWATCH,RWATCH,ONESEC,RLSTEP,DELONE,SCANKEY
0301   0134 07 0F 7D 0E 
0301   0138 67 0F 1C 0C 
0301   013C 4A 0C 5B 04 
0302   0140             	
0303   0140 B2 07 F4 0B 	.DW INTELH,SPLIT,SNDMSG,BITASC,WRDASC,BYTASC,NYBASC,PCBTYP
0303   0144 64 13 4F 13 
0303   0148 36 13 3B 13 
0303   014C 44 13 A3 03 
0304   0150 39 14 B1 03 	.DW PRNTSZ,KBDTYP,UPDATE,VARRAM,SERINI,SCBUG,TRAP,TRAP
0304   0154 76 03 9F 03 
0304   0158 43 08 7D 0F 
0304   015C 8A 00 8A 00 
0305   0160 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0305   0164 8A 00 8A 00 
0305   0168 8A 00 8A 00 
0305   016C 8A 00 8A 00 
0306   0170 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0306   0174 8A 00 8A 00 
0306   0178 8A 00 8A 00 
0306   017C 8A 00 8A 00 
0307   0180             	
0308   0180 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0308   0184 8A 00 8A 00 
0308   0188 8A 00 8A 00 
0308   018C 8A 00 8A 00 
0309   0190 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0309   0194 8A 00 8A 00 
0309   0198 8A 00 8A 00 
0309   019C 8A 00 8A 00 
0310   01A0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0310   01A4 8A 00 8A 00 
0310   01A8 8A 00 8A 00 
0310   01AC 8A 00 8A 00 
0311   01B0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0311   01B4 8A 00 8A 00 
0311   01B8 8A 00 8A 00 
0311   01BC 8A 00 8A 00 
0312   01C0             	
0313   01C0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0313   01C4 8A 00 8A 00 
0313   01C8 8A 00 8A 00 
0313   01CC 8A 00 8A 00 
0314   01D0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0314   01D4 8A 00 8A 00 
0314   01D8 8A 00 8A 00 
0314   01DC 8A 00 8A 00 
0315   01E0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0315   01E4 8A 00 8A 00 
0315   01E8 8A 00 8A 00 
0315   01EC 8A 00 8A 00 
0316   01F0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0316   01F4 8A 00 8A 00 
0316   01F8 8A 00 8A 00 
0316   01FC 8A 00 8A 00 
0317   0200             ;------------------------------
0318   0200             ; POWER UP RESET / MANUAL RESET
0319   0200             ;------------------------------
0320   0200             	.ORG	0200H
0321   0200             ;
0322   0200             ; WAIT FOR SMART SOCKET
0323   0200             ; TO RECOVER FROM POWER DOWN
0324   0200             ;
0325   0200 3E 55       RESET	LD	A,55H
0326   0202 32 60 3F    	LD	(DALLAS),A	;WRITE TO RAM
0327   0205 AF          	XOR	A
0328   0206 D3 84       	OUT	(DISPLY),A	;WRITE NOTHING TO
0329   0208 D3 85       	OUT	(SCAN),A	;ON BOARD I/O
0330   020A DB 86       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0331   020C 3A 60 3F    	LD	A,(DALLAS)	;READ FROM RAM
0332   020F FE 55       	CP	55H	;IS IT READY?
0333   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0334   0214             ;
0335   0214             ; LOAD STACK POINTER
0336   0214             ;
0337   0214 31 00 3C    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0338   0217 ED 56       	IM	1	;SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0339   0219             ;
0340   0219             ; SET UP RESTART VECTORS
0341   0219             ;
0342   0219 21 14 02    	LD	HL,RESET1
0343   021C 22 51 3F    	LD	(RST08),HL
0344   021F 22 53 3F    	LD	(RST10),HL
0345   0222 22 55 3F    	LD	(RST18),HL
0346   0225 22 57 3F    	LD	(RST20),HL
0347   0228 22 59 3F    	LD	(RST28),HL
0348   022B 22 5D 3F    	LD	(RST66),HL	;NMI INTERRUPT
0349   022E 21 13 06    	LD	HL,SSTEP
0350   0231 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
0351   0234 21 8E 00    	LD	HL,STOP
0352   0237 22 61 3F    	LD	(SYSERR),HL	;INVALID SYSTEM CALL ERROR
0353   023A             ;
0354   023A             ; PERFORM CHECKSUM ON USER RAM
0355   023A             ;
0356   023A 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0357   023D 11 00 38    	LD	DE,RAMEND	;END OF USER RAM
0358   0240 CD FB 04    	CALL	CHKSUM
0359   0243 32 5F 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0360   0246             ;
0361   0246             ; SET UP DEFAULT VARIABLES
0362   0246             ;
0363   0246 21 61 07    	LD	HL,FUNLST
0364   0249 22 15 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0365   024C             ;
0366   024C             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0367   024C             ;
0368   024C 21 7D 0F    	LD	HL,SCBUG	;SERIAL MONITOR
0369   024F 22 2F 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0370   0252 3E 00       	LD	A,00H
0371   0254 32 3F 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0372   0257 32 39 3F    	LD	(MODE),A	;START WITH SPEAKER ON
0373   025A             ;
0374   025A 21 1B 00    	LD	HL,B4800	;DEFAULT BAUD RATE
0375   025D CD 43 08    	CALL SERINI	;INITIALISE THE SERIAL PORT
0376   0260             ;
0377   0260 21 00 01    	LD	HL,0100H
0378   0263 22 3D 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0379   0266 21 00 10    	LD	HL,1000H
0380   0269 22 23 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0381   026C~            #IFDEF 74C923
0382   026C~            	LD	A,20H
0383   026C             #ELSE
0384   026C 3E 08       	LD	A,08H
0385   026E             #ENDIF
0386   026E 32 38 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0387   0271 CD E9 05    	CALL	BEEP
0388   0274 CD E9 05    	CALL	BEEP
0389   0277~            #IFDEF 74C923
0390   0277~            	LD	A,08H
0391   0277             #ELSE
0392   0277 3E 10       	LD	A,10H
0393   0279             #ENDIF
0394   0279 32 37 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0395   027C             ;
0396   027C FB          	EI		;ENABLE INTERRUPTS
0397   027D             ;
0398   027D             ;-----------------
0399   027D             ; SET UP MAIN LOOP
0400   027D             ;-----------------
0401   027D 31 00 3C    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0402   0280 21 00 20    	LD	HL,RAMSRT
0403   0283 22 3B 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0404   0286 3A 39 3F    	LD	A,(MODE)
0405   0289 F6 80       	OR	80H	;START OFF IN DATA MODE
0406   028B 32 39 3F    	LD	(MODE),A
0407   028E             ;
0408   028E             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0409   028E             ;
0410   028E CD 76 03    MAIN1	CALL	UPDATE
0411   0291 CD AA 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0412   0294 21 A3 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0413   0297 CD D8 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0414   029A CD 76 03    	CALL	UPDATE	;UPDATE BUFFER AND
0415   029D CD B7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0416   02A0 C3 91 02    	JP	MAIN2
0417   02A3             ;
0418   02A3             ; MAIN MENU KEY TABLE
0419   02A3             ;
0420   02A3 14          MENLST	.DB	20
0421   02A4 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0421   02A8 04 05 06 07 
0422   02AC 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0422   02B0 0C 0D 0E 0F 
0423   02B4 10 11 12 13 	.DB	10H,11H,12H,13H
0424   02B8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0424   02BC E0 02 E0 02 
0425   02C0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0425   02C4 E0 02 E0 02 
0426   02C8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0426   02CC E0 02 E0 02 
0427   02D0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0427   02D4 E0 02 E0 02 
0428   02D8 3C 07 12 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0428   02DC 1E 03 4A 03 
0429   02E0             ;---------------------------------------------------
0430   02E0             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0431   02E0             ;---------------------------------------------------
0432   02E0 CD E9 05    HEXKEY	CALL	BEEP
0433   02E3 21 39 3F    	LD	HL,MODE
0434   02E6 CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0435   02E8 CA F9 02    	JP	Z,HEXKY2	;IN ADDR MODE
0436   02EB             ;
0437   02EB             ; IN DATA MODE
0438   02EB             ;
0439   02EB 2A 3B 3F    HEXKY1	LD	HL,(ADRESS)
0440   02EE CB 26       	SLA	(HL)	;FROM THE CURRENT
0441   02F0 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0442   02F2 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0443   02F4 CB 26       	SLA	(HL)	;PUT THE KEY IN
0444   02F6 B6          	OR	(HL)	;THE NEW DATA BACK AT
0445   02F7 77          	LD	(HL),A	;THE CURRENT ADDRESS
0446   02F8 C9          	RET
0447   02F9             ;
0448   02F9             ; IN ADDRESS MODE
0449   02F9             ;
0450   02F9 2A 3B 3F    HEXKY2	LD	HL,(ADRESS)
0451   02FC CB 25       	SLA	L	;CURRENT ADDRESS
0452   02FE CB 14       	RL	H	;AND DO A 16 BIT
0453   0300 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0454   0302 CB 14       	RL	H	;TO MAKE  ROOM
0455   0304 CB 25       	SLA	L	;FOR THE NEW KEY
0456   0306 CB 14       	RL	H
0457   0308 CB 25       	SLA	L
0458   030A CB 14       	RL	H
0459   030C B5          	OR	L	;IT IN THE LEAST
0460   030D 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0461   030E 22 3B 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0462   0311 C9          	RET
0463   0312             ;-------------
0464   0312             ; CHANGE MODES
0465   0312             ;-------------
0466   0312 CD E9 05    ADDKEY	CALL	BEEP
0467   0315 3A 39 3F    	LD	A,(MODE)
0468   0318 EE 80       	XOR	80H	;TOGGLE MODE
0469   031A 32 39 3F    	LD	(MODE),A
0470   031D C9          	RET
0471   031E             ;------------------
0472   031E             ; INCREMENT ADDRESS
0473   031E             ;------------------
0474   031E CD E9 05    INCKEY	CALL	BEEP
0475   0321 2A 3B 3F    INCKY1	LD	HL,(ADRESS)
0476   0324 23          	INC	HL	;INC ADDRESS
0477   0325 22 3B 3F    	LD	(ADRESS),HL
0478   0328 CD 76 03    	CALL	UPDATE
0479   032B 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0480   032E CD 1B 04    INCKY2	CALL	SCAND
0481   0331 CD 5B 04    	CALL	SCANKEY
0482   0334 CB 6F       	BIT	5,A	;RETURN IF
0483   0336 28 11       	JR	Z,INCKY3	; KEY RELEASED
0484   0338 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0485   033A FE 12       	CP	KEYINC	; '+'
0486   033C 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0487   033E 11 01 00    	LD	DE,0001H
0488   0341 ED 52       	SBC	HL,DE
0489   0343 D2 2E 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0490   0346 C3 21 03    	JP	INCKY1	;INC ADDRESS
0491   0349 C9          INCKY3	RET
0492   034A             ;------------------
0493   034A             ; DECREMENT ADDRESS
0494   034A             ;------------------
0495   034A CD E9 05    DECKEY	CALL	BEEP
0496   034D 2A 3B 3F    DECKY1	LD	HL,(ADRESS)
0497   0350 2B          	DEC	HL	;DEC ADDRESS
0498   0351 22 3B 3F    	LD	(ADRESS),HL
0499   0354 CD 76 03    	CALL	UPDATE
0500   0357 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0501   035A CD 1B 04    DECKY2	CALL	SCAND
0502   035D CD 5B 04    	CALL	SCANKEY
0503   0360 CB 6F       	BIT	5,A	;RETURN IF
0504   0362 28 11       	JR	Z,DECKY3	;KEY RELEASED
0505   0364 E6 1F       	AND	1FH
0506   0366 FE 13       	CP	KEYDEC	; '-'
0507   0368 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0508   036A 11 01 00    	LD	DE,0001H
0509   036D ED 52       	SBC	HL,DE
0510   036F D2 5A 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0511   0372 C3 4D 03    	JP	DECKY1	;INC ADDRESS 
0512   0375 C9          DECKY3	RET
0513   0376             ;-----------------------------------------
0514   0376             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0515   0376             ;-----------------------------------------
0516   0376             ;
0517   0376             ; UPDATE THE DISPLAY BUFFER WITH THE 
0518   0376             ; CURRENT ADDRESS, THE DATA AT THE CURRENT ADDRESS
0519   0376             ; AND SET THE DECIMAL POINTS TO
0520   0376             ; ADDRESS OR DATA MODE
0521   0376             ;
0522   0376             ;	ENTRY : NONE
0523   0376             ;	EXIT :  MODIFIES A
0524   0376             ;
0525   0376 E5          UPDATE	PUSH	HL
0526   0377 C5          	PUSH	BC
0527   0378 2A 3B 3F    	LD	HL,(ADRESS)
0528   037B CD CD 03    	CALL	DISADD	;AND DATA, PUT IN
0529   037E 7E          	LD	A,(HL)
0530   037F CD E2 03    	CALL	DISBYT	;DISPLAY BUFFER
0531   0382             ;
0532   0382             ; IN ADDRESS OR DATA MODE?
0533   0382             ;
0534   0382 21 39 3F    	LD	HL,MODE
0535   0385 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0536   0387 CA 92 03    	JP	Z,ADMODE	;ADDRESS MODE
0537   038A             ;
0538   038A             ; SHOW DATA MODE
0539   038A             ;
0540   038A 21 31 3F    	LD	HL,DISBUF	;SET THE DP'S
0541   038D 06 02       	LD	B,2	;IN THE DATA
0542   038F C3 97 03    	JP	SETDP	;DISPLAY
0543   0392             ;
0544   0392             ; SHOW ADDRESS MODE
0545   0392             ;
0546   0392 21 33 3F    ADMODE	LD	HL,DISBUF+2
0547   0395 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0548   0397             ;
0549   0397             ; SET DECIMAL POINT
0550   0397             ;
0551   0397             ;SET DP IN THE BYTE POINTED TO BY HL
0552   0397             ;
0553   0397~            #IFDEF TEC-1F
0554   0397~            SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0555   0397             #ELSE
0556   0397 CB FE       SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0557   0399             #ENDIF
0558   0399 23          	INC	HL	;POINT TO NEXT BYTE
0559   039A 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0560   039C C1          	POP	BC
0561   039D E1          	POP	HL
0562   039E C9          	RET
0563   039F             ;-----------------------------------------
0564   039F             ; RETURN THE BASE ADDRESS OF RAM VARIABLES
0565   039F             ;-----------------------------------------
0566   039F             ;
0567   039F             ;	ENTRY: NONE
0568   039F             ;	EXIT: HL
0569   039F             ;
0570   039F 21 00 3F    VARRAM	LD	HL,VARBLS
0571   03A2 C9          		RET
0572   03A3             ;-----------
0573   03A3             ; BOARD TYPE
0574   03A3             ;-----------
0575   03A3             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0576   03A3             ; ENTRY = NONE
0577   03A3             ; EXIT: HL -> 'SC-1'    ACCA = 01H
0578   03A3             ;             'TEC-1F'	ACCA = 02H
0579   03A3             ;
0580   03A3 21 B8 03    PCBTYP	LD	HL,TYPESZ
0581   03A6 3A BD 03    	LD	A,(TYPEBF)
0582   03A9 C9          	RET
0583   03AA             ;---------------
0584   03AA             ; VERSION NUMBER
0585   03AA             ;---------------
0586   03AA             ;RETURNS THE SOFTWARE VERSION NUMBER
0587   03AA             ;
0588   03AA             ;	ENTRY : NONE
0589   03AA             ; EXIT : HL -> VERSION NUMBER STRING
0590   03AA             ;        ACCA = BCD VERSION NUMBER D7-D4 = MAJOR, D3-D0 MINOR
0591   03AA             ;
0592   03AA 21 BE 03    VERS	LD	HL,VERSZ
0593   03AD 3A C2 03    	LD	A,(VERBCD)
0594   03B0 C9          	RET
0595   03B1             ;--------------
0596   03B1             ; KEYBOARD TYPE
0597   03B1             ;--------------
0598   03B1             ; RETURNS THE TYPE OF KEYBOARD USED
0599   03B1             ; ENTRY = NONE
0600   03B1             ; EXIT: HL -> KEYBOARD TYPE STRING
0601   03B1             ;       ACCA = 01H MM74C923 HARDWARE ENCODER
0602   03B1             ;       ACCA = 02H SOFTWARE SCANNED
0603   03B1             ;
0604   03B1 21 C3 03    KBDTYP	LD	HL,KYBSZ
0605   03B4 3A CC 03    	LD	A,(KYBDBF)
0606   03B7 C9          	RET
0607   03B8             
0608   03B8~            #IFDEF TEC-1F
0609   03B8~            TYPESZ	.DB	"TEC-1F",0
0610   03B8~            TYPEBF	.DB	02H
0611   03B8             #ELSE
0612   03B8 53 43 2D 31 TYPESZ	.DB	"SC-1",0
0612   03BC 00 
0613   03BD 01          TYPEBF	.DB 01H
0614   03BE             #ENDIF
0615   03BE             
0616   03BE 31 2E 38 00 VERSZ	.DB	"1.8",0
0617   03C2 18          VERBCD	.DB 18H
0618   03C3             
0619   03C3~            #IFDEF 74C923
0620   03C3~            KYBSZ	.DB "Hardware",0
0621   03C3~            KYBDBF	.DB	01H	
0622   03C3             #ELSE
0623   03C3 53 6F 66 74 KYBSZ	.DB "Software",0
0623   03C7 77 61 72 65 
0623   03CB 00 
0624   03CC 02          KYBDBF	.DB	02H	
0625   03CD             #ENDIF
0626   03CD             
0627   03CD             ;-------------------------
0628   03CD             ; ADDRESS > DISPLAY BUFFER
0629   03CD             ;-------------------------
0630   03CD             ;CONVERT HL TO SEVEN SEGMENT CODE
0631   03CD             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0632   03CD             ;
0633   03CD             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0634   03CD             ;
0635   03CD             ; EXIT  : NO REGISTERS MODIFIED
0636   03CD             ;
0637   03CD F5          DISADD	PUSH	AF
0638   03CE E5          	PUSH	HL
0639   03CF E5          	PUSH	HL
0640   03D0 7C          	LD	A,H
0641   03D1 CD EB 03    	CALL	CONBYT
0642   03D4 22 35 3F    	LD	(DISBUF+4),HL
0643   03D7 E1          	POP	HL
0644   03D8 7D          	LD	A,L
0645   03D9 CD EB 03    	CALL	CONBYT
0646   03DC 22 33 3F    	LD	(DISBUF+2),HL
0647   03DF E1          	POP	HL
0648   03E0 F1          	POP	AF
0649   03E1 C9          	RET
0650   03E2             ;---------------------------
0651   03E2             ; DATA BYTE > DISPLAY BUFFER
0652   03E2             ;---------------------------
0653   03E2             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0654   03E2             ;AND PUT IN DATA DISPLAY BUFFER.
0655   03E2             ;
0656   03E2             ; ENTRY :  A = DATA DISPLAY BYTE
0657   03E2             ;
0658   03E2             ; EXIT  : NO REGISTERS MODIFIED
0659   03E2             ;
0660   03E2 E5          DISBYT	PUSH	HL
0661   03E3 CD EB 03    	CALL	CONBYT
0662   03E6 22 31 3F    	LD	(DISBUF),HL
0663   03E9 E1          	POP	HL
0664   03EA C9          	RET
0665   03EB             ;---------------------------------------
0666   03EB             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0667   03EB             ;---------------------------------------
0668   03EB             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0669   03EB             ; FOR DISPLAY
0670   03EB             ; ENTRY : A = BYTE TO BE CONVERTED
0671   03EB             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0672   03EB             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0673   03EB             ;         A = NOT MODIFIED
0674   03EB F5          CONBYT	PUSH	AF
0675   03EC F5          	PUSH	AF
0676   03ED CD F8 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0677   03F0 67          	LD	H,A
0678   03F1 F1          	POP	AF
0679   03F2 CD FC 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0680   03F5 6F          	LD	L,A
0681   03F6 F1          	POP	AF
0682   03F7 C9          	RET
0683   03F8             ;---------------------------------------------
0684   03F8             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0685   03F8             ;---------------------------------------------
0686   03F8             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0687   03F8             ; FOR SEVEN SEGMENT DISPLAYS
0688   03F8             ; CONVHI = CONVERTS HIGH NYBBLE
0689   03F8             ; CONVLO = CONVERTS LO NYBBLE
0690   03F8             ;
0691   03F8             ; ENTRY : A = NYBBLE TO BE CONVERTED
0692   03F8             ; EXIT  : A = SEVEN SEGMENT CODE
0693   03F8             ;
0694   03F8 07          CONVHI	RLCA
0695   03F9 07          	RLCA
0696   03FA 07          	RLCA	;MOVE TO LO NYBBLE
0697   03FB 07          	RLCA	;FOR CONVERSION
0698   03FC C5          CONVLO	PUSH	BC
0699   03FD E5          	PUSH	HL
0700   03FE 21 0B 04    	LD	HL,SEGMNT	;USE THE HEX VALUE
0701   0401 E6 0F       	AND	0FH	;TO INDEX TO THE
0702   0403 4F          	LD	C,A	;THE SEVEN SEGMENT
0703   0404 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0704   0406 09          	ADD	HL,BC	;AND RETURN WITH
0705   0407 7E          	LD	A,(HL)	;CODE IN A
0706   0408 E1          	POP	HL
0707   0409 C1          	POP	BC
0708   040A C9          	RET
0709   040B             ;
0710   040B             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0711   040B             ;
0712   040B~            #IFDEF TEC-1F
0713   040B~            SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0714   040B~            	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0715   040B~            	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0716   040B~            	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0717   040B             #ELSE
0718   040B 3F 06 5B 4F SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0719   040F 66 6D 7D 07 	.DB	66H,6DH,7DH,07H	;4,5,6,7
0720   0413 7F 6F 77 7C 	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0721   0417 39 5E 79 71 	.DB	39H,5EH,79H,71H	;C,D,E,F
0722   041B             #ENDIF
0723   041B             ;-------------
0724   041B             ; SCAN DISPLAY
0725   041B             ;-------------
0726   041B             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0727   041B             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0728   041B             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0729   041B             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0730   041B             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0731   041B             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0732   041B             ;
0733   041B             ; ENTRY : NONE
0734   041B             ; EXIT  : NO REGISTERS MODIFIED
0735   041B             ;
0736   041B F5          SCAND   PUSH    AF
0737   041C C5          	PUSH	BC
0738   041D E5          	PUSH	HL	;SAVE REGISTERS
0739   041E 21 36 3F    	LD	HL,DISBUF+5
0740   0421 0E 20       	LD	C,20H
0741   0423 7E          SCAND1	LD	A,(HL)
0742   0424 D3 84       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0743   0426 79          	LD	A,C
0744   0427 F6 40       	OR	40H	;KEEP D6 HIGH
0745   0429 D3 85       	OUT	(SCAN),A	;TURN ON DISPLAY
0746   042B 3A 37 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0747   042E 47          	LD	B,A	;TO ADJUST ON TIME
0748   042F 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0749   0431 78          	LD	A,B	;B IS NOW CLEAR, USE
0750   0432 F6 40       	OR	40H	;KEEP D6 HIGH
0751   0434 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0752   0436 3A 38 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0753   0439 47          	LD	B,A	;TO ADJUST OFF TIME
0754   043A 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0755   043C 2B          	DEC	HL	;POINT TO NEXT
0756   043D CB 09       	RRC	C	;ELEMENT IN BUFFER
0757   043F 30 E2       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0758   0441 78          	LD	A,B	;B IS NOW CLEAR, USE
0759   0442 D3 84       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0760   0444 F6 40       	OR	40H	;KEEP D6 HIGH
0761   0446 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0762   0448 E1          	POP	HL
0763   0449 C1          	POP	BC
0764   044A F1          	POP	AF	;RESTORE REGISTERS
0765   044B C9          	RET
0766   044C             ;---------------------
0767   044C             ; CLEAR DISPLAY BUFFER
0768   044C             ;---------------------
0769   044C E5          CLRBUF	PUSH	HL
0770   044D C5          	PUSH	BC
0771   044E 21 31 3F    	LD	HL,DISBUF
0772   0451 06 06       	LD	B,6
0773   0453 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0774   0455 23          	INC	HL	;LOCATIONS POINTED
0775   0456 10 FB       	DJNZ	CLRBF1	;TO BY HL
0776   0458 C1          	POP	BC
0777   0459 E1          	POP	HL
0778   045A C9          	RET
0779   045B             ;--------------
0780   045B             ; SCAN KEYBOARD
0781   045B             ;--------------
0782   045B             ; USE THE HARDWARE OR SOFTWARE SCANNED KEYBOARD
0783   045B             ;
0784   045B             ; BIT 7 NOT USED
0785   045B             ; BIT 6 SHIFT KEY. HIGH IF SHIFT KEY PRESSED
0786   045B             ;
0787   045B             ; BIT 5 DATA AVAILABLE FLAG HIGH IF KEY PRESSED
0788   045B             ; BITS 4 -0 KEY CODE
0789   045B             ;
0790   045B             ; SOFTWARE SCANNED KEYBOARD
0791   045B             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0792   045B             ; AND KEYBOARD BUFFER AS ROWS.
0793   045B             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0794   045B             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0795   045B             ;
0796   045B             ; ENTRY : NONE
0797   045B             ; EXIT  : A = 00H IF NO KEY DETECTED
0798   045B             ;         A = DETECTED KEY BITS 0-4
0799   045B             ;             BIT 5 = KEY AVAILABLE
0800   045B             ;             BIT 6 = SHIFT KEY PUSHED
0801   045B C5          SCANKEY	PUSH	BC
0802   045C D5          	PUSH	DE	;SAVE REGISTERS
0803   045D E5          	PUSH	HL
0804   045E             ;
0805   045E             ;USE THE KEYBOARD ENCODER
0806   045E             ;
0807   045E~            #IFDEF 74C923
0808   045E~            ;
0809   045E~            ; TEC-1F - 74C923 KEYBOARD ENCODER
0810   045E~            ;
0811   045E~            #IFDEF TEC-1F
0812   045E~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0813   045E~            	AND	7FH	;STRIP UNUSED BIT
0814   045E~            	BIT	6,A	;DA LOW?
0815   045E~            	JR	Z,SCANKY1	;HANDLE THE KEY
0816   045E~            	LD	A,00H
0817   045E~            	JR	SCANKY4	;NO KEY
0818   045E~            ;
0819   045E~            SCANKY1	BIT	5,A	;SHIFT KEY LOW?
0820   045E~            	JR	Z,SCANKY2
0821   045E~            	RES	5,A
0822   045E~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0823   045E~            	RES	6,A	;RESET SHIFT BIT
0824   045E~            	JR	SCANKY3
0825   045E~            ;
0826   045E~            SCANKY2	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0827   045E~            	SET	6,A	;SET SHIFT BIT
0828   045E~            SCANKY3	SET	5,A	;SET DATA AVAILABLE FLAG
0829   045E~            SCANKY4	POP	HL
0830   045E~            	POP	DE
0831   045E~            	POP	BC
0832   045E~            	RET
0833   045E~            #ELSE
0834   045E~            ;
0835   045E~            ;SC - 74C923 KEYBOARD ENCODER
0836   045E~            ;
0837   045E~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0838   045E~            	AND	7FH	;STRIP UNUSED BIT
0839   045E~            	BIT	5,A	;DA HIGH?
0840   045E~            	JR	NZ,SCANKY1	;HANDLE THE KEY
0841   045E~            	LD	A,00H
0842   045E~            	JR SCANKY3	;NO KEY
0843   045E~            ;
0844   045E~            SCANKY1	BIT	6,A	;SHIFT KEY LOW?
0845   045E~            	JR	Z,SCANKY2
0846   045E~            	RES	6,A	;RESET SHIFT BIT
0847   045E~            	JR	SCANKY3
0848   045E~            ;
0849   045E~            SCANKY2	SET	6,A	;SET SHIFT BIT
0850   045E~            SCANKY3	POP	HL
0851   045E~            	POP	DE
0852   045E~            	POP	BC
0853   045E~            	RET
0854   045E~            #ENDIF
0855   045E             #ELSE
0856   045E             ;
0857   045E             ; SOFTWARE SCAN KEYBOARD 
0858   045E             ; SAME FOR TEC-1 AND SC
0859   045E             ;
0860   045E 3E 00       SCANKY1	LD	A,00H
0861   0460 D3 84       	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0862   0462 47          	LD	B,A		;KEY
0863   0463 57          	LD	D,A		;COUNT
0864   0464 1E 01       	LD	E,01H	;MASK
0865   0466 0E 08       SCANKY2	LD	C,08H	;SCAN
0866   0468 79          SCANKY3	LD	A,C
0867   0469 F6 40       	OR	40H	;KEEP SERIAL OUTPUT BIT HIGH
0868   046B D3 85       	OUT	(SCAN),A	;OUTPUT SCAN
0869   046D 00          	NOP
0870   046E 00          	NOP
0871   046F 00          	NOP
0872   0470 DB 86       	IN	A,(KEYBUF)	;READ KEY BUFFER
0873   0472 A3          	AND	E	;MASK
0874   0473 28 02       	JR	Z,SCANKY4	;KEY NOT DETECTED
0875   0475 14          	INC	D
0876   0476 68          	LD	L,B		;SAVE KEY
0877   0477             ;
0878   0477             ; END OF ROWS?
0879   0477             ;
0880   0477 04          SCANKY4	INC	B	;NEXT KEY
0881   0478 CB 29       	SRA	C	;SHIFT SCAN RIGHT
0882   047A 30 EC       	JR	NC,SCANKY3	;NEXT ROW
0883   047C             ;
0884   047C             ; END OF COLUMNS?
0885   047C             ;
0886   047C CB 23       	SLA	E	;SHIFT MASK LEFT
0887   047E CB 6B       	BIT	5,E	;END OF KEYSCAN?
0888   0480 28 E4       	JR	Z,SCANKY2	;NEXT COLUMN
0889   0482             ;
0890   0482             ; END OF SCAN
0891   0482             ;
0892   0482 7A          	LD	A,D
0893   0483 FE 00       	CP	00H
0894   0485 28 1A       	JR	Z,SCANKY6	;NO KEY PRESSED
0895   0487 FE 01       	CP	01H
0896   0489 20 D3       	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0897   048B             ;
0898   048B             ; ONE KEY DETECTED
0899   048B             ;
0900   048B 3E 40       	LD	A,40H
0901   048D D3 85       	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0902   048F             ;
0903   048F             ; HANDLE SHIFT KEY FOR TEC-1F SOFTWARE SCANNED KEYBOARD 
0904   048F             ;
0905   048F~            #IFDEF TEC-1F
0906   048F~            	IN	A,(KEYBUF)
0907   048F~            	BIT 5,A	;SHIFT LOW?
0908   048F~            	JR	Z,SCANKY5
0909   048F~            ;
0910   048F~            	LD	A,L		;RETURN KEY IN A
0911   048F~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0912   048F~            	SET	5,A	;SET DATA AVAILABLE FLAG
0913   048F~            	JR	SCANKY7
0914   048F~            ;
0915   048F~            SCANKY5	LD	A,L		;RETURN KEY IN A
0916   048F~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0917   048F~            	SET	5,A	;SET DATA AVAILABLE FLAG
0918   048F~            	SET	6,A	;SET SHIFT KEY FLAG
0919   048F~            	JR	SCANKY7
0920   048F~            ;
0921   048F~            ; HANDLE SHIFT KEY FOR SC SOFTWARE SCANNED KEYBOARD
0922   048F~            ;
0923   048F             #ELSE
0924   048F DB 86       	IN	A,(KEYBUF)
0925   0491 CB 77       	BIT 6,A	;SHIFT LOW?
0926   0493 28 05       	JR	Z,SCANKY5
0927   0495             ;
0928   0495 7D          	LD	A,L		;RETURN KEY IN A
0929   0496 CB EF       	SET	5,A	;SET DATA AVAILABLE FLAG
0930   0498 18 0C       	JR	SCANKY7
0931   049A             ;	
0932   049A 7D          SCANKY5	LD	A,L		;RETURN KEY IN A
0933   049B CB EF       	SET	5,A	;SET DATA AVAILABLE FLAG
0934   049D CB F7       	SET	6,A	;SET SHIFT KEY FLAG
0935   049F 18 05       	JR	SCANKY7
0936   04A1             #ENDIF
0937   04A1             ;
0938   04A1             ; NO KEY
0939   04A1             ;
0940   04A1 3E 40       SCANKY6	LD	A,40H
0941   04A3 D3 85       	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0942   04A5 AF          	XOR	A	;CLEAR A
0943   04A6 E1          SCANKY7	POP	HL
0944   04A7 D1          	POP	DE
0945   04A8 C1          	POP	BC
0946   04A9 C9          	RET
0947   04AA             #ENDIF
0948   04AA             
0949   04AA~            #IFDEF TEC-1F 
0950   04AA~            ;--------------------------------------------------
0951   04AA~            ; CONVERT TEC KEY CODES TO SOUTHERN CROSS KEY CODES
0952   04AA~            ;--------------------------------------------------
0953   04AA~            ; CONVERT THE TEC KEYCODES;
0954   04AA~            ; 'PLUS' (10H) TO 12H
0955   04AA~            ; 'MINUS' (11H) TO 13H
0956   04AA~            ; 'GO' (12H) TO 'FN' 10H
0957   04AA~            ; 'AD' (13H) TO 11H
0958   04AA~            KEYCVT	AND	1FH
0959   04AA~            	BIT	4,A		;ONLY KEYS ABOVE 0FH
0960   04AA~            	JR	Z,KEYCVT1
0961   04AA~            	CP	12H		;TEC GO KEY?
0962   04AA~            	JR	Z,DEC2
0963   04AA~            	CP	13H		;TEC AD KEY?
0964   04AA~            	JR	Z,DEC2
0965   04AA~            INC2
0966   04AA~            	INC	A
0967   04AA~            	INC	A
0968   04AA~            	RET
0969   04AA~            DEC2
0970   04AA~            	DEC	A
0971   04AA~            	DEC	A
0972   04AA~            KEYCVT1	RET
0973   04AA             #ENDIF
0974   04AA             ;-----------------------------
0975   04AA             ; SCAN DISPLAY UNTIL KEY PRESS
0976   04AA             ;-----------------------------
0977   04AA             ; ENTRY : NONE
0978   04AA             ; EXIT  : A = KEY VALUE 00H TO 1FH
0979   04AA             ;         FLAG REGISTER MODIFIED
0980   04AA             ;
0981   04AA CD 1B 04    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0982   04AD CD 5B 04    	CALL	SCANKEY
0983   04B0 CB 6F       	BIT	5,A
0984   04B2 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0985   04B4 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0986   04B6 C9          	RET
0987   04B7             ;-------------------------------
0988   04B7             ; SCAN DISPLAY UNTIL KEY RELEASE
0989   04B7             ;-------------------------------
0990   04B7             ; ENTRY : NONE
0991   04B7             ; EXIT  : NONE
0992   04B7             ;
0993   04B7 F5          SKEYRL	PUSH	AF
0994   04B8 CD 1B 04    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0995   04BB CD 5B 04    	CALL	SCANKEY
0996   04BE CB 6F       	BIT	5,A
0997   04C0 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0998   04C2 F1          	POP	AF
0999   04C3 C9          	RET
1000   04C4             ;-------------------
1001   04C4             ; WAIT FOR KEY PRESS
1002   04C4             ;-------------------
1003   04C4             ; ENTRY : NONE
1004   04C4             ; EXIT  : A = KEY VALUE 00H TO 1FH
1005   04C4             ;         FLAG REGISTER MODIFIED
1006   04C4             ;
1007   04C4 CD 5B 04    KEYIN	CALL	SCANKEY
1008   04C7 CB 6F       	BIT	5,A
1009   04C9 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
1010   04CB E6 1F       	AND	1FH	;STRIP UNUSED BITS
1011   04CD C9          	RET
1012   04CE             ;---------------------
1013   04CE             ; WAIT FOR KEY RELEASE
1014   04CE             ;---------------------
1015   04CE             ; ENTRY : NONE
1016   04CE             ; EXIT  : NONE
1017   04CE             ;
1018   04CE F5          KEYREL	PUSH	AF
1019   04CF CD 5B 04    KEYRL1	CALL	SCANKEY
1020   04D2 CB 6F       	BIT	5,A
1021   04D4 20 F9       	JR	NZ,KEYRL1
1022   04D6 F1          	POP	AF
1023   04D7 C9          	RET
1024   04D8             ;-----------------
1025   04D8             ; KEY MENU HANDLER
1026   04D8             ;-----------------
1027   04D8             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
1028   04D8             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
1029   04D8             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
1030   04D8             ; ENTRY :  A = ELEMENT TO LOOK FOR
1031   04D8             ;         HL = POINTS TO TABLE
1032   04D8             ; EXIT  :  ELEMENT NOT FOUND
1033   04D8             ;           HL HOLDS ADDRESS OF LAST ELEMENT
1034   04D8             ;          ELEMENT FOUND
1035   04D8             ;           CONTROL PASSES TO JUMP ADDRESS WITH
1036   04D8             ;          RETURN ADDRESS OF MENU CALL ON STACK
1037   04D8             ;
1038   04D8 F5          MENU	PUSH	AF
1039   04D9 C5          	PUSH	BC
1040   04DA D5          	PUSH	DE	;SAVE REGISTERS
1041   04DB E5          	PUSH	HL	;CALCULATE ADDRESS
1042   04DC 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
1043   04DE 5E          	LD	E,(HL)	;ADDING THE INDEX TO
1044   04DF 23          	INC	HL	;THE ELEMENTS
1045   04E0 19          	ADD	HL,DE	;TO THE ADDR OF THE
1046   04E1 54          	LD	D,H	;TABLE
1047   04E2 5D          	LD	E,L
1048   04E3 E1          	POP	HL
1049   04E4 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
1050   04E5 23          	INC	HL	;POINT TO LIST OF ENTRIES
1051   04E6 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
1052   04E7 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
1053   04E9 23          	INC	HL	;NEXT ENTRY IN LIST
1054   04EA 13          	INC	DE	;NEXT ENTRY IN
1055   04EB 13          	INC	DE	;JUMP TABLE
1056   04EC 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
1057   04EE D1          	POP	DE
1058   04EF C1          	POP	BC
1059   04F0 F1          	POP	AF
1060   04F1 C9          	RET	;NOT IN TABLE
1061   04F2             ;
1062   04F2             ; FOUND ELEMENT IN THE TABLE
1063   04F2             ; PASS CONTROL TO THE JUMP HANDLER
1064   04F2             ;
1065   04F2 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
1066   04F3 6F          	LD	L,A	;FROM THE TABLE
1067   04F4 13          	INC	DE	;AND JUMP TO
1068   04F5 1A          	LD	A,(DE)	;THE JUMP ADDRESS
1069   04F6 67          	LD	H,A	;FOR THAT ENTRY
1070   04F7 D1          	POP	DE
1071   04F8 C1          	POP	BC
1072   04F9 F1          	POP	AF	;RESTORE REGISTERS
1073   04FA E9          	JP	(HL)
1074   04FB             ;-------------------
1075   04FB             ; CALCULATE CHECKSUM
1076   04FB             ;-------------------
1077   04FB             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
1078   04FB             ;
1079   04FB             ; ENTRY : HL = START OF BLOCK TO SUM
1080   04FB             ;         DE = END OF BLOCK TO SUM
1081   04FB             ; EXIT  : A =  CHECKSUM
1082   04FB             ;         FLAG REGISTER MODIFIED
1083   04FB             ;
1084   04FB E5          CHKSUM	PUSH	HL
1085   04FC D5          	PUSH	DE
1086   04FD 13          	INC	DE	;END OF BLOCK+1
1087   04FE AF          	XOR	A	;CLEAR CHECKSUM
1088   04FF 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
1089   0500 23          	INC	HL	;POINT TO NEXT ELEMENT
1090   0501 A7          	AND	A	;SET CARRY
1091   0502 E5          	PUSH	HL
1092   0503 ED 52       	SBC	HL,DE	;SUBTRACT
1093   0505 E1          	POP	HL
1094   0506 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
1095   0508 D1          	POP	DE
1096   0509 E1          	POP	HL
1097   050A C9          	RET
1098   050B             ;--------------------------
1099   050B             ; ACCESS BYTE LOOK UP TABLE
1100   050B             ;--------------------------
1101   050B             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
1102   050B             ; UP TABLE
1103   050B             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1104   050B             ;         HL = ADDRESS OF LOOK UP TABLE
1105   050B             ; EXIT : HL = ADDRESS OF ELEMENT A
1106   050B             ;
1107   050B D5          INDEXB	PUSH	DE
1108   050C 5F          	LD	E,A	;USE DE AS INDEX
1109   050D 16 00       	LD	D,0	;TO ELEMENT IN TABLE
1110   050F 19          	ADD	HL,DE	;BY ADDING TO HL
1111   0510 D1          	POP	DE
1112   0511 C9          	RET
1113   0512             ;--------------------------
1114   0512             ; ACCESS WORD LOOK UP TABLE
1115   0512             ;--------------------------
1116   0512             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
1117   0512             ; UP TABLE
1118   0512             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1119   0512             ;         HL = ADDRESS OF LOOK UP TABLE
1120   0512             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
1121   0512             ;
1122   0512 D5          INDEXW	PUSH	DE
1123   0513 5F          	LD	E,A
1124   0514 CB 23       	SLA	E	;MULTIPLY BY TWO
1125   0516 16 00       	LD	D,0
1126   0518 19          	ADD	HL,DE
1127   0519 D1          	POP	DE
1128   051A C9          	RET
1129   051B             ;-------------------------------
1130   051B             ; GENERATE A QUASI-RANDOM NUMBER
1131   051B             ;-------------------------------
1132   051B             ; GENERATE AN 16 BIT RANDOM NUMBER
1133   051B             ; USING LINEAR CONGRUENTIAL METHOD.
1134   051B             ;     Rn+1 = (aRn+c) MOD m
1135   051B             ; REFRESH REGISTER USED FOR Rn AND c
1136   051B             ;	ENTRY : NONE
1137   051B             ;	EXIT  : HL = RANDOM WORD
1138   051B             ;	NO REGISTERS MODIFIED
1139   051B             ;
1140   051B F5          RAND	PUSH	AF
1141   051C C5          	PUSH	BC
1142   051D D5          	PUSH	DE	;SAVE REGISTERS
1143   051E             ;
1144   051E             ; CALCULATE aRn
1145   051E             ;
1146   051E ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
1147   0520 5F          	LD	E,A	;(Rn) BY
1148   0521 16 00       	LD	D,0
1149   0523 21 48 05    	LD	HL,0548H	;CONSTANT (a)
1150   0526 CD 33 05    	CALL	MUL16
1151   0529             ;
1152   0529             ; CALCULATE aRn+c
1153   0529             ;
1154   0529 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
1155   052B 06 00       	LD	B,0	;READ OF THE
1156   052D 4F          	LD	C,A	;THE REFRESH
1157   052E 09          	ADD	HL,BC	;REGISTER (c)
1158   052F D1          	POP	DE
1159   0530 C1          	POP	BC
1160   0531 F1          	POP	AF	;RESTORE REGISTERS
1161   0532 C9          	RET
1162   0533             ;----------------------
1163   0533             ; 16 BIT MULTIPLICATION
1164   0533             ;----------------------
1165   0533             ;16 BIT MULTIPLY
1166   0533             ; ENTRY : HL = MULTIPLICAND (MPD)
1167   0533             ;         DE = MULTIPLIER (MPR)
1168   0533             ; EXIT : HL = RESULT
1169   0533             ;FROM ZAKS 'PROGRAMMING THE Z80'
1170   0533             ;
1171   0533 F5          MUL16	PUSH	AF
1172   0534 C5          	PUSH	BC
1173   0535 4C          	LD	C,H	;MPR(H)
1174   0536 7D          	LD	A,L	;MPR(L)
1175   0537 06 10       	LD	B,16	;BIT COUNTER
1176   0539 21 00 00    	LD	HL,0	;CLEAR RESULT
1177   053C CB 39       MULT	SRL	C	;MPR (H)
1178   053E 1F          	RRA	;MPR (L)
1179   053F 30 01       	JR	NC,MULT1	;TEST CARRY
1180   0541 19          	ADD	HL,DE	;ADD MPD TO RESULT
1181   0542 EB          MULT1	EX	DE,HL
1182   0543 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1183   0544 EB          	EX	DE,HL
1184   0545 10 F5       	DJNZ	MULT	;DONE?
1185   0547 C1          	POP	BC
1186   0548 F1          	POP	AF
1187   0549 C9          	RET
1188   054A             ; MUSIC ROUTINE
1189   054A             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1190   054A             ; MONITOR MON-1
1191   054A             ; BY JOHN HARDY AND KEN STONE
1192   054A             ;
1193   054A             ;----------------
1194   054A             ; MUSIC SEQUENCER
1195   054A             ;----------------
1196   054A             ; SEQUENCES THROUGH A TABLE OF NOTES
1197   054A             ; 1EH = REPEAT TUNE UNTIL RESET
1198   054A             ; 1FH = PLAY ONCE AND RETURN
1199   054A             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1200   054A             ; EXIT : NO REGISTERS MODIFIED
1201   054A F5          MUSIC	PUSH	AF
1202   054B C5          	PUSH	BC
1203   054C D5          	PUSH	DE
1204   054D E5          	PUSH	HL	;SAVE REGISTERS
1205   054E E5          	PUSH	HL
1206   054F EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1207   0550             ;
1208   0550             ; PLAY EACH NOTE IN TURN
1209   0550             ;
1210   0550 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1211   0551 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1212   0553             ;
1213   0553             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1214   0553             ;
1215   0553 FE 00       	CP	00H
1216   0555 C2 65 05    	JP	NZ,STEP1
1217   0558 01 00 10    	LD	BC,1000H
1218   055B 0B          PAUSE	DEC	BC
1219   055C 78          	LD	A,B
1220   055D B1          	OR	C
1221   055E C2 5B 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1222   0561 13          	INC	DE	;POINT TO NEXT ELEMENT
1223   0562 C3 50 05    	JP	STEP
1224   0565             ;
1225   0565             ; IF ELEMENT IS 1EH REPEAT TUNE
1226   0565             ;
1227   0565 FE 1E       STEP1	CP	1EH
1228   0567 C2 6F 05    	JP	NZ,STEP2
1229   056A D1          	POP	DE	;GET TABLE ADDRESS BACK
1230   056B D5          	PUSH	DE	;SAVE IT FOR LATER
1231   056C C3 50 05    	JP	STEP
1232   056F             ;
1233   056F             ; IF ELEMENT IS 1FH RETURN
1234   056F             ;
1235   056F FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1236   0571 C2 7A 05    	JP	NZ,STEP3
1237   0574 E1          	POP	HL
1238   0575 E1          	POP	HL
1239   0576 D1          	POP	DE
1240   0577 C1          	POP	BC
1241   0578 F1          	POP	AF
1242   0579 C9          	RET
1243   057A             ;
1244   057A             ;NOW PLAY THE NOTE
1245   057A             ;
1246   057A 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1247   057B 21 96 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1248   057E CD 0B 05    	CALL	INDEXB	;GET PERIOD/2
1249   0581 7E          	LD	A,(HL)	;GET ELEMENT
1250   0582 F5          	PUSH	AF	;SAVE FOR LATER
1251   0583 78          	LD	A,B	;GET ELEMENT BACK IN A
1252   0584 21 AE 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1253   0587 CD 0B 05    	CALL	INDEXB	;GET DURATION/2
1254   058A 7E          	LD	A,(HL)	;GET ELEMENT
1255   058B 6F          	LD	L,A
1256   058C 26 00       	LD	H,0	;HL = DURATION/2
1257   058E F1          	POP	AF
1258   058F CD C7 05    	CALL	TONE	;DO NOTE ROUTINE
1259   0592 13          	INC	DE
1260   0593 C3 50 05    	JP	STEP	;STEP TO NEXT ELEMENT
1261   0596             ;
1262   0596             ; PERIOD/2 OF NOTE
1263   0596             ;
1264   0596 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1264   059A 70 67 62 5C 
1265   059E 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1265   05A2 45 41 3C 39 
1266   05A6 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1266   05AA 2A 27 25 23 
1267   05AE             ;
1268   05AE             ; NOTE DURATION/2
1269   05AE             ;
1270   05AE 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1270   05B2 1E 20 23 25 
1271   05B6 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1271   05BA 31 33 37 3A 
1272   05BE 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1272   05C2 4D 52 57 5C 
1273   05C6 10          	.DB	10H
1274   05C7             ; TONE ROUTINE
1275   05C7             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1276   05C7             ; MONITOR MON-1
1277   05C7             ; BY JOHN HARDY AND KEN STONE
1278   05C7             ;
1279   05C7             ;--------------
1280   05C7             ; OUTPUT A TONE
1281   05C7             ;--------------
1282   05C7             ;
1283   05C7             ; ENTRY : A = PERIOD/2 OF NOTE
1284   05C7             ;         HL = DURATION/2 OF NOTE
1285   05C7             ; EXIT NO REGISTERS MODIFIED
1286   05C7 F5          TONE	PUSH	AF
1287   05C8 C5          	PUSH	BC
1288   05C9 D5          	PUSH	DE
1289   05CA E5          	PUSH	HL
1290   05CB 11 01 00    	LD	DE,0001H
1291   05CE 4F          	LD	C,A
1292   05CF 29          	ADD	HL,HL	;DOUBLE DURATION
1293   05D0 AF          	XOR	A
1294   05D1 EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1295   05D3 F6 40       	OR	40H	;KEEP D6 HIGH
1296   05D5 D3 85       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1297   05D7 41          	LD	B,C
1298   05D8 C5          TONE2	PUSH	BC
1299   05D9 06 02       	LD	B,02H
1300   05DB 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1301   05DD C1          	POP	BC
1302   05DE 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1303   05E0 ED 52       	SBC	HL,DE	;END OF NOTE?
1304   05E2 20 ED       	JR	NZ,TONE1	;DO AGAIN
1305   05E4 E1          	POP	HL
1306   05E5 D1          	POP	DE
1307   05E6 C1          	POP	BC
1308   05E7 F1          	POP	AF
1309   05E8 C9          	RET
1310   05E9             ;---------------
1311   05E9             ; KEY ENTRY BEEP
1312   05E9             ;---------------
1313   05E9 E5          BEEP	PUSH	HL
1314   05EA F5          	PUSH	AF
1315   05EB 21 39 3F    	LD	HL,MODE
1316   05EE CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1317   05F0 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1318   05F2             ;
1319   05F2             ; DO KEYPRESS DELAY
1320   05F2             ;
1321   05F2 D5          	PUSH	DE	;DO A SHORT
1322   05F3 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1323   05F6 2A 23 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1324   05F9 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1325   05FB 30 FC       	JR	NC,BEEP1	;KEY STROKES
1326   05FD D1          	POP	DE
1327   05FE 18 10       	JR	BEEP3
1328   0600             ;
1329   0600             ; OUTPUT KEYPRESS TONES
1330   0600             ;
1331   0600 3E 24       BEEP2	LD	A,24H
1332   0602 21 30 00    	LD	HL,0030H
1333   0605 CD C7 05    	CALL	TONE	;DO FIRST TONE
1334   0608 3E 0E       	LD	A,0EH
1335   060A 21 50 00    	LD	HL,0050H
1336   060D CD C7 05    	CALL	TONE	;DO SECOND TONE
1337   0610 F1          BEEP3	POP	AF
1338   0611 E1          	POP	HL
1339   0612 C9          	RET
1340   0613             ;----------------------------------------
1341   0613             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1342   0613             ;----------------------------------------
1343   0613             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1344   0613             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1345   0613             ; ATTACHED).
1346   0613             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1347   0613             ; AND MODIFY REGISTERS.
1348   0613             ;
1349   0613 E1          SSTEP	POP	HL	;GET HL BACK
1350   0614 F5          	PUSH	AF	;SAVE AF FOR LATER
1351   0615 22 49 3F    	LD	(TMPHL),HL
1352   0618 ED 53 47 3F 	LD	(TMPDE),DE
1353   061C ED 43 45 3F 	LD	(TMPBC),BC
1354   0620 DD 22 4B 3F 	LD	(TMPIX),IX
1355   0624 FD 22 4D 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1356   0628 E1          	POP	HL	;GET AF BACK
1357   0629 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
1358   062C E1          	POP	HL	;GET PC RETURN ADDRESS
1359   062D 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
1360   0630 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1361   0634             ;
1362   0634             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1363   0634             ;
1364   0634 CD E9 05    	CALL	BEEP
1365   0637 3A 3F 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1366   063A E6 07       	AND	7	;MAKE SURE IN LIMITS
1367   063C 32 3F 3F    	LD	(REGPNT),A	;SAVE IT
1368   063F CD 1C 07    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1369   0642 CD B7 04    	CALL	SKEYRL	;WAIT FOR A KEY
1370   0645 CD AA 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1371   0648 21 51 06    	LD	HL,REGTBL	;HANDLE THE KEY
1372   064B CD D8 04    	CALL	MENU	;AND UPDATE DISPLAY
1373   064E C3 3F 06    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1374   0651             ;
1375   0651             ; REGISTER DISPLAY KEY TABLE
1376   0651             ;
1377   0651 14          REGTBL	.DB	14H
1378   0652 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1378   0656 04 05 06 07 
1379   065A 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1379   065E 0C 0D 0E 0F 
1380   0662 10 11 12 13 	.DB	10H,11H,12H,13H
1381   0666 9E 06 9E 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1381   066A 9E 06 9E 06 
1382   066E 9E 06 9E 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1382   0672 9E 06 9E 06 
1383   0676 9E 06 9E 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1383   067A 9E 06 9E 06 
1384   067E 9E 06 9E 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1384   0682 9E 06 9E 06 
1385   0686             ;
1386   0686             ; MAKE THE GO KEY RETURN TO THE PROGRAM
1387   0686             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
1388   0686             ;
1389   0686~            #IFDEF TEC-1F
1390   0686~            	.DW RETPGM,RETMON,INCSTP,DECSTP
1391   0686             #ELSE
1392   0686 C5 06 CF 06 	.DW	RETMON,RETPGM,INCSTP,DECSTP
1392   068A F1 06 06 07 
1393   068E             #ENDIF
1394   068E             ;
1395   068E             ; REGISTER NAME CHARACTERS
1396   068E             ;
1397   068E~            #IFDEF TEC-1F
1398   068E~            REGNAM	.DW	4FC3H
1399   068E~            	.DW	6F47H,0E6C3H,0ECC7H
1400   068E~            	.DW	66C2H,286EH,28AEH
1401   068E~            	.DW	0A74FH
1402   068E             #ELSE
1403   068E 39 73       REGNAM	.DW	7339H
1404   0690 71 77 39 7C 	.DW	7771H,7C39H,5E79H
1404   0694 79 5E 
1405   0696 38 74 76 06 	.DW	7438H,0676H,066EH
1405   069A 6E 06 
1406   069C 73 6D       	.DW	6D73H
1407   069E             #ENDIF
1408   069E             ;--------------
1409   069E             ; EDIT REGISTER
1410   069E             ;--------------
1411   069E CD E9 05    REGKEY	CALL	BEEP
1412   06A1 F5          	PUSH	AF	;SAVE KEY FOR LATER
1413   06A2 3A 3F 3F    	LD	A,(REGPNT)
1414   06A5             ;
1415   06A5             ; EDIT REGISTER
1416   06A5             ;
1417   06A5 21 41 3F    	LD	HL,TMPPC
1418   06A8 CD 12 05    	CALL	INDEXW
1419   06AB 4E          	LD	C,(HL)
1420   06AC 23          	INC	HL
1421   06AD 46          	LD	B,(HL)	;GET REG CONTENTS
1422   06AE CB 21       	SLA	C
1423   06B0 CB 10       	RL	B
1424   06B2 CB 21       	SLA	C
1425   06B4 CB 10       	RL	B
1426   06B6 CB 21       	SLA	C
1427   06B8 CB 10       	RL	B	;SHIFT REGISTER
1428   06BA CB 21       	SLA	C	;FOUR BITS
1429   06BC CB 10       	RL	B	;LEFT AND
1430   06BE F1          	POP	AF	;PUT THE KEY
1431   06BF B1          	OR	C	;INTO THE LSN
1432   06C0 4F          	LD	C,A	;AND PUT THE
1433   06C1 70          	LD	(HL),B	;REGISTER BACK
1434   06C2 2B          	DEC	HL	;WHERE IT BELONGS
1435   06C3 71          	LD	(HL),C
1436   06C4 C9          	RET
1437   06C5             ;------------------
1438   06C5             ; RETURN TO MONITOR
1439   06C5             ;------------------
1440   06C5 CD E9 05    RETMON	CALL	BEEP
1441   06C8 CD B7 04    	CALL	SKEYRL
1442   06CB FB          	EI	;ENABLE INTERRUPTS AGAIN
1443   06CC C3 7D 02    	JP	MAIN
1444   06CF             ;------------------
1445   06CF             ; RETURN TO PROGRAM
1446   06CF             ;------------------
1447   06CF ED 7B 4F 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1448   06D3 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
1449   06D6 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1450   06D7 2A 43 3F    	LD	HL,(TMPAF)
1451   06DA E5          	PUSH	HL	;SAVE AF REG FOR LATER
1452   06DB FD 2A 4D 3F 	LD	IY,(TMPIY)
1453   06DF DD 2A 4B 3F 	LD	IX,(TMPIX)
1454   06E3 ED 4B 45 3F 	LD	BC,(TMPBC)
1455   06E7 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1456   06EB F1          	POP	AF	;RESTORE AF
1457   06EC 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
1458   06EF FB          	EI	;ENABLE INTERRUPTS
1459   06F0 C9          	RET	;AND RETURN TO PROGRAM
1460   06F1             ;----------------------
1461   06F1             ; DISPLAY NEXT REGISTER
1462   06F1             ;----------------------
1463   06F1 CD E9 05    INCSTP	CALL	BEEP
1464   06F4 3A 3F 3F    	LD	A,(REGPNT)
1465   06F7 FE 07       	CP	7	;END OF REG TABLE?
1466   06F9 CA 01 07    	JP	Z,INCSP1
1467   06FC 3C          	INC	A
1468   06FD 32 3F 3F    	LD	(REGPNT),A
1469   0700 C9          	RET
1470   0701 AF          INCSP1	XOR	A
1471   0702 32 3F 3F    	LD	(REGPNT),A
1472   0705 C9          	RET
1473   0706             ;--------------------------
1474   0706             ; DISPLAY PREVIOUS REGISTER
1475   0706             ;--------------------------
1476   0706 CD E9 05    DECSTP	CALL	BEEP
1477   0709 3A 3F 3F    	LD	A,(REGPNT)
1478   070C FE 00       	CP	0	;START OF REG TABLE?
1479   070E CA 16 07    	JP	Z,DECSP1
1480   0711 3D          	DEC	A
1481   0712 32 3F 3F    	LD	(REGPNT),A
1482   0715 C9          	RET
1483   0716 3E 07       DECSP1	LD	A,7
1484   0718 32 3F 3F    	LD	(REGPNT),A
1485   071B C9          	RET
1486   071C             ;-----------------
1487   071C             ; DISPLAY REGISTER
1488   071C             ;-----------------
1489   071C 3A 3F 3F    SETREG	LD	A,(REGPNT)
1490   071F 21 41 3F    	LD	HL,TMPPC	;START OF TABLE
1491   0722 CD 12 05    	CALL	INDEXW	;GET ELEMENT ADDRESS
1492   0725 5E          	LD	E,(HL)
1493   0726 23          	INC	HL
1494   0727 56          	LD	D,(HL)
1495   0728 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1496   0729 CD CD 03    	CALL	DISADD
1497   072C             ;
1498   072C             ; DISPLAY REGISTER NAME
1499   072C             ;
1500   072C 21 8E 06    	LD	HL,REGNAM
1501   072F CD 12 05    	CALL	INDEXW
1502   0732 7E          	LD	A,(HL)
1503   0733 32 31 3F    	LD	(DISBUF+0),A
1504   0736 23          	INC	HL
1505   0737 7E          	LD	A,(HL)
1506   0738 32 32 3F    	LD	(DISBUF+1),A
1507   073B C9          	RET
1508   073C             ;------------------
1509   073C             ; FUNCTION KEY MENU
1510   073C             ;------------------
1511   073C             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1512   073C             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1513   073C             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1514   073C             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1515   073C             ;
1516   073C CD E9 05    FUNKEY	CALL	BEEP
1517   073F 2A 3B 3F    FUNKY1	LD	HL,(ADRESS)
1518   0742 CD CD 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1519   0745~            #IFDEF TEC-1F
1520   0745~            	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1521   0745             #ELSE
1522   0745 21 54 71    	LD	HL,7154H	;FN
1523   0748             #ENDIF
1524   0748 22 31 3F    	LD	(DISBUF),HL	;DISPLAY FN
1525   074B CD B7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1526   074E CD AA 04    FUNKY2	CALL	SKEYIN
1527   0751 2A 15 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1528   0754 CD D8 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1529   0757             ;
1530   0757             ; RETURN TO MAIN
1531   0757             ;
1532   0757 CD E9 05    CANCEL	CALL	BEEP
1533   075A CD 76 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1534   075D CD B7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1535   0760 C9          	RET
1536   0761             ;
1537   0761             ; FUNCTION MENU KEY TABLE
1538   0761             ;
1539   0761 11          FUNLST	.DB	11H
1540   0762 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1540   0766 04 05 06 07 
1541   076A 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1541   076E 0C 0D 0E 0F 
1542   0772 10          	.DB	10H	;FN KEY
1543   0773 99 07 A3 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1543   0777 C2 08 D4 08 
1544   077B E6 08 3C 09 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1544   077F 7A 09 B1 09 
1545   0783 BF 09 CE 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1545   0787 DD 09 EC 09 
1546   078B 86 0A 07 0C 	.DW	SECRET,RELSQR,SCOPE,TIME
1546   078F 60 0C 0F 0D 
1547   0793 95 07       	.DW	FUNFUN
1548   0795             ;-----------------------
1549   0795             ; CALL FUNCTION FUNCTION
1550   0795             ;-----------------------
1551   0795 2A 2F 3F    FUNFUN	LD	HL,(FUNJMP)
1552   0798 E9          	JP	(HL)
1553   0799             ;------------------------------------------
1554   0799             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1555   0799             ;------------------------------------------
1556   0799 CD E9 05    GOEXEC	CALL	BEEP
1557   079C CD CE 04    	CALL	KEYREL
1558   079F             ;	POP	HL	;REMOVE EXEC RETURN
1559   079F 2A 3B 3F    	LD	HL,(ADRESS)
1560   07A2 E9          	JP	(HL)	;START EXECUCTION
1561   07A3             ;------------------------------------
1562   07A3             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1563   07A3             ;------------------------------------
1564   07A3 CD E9 05    INTELFN	CALL	BEEP
1565   07A6 CD CE 04    	CALL	KEYREL
1566   07A9 CD B2 07    	CALL	INTELH
1567   07AC C2 05 09    	JP	NZ,BLKMV1	;SHOW THE ERROR
1568   07AF C3 57 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1569   07B2             ;-----------------------
1570   07B2             ; RECEIVE INTEL HEX FILE
1571   07B2             ;-----------------------
1572   07B2 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1573   07B6             ;
1574   07B6             ; WAIT FOR RECORD MARK
1575   07B6             ;
1576   07B6 AF          INTEL1	XOR	A
1577   07B7 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1578   07BA CD 88 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1579   07BD FE 3A       	CP	':'	;TO BE TRANSMITTED
1580   07BF 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1581   07C1             ;
1582   07C1             ; GET RECORD LENGTH
1583   07C1             ;
1584   07C1 CD 0E 08    	CALL	GETBYT
1585   07C4 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1586   07C7             ;
1587   07C7             ; GET ADDRESS FIELD
1588   07C7             ;
1589   07C7 CD 0E 08    	CALL	GETBYT
1590   07CA DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1591   07CD CD 0E 08    	CALL	GETBYT
1592   07D0 DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1593   07D3             ;
1594   07D3             ; GET RECORD TYPE
1595   07D3             ;
1596   07D3 CD 0E 08    	CALL	GETBYT
1597   07D6 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1598   07D8             ;
1599   07D8             ; READ IN THE DATA
1600   07D8             ;
1601   07D8 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1602   07DB DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1603   07DE DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1604   07E1             
1605   07E1 CD 0E 08    INTEL2	CALL	GETBYT	;GET DATA BYTE
1606   07E4 77          	LD	(HL),A	;STORE DATA BYTE
1607   07E5 23          	INC	HL
1608   07E6 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1609   07E8             ;
1610   07E8             ; GET CHECKSUM AND COMPARE
1611   07E8             ;
1612   07E8 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1613   07EB ED 44       	NEG		;TWO'S COMPLEMENT
1614   07ED DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1615   07F0 CD 0E 08    	CALL	GETBYT
1616   07F3 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1617   07F6 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1618   07F9 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1619   07FB C9          	RET	;NZ=CHECKSUM ERROR
1620   07FC             ;
1621   07FC             ; END OF FILE RECORD
1622   07FC             ;
1623   07FC DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1624   07FF ED 44       	NEG		;TWO'S COMPLEMENT
1625   0801 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1626   0804 CD 0E 08    	CALL	GETBYT
1627   0807 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1628   080A DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1629   080D C9          	RET	;NZ=CHECKSUM ERROR
1630   080E             ;--------------------------
1631   080E             ; GET BYTE FROM SERIAL PORT
1632   080E             ;--------------------------
1633   080E C5          GETBYT	PUSH	BC
1634   080F CD 88 08    	CALL	RXDATA
1635   0812 CB 77       	BIT	6,A
1636   0814 28 02       	JR	Z,GETBT1
1637   0816 C6 09       	ADD	A,09H
1638   0818 E6 0F       GETBT1	AND	0FH
1639   081A CB 27       	SLA 	A
1640   081C CB 27       	SLA	A
1641   081E CB 27       	SLA	A
1642   0820 CB 27       	SLA	A
1643   0822 4F          	LD	C,A
1644   0823             ;
1645   0823             ; GET LOW NYBBLE
1646   0823             ;
1647   0823 CD 88 08    	CALL	RXDATA
1648   0826 CB 77       	BIT	6,A
1649   0828 28 02       	JR	Z,GETBT2
1650   082A C6 09       	ADD	A,09H
1651   082C E6 0F       GETBT2	AND	0FH
1652   082E B1          	OR	C
1653   082F 47          	LD	B,A
1654   0830 DD 86 03    	ADD	A,(IX+3)
1655   0833 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1656   0836 78          	LD	A,B
1657   0837 A7          	AND	A	;CLEAR CARRY
1658   0838 C1          	POP	BC
1659   0839 C9          	RET
1660   083A             ;-------------------------------
1661   083A             ; CONVERT ASCII CHARACTER TO HEX
1662   083A             ;-------------------------------
1663   083A             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1664   083A             ;ENTRY : A= ASCII 0-9,A-F
1665   083A             ;EXIT  : A= HEX 0-F IN LSN
1666   083A             ; A AND F REGISTERS MODIFIED
1667   083A             ;
1668   083A CB 77       ASCHEX	BIT	6,A
1669   083C 28 02       	JR	Z,ASCHX1
1670   083E C6 09       	ADD	A,09H
1671   0840 E6 0F       ASCHX1	AND	0FH
1672   0842 C9          	RET
1673   0843             ;------------------------------------
1674   0843             ; BIT BANG SERIAL PORT INITIALISATION
1675   0843             ;------------------------------------
1676   0843             ; SET THE SERIAL TRANSMIT PIN HIGH SO THE 
1677   0843             ; HOST CAN SEE THAT WE ARE PREPARING TO TRANSMIT
1678   0843             ; 
1679   0843             ; ENTRY : HL = BAUD RATE
1680   0843             ;         HL = 0 USE EXISTING BAUD CONSTANT
1681   0843             ; EXIT  : HL PRESERVED
1682   0843             ;       ; AF MODIFIED
1683   0843             ;
1684   0843 3E 40       SERINI	LD	A,40H
1685   0845 D3 85       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
1686   0847 06 32       	LD	B,50
1687   0849 CD 53 08    	CALL	MSDELAY	;WAIT SO THE HOST SEES TX HIGH
1688   084C 7C          	LD	A,H
1689   084D B5          	OR	L
1690   084E C8          	RET	Z	;HL IS ZERO DON'T UPDATE THE BAUD RATE
1691   084F 22 21 3F    	LD  (BAUD),HL	;UPDATE THE BAUD RATE
1692   0852 C9              RET	
1693   0853             ;------------------
1694   0853             ; MILLISECOND DELAY
1695   0853             ;------------------
1696   0853             ; APPROX. 1 MILLISECOND DELAY
1697   0853             ; 
1698   0853             ; ENTRY : B = 1 TO 255 MILLISECONDS
1699   0853             ; EXIT  : B = 0
1700   0853             ;
1701   0853 C5          MSDELAY	PUSH	BC	;11T
1702   0854 06 E9       	LD	B,233	;7T
1703   0856 00          MSDEL1	NOP	;4T
1704   0857 10 FD       	DJNZ	MSDEL1	;NZ=13T,Z=8T
1705   0859 C1          	POP	BC	;10T
1706   085A 10 F7       	DJNZ	MSDELAY	;NZ=13T,Z=8T
1707   085C C9          	RET	;10T
1708   085D             ;------------------------
1709   085D             ; SERIAL TRANSMIT ROUTINE
1710   085D             ;------------------------
1711   085D             ;TRANSMIT BYTE SERIALLY ON DOUT
1712   085D             ;
1713   085D             ; ENTRY : A = BYTE TO TRANSMIT
1714   085D             ;  EXIT : NO REGISTERS MODIFIED
1715   085D             ;
1716   085D F5          TXDATA	PUSH	AF
1717   085E C5          	PUSH	BC
1718   085F E5          	PUSH	HL
1719   0860 2A 21 3F    	LD	HL,(BAUD)
1720   0863 4F          	LD	C,A
1721   0864             ;
1722   0864             ; TRANSMIT START BIT
1723   0864             ;
1724   0864 AF          	XOR	A
1725   0865 D3 85       	OUT	(SCAN),A
1726   0867 CD B5 08    	CALL	BITIME
1727   086A             ;
1728   086A             ; TRANSMIT DATA
1729   086A             ;
1730   086A 06 08       	LD	B,08H
1731   086C CB 09       	RRC	C
1732   086E CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1733   0870 79          	LD	A,C	;LSB FIRST AND OUTPUT
1734   0871 E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1735   0873 D3 85       	OUT	(SCAN),A
1736   0875 CD B5 08    	CALL	BITIME
1737   0878 10 F4       	DJNZ	NXTBIT
1738   087A             ;
1739   087A             ; SEND STOP BITS
1740   087A             ;
1741   087A 3E 40       	LD	A,40H
1742   087C D3 85       	OUT	(SCAN),A
1743   087E CD B5 08    	CALL	BITIME
1744   0881 CD B5 08    	CALL	BITIME
1745   0884 E1          	POP	HL
1746   0885 C1          	POP	BC
1747   0886 F1          	POP	AF
1748   0887 C9          	RET
1749   0888             ;-----------------------
1750   0888             ; SERIAL RECEIVE ROUTINE
1751   0888             ;-----------------------
1752   0888             ;RECEIVE SERIAL BYTE FROM DIN
1753   0888             ;
1754   0888             ; ENTRY : NONE
1755   0888             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1756   0888             ;
1757   0888             ; REGISTERS MODIFIED A AND F
1758   0888             ;
1759   0888 C5          RXDATA	PUSH	BC
1760   0889 E5          	PUSH	HL
1761   088A             ;
1762   088A             ; WAIT FOR START BIT
1763   088A             ;
1764   088A DB 86       RXDAT1	IN	A,(KEYBUF)
1765   088C CB 7F       	BIT	7,A
1766   088E 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1767   0890             ;
1768   0890             ; DETECTED START BIT
1769   0890             ;
1770   0890 2A 21 3F    	LD	HL,(BAUD)
1771   0893 CB 3C       	SRL	H
1772   0895 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1773   0897 CD B5 08    	CALL	BITIME
1774   089A DB 86       	IN	A,(KEYBUF)
1775   089C CB 7F       	BIT	7,A
1776   089E 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1777   08A0             ;
1778   08A0             ; DETECTED VALID START BIT,READ IN DATA
1779   08A0             ;
1780   08A0 06 08       	LD	B,08H
1781   08A2 2A 21 3F    RXDAT2	LD	HL,(BAUD)
1782   08A5 CD B5 08    	CALL	BITIME	;DELAY ONE BIT TIME
1783   08A8 DB 86       	IN	A,(KEYBUF)
1784   08AA CB 17       	RL	A
1785   08AC CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1786   08AE 10 F2       	DJNZ	RXDAT2
1787   08B0 79          	LD	A,C
1788   08B1 B7          	OR	A	;CLEAR CARRY FLAG
1789   08B2 E1          	POP	HL
1790   08B3 C1          	POP	BC
1791   08B4 C9          	RET
1792   08B5             ;---------------
1793   08B5             ; BIT TIME DELAY
1794   08B5             ;---------------
1795   08B5             ;DELAY FOR ONE SERIAL BIT TIME
1796   08B5             ;ENTRY : HL = DELAY TIME
1797   08B5             ; NO REGISTERS MODIFIED
1798   08B5             ;
1799   08B5 E5          BITIME	PUSH	HL
1800   08B6 D5          	PUSH	DE
1801   08B7 11 01 00    	LD	DE,0001H
1802   08BA ED 52       BITIM1	SBC	HL,DE
1803   08BC D2 BA 08    	JP	NC,BITIM1
1804   08BF D1          	POP	DE
1805   08C0 E1          	POP	HL
1806   08C1 C9          	RET
1807   08C2             ;-----------------------------
1808   08C2             ; FUNCTION 2 - ENTER ADDRESS 1
1809   08C2             ;-----------------------------
1810   08C2 CD E9 05    ADDRA	CALL	BEEP
1811   08C5 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1812   08C8 22 29 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1813   08CB~            #IFDEF TEC-1F
1814   08CB~            	LD	HL,0C300H	;ADDRESS [
1815   08CB             #ELSE
1816   08CB 21 00 39    	LD	HL,3900H	;ADDRESS [
1817   08CE             #ENDIF
1818   08CE CD 2E 09    	CALL	SDELAY
1819   08D1 C3 5A 07    	JP	CANCL1
1820   08D4             ;-----------------------------
1821   08D4             ; FUNCTION 3 - ENTER ADDRESS 2
1822   08D4             ;-----------------------------
1823   08D4 CD E9 05    ADDRB	CALL	BEEP
1824   08D7 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1825   08DA 22 2B 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1826   08DD~            #IFDEF TEC-1F
1827   08DD~            	LD	HL,00A9H	;ADDRESS ]
1828   08DD             #ELSE
1829   08DD 21 0F 00    	LD	HL,000FH	;ADDRESS ]
1830   08E0             #ENDIF
1831   08E0 CD 2E 09    	CALL	SDELAY
1832   08E3 C3 5A 07    	JP	CANCL1
1833   08E6             ;------------------------
1834   08E6             ; FUNCTION 4 - BLOCK MOVE
1835   08E6             ;------------------------
1836   08E6 CD E9 05    BLKMVE	CALL	BEEP
1837   08E9 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1838   08EC 22 2D 3F    	LD	(BLKDST),HL	;ADDRESS AS
1839   08EF~            #IFDEF TEC-1F
1840   08EF~            	LD	HL,0C3A9H	;DESTINATION
1841   08EF             #ELSE
1842   08EF 21 0F 39    	LD	HL,390FH	;DESTINATION
1843   08F2             #ENDIF
1844   08F2 CD 2E 09    	CALL	SDELAY
1845   08F5             ;
1846   08F5             ; CALCULATE NUMBER OF BYTES TO MOVE
1847   08F5             ;
1848   08F5 2A 2B 3F    	LD	HL,(BLKEND)
1849   08F8 ED 5B 29 3F 	LD	DE,(BLKSRT)
1850   08FC A7          	AND	A
1851   08FD ED 52       	SBC	HL,DE
1852   08FF 23          	INC	HL	;MAKE MOVE INCLUSIVE
1853   0900 22 27 3F    	LD	(COUNT),HL
1854   0903 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1855   0905             ;
1856   0905             ; SHOW ERROR
1857   0905             ;
1858   0905~            #IFDEF TEC-1F
1859   0905~            BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1860   0905             #ELSE
1861   0905 21 79 00    BLKMV1	LD	HL,0079H	;SHOW ERROR E
1862   0908             #ENDIF
1863   0908 CD E9 05    BLKMV2	CALL	BEEP
1864   090B 22 31 3F    	LD	(DISBUF),HL	;AND WAIT
1865   090E CD AA 04    	CALL	SKEYIN	;FOR KEYPRESS
1866   0911 CD E9 05    	CALL	BEEP
1867   0914 CD B7 04    	CALL	SKEYRL
1868   0917 C3 5A 07    	JP	CANCL1
1869   091A             ;
1870   091A             ; MOVE BLOCK
1871   091A             ;
1872   091A CD 20 09    BLKMV3	CALL	MOVE
1873   091D C3 5A 07    	JP	CANCL1
1874   0920             ;-----------
1875   0920             ; BLOCK MOVE
1876   0920             ;-----------
1877   0920 ED 4B 27 3F MOVE	LD	BC,(COUNT)
1878   0924 2A 29 3F    	LD	HL,(BLKSRT)	;START ADDR
1879   0927 ED 5B 2D 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1880   092B ED B0       	LDIR
1881   092D C9          	RET
1882   092E             ;-------------------------------
1883   092E             ; SCAN DISPLAY UNTIL KEY RELEASE
1884   092E             ;-------------------------------
1885   092E 22 31 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1886   0931 06 FF       	LD	B,255	;IN DATA DISPLAYS
1887   0933 CD 1B 04    SDELY1	CALL	SCAND	;UNTIL KEY
1888   0936 10 FB       	DJNZ SDELY1	;IS RELEASED
1889   0938 CD B7 04    	CALL	SKEYRL
1890   093B C9          	RET
1891   093C             ;---------------------------
1892   093C             ;FUNCTION 5 - BLOCK CHECKSUM
1893   093C             ;---------------------------
1894   093C CD E9 05    BLKSUM	CALL	BEEP
1895   093F~            #IFDEF TEC-1F
1896   093F~            	LD	HL,0C3A7H	;CS
1897   093F             #ELSE
1898   093F 21 6D 39    	LD	HL,396DH	;CS
1899   0942             #ENDIF
1900   0942 CD 2E 09    	CALL	SDELAY	;SHOW PROMPT
1901   0945 ED 5B 29 3F 	LD	DE,(BLKSRT)
1902   0949 2A 2B 3F    	LD	HL,(BLKEND)
1903   094C A7          	AND	A
1904   094D ED 52       	SBC	HL,DE
1905   094F 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1906   0950 22 27 3F    	LD	(COUNT),HL
1907   0953 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1908   0955             ;
1909   0955             ; SHOW ERROR
1910   0955             ;
1911   0955 C3 05 09    	JP	BLKMV1
1912   0958             ;
1913   0958             ; CALCULATE CHECKSUM
1914   0958             ;
1915   0958 2A 29 3F    BLKSM1	LD	HL,(BLKSRT)
1916   095B ED 5B 2B 3F 	LD	DE,(BLKEND)
1917   095F CD FB 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1918   0962 CD E2 03    	CALL	DISBYT	;DISPLAY
1919   0965 2A 27 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1920   0968 CD CD 03    	CALL	DISADD	;SUMMED AND
1921   096B CD E9 05    	CALL	BEEP
1922   096E CD AA 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1923   0971 CD E9 05    	CALL	BEEP	;A KEY IS PRESSED
1924   0974 CD B7 04    	CALL	SKEYRL
1925   0977 C3 5A 07    	JP	CANCL1
1926   097A             ;----------------------------------------
1927   097A             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1928   097A             ;----------------------------------------
1929   097A CD E9 05    BRANCH	CALL	BEEP
1930   097D~            #IFDEF TEC-1F
1931   097D~            	LD	HL,44E6H	;RB
1932   097D             #ELSE
1933   097D 21 7C 50    	LD	HL,507CH	;RB
1934   0980             #ENDIF
1935   0980 CD 2E 09    	CALL	SDELAY
1936   0983 2A 3B 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1937   0986 ED 5B 29 3F 	LD	DE,(BLKSRT)
1938   098A 13          	INC	DE	;POINT TO PC+2
1939   098B A7          	AND	A
1940   098C ED 52       	SBC	HL,DE	;SUBTRACT
1941   098E             ;
1942   098E             ;TEST HIGH BYTE OF RESULT TO
1943   098E             ;DETERMINE IF BACKWARD BRANCH
1944   098E             ;
1945   098E 7C          	LD	A,H
1946   098F FE FF       	CP	255	;BACKWARD BRANCH?
1947   0991 C2 9C 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1948   0994             ;
1949   0994             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1950   0994             ;
1951   0994 7D          	LD	A,L
1952   0995 CB 7F       	BIT	7,A
1953   0997 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1954   0999 C3 05 09    	JP	BLKMV1	;TOO FAR BACK
1955   099C             ;
1956   099C             ;TEST HIGH BYTE OF RESULT TO
1957   099C             ;DETERMINE IF FORWARD BRANCH
1958   099C             ;
1959   099C FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1960   099E C2 05 09    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1961   09A1             ;
1962   09A1             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1963   09A1             ;
1964   09A1 7D          	LD	A,L
1965   09A2 CB 7F       	BIT	7,A
1966   09A4 C2 05 09    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1967   09A7             ;
1968   09A7             ; WITHIN LIMITS PUT IN RAM
1969   09A7             ; AND SHOW AS CURRENT ADDRESS
1970   09A7             ;
1971   09A7 2A 29 3F    BRNCH2	LD	HL,(BLKSRT)
1972   09AA 22 3B 3F    	LD	(ADRESS),HL
1973   09AD 77          	LD	(HL),A
1974   09AE C3 5A 07    	JP	CANCL1
1975   09B1             ;-----------------------------------------
1976   09B1             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1977   09B1             ;-----------------------------------------
1978   09B1 CD E9 05    TRACE	CALL	BEEP
1979   09B4~            #IFDEF TEC-1F
1980   09B4~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1981   09B4~            	LD	HL,0046H	;SHOW T
1982   09B4             #ELSE
1983   09B4 D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1984   09B6 21 70 00    	LD	HL,0070H	;SHOW T
1985   09B9             #ENDIF
1986   09B9 CD 2E 09    	CALL	SDELAY
1987   09BC C3 5A 07    	JP	CANCL1
1988   09BF             ;-------------------------
1989   09BF             ; FUNCTION 8 - PLAY TUNE 1
1990   09BF             ;-------------------------
1991   09BF CD E9 05    PLAY1	CALL	BEEP
1992   09C2 CD CE 04    	CALL	KEYREL
1993   09C5 21 FA 09    	LD	HL,TUNE1
1994   09C8 CD 4A 05    	CALL	MUSIC
1995   09CB C3 5A 07    	JP	CANCL1
1996   09CE             ;-------------------------
1997   09CE             ; FUNCTION 9 - PLAY TUNE 2
1998   09CE             ;-------------------------
1999   09CE CD E9 05    PLAY2	CALL	BEEP
2000   09D1 CD CE 04    	CALL	KEYREL
2001   09D4 21 3A 0A    	LD	HL,TUNE2
2002   09D7 CD 4A 05    	CALL	MUSIC
2003   09DA C3 5A 07    	JP	CANCL1
2004   09DD             ;------------------------------
2005   09DD             ; FUNCTION A - PLAY TUNE IN RAM
2006   09DD             ;------------------------------
2007   09DD CD E9 05    PLAY3	CALL	BEEP
2008   09E0 CD CE 04    	CALL	KEYREL
2009   09E3 2A 3B 3F    	LD	HL,(ADRESS)
2010   09E6 CD 4A 05    	CALL	MUSIC
2011   09E9 C3 5A 07    	JP	CANCL1
2012   09EC             ;-----------------------------
2013   09EC             ; FUNCTION B - TOGGLE KEY BEEP
2014   09EC             ;-----------------------------
2015   09EC CD E9 05    SWBEEP	CALL	BEEP
2016   09EF 3A 39 3F    	LD	A,(MODE)
2017   09F2 EE 40       	XOR	40H
2018   09F4 32 39 3F    	LD	(MODE),A
2019   09F7 C3 5A 07    	JP	CANCL1
2020   09FA             ;
2021   09FA             ; TUNE 1
2022   09FA             ; FROM TALKING ELECTRONICS TEC-1
2023   09FA             ; MONITOR MON-1
2024   09FA             ; BY JOHN HARDY AND KEN STONE
2025   09FA             ;
2026   09FA 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2026   09FE 06 0D 0A 0D 
2027   0A02 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2027   0A06 0F 11 12 0F 
2028   0A0A 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2028   0A0E 12 0F 0D 0A 
2029   0A12 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
2029   0A16 0F 0A 0D 0F 
2030   0A1A 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2030   0A1E 06 0D 0A 0D 
2031   0A22 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2031   0A26 0F 11 12 0F 
2032   0A2A 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2032   0A2E 12 0F 0D 0A 
2033   0A32 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
2033   0A36 06 12 00 1E 
2034   0A3A             ;
2035   0A3A             ; TUNE 2
2036   0A3A             ; FROM TALKING ELECTRONICS TEC-1
2037   0A3A             ; MONITOR MON-1
2038   0A3A             ; BY JOHN HARDY AND KEN STONE
2039   0A3A             ;
2040   0A3A 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
2040   0A3E 0A 0A 06 06 
2041   0A42 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
2041   0A46 0A 0A 0A 0A 
2042   0A4A 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
2042   0A4E 08 0A 0A 0A 
2043   0A52 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
2043   0A56 08 0A 0D 0D 
2044   0A5A 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
2044   0A5E 0D 05 08 0B 
2045   0A62 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
2045   0A66 06 0B 0A 08 
2046   0A6A 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
2046   0A6E 06 06 0B 0A 
2047   0A72 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
2047   0A76 08 08 0A 0B 
2048   0A7A 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
2048   0A7E 06 06 06 06 
2049   0A82 00 00 00 1E 	.DB	00H,00H,00H,1EH
2050   0A86             ;---------------------------
2051   0A86             ; FUNCTION C - SECRET NUMBER
2052   0A86             ;---------------------------
2053   0A86 CD E9 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
2054   0A89 CD CE 04    	CALL	KEYREL	;AND CLEAR DISPLAY
2055   0A8C CD 4C 04    	CALL	CLRBUF	;BUFFER
2056   0A8F DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
2057   0A93             ;
2058   0A93             ; SEPARATE NYBBLES IN RANDOM NUMBER
2059   0A93             ;
2060   0A93 CD 1B 05    	CALL	RAND
2061   0A96 DD 75 0B    	LD	(IX+11),L
2062   0A99 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
2063   0A9C DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
2064   0A9F CD F4 0B    	CALL	SPLIT	;NUMBER INTO
2065   0AA2 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
2066   0AA5 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
2067   0AA8 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
2068   0AAB CD F4 0B    	CALL	SPLIT	;GUESS EASIER
2069   0AAE DD 75 06    	LD	(IX+6),L
2070   0AB1 DD 74 07    	LD	(IX+7),H
2071   0AB4 AF          	XOR	A
2072   0AB5 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
2073   0AB7 21 00 00    	LD	HL,0
2074   0ABA DD 75 08    	LD	(IX+8),L
2075   0ABD DD 74 09    	LD	(IX+9),H
2076   0AC0 CD CD 03    	CALL	DISADD	;AND DISPLAY GUESS
2077   0AC3             ;
2078   0AC3             ; SCAN THE KEYBOARD
2079   0AC3             ;
2080   0AC3 CD AA 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
2081   0AC6 21 D2 0A    	LD	HL,SECNUM
2082   0AC9 CD D8 04    	CALL	MENU	;EXECUTE KEY HANDLER
2083   0ACC CD B7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2084   0ACF C3 C3 0A    	JP	SECRT1
2085   0AD2             ;
2086   0AD2             ; SECRET NUMBER KEY TABLE
2087   0AD2             ;
2088   0AD2 12          SECNUM	.DB	12H
2089   0AD3 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
2089   0AD7 04 05 06 07 
2090   0ADB 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
2090   0ADF 0C 0D 0E 0F 
2091   0AE3 10 11       	.DB	10H,11H
2092   0AE5 09 0B 09 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2092   0AE9 09 0B 09 0B 
2093   0AED 09 0B 09 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2093   0AF1 09 0B 09 0B 
2094   0AF5 09 0B 09 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2094   0AF9 09 0B 09 0B 
2095   0AFD 09 0B 09 0B 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2095   0B01 09 0B 09 0B 
2096   0B05             ;
2097   0B05             ; MAKE THE GO KEY CHECK THE NUMBER
2098   0B05             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
2099   0B05             ;
2100   0B05~            #IFDEF TEC-1F
2101   0B05~            	.DW	CHKKEY,ENDKEY
2102   0B05             #ELSE
2103   0B05 30 0B 39 0B 	.DW	ENDKEY,CHKKEY
2104   0B09             #ENDIF
2105   0B09             ;---------------
2106   0B09             ; EDIT GUESS KEY
2107   0B09             ;---------------
2108   0B09 F5          EDTKEY	PUSH	AF
2109   0B0A DD 6E 08    	LD	L,(IX+8)
2110   0B0D DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
2111   0B10 CB 25       	SLA	L
2112   0B12 CB 14       	RL	H	;AND DO A 16 BIT
2113   0B14 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
2114   0B16 CB 14       	RL	H	;TO MAKE  ROOM
2115   0B18 CB 25       	SLA	L	;FOR THE NEW KEY
2116   0B1A CB 14       	RL	H
2117   0B1C CB 25       	SLA	L
2118   0B1E CB 14       	RL	H
2119   0B20 F1          	POP	AF
2120   0B21 B5          	OR	L	;IT IN THE LEAST
2121   0B22 6F          	LD	L,A	;SIGNIFICANT NYBBLE
2122   0B23 DD 75 08    	LD	(IX+8),L
2123   0B26 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
2124   0B29 CD CD 03    	CALL	DISADD
2125   0B2C CD E9 05    	CALL	BEEP
2126   0B2F C9          	RET
2127   0B30             ;----------
2128   0B30             ; QUIT GAME
2129   0B30             ;----------
2130   0B30 CD E9 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
2131   0B33 CD CE 04    	CALL	KEYREL	;AND RETURN TO
2132   0B36 C3 7D 02    	JP	MAIN	;MONITOR
2133   0B39             ;---------------------------
2134   0B39             ; SEE IF ITS THE RIGHT GUESS
2135   0B39             ;---------------------------
2136   0B39 CD E9 05    CHKKEY	CALL	BEEP
2137   0B3C ED 57       	LD	A,I
2138   0B3E 3C          	INC	A
2139   0B3F 27          	DAA	;INC BCD NO. OF TRIES
2140   0B40             ;
2141   0B40             ; BRIEFLY SHOW GUESS NO.
2142   0B40             ;
2143   0B40 ED 47       	LD	I,A
2144   0B42 CD E2 03    	CALL	DISBYT
2145   0B45 06 FF       	LD	B,255
2146   0B47 CD 1B 04    CHKKY1	CALL	SCAND
2147   0B4A 10 FB       	DJNZ	CHKKY1
2148   0B4C             ;
2149   0B4C             ; SEPARATE GUESS INTO NYBBLES
2150   0B4C             ;
2151   0B4C DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
2152   0B4F CD F4 0B    	CALL	SPLIT	;NUMBER INTO
2153   0B52 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
2154   0B55 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
2155   0B58 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
2156   0B5B CD F4 0B    	CALL	SPLIT	;GUESS EASIER
2157   0B5E DD 75 02    	LD	(IX+2),L
2158   0B61 DD 74 03    	LD	(IX+3),H
2159   0B64             ;
2160   0B64             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
2161   0B64             ;
2162   0B64 AF          	XOR	A
2163   0B65 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
2164   0B68 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
2165   0B6B 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
2166   0B6E 06 04       	LD	B,4	;NUMBER OF DIGITS
2167   0B70 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
2168   0B71 EB          	EX	DE,HL
2169   0B72 BE          	CP	(HL)	;SAME AS GUESS?
2170   0B73 20 10       	JR	NZ,CHKKY4	;NOT SAME
2171   0B75 DD 7E 0A    	LD	A,(IX+10)
2172   0B78 C6 10       	ADD	A,10H	;RIGHT POSITION
2173   0B7A DD 77 0A    	LD	(IX+10),A
2174   0B7D 23          CHKKY3	INC	HL	;POINT TO NEXT
2175   0B7E EB          	EX	DE,HL	;DIGIT POSITION
2176   0B7F 23          	INC	HL	;AND GO
2177   0B80 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
2178   0B82 C3 A1 0B    	JP	CHKKY8
2179   0B85             ;
2180   0B85             ; CHECK IF NUMBER IS THERE
2181   0B85             ;
2182   0B85 C5          CHKKY4	PUSH	BC
2183   0B86 E5          	PUSH	HL
2184   0B87 06 04       	LD	B,4	;CHECK EACH DIGIT
2185   0B89 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
2186   0B8C BE          CHKKY5	CP	(HL)	;NUMBER IS IN
2187   0B8D 23          	INC	HL	;THE WRONG
2188   0B8E 20 0A       	JR	NZ,CHKKY6	;POSITION
2189   0B90 DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
2190   0B93 3C          	INC	A	;THE RESULT
2191   0B94 DD 77 0A    	LD	(IX+10),A
2192   0B97 C3 9C 0B    	JP	CHKKY7
2193   0B9A 10 F0       CHKKY6	DJNZ	CHKKY5
2194   0B9C E1          CHKKY7	POP	HL
2195   0B9D C1          	POP	BC
2196   0B9E C3 7D 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
2197   0BA1             ;
2198   0BA1             ; CHECK IF CORRECT
2199   0BA1             ;
2200   0BA1 DD 7E 0A    CHKKY8	LD	A,(IX+10)
2201   0BA4 FE 40       	CP	40H	;IS IT CORRECT?
2202   0BA6 CA C6 0B    	JP	Z,CHKKY9	;YES!
2203   0BA9 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
2204   0BAC CD E2 03    	CALL	DISBYT	;IN DATA DISPLAYS
2205   0BAF ED 57       	LD	A,I	;WAS THAT THE
2206   0BB1 FE 20       	CP	20H	;LAST GUESS?
2207   0BB3 C0          	RET	NZ	;NO TRY AGAIN
2208   0BB4             ;
2209   0BB4             ; RAN OUT OF TRYS
2210   0BB4             ;
2211   0BB4 CD 4C 04    	CALL	CLRBUF	;DISPLAY
2212   0BB7 DD 6E 0B    	LD	L,(IX+11)
2213   0BBA DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
2214   0BBD CD CD 03    	CALL	DISADD	;AND PLAY
2215   0BC0 21 ED 0B    	LD	HL,LOSE	;THE LOSE
2216   0BC3 C3 D4 0B    	JP	CHKKYA	;MUSIC
2217   0BC6             ;
2218   0BC6             ; GOT THE RIGHT ANSWER
2219   0BC6             ;
2220   0BC6 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2221   0BC8 CD E2 03    	CALL	DISBYT	;AND PLAY THE WIN
2222   0BCB DD 6E 0B    	LD	L,(IX+11)
2223   0BCE DD 66 0C    	LD	H,(IX+12)
2224   0BD1 21 E4 0B    	LD	HL,WIN	;MUSIC
2225   0BD4             ;
2226   0BD4             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2227   0BD4             ;
2228   0BD4 CD 4A 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2229   0BD7 CD AA 04    	CALL	SKEYIN	;WAIT FOR A KEY
2230   0BDA CD E9 05    	CALL	BEEP
2231   0BDD CD B7 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2232   0BE0 E1          	POP	HL	;AND RESTART THE GAME
2233   0BE1 C3 86 0A    	JP	SECRET
2234   0BE4             ;
2235   0BE4             ; WIN AND LOSE MUSIC
2236   0BE4             ; FROM TALKING ELECTRONICS TEC-1
2237   0BE4             ; MONITOR MON-1
2238   0BE4             ; BY JOHN HARDY AND KEN STONE
2239   0BE4             ;
2240   0BE4 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2240   0BE8 17 12 14 10 
2240   0BEC 1F 
2241   0BED 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2241   0BF1 01 11 1F 
2242   0BF4             ;-------------------------------
2243   0BF4             ; SEPARATE BYTE INTO TWO NYBBLES
2244   0BF4             ;-------------------------------
2245   0BF4             ;SEPARATES A BYTE INTO TWO
2246   0BF4             ;RIGHT JUSTIFIED NYBBLES
2247   0BF4             ; ENTRY : A = BYTE TO BE SEPARATED
2248   0BF4             ; EXIT  : H = MSN
2249   0BF4             ;         L = LSN
2250   0BF4             ;
2251   0BF4 F5          SPLIT	PUSH	AF
2252   0BF5 C5          	PUSH	BC
2253   0BF6 47          	LD	B,A	;SAVE BYTE
2254   0BF7 E6 0F       	AND	0FH	;STRIP BITS LSN
2255   0BF9 6F          	LD	L,A	;RETURN LSN IN L
2256   0BFA 78          	LD	A,B
2257   0BFB CB 3F       	SRL	A
2258   0BFD CB 3F       	SRL	A
2259   0BFF CB 3F       	SRL	A	;MOVE MSN
2260   0C01 CB 3F       	SRL	A	;INTO LSN
2261   0C03 67          	LD	H,A	;RETURN MSN IN H
2262   0C04 C1          	POP	BC
2263   0C05 F1          	POP	AF
2264   0C06 C9          	RET
2265   0C07             ;-----------------------------------
2266   0C07             ; FUNCTION D - RELAY BOARD SEQUENCER
2267   0C07             ;-----------------------------------
2268   0C07 CD E9 05    RELSQR	CALL	BEEP
2269   0C0A CD CE 04    	CALL	KEYREL
2270   0C0D 21 16 0C    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2271   0C10 CD 1C 0C    	CALL	RLSTEP
2272   0C13 C3 5A 07    	JP	CANCL1
2273   0C16             ;--------------
2274   0C16             ; TEST SEQUENCE
2275   0C16             ;--------------
2276   0C16 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2276   0C1A 00 FF 
2277   0C1C             ;----------------
2278   0C1C             ; RELAY SEQUENCER
2279   0C1C             ;----------------
2280   0C1C             ; SEQUENCES RELAYS ON RELAY BOARD
2281   0C1C             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2282   0C1C             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2283   0C1C             ; OR REPEAT.
2284   0C1C             ;  TABLE:
2285   0C1C             ;  <BYTE1>,<BYTE2>
2286   0C1C             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2287   0C1C             ;  BYTE2 = FF - REPEAT
2288   0C1C             ;          00 - FINISHED
2289   0C1C             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2290   0C1C             ;  EXIT : NONE MODIFIED
2291   0C1C             ;
2292   0C1C F5          RLSTEP	PUSH	AF
2293   0C1D C5          	PUSH	BC
2294   0C1E D5          	PUSH	DE
2295   0C1F E5          	PUSH	HL	;SAVE REGISTERS
2296   0C20 E5          	PUSH	HL
2297   0C21 EB          	EX	DE,HL	;GET ADDRESS OF DATA
2298   0C22 1A          RELSR1	LD	A,(DE)
2299   0C23 4F          	LD	C,A	;GET OUTPUT DATA
2300   0C24 13          	INC	DE
2301   0C25 1A          	LD	A,(DE)	;GET TIME DELAY
2302   0C26 FE 00       	CP	0
2303   0C28 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2304   0C2A FE FF       	CP	255
2305   0C2C 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2306   0C2E 47          	LD	B,A
2307   0C2F 79          	LD	A,C
2308   0C30~            #IFDEF TEC-1F
2309   0C30~            	OUT	(PORT3),A	;STROBE
2310   0C30             #ELSE
2311   0C30 D3 81       	OUT	(IO1),A
2312   0C32             #ENDIF
2313   0C32 13          	INC	DE
2314   0C33 CD 4A 0C    RELSR2	CALL	DELONE	;1 SEC DELAY
2315   0C36 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2316   0C38 C3 22 0C    	JP	RELSR1
2317   0C3B             ;
2318   0C3B             ; REPEAT
2319   0C3B             ;
2320   0C3B D1          RELSR3	POP	DE	;GET START ADDRESS
2321   0C3C D5          	PUSH	DE	;SAVE FOR LATER
2322   0C3D C3 22 0C    	JP	RELSR1
2323   0C40             ;
2324   0C40             ; FINISHED
2325   0C40             ;
2326   0C40 3E 00       RELSR4	LD	A,00H
2327   0C42~            #IFDEF TEC-1F
2328   0C42~            	OUT	(PORT3),A	;STROBE
2329   0C42             #ELSE
2330   0C42 D3 81       	OUT	(IO1),A	;CLEAR OUTPUT REG
2331   0C44             #ENDIF
2332   0C44 E1          	POP	HL
2333   0C45 E1          	POP	HL
2334   0C46 D1          	POP	DE
2335   0C47 C1          	POP	BC
2336   0C48 F1          	POP	AF
2337   0C49 C9          	RET
2338   0C4A             ;-----------------
2339   0C4A             ; ONE SECOND DELAY
2340   0C4A             ;-----------------
2341   0C4A             ;
2342   0C4A             ; ENTRY : NONE
2343   0C4A             ; EXIT : FLAG REGISTER MODIFIED
2344   0C4A             ;
2345   0C4A C5          DELONE	PUSH	BC
2346   0C4B D5          	PUSH	DE
2347   0C4C E5          	PUSH	HL
2348   0C4D 11 01 00    	LD	DE,0001H
2349   0C50 21 70 08    	LD	HL,0870H
2350   0C53 06 92       DELON1	LD	B,92H
2351   0C55 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2352   0C57 ED 52       	SBC	HL,DE
2353   0C59 D2 53 0C    	JP	NC,DELON1	;OUTER LOOP
2354   0C5C E1          	POP	HL
2355   0C5D D1          	POP	DE
2356   0C5E C1          	POP	BC
2357   0C5F C9          	RET
2358   0C60             ;--------------------------
2359   0C60             ; FUNCTION E - KALEIDOSCOPE
2360   0C60             ;--------------------------
2361   0C60 CD E9 05    SCOPE	CALL	BEEP
2362   0C63 CD CE 04    	CALL	KEYREL
2363   0C66 CD 1B 05    	CALL	RAND	;GENERATE RANDOM
2364   0C69 EB          	EX	DE,HL
2365   0C6A 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2366   0C6D 7B          	LD	A,E	;THE FIRST QUADRANT
2367   0C6E CD DF 0C    	CALL	SEED	;WITH A RANDOM BIT
2368   0C71 7A          	LD	A,D	;PATTERN
2369   0C72 CD DF 0C    	CALL	SEED
2370   0C75             ;
2371   0C75             ; GENERATE MIRROR IMAGES
2372   0C75             ;
2373   0C75 06 04       SCOPE2	LD	B,04H
2374   0C77 21 00 3E    	LD	HL,BUFFER
2375   0C7A 11 07 3E    	LD	DE,BUFFER+7
2376   0C7D 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2377   0C7E 12          	LD	(DE),A	;QUADRANT INTO
2378   0C7F 23          	INC	HL	;THE FOURTH
2379   0C80 1B          	DEC	DE	;QUADRANT
2380   0C81 10 FA       	DJNZ	SCOPE3
2381   0C83             ;
2382   0C83             ; MIRROR ACROSS CENTRE OF DISPLAY
2383   0C83             ;
2384   0C83 06 08       	LD	B,8	;MIRROR THE FIRST
2385   0C85 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2386   0C88 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2387   0C89 E6 0F       	AND	0FH	;OF THE DISPLAY
2388   0C8B 77          	LD	(HL),A	;INTO THE SECOND
2389   0C8C CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2390   0C8E CA 93 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2391   0C91 CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2392   0C93 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2393   0C95 CA 9A 0C    	JP	Z,SCOPE6	;CORRESPONDING
2394   0C98 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2395   0C9A CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2396   0C9C CA A1 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2397   0C9F CB EE       	SET	5,(HL)	;DO THIS FOR
2398   0CA1 CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2399   0CA3 CA A8 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2400   0CA6 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2401   0CA8 23          SCOPE8	INC	HL
2402   0CA9 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2403   0CAB             ;
2404   0CAB             ; DISPLAY RANDOM BIT PATTERN
2405   0CAB             ;
2406   0CAB 11 01 00    	LD	DE,0001H	;SET UP DELAY
2407   0CAE 21 00 02    	LD	HL,0200H
2408   0CB1 E5          SCOPE9	PUSH	HL
2409   0CB2 21 00 3E    	LD	HL,BUFFER
2410   0CB5 CD EE 0C    	CALL	SKATE	;SCAN 8X8
2411   0CB8 E1          	POP	HL
2412   0CB9 ED 52       	SBC	HL,DE
2413   0CBB C2 B1 0C    	JP	NZ,SCOPE9
2414   0CBE             ;
2415   0CBE             ; MANIPULATE BITS FOR NEXT IMAGE
2416   0CBE             ;
2417   0CBE 21 00 3E    SCOPEA	LD	HL,BUFFER
2418   0CC1 3E 05       	LD	A,5
2419   0CC3 86          	ADD	A,(HL)
2420   0CC4 E6 0F       	AND	0FH
2421   0CC6 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2422   0CC7 23          	INC	HL
2423   0CC8 3E 03       	LD	A,03H
2424   0CCA 86          	ADD	A,(HL)
2425   0CCB E6 0F       	AND	0FH
2426   0CCD 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2427   0CCE 23          	INC	HL
2428   0CCF 3E 01       	LD	A,01H
2429   0CD1 86          	ADD	A,(HL)
2430   0CD2 E6 0F       	AND	0FH
2431   0CD4 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2432   0CD5 23          	INC	HL
2433   0CD6 3E 07       	LD	A,07H
2434   0CD8 86          	ADD	A,(HL)
2435   0CD9 E6 0F       	AND	0FH
2436   0CDB 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2437   0CDC C3 75 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2438   0CDF             ;
2439   0CDF             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2440   0CDF             ;
2441   0CDF 47          SEED	LD	B,A	;PUT THE
2442   0CE0 E6 0F       	AND	0FH	;RANDOM NUMBER
2443   0CE2 77          	LD	(HL),A	;INTO THE
2444   0CE3 23          	INC	HL	;FIRST QUADRANT
2445   0CE4 78          	LD	A,B	;OF THE
2446   0CE5 E6 F0       	AND	240	;DISPLAY
2447   0CE7 1F          	RRA
2448   0CE8 1F          	RRA
2449   0CE9 1F          	RRA
2450   0CEA 1F          	RRA
2451   0CEB 77          	LD	(HL),A
2452   0CEC 23          	INC	HL
2453   0CED C9          	RET
2454   0CEE             ;-----------------
2455   0CEE             ; SCAN 8X8 DISPLAY
2456   0CEE             ;-----------------
2457   0CEE             ;PUT THE 8 RAM LOCATIONS POINTED TO
2458   0CEE             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2459   0CEE             ;ON TOP ROW.
2460   0CEE             ;  ROUTINE PERIOD IS 500uS
2461   0CEE             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2462   0CEE             ;
2463   0CEE             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2464   0CEE             ;	EXIT : NO REGISTERS MODIFIED
2465   0CEE             ;
2466   0CEE F5          SKATE	PUSH	AF
2467   0CEF C5          	PUSH	BC
2468   0CF0 E5          	PUSH	HL	;SAVE REGISTERS
2469   0CF1 0E 80       	LD	C,80H
2470   0CF3 7E          SKATE1	LD	A,(HL)
2471   0CF4~            #IFDEF TEC-1F
2472   0CF4~            	OUT	(PORT3),A	;OUTPUT X
2473   0CF4             #ELSE
2474   0CF4 D3 80       	OUT	(IO0),A	;OUTPUT X
2475   0CF6             #ENDIF
2476   0CF6 79          	LD	A,C
2477   0CF7~            #IFDEF TEC-1F
2478   0CF7~            	OUT	(PORT4),A	;OUTPUT Y
2479   0CF7             #ELSE
2480   0CF7 D3 82       	OUT	(IO2),A	;OUTPUT Y
2481   0CF9             #ENDIF
2482   0CF9 06 02       	LD	B,02H
2483   0CFB 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2484   0CFD AF          	XOR	A
2485   0CFE~            #IFDEF TEC-1F
2486   0CFE~            	OUT	(PORT3),A
2487   0CFE~            	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2488   0CFE             #ELSE
2489   0CFE D3 80       	OUT	(IO0),A
2490   0D00 D3 82       	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2491   0D02             #ENDIF
2492   0D02 06 08       	LD	B,08H
2493   0D04 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2494   0D06 23          	INC	HL
2495   0D07 CB 09       	RRC	C
2496   0D09 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2497   0D0B E1          	POP	HL
2498   0D0C C1          	POP	BC
2499   0D0D F1          	POP	AF
2500   0D0E C9          	RET
2501   0D0F             ;----------------------------
2502   0D0F             ; FUNCTION F - CLOCK CALENDAR
2503   0D0F             ;----------------------------
2504   0D0F CD E9 05    TIME	CALL	BEEP
2505   0D12 CD CE 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2506   0D15 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2507   0D19 3A 37 3F    	LD	A,(ONTIM)
2508   0D1C DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2509   0D1F 3E 60       	LD	A,60H
2510   0D21 32 37 3F    	LD	(ONTIM),A	;USE NEW DELAY
2511   0D24 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2512   0D27             ;
2513   0D27             ; DISPLAY TIME,CHECK FOR KEY
2514   0D27             ;
2515   0D27 CD 7D 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2516   0D2A CD 67 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2517   0D2D CD 1B 04    	CALL	SCAND
2518   0D30 CD 5B 04    	CALL	SCANKEY
2519   0D33 CB 6F       	BIT	5,A
2520   0D35 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2521   0D37 E6 1F       	AND	1FH
2522   0D39 21 41 0D    	LD	HL,TIMKEY
2523   0D3C CD D8 04    	CALL	MENU
2524   0D3F 18 E6       	JR	TIME1
2525   0D41             
2526   0D41 04          TIMKEY	.DB	4
2527   0D42 10 11 12 13 	.DB	10H,11H,12H,13H
2528   0D46 4E 0D DF 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2528   0D4A 58 0D 58 0D 
2529   0D4E             ;--------------------
2530   0D4E             ; EXIT CLOCK CALENDAR
2531   0D4E             ;--------------------
2532   0D4E E1          CLKEXT	POP	HL	;REMOVE RETURN
2533   0D4F DD 7E 00    	LD	A,(IX+0)
2534   0D52 32 37 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2535   0D55 C3 57 07    	JP	CANCEL
2536   0D58             ;--------------------
2537   0D58             ; TOGGLE DISPLAY MODE
2538   0D58             ;--------------------
2539   0D58 CD E9 05    CALKEY	CALL	BEEP
2540   0D5B CD CE 04    	CALL	KEYREL
2541   0D5E DD 7E 01    	LD	A,(IX+1)
2542   0D61 EE 80       	XOR	80H	;TOGGLE DISPLAY
2543   0D63 DD 77 01    	LD	(IX+1),A
2544   0D66 C9          	RET
2545   0D67             ;----------------------
2546   0D67             ; UPDATE DISPLAY BUFFER
2547   0D67             ;----------------------
2548   0D67 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2549   0D6B 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2550   0D6D             ;
2551   0D6D             ; TIME DISPLAY
2552   0D6D             ;
2553   0D6D 3A 1A 3F    UPDBF1	LD	A,(SWREG1)
2554   0D70 CD EB 03    	CALL	CONBYT
2555   0D73~            #IFDEF	TEC-1F
2556   0D73~            	SET	4,L
2557   0D73             #ELSE
2558   0D73 CB FD       	SET	7,L	;SET DECIMAL POINT
2559   0D75             #ENDIF
2560   0D75 22 31 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2561   0D78 3A 1B 3F    	LD	A,(SWREG2)
2562   0D7B CD EB 03    	CALL	CONBYT
2563   0D7E~            #IFDEF	TEC-1F
2564   0D7E~            	SET	4,L
2565   0D7E             #ELSE
2566   0D7E CB FD       	SET	7,L	;SET DECIMAL POINT
2567   0D80             #ENDIF	
2568   0D80 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2569   0D83 3A 1C 3F    	LD	A,(SWREG3)
2570   0D86 CD EB 03    	CALL	CONBYT
2571   0D89~            #IFDEF	TEC-1F
2572   0D89~            	SET	4,L
2573   0D89             #ELSE
2574   0D89 CB FD       	SET	7,L	;SET DECIMAL POINT
2575   0D8B             #ENDIF
2576   0D8B 22 35 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2577   0D8E C9          	RET
2578   0D8F             ;
2579   0D8F             ; CALENDAR DISPLAY
2580   0D8F             ;
2581   0D8F 3A 20 3F    UPDBF2	LD	A,(SWREG7)
2582   0D92 CD EB 03    	CALL	CONBYT
2583   0D95 22 31 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2584   0D98             ;
2585   0D98             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2586   0D98             ;
2587   0D98 21 17 3F    	LD	HL,CALMDE
2588   0D9B CB 7E       	BIT	7,(HL)
2589   0D9D 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2590   0D9F             ;
2591   0D9F             ; DD/MM/YY MODE
2592   0D9F             ;
2593   0D9F 3A 1F 3F    	LD	A,(SWREG6)
2594   0DA2 CD EB 03    	CALL	CONBYT
2595   0DA5 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2596   0DA8 3A 1E 3F    	LD	A,(SWREG5)
2597   0DAB CD EB 03    	CALL	CONBYT
2598   0DAE 22 35 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2599   0DB1 18 12       	JR	UPDBF4
2600   0DB3             ;
2601   0DB3             ; MM/DD/YY MODE
2602   0DB3             ;
2603   0DB3 3A 1F 3F    UPDBF3	LD	A,(SWREG6)
2604   0DB6 CD EB 03    	CALL	CONBYT
2605   0DB9 22 35 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2606   0DBC 3A 1E 3F    	LD	A,(SWREG5)
2607   0DBF CD EB 03    	CALL	CONBYT
2608   0DC2 22 33 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2609   0DC5             ;
2610   0DC5             ; SHOW DAY
2611   0DC5             ;
2612   0DC5 3A 1D 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2613   0DC8 E6 07       	AND	07H
2614   0DCA 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2615   0DCC FE 07       	CP	07H
2616   0DCE 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2617   0DD0 2F          	CPL	;WORK OUT
2618   0DD1 D6 01       	SUB	01H	;WHICH DECIMAL POINT
2619   0DD3 E6 07       	AND	07H	;TO LIGHT
2620   0DD5 21 31 3F    	LD	HL,DISBUF	;ADDING THE DAY
2621   0DD8 06 00       	LD	B,00H	;TO A DISPLAY
2622   0DDA 4F          	LD	C,A	;BUFFER INDEX
2623   0DDB 09          	ADD	HL,BC	;AND SETTING THE
2624   0DDC~            #IFDEF	TEC-1F
2625   0DDC~            	SET	4,(HL)
2626   0DDC             #ELSE
2627   0DDC CB FE       	SET	7,(HL)	;DECIMAL POINT
2628   0DDE             #ENDIF	
2629   0DDE C9          UPDBF5	RET	;IN THAT DISPLAY
2630   0DDF             ;--------------
2631   0DDF             ; SET TIME/DATE
2632   0DDF             ;--------------
2633   0DDF CD E9 05    SETCLK	CALL	BEEP
2634   0DE2 CD CE 04    	CALL	KEYREL
2635   0DE5             ;
2636   0DE5             ; EDIT THE DISPLAY BUFFER
2637   0DE5             ;
2638   0DE5 CD 67 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2639   0DE8 CD AA 04    	CALL	SKEYIN
2640   0DEB CD CE 04    	CALL	KEYREL
2641   0DEE FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2642   0DF0 C8          	RET	Z
2643   0DF1 FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2644   0DF3 28 6E       	JR	Z,SETCK8
2645   0DF5 FE 12       	CP	12H
2646   0DF7 28 3D       	JR	Z,SETCK4	;PLUS KEY
2647   0DF9 FE 13       	CP	13H
2648   0DFB 28 4F       	JR	Z,SETCK6	;MINUS KEY
2649   0DFD FE 0A       	CP	0AH	;NO A-F KEYS
2650   0DFF 30 E4       	JR	NC,SETCK1
2651   0E01             ;
2652   0E01             ; IS IT SET CLOCK OR SET CALENDAR?
2653   0E01             ;
2654   0E01 DD CB 01 7E 	BIT	7,(IX+1)
2655   0E05 20 0D       	JR	NZ,SETCK2
2656   0E07             ;
2657   0E07             ; SET CLOCK DISPLAY
2658   0E07             ;
2659   0E07 21 1A 3F    	LD	HL,SWREG1
2660   0E0A ED 6F       	RLD	;MOVE THE NEW KEY
2661   0E0C 23          	INC	HL	;INTO THE CLOCK BUFFER
2662   0E0D ED 6F       	RLD
2663   0E0F 23          	INC	HL
2664   0E10 ED 6F       	RLD
2665   0E12 18 D1       	JR	SETCK1
2666   0E14             ;
2667   0E14             ; SET CALENDAR DISPLAY
2668   0E14             ;
2669   0E14 21 17 3F    SETCK2	LD	HL,CALMDE
2670   0E17 CB 7E       	BIT	7,(HL)
2671   0E19 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2672   0E1B             ;
2673   0E1B             ; SET CALENDAR AS DD/MM/YY
2674   0E1B             ;
2675   0E1B 21 20 3F    	LD	HL,SWREG7
2676   0E1E ED 6F       	RLD	;MOVE THE NEW KEY
2677   0E20 2B          	DEC	HL	;INTO THE CAL BUFFER
2678   0E21 ED 6F       	RLD
2679   0E23 2B          	DEC	HL
2680   0E24 ED 6F       	RLD
2681   0E26 18 BD       	JR	SETCK1
2682   0E28             ;
2683   0E28             ; SET CALENDAR AS MM/DD/YY
2684   0E28             ;
2685   0E28 21 20 3F    SETCK3	LD	HL,SWREG7
2686   0E2B ED 6F       	RLD	;MOVE THE NEW KEY
2687   0E2D 2B          	DEC	HL	;INTO THE CAL BUFFER
2688   0E2E 2B          	DEC	HL
2689   0E2F ED 6F       	RLD
2690   0E31 23          	INC	HL
2691   0E32 ED 6F       	RLD
2692   0E34 18 AF       	JR	SETCK1
2693   0E36             ;
2694   0E36             ; INC DAY
2695   0E36             ;
2696   0E36 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2697   0E3A 28 A9       	JR	Z,SETCK1
2698   0E3C 3A 1D 3F    	LD	A,(SWREG4)
2699   0E3F FE 07       	CP	07H	;IS THE DAY SUNDAY?
2700   0E41 20 02       	JR	NZ,SETCK5
2701   0E43 3E 00       	LD	A,00H	;SET MONDAY
2702   0E45 3C          SETCK5	INC	A	;DAY=DAY+1
2703   0E46 32 1D 3F    	LD	(SWREG4),A
2704   0E49 C3 E5 0D    	JP	SETCK1
2705   0E4C             ;
2706   0E4C             ; DEC DAY
2707   0E4C             ;
2708   0E4C DD CB 01 7E SETCK6	BIT	7,(IX+1)
2709   0E50 CA E5 0D    	JP	Z,SETCK1
2710   0E53 3A 1D 3F    	LD	A,(SWREG4)
2711   0E56 FE 01       	CP	01H	;IS THE DAY MONDAY?
2712   0E58 20 02       	JR	NZ,SETCK7
2713   0E5A 3E 08       	LD	A,08H	;SET SUNDAY
2714   0E5C 3D          SETCK7	DEC	A	;DAY=DAY-1
2715   0E5D 32 1D 3F    	LD	(SWREG4),A
2716   0E60 C3 E5 0D    	JP	SETCK1
2717   0E63             ;
2718   0E63             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2719   0E63             ;
2720   0E63 CD E9 05    SETCK8	CALL	BEEP
2721   0E66 CD CE 04    	CALL	KEYREL
2722   0E69 3A 1C 3F    	LD	A,(SWREG3)
2723   0E6C E6 3F       	AND	3FH	;24 HOUR MODE
2724   0E6E 32 1C 3F    	LD	(SWREG3),A
2725   0E71 3A 1D 3F    	LD	A,(SWREG4)
2726   0E74 E6 07       	AND	07H	;OSC ON,RST ENABLED
2727   0E76 32 1D 3F    	LD	(SWREG4),A
2728   0E79 CD 07 0F    	CALL	WWATCH	;WRITE CHANGES
2729   0E7C C9          	RET
2730   0E7D             ;---------------------
2731   0E7D             ; READ FROM SMARTWATCH
2732   0E7D             ;---------------------
2733   0E7D             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2734   0E7D             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2735   0E7D             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2736   0E7D             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2737   0E7D             ;
2738   0E7D             ;  ENTRY : NONE
2739   0E7D             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2740   0E7D             ;          (ALTERNATE SET MODIFIED)
2741   0E7D             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2742   0E7D             ;
2743   0E7D             ;
2744   0E7D             ; ENABLE SMARTWATCH
2745   0E7D             ;
2746   0E7D F5          RWATCH	PUSH	AF
2747   0E7E C5          	PUSH	BC
2748   0E7F D5          	PUSH	DE
2749   0E80 E5          	PUSH	HL
2750   0E81 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2751   0E84 21 C7 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2752   0E87 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2753   0E89 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2754   0E8A 32 60 3F    	LD	(DALLAS),A
2755   0E8D 23          	INC	HL
2756   0E8E 10 F9       	DJNZ	RWACH1
2757   0E90             ;
2758   0E90             ; READ DATA FROM WATCH
2759   0E90             ;
2760   0E90 06 20       	LD	B,32
2761   0E92 3A 60 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2762   0E95 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2763   0E97 CB 1A       	RR	D	;DE AND HL
2764   0E99 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2765   0E9B CB 1C       	RR	H	;THE ALTERNATE PAIR
2766   0E9D CB 1D       	RR	L
2767   0E9F 10 F1       	DJNZ	RWACH2
2768   0EA1 D9          	EXX
2769   0EA2 06 20       	LD	B,32
2770   0EA4 3A 60 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2771   0EA7 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2772   0EA9 CB 1A       	RR	D
2773   0EAB CB 1B       	RR	E
2774   0EAD CB 1C       	RR	H
2775   0EAF CB 1D       	RR	L
2776   0EB1 10 F1       	DJNZ	RWACH3
2777   0EB3             ;
2778   0EB3             ; SAVE IN WATCH REGISTERS
2779   0EB3             ;
2780   0EB3 22 1D 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2781   0EB6 ED 53 1F 3F 	LD	(SWREG6),DE	;GET THE DATA
2782   0EBA D9          	EXX
2783   0EBB 22 19 3F    	LD	(SWREG0),HL
2784   0EBE ED 53 1B 3F 	LD	(SWREG2),DE
2785   0EC2 E1          	POP	HL
2786   0EC3 D1          	POP	DE
2787   0EC4 C1          	POP	BC
2788   0EC5 F1          	POP	AF
2789   0EC6 C9          	RET
2790   0EC7             ;
2791   0EC7             ; SMARTWATCH ACCESS PATTERN
2792   0EC7             ;
2793   0EC7 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2793   0ECB 5C 2E 17 8B 
2794   0ECF 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2794   0ED3 A3 D1 E8 74 
2795   0ED7 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2795   0EDB 3A 1D 8E 47 
2796   0EDF 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2796   0EE3 C5 E2 71 B8 
2797   0EE7 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2797   0EEB 5C 2E 17 8B 
2798   0EEF 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2798   0EF3 A3 D1 E8 74 
2799   0EF7 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2799   0EFB 3A 1D 8E 47 
2800   0EFF 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2800   0F03 C5 E2 71 B8 
2801   0F07             ;--------------------
2802   0F07             ; WRITE TO SMARTWATCH
2803   0F07             ;--------------------
2804   0F07             ;
2805   0F07             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2806   0F07             ; IT USING BIT MANIPULATION.
2807   0F07             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2808   0F07             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2809   0F07             ; SMARTWATCH IS ENABLED.
2810   0F07             ;
2811   0F07             ; ENTRY : NONE
2812   0F07             ; THE DATA TO WRITE TO THE SMARTWATCH
2813   0F07             ; MUST BE IN SWREG0 - SWREG7
2814   0F07             ;  EXIT : NO WORKING REGISTERS MODIFIED
2815   0F07             ;  (ALTERNATE SET MODIFIED)
2816   0F07             ; GET DATA TO WRITE TO WATCH
2817   0F07             ;
2818   0F07 F5          WWATCH	PUSH	AF
2819   0F08 C5          	PUSH	BC
2820   0F09 D5          	PUSH	DE
2821   0F0A E5          	PUSH	HL
2822   0F0B 2A 1D 3F    	LD	HL,(SWREG4)	;SET UP THE
2823   0F0E ED 5B 1F 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2824   0F12 D9          	EXX
2825   0F13 2A 19 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2826   0F16 ED 5B 1B 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2827   0F1A             ;
2828   0F1A             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2829   0F1A             ;
2830   0F1A 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2831   0F1D 3E C5       	LD	A,0C5H
2832   0F1F 0E 80       	LD	C,80H	;NUMBER OF BYTES
2833   0F21 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2834   0F23 32 60 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2835   0F26 CB 0F       	RRC	A
2836   0F28 CB 38       	SRL	B
2837   0F2A 30 F7       	JR	NC,WWACH2	;MORE BITS
2838   0F2C CB 39       	SRL	C
2839   0F2E 38 11       	JR	C,WWACH4	;NO MORE BYTES
2840   0F30 CB 47       	BIT	0,A
2841   0F32 20 0A       	JR	NZ,WWACH3
2842   0F34 CB 0F       	RRC	A
2843   0F36 CB 0F       	RRC	A
2844   0F38 CB 0F       	RRC	A
2845   0F3A CB 0F       	RRC	A
2846   0F3C 18 E3       	JR	WWACH1
2847   0F3E 2F          WWACH3	CPL
2848   0F3F 18 E0       	JR	WWACH1
2849   0F41             ;
2850   0F41             ; WRITE DATA TO WATCH
2851   0F41             ;
2852   0F41 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2853   0F43 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2854   0F45 CB 1B       	RR	E	;ONTO D0 AND INTO
2855   0F47 CB 1C       	RR	H	;THE SMARTWATCH
2856   0F49 CB 1D       	RR	L
2857   0F4B 17          	RLA
2858   0F4C 32 60 3F    	LD	(DALLAS),A
2859   0F4F 10 F2       	DJNZ	WWACH5
2860   0F51 D9          	EXX	;RESTORE REGISTERS
2861   0F52 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2862   0F54 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2863   0F56 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2864   0F58 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2865   0F5A CB 1D       	RR	L
2866   0F5C 17          	RLA
2867   0F5D 32 60 3F    	LD	(DALLAS),A
2868   0F60 10 F2       	DJNZ	WWACH6
2869   0F62 E1          	POP	HL
2870   0F63 D1          	POP	DE
2871   0F64 C1          	POP	BC
2872   0F65 F1          	POP	AF
2873   0F66 C9          	RET
2874   0F67             ;-----------------
2875   0F67             ; ONE SECOND DELAY
2876   0F67             ;-----------------
2877   0F67             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2878   0F67             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2879   0F67             ;
2880   0F67             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2881   0F67             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2882   0F67             ; READS THE SAME AS THE REFERENCE VALUE,
2883   0F67             ; THEN THE ROUTINE RETURNS
2884   0F67             ;
2885   0F67             ; ENTRY : NONE
2886   0F67             ; EXIT : NONE MODIFIED
2887   0F67             ;
2888   0F67 F5          ONESEC	PUSH	AF
2889   0F68 C5          	PUSH	BC
2890   0F69 CD 7D 0E    	CALL	RWATCH	;READ WATCH
2891   0F6C 3A 1A 3F    	LD	A,(SWREG1)
2892   0F6F 47          	LD	B,A	;SAVE REF COUNT
2893   0F70 CD 7D 0E    ONESC1	CALL	RWATCH
2894   0F73 3A 1A 3F    	LD	A,(SWREG1)
2895   0F76 B8          	CP	B	;SAME AS REF?
2896   0F77 CA 70 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2897   0F7A C1          	POP	BC
2898   0F7B F1          	POP	AF
2899   0F7C C9          	RET
2900   0F7D             ;---------------------
2901   0F7D             ; SCBUG SERIAL MONITOR
2902   0F7D             ;---------------------
2903   0F7D             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2904   0F7D             ; COMMS PARAMETERS ARE 4800,n,8,2
2905   0F7D             ;
2906   0F7D             ;------------
2907   0F7D             ; ASCII CODES
2908   0F7D             ;------------
2909   0F7D             ESC	.EQU	1BH
2910   0F7D             CR	.EQU	0DH
2911   0F7D             LF	.EQU	0AH
2912   0F7D             ;
2913   0F7D 21 1B 00    SCBUG	LD	HL,B4800	;INITIALISE THE BAUD RATE
2914   0F80 CD 43 08    	CALL SERINI	;SET UP TX OUTPUT PIN
2915   0F83             ;
2916   0F83             ; START UP THE MONITOR
2917   0F83             ;
2918   0F83 ED 73 10 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2919   0F87 21 78 13    	LD	HL,SSSTEP
2920   0F8A 22 5B 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2921   0F8D CD 39 14    	CALL	PRNTSZ
2922   0F90 1B 5B 48 1B 	.DB	27,"[H",27,"[2J",0	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2922   0F94 5B 32 4A 00 
2923   0F98 CD A3 03    	CALL	PCBTYP
2924   0F9B CD 64 13    	CALL	SNDMSG	;BOARD TYPE
2925   0F9E CD 39 14    	CALL	PRNTSZ
2926   0FA1 20 53 6F 75 	.DB	" Southern Cross Serial Monitor ",0
2926   0FA5 74 68 65 72 
2926   0FA9 6E 20 43 72 
2926   0FAD 6F 73 73 20 
2926   0FB1 53 65 72 69 
2926   0FB5 61 6C 20 4D 
2926   0FB9 6F 6E 69 74 
2926   0FBD 6F 72 20 00 
2927   0FC1 CD AA 03    	CALL	VERS
2928   0FC4 CD 64 13    	CALL	SNDMSG	;MONITOR VERSION
2929   0FC7 CD 6C 10    	CALL	TXCRLF
2930   0FCA CD B1 03    	CALL	KBDTYP
2931   0FCD CD 64 13    	CALL	SNDMSG	;KEYBOARD TYPE
2932   0FD0 CD 39 14    	CALL	PRNTSZ
2933   0FD3 20 4B 65 79 	.DB	" Keyboard",0
2933   0FD7 62 6F 61 72 
2933   0FDB 64 00 
2934   0FDD CD 39 14    	CALL	PRNTSZ
2935   0FE0 0D 0A 48 20 	.DB	CR,LF,"H for command list",CR,LF,0
2935   0FE4 66 6F 72 20 
2935   0FE8 63 6F 6D 6D 
2935   0FEC 61 6E 64 20 
2935   0FF0 6C 69 73 74 
2935   0FF4 0D 0A 00 
2936   0FF7             ;
2937   0FF7             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2938   0FF7             ;
2939   0FF7 3E 3E       START2	LD	A,'>'
2940   0FF9 CD 5D 08    	CALL	TXDATA	;DISPLAY THE PROMPT
2941   0FFC CD 88 08    START3	CALL	RXDATA	;GET A CHARACTER FROM THE CONSOLE
2942   0FFF 4F          	LD	C,A	;SAVE FOR LATER
2943   1000 E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2944   1002             ;
2945   1002             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2946   1002             ;
2947   1002 21 21 10    	LD	HL,MONMENU
2948   1005 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2949   1006 23          	INC	HL
2950   1007 BE          START4	CP	(HL)	;IN THE LIST?
2951   1008 28 05       	JR	Z,START5	;OK DO IT
2952   100A 23          	INC	HL
2953   100B 10 FA       	DJNZ	START4	;KEEP LOOKING
2954   100D 18 ED       	JR	START3
2955   100F 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2956   1010 CD 5D 08    	CALL	TXDATA	;TO ECHO IT
2957   1013 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2958   1015 21 21 10    	LD	HL,MONMENU	;USE THE MENU HANDLER
2959   1018 CD D8 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2960   101B             ;
2961   101B             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2962   101B             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2963   101B             ;
2964   101B CD 6C 10    WARM	CALL	TXCRLF	;START ON A NEW LINE
2965   101E C3 F7 0F    	JP	START2
2966   1021             ;
2967   1021             ; SCBUG MONITOR COMMANDS
2968   1021             ;
2969   1021 07          MONMENU	.DB 7
2970   1022 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2970   1026 47 49 58 
2971   1029 A4 12 98 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2971   102D 94 11 B1 11 
2972   1031 76 10 04 12 	.DW	GOJUMP,INTHEX,EXIT
2972   1035 55 12 
2973   1037             ;-----------------------------
2974   1037             ; GET A BYTE FROM THE TERMINAL
2975   1037             ;-----------------------------
2976   1037 CD 88 08    GETCHR	CALL	RXDATA
2977   103A FE 1B       	CP	ESC
2978   103C 28 27       	JR	Z,GETOUT
2979   103E 47          	LD	B,A	;SAVE TO ECHO
2980   103F CD 78 12    	CALL	ASC2HEX
2981   1042 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2982   1044 21 14 3F    	LD	HL,DATA
2983   1047 77          	LD	(HL),A
2984   1048 78          	LD	A,B
2985   1049 CD 5D 08    	CALL	TXDATA	;ECHO VALID HEX
2986   104C             ;	
2987   104C CD 88 08    GETNYB	CALL	RXDATA
2988   104F FE 1B       	CP	ESC
2989   1051 28 12       	JR	Z,GETOUT
2990   1053 47          	LD	B,A	;SAVE TO ECHO
2991   1054 CD 78 12    	CALL	ASC2HEX
2992   1057 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2993   1059 ED 6F       	RLD
2994   105B 78          	LD	A,B
2995   105C CD 5D 08    	CALL	TXDATA	;ECHO VALID HEX
2996   105F 7E          	LD	A,(HL)
2997   1060 CD 65 10    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2998   1063 3F          	CCF	;AND THEN COMPLEMENTING IT
2999   1064 C9          	RET
3000   1065 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
3001   1066 C9          	RET
3002   1067             ;---------------
3003   1067             ; OUTPUT A SPACE
3004   1067             ;---------------
3005   1067 3E 20       OUTSP	LD	A,' '
3006   1069 C3 5D 08    	    JP	TXDATA
3007   106C             ;-------------
3008   106C             ; OUTPUT CRLF
3009   106C             ;------------
3010   106C 3E 0D       TXCRLF	LD	A,CR
3011   106E CD 5D 08    	CALL	TXDATA
3012   1071 3E 0A       	LD	A,LF
3013   1073 C3 5D 08    	JP	TXDATA
3014   1076             ;------------------------------
3015   1076             ; GO <ADDR>
3016   1076             ; TRANSFERS EXECUTION TO <ADDR>
3017   1076             ;------------------------------
3018   1076 CD 67 10    GOJUMP	CALL	OUTSP
3019   1079 CD 37 10    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
3020   107C D8          	RET	C
3021   107D 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3022   1080 CD 37 10    	CALL	GETCHR	;GET ADDRESS LOW BYTE
3023   1083 D8          	RET	C
3024   1084 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3025   1087             ;
3026   1087             ; WAIT FOR A CR OR ESC
3027   1087             ;
3028   1087 CD 88 08    GOJMP1	CALL	RXDATA
3029   108A FE 1B       	CP	ESC	;ESC KEY?
3030   108C C8          	RET	Z
3031   108D FE 0D       	CP	CR
3032   108F 20 F6       	JR	NZ,GOJMP1
3033   1091 CD 6C 10    	CALL	TXCRLF
3034   1094 2A 12 3F    	LD	HL,(ADDR)
3035   1097 E9          	JP	(HL)	;JUMP TO USER ADDRESS
3036   1098             ;---------------------
3037   1098             ; DISPLAY COMMAND HELP
3038   1098             ;---------------------
3039   1098 CD 39 14    HELP	CALL	PRNTSZ
3040   109B 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
3040   109F 41 41 41 41 
3040   10A3 20 20 20 20 
3040   10A7 44 69 73 70 
3040   10AB 6C 61 79 20 
3040   10AF 44 61 74 61 
3040   10B3 20 61 74 20 
3040   10B7 41 64 64 72 
3040   10BB 65 73 73 20 
3040   10BF 41 41 41 41 
3041   10C3 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
3041   10C7 20 20 20 20 
3041   10CB 20 20 20 20 
3041   10CF 53 50 41 43 
3041   10D3 45 20 74 6F 
3041   10D7 20 43 4F 4E 
3041   10DB 54 49 4E 55 
3041   10DF 45 2C 20 45 
3041   10E3 53 43 20 74 
3041   10E7 6F 20 51 55 
3041   10EB 49 54 
3042   10ED 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
3042   10F1 20 20 20 20 
3042   10F5 20 20 20 20 
3042   10F9 54 6F 67 67 
3042   10FD 6C 65 20 53 
3042   1101 69 6E 67 6C 
3042   1105 65 20 53 74 
3042   1109 65 70 70 65 
3042   110D 72 
3043   110E 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
3043   1112 41 41 41 41 
3043   1116 20 20 20 20 
3043   111A 4D 6F 64 69 
3043   111E 66 79 20 41 
3043   1122 64 64 72 65 
3043   1126 73 73 20 41 
3043   112A 41 41 41 
3044   112D 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
3044   1131 41 41 41 41 
3044   1135 20 20 20 20 
3044   1139 47 4F 20 66 
3044   113D 72 6F 6D 20 
3044   1141 41 41 41 41 
3045   1145 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
3045   1149 20 20 20 20 
3045   114D 20 20 20 20 
3045   1151 44 6F 77 6E 
3045   1155 6C 6F 61 64 
3045   1159 20 49 4E 54 
3045   115D 45 4C 20 48 
3045   1161 65 78 
3046   1163 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
3046   1167 20 20 20 20 
3046   116B 20 20 20 20 
3046   116F 45 78 69 74 
3047   1173 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
3047   1177 20 20 20 20 
3047   117B 20 20 20 20 
3047   117F 54 68 69 73 
3047   1183 20 48 65 6C 
3047   1187 70 20 4D 65 
3047   118B 73 73 61 67 
3047   118F 65 0D 0A 00 
3048   1193 C9          	RET
3049   1194             ;-----------------------------------------------
3050   1194             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
3051   1194             ;-----------------------------------------------
3052   1194             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
3053   1194             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
3054   1194             ;
3055   1194 CD 39 14    SSTOGL	CALL	PRNTSZ
3056   1197 0D 0A 53 69 	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3056   119B 6E 67 6C 65 
3056   119F 20 53 74 65 
3056   11A3 70 20 54 6F 
3056   11A7 67 67 6C 65 
3056   11AB 0D 0A 00 
3057   11AE~            #IFDEF TEC-1F
3058   11AE~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
3059   11AE             #ELSE
3060   11AE D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
3061   11B0             #ENDIF
3062   11B0 C9          	RET
3063   11B1             ;----------------------------
3064   11B1             ; M DISPLAY AND MODIFY MEMORY
3065   11B1             ;----------------------------
3066   11B1 CD 67 10    MODIFY	CALL	OUTSP
3067   11B4             ;
3068   11B4             ;GET THE ADDRESS
3069   11B4             ;
3070   11B4 CD 37 10    	CALL	GETCHR
3071   11B7 D8          	RET	C
3072   11B8 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3073   11BB CD 37 10    	CALL	GETCHR
3074   11BE D8          	RET	C
3075   11BF 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3076   11C2             ;
3077   11C2             ; DISPLAY ON A NEW LINE
3078   11C2             ;
3079   11C2 CD 6C 10    MDIFY1	CALL	TXCRLF
3080   11C5 ED 5B 12 3F 	LD	DE,(ADDR)
3081   11C9 21 00 3E    	LD	HL,BUFFER
3082   11CC CD 36 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3083   11CF 21 00 3E    	LD	HL,BUFFER
3084   11D2 CD 2A 13    	CALL	WRDOUT	;OUTPUT THE ADDRESS
3085   11D5 CD 67 10    	CALL	OUTSP
3086   11D8             ;
3087   11D8             ;GET THE DATA AT THE ADDRESS
3088   11D8             ;
3089   11D8 2A 12 3F    	LD	HL,(ADDR)
3090   11DB 7E          	LD	A,(HL)
3091   11DC             ;
3092   11DC             ; DISPLAY THE DATA
3093   11DC             ;
3094   11DC 21 00 3E    	LD	HL,BUFFER
3095   11DF CD 3B 13    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
3096   11E2 21 00 3E    	LD	HL,BUFFER
3097   11E5 CD 2D 13    	CALL	BYTOUT	;OUTPUT THE BYTE
3098   11E8 CD 67 10    	CALL	OUTSP
3099   11EB             ;
3100   11EB             ; GET NEW DATA,EXIT OR CONTINUE
3101   11EB             ;
3102   11EB CD 37 10    	CALL	GETCHR
3103   11EE D8          	RET	C
3104   11EF 47          	LD	B,A	;SAVE IT FOR LATER
3105   11F0 2A 12 3F    	LD	HL,(ADDR)
3106   11F3 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
3107   11F4 78          	LD	A,B
3108   11F5 BE          	CP	(HL)
3109   11F6 28 05       	JR	Z,MDIFY2
3110   11F8 3E 3F       	LD	A,'?'
3111   11FA CD 5D 08    	CALL	TXDATA	;NOT THE SAME DATA, PROBABLY NO RAM THERE
3112   11FD             ;
3113   11FD             ; INCREMENT THE ADDRESS
3114   11FD             ;
3115   11FD 23          MDIFY2	INC	HL
3116   11FE 22 12 3F    	LD	(ADDR),HL
3117   1201 C3 C2 11    	JP	MDIFY1
3118   1204             ;-----------------------
3119   1204             ; RECEIVE INTEL HEX FILE
3120   1204             ;-----------------------
3121   1204 CD 39 14    INTHEX	CALL	PRNTSZ
3122   1207 0D 0A 53 65 	.DB	CR,LF,"Send INTEL Hex File...",0
3122   120B 6E 64 20 49 
3122   120F 4E 54 45 4C 
3122   1213 20 48 65 78 
3122   1217 20 46 69 6C 
3122   121B 65 2E 2E 2E 
3122   121F 00 
3123   1220 CD B2 07    	CALL	INTELH
3124   1223 20 19       	JR	NZ,ITHEX1
3125   1225 CD 39 14    	CALL	PRNTSZ
3126   1228 0D 0A 46 69 	.DB	CR,LF,"File Received OK",CR,LF,0
3126   122C 6C 65 20 52 
3126   1230 65 63 65 69 
3126   1234 76 65 64 20 
3126   1238 4F 4B 0D 0A 
3126   123C 00 
3127   123D C9          	RET
3128   123E CD 39 14    ITHEX1	CALL	PRNTSZ
3129   1241 0D 0A 43 68 	.DB	CR,LF,"Checksum Error",CR,LF,0
3129   1245 65 63 6B 73 
3129   1249 75 6D 20 45 
3129   124D 72 72 6F 72 
3129   1251 0D 0A 00 
3130   1254 C9          	RET
3131   1255             ;------------------------
3132   1255             ; EXIT BACK TO SC MONITOR
3133   1255             ;------------------------
3134   1255             ; WE SAVED THE STACK POINTER WHEN WE ENTERED SCBUG
3135   1255             ; WE WILL USE IT NOW TO RETURN FROM WHERE WE CAME FROM
3136   1255             ;
3137   1255 21 13 06    EXIT	LD	HL,SSTEP	;	RESTORE THE 
3138   1258 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
3139   125B CD 39 14    	CALL	PRNTSZ
3140   125E 0D 0A 42 79 	.DB	CR,LF,"Bye...",CR,LF,0
3140   1262 65 2E 2E 2E 
3140   1266 0D 0A 00 
3141   1269             ;
3142   1269 ED 7B 10 3F 	LD	SP,(SPSAVE)	;RESTORE STACK POINTER
3143   126D C9          	RET
3144   126E             ;------------------
3145   126E             ; DISPLAY REGISTERS
3146   126E             ;------------------
3147   126E CD D5 13    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
3148   1271 21 00 3E    	LD	HL,BUFFER
3149   1274 CD 64 13    	CALL	SNDMSG
3150   1277 C9          	RET
3151   1278             ;----------------------------------------
3152   1278             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
3153   1278             ;----------------------------------------
3154   1278             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
3155   1278             ; ENTRY OTHER THAN HEXADECIMAL KEYS
3156   1278             ;
3157   1278             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
3158   1278             ;ENTRY : A= ASCII 0-9,A-F
3159   1278             ;EXIT  : CARRY =  1
3160   1278             ;          A= HEX 0-F IN LSN
3161   1278             ;      : CARRY = 0
3162   1278             ;          A= OUT OF RANGE CHARACTER & 7FH
3163   1278             ; A AND F REGISTERS MODIFIED
3164   1278             ;
3165   1278 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
3166   127A FE 30       	CP	'0'
3167   127C 38 23       	JR	C,AC2HEX4	;LESS THAN 0
3168   127E FE 3A       	CP	3AH
3169   1280 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
3170   1282 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
3171   1284 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
3172   1285 C9          	RET
3173   1286             ;
3174   1286 FE 41       AC2HEX2	CP	'A'
3175   1288 38 17       	JR	C,AC2HEX4	;LESS THAN A
3176   128A FE 47       	CP	47H
3177   128C 30 04       	JR	NC,AC2HEX3	;MORE THAN F
3178   128E D6 07       	SUB	07H	;CONVERT TO NYBBLE
3179   1290 18 F2       	JR	AC2HEX1
3180   1292             	
3181   1292 FE 61       AC2HEX3	CP	'a'
3182   1294 DA A1 12    	JP	C,AC2HEX4	;LESS THAN a
3183   1297 FE 67       	CP	67H
3184   1299 30 06       	JR	NC,AC2HEX4	;MORE THAN f
3185   129B E6 DF       	AND 0DFH
3186   129D D6 07       	SUB 07H	;CONVERT TO NYBBLE
3187   129F 18 E3       	JR	AC2HEX1
3188   12A1 E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
3189   12A3 C9          	RET
3190   12A4             ;--------------------------
3191   12A4             ; D DISPLAY MEMORY LOCATION
3192   12A4             ;--------------------------
3193   12A4 CD 67 10    DSPLAY	CALL	OUTSP	;A SPACE
3194   12A7 CD 37 10    	CALL	GETCHR
3195   12AA D8          	RET	C
3196   12AB 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3197   12AE CD 37 10    	CALL	GETCHR
3198   12B1 D8          	RET	C
3199   12B2 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3200   12B5             ;
3201   12B5             ; WAIT FOR CR OR ESC
3202   12B5             ;
3203   12B5 CD 88 08    DPLAY1	CALL	RXDATA
3204   12B8 FE 1B       	CP	ESC
3205   12BA C8          	RET	Z
3206   12BB FE 0D       	CP	CR
3207   12BD 20 F6       	JR	NZ,DPLAY1
3208   12BF CD 6C 10    	CALL	TXCRLF	;NEWLINE
3209   12C2             ;
3210   12C2             ; DISPLAY THE LINE
3211   12C2             ;
3212   12C2 CD D7 12    DPLAY2 CALL  DPLINE
3213   12C5 ED 53 12 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
3214   12C9             ;
3215   12C9             ; DISPLAY MORE LINES OR EXIT
3216   12C9             ;
3217   12C9 CD 88 08    DPLAY3	CALL	RXDATA
3218   12CC 38 FB       	JR	C,DPLAY3
3219   12CE FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
3220   12D0 28 F0       	JR	Z,DPLAY2
3221   12D2 FE 1B       	CP	ESC	;ESC EXITS
3222   12D4 20 F3       	JR	NZ,DPLAY3
3223   12D6 C9          	RET
3224   12D7             ;-------------------------
3225   12D7             ; DISPLAY A LINE OF MEMORY
3226   12D7             ;-------------------------
3227   12D7 ED 5B 12 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
3228   12DB 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3229   12DE             ;
3230   12DE             ; DISPLAY THE ADDRESS
3231   12DE             ;
3232   12DE CD 36 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3233   12E1 CD 1A 13    	CALL	SPCBUF
3234   12E4             ;
3235   12E4             ; DISPLAY 16 BYTES
3236   12E4             ;
3237   12E4 06 10       	LD	B,16
3238   12E6 1A          DLINE1	LD	A,(DE)
3239   12E7 CD 3B 13    	CALL	BYTASC
3240   12EA CD 1A 13    	CALL	SPCBUF
3241   12ED 13          	INC	DE
3242   12EE 10 F6       	DJNZ	DLINE1
3243   12F0 CD 1A 13    	CALL	SPCBUF
3244   12F3             ;
3245   12F3             ; NOW DISPLAY THE ASCII CHARACTER
3246   12F3             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3247   12F3             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3248   12F3             ;
3249   12F3 ED 5B 12 3F 	LD	DE,(ADDR)
3250   12F7 06 10       	LD	B,16
3251   12F9 1A          DLINE2	LD	A,(DE)
3252   12FA FE 20       	CP	20H
3253   12FC 38 07       	JR	C,DOT
3254   12FE FE 7F       	CP	7FH
3255   1300 30 03       	JR	NC,DOT
3256   1302 C3 07 13    	JP	NDOT
3257   1305 3E 2E       DOT	LD	A,'.'
3258   1307 CD 1C 13    NDOT	CALL	INBUF
3259   130A 13          	INC	DE
3260   130B 10 EC       	DJNZ	DLINE2
3261   130D             ;
3262   130D             ;TERMINATE AND DISPLAY STRING
3263   130D             ;
3264   130D CD 1F 13    	CALL	BCRLF
3265   1310 3E 00       	LD	A,00H
3266   1312 77          	LD	(HL),A
3267   1313 21 00 3E    	LD	HL,BUFFER
3268   1316 CD 64 13    	CALL	SNDMSG
3269   1319 C9          	RET
3270   131A             ;
3271   131A             ; PUT A SPACE IN THE BUFFER
3272   131A             ;
3273   131A 3E 20       SPCBUF	LD	A,' '
3274   131C 77          INBUF	LD	(HL),A
3275   131D 23          	INC	HL
3276   131E C9          	RET
3277   131F             ;
3278   131F             ; PUT A CR LF IN THE BUFFER
3279   131F             ;
3280   131F 3E 0D       BCRLF	LD	A,CR
3281   1321 CD 1C 13    	CALL	INBUF
3282   1324 3E 0A       	LD	A,LF
3283   1326 CD 1C 13    	CALL	INBUF
3284   1329 C9          	RET
3285   132A             ;----------------------
3286   132A             ; SEND ASCII HEX VALUES
3287   132A             ;----------------------
3288   132A             ;
3289   132A             ; OUTPUT THE 4 BYTE, WRDOUT
3290   132A             ; THE 2 BYTE, BYTOUT
3291   132A             ; OR THE SINGLE BYTE, NYBOUT
3292   132A             ; ASCII STRING AT HL TO THE SERIAL PORT
3293   132A             ;
3294   132A CD 2D 13    WRDOUT	CALL	BYTOUT
3295   132D CD 30 13    BYTOUT	CALL	NYBOUT
3296   1330 7E          NYBOUT	LD	A,(HL)
3297   1331 CD 5D 08    	CALL	TXDATA
3298   1334 23          	INC	HL
3299   1335 C9          	RET
3300   1336             ;----------------
3301   1336             ;CONVERT TO ASCII
3302   1336             ;----------------
3303   1336             ;
3304   1336             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3305   1336             ;
3306   1336             ;        ENTRY :  WRDASC           DE = WORD TO CONVERT
3307   1336             ;                 BYTASC            A = BYTE TO CONVERT
3308   1336             ;                 NYBASC (B3-B0) OF A = NYBBLE TO CONVERT
3309   1336             ;                  HL = CHARACTER BUFFER ADDRESS
3310   1336             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3311   1336             ;                  AF IS MODIFIED
3312   1336             ;
3313   1336 7A          WRDASC	LD	A,D	;CONVERT AND
3314   1337 CD 3B 13    	CALL	BYTASC	;OUTPUT D
3315   133A 7B          	LD	A,E	;THEN E
3316   133B             ;
3317   133B             ;CONVERT A BYTE TO ASCII 
3318   133B             ;
3319   133B F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3320   133C 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3321   133D 0F          	RRCA
3322   133E 0F          	RRCA
3323   133F 0F          	RRCA
3324   1340 CD 44 13    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3325   1343 F1          	POP	AF	;RESTORE LOW NYBBLE
3326   1344             ;
3327   1344             ; CONVERT A NYBBLE TO ASCII
3328   1344             ;
3329   1344 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3330   1346 C6 90       	ADD	A,90H	;CONVERT TO
3331   1348 27          	DAA	;ASCII
3332   1349 CE 40       	ADC	A,40H
3333   134B 27          	DAA
3334   134C             ;
3335   134C             ; SAVE IN STRING
3336   134C             ;
3337   134C 77          INSBUF	LD	(HL),A
3338   134D 23          	INC	HL
3339   134E C9          	RET
3340   134F             ;------------------------------------------------------
3341   134F             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3342   134F             ;------------------------------------------------------
3343   134F             ;
3344   134F             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3345   134F             ;                      INTO A STRING OF ASCII
3346   134F             ;                      ONES AND ZEROES.
3347   134F             ;
3348   134F             ;           ENTRY :  A = BINARY TO CONVERT
3349   134F             ;                   HL = CHARACTER BUFFER ADDRESS
3350   134F             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3351   134F             ;
3352   134F             ;        MODIFIES : NONE
3353   134F             ;
3354   134F C5          BITASC PUSH  BC
3355   1350 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3356   1352 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3357   1354 20 05       	JR	NZ,BTASC3
3358   1356 0E 30       	LD	C,30H	;IT'S A ZERO
3359   1358 71          BTASC2	LD	(HL),C
3360   1359 18 03       	JR	BTASC4
3361   135B 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3362   135D 71          	LD	(HL),C
3363   135E 23          BTASC4	INC	HL
3364   135F 17          	RLA
3365   1360 10 F0       	DJNZ	BTASC1	;NEXT BIT
3366   1362 C1          	POP	BC
3367   1363 C9          	RET
3368   1364             ;-----------------------------------------
3369   1364             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3370   1364             ;-----------------------------------------
3371   1364             ;
3372   1364             ; SENDS A ZERO TERMINATED STRING OR 
3373   1364             ; 255 CHARACTERS MAX. OUT THE SERIAL PORT
3374   1364             ;
3375   1364             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3376   1364             ;      EXIT  : SAME AS ENTRY
3377   1364             ;
3378   1364 C5          SNDMSG	PUSH	BC
3379   1365 E5          	PUSH	HL
3380   1366 F5          	PUSH	AF
3381   1367 06 FF       	LD	B,255	;255 CHARS MAX
3382   1369 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3383   136A FE 00       	CP	00H	;ZERO TERMINATOR?
3384   136C 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3385   136E CD 5D 08    	CALL	TXDATA	;TRANSMIT THE CHAR
3386   1371 23          	INC	HL
3387   1372 10 F5       	DJNZ	SDMSG1	;255 CHARS MAX!
3388   1374             	
3389   1374 F1          SDMSG2	POP	AF
3390   1375 E1          	POP	HL	
3391   1376 C1          	POP	BC	
3392   1377 C9          	RET
3393   1378             ;----------------------
3394   1378             ; SERIAL SINGLE STEPPER
3395   1378             ;----------------------
3396   1378 E1          SSSTEP	POP	HL	;GET HL BACK
3397   1379 F5          	PUSH	AF	;SAVE AF FOR LATER
3398   137A 22 49 3F    	LD	(TMPHL),HL
3399   137D ED 53 47 3F 	LD	(TMPDE),DE
3400   1381 ED 43 45 3F 	LD	(TMPBC),BC
3401   1385 DD 22 4B 3F 	LD	(TMPIX),IX
3402   1389 FD 22 4D 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3403   138D E1          	POP	HL	;GET AF BACK
3404   138E 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
3405   1391 E1          	POP	HL	;GET PC RETURN ADDRESS
3406   1392 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
3407   1395 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3408   1399             ;
3409   1399 CD D5 13    	CALL	DISREG	;DISPLAY REGISTERS
3410   139C 21 00 3E    	LD	HL,BUFFER
3411   139F CD 64 13    	CALL	SNDMSG
3412   13A2             ; WE HAVE DISPLAYED THE REGISTER CONTENTS NOW
3413   13A2             ; SPACE KEY CONTINUES EXECUTION, ESCAPE KEY
3414   13A2             ; RETURNS TO SERIAL MONITOR
3415   13A2             ;
3416   13A2 CD 88 08    SSTEP3	CALL	RXDATA
3417   13A5 38 FB       	JR	C,SSTEP3
3418   13A7 FE 20       	CP	' '	;IS IT SPACE
3419   13A9 28 08       	JR	Z,SSTEP4
3420   13AB FE 1B       	CP	ESC	;ESC QUITS
3421   13AD 20 F3       	JR	NZ,SSTEP3
3422   13AF             ;
3423   13AF             ; RETURN TO MONITOR
3424   13AF             ;
3425   13AF FB          	EI	;RE-ENABLE INTERRUPTS
3426   13B0 C3 1B 10    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3427   13B3             ;
3428   13B3             ; RETURN TO PROGRAM
3429   13B3             ;
3430   13B3 ED 7B 4F 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3431   13B7 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
3432   13BA E5          	PUSH	HL	;ADDRESS BACK ON STACK
3433   13BB 2A 43 3F    	LD	HL,(TMPAF)
3434   13BE E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3435   13BF FD 2A 4D 3F 	LD	IY,(TMPIY)
3436   13C3 DD 2A 4B 3F 	LD	IX,(TMPIX)
3437   13C7 ED 4B 45 3F 	LD	BC,(TMPBC)
3438   13CB ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3439   13CF F1          	POP	AF	;RESTORE AF
3440   13D0 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
3441   13D3 FB          	EI		;RE-ENABLE INTERRUPTS
3442   13D4 C9          	RET		;AND RETURN TO PROGRAM
3443   13D5             ;----------------------------
3444   13D5             ; DISPLAY THE SAVED REGISTERS
3445   13D5             ;----------------------------
3446   13D5 CD 39 14    DISREG	CALL	PRNTSZ
3447   13D8 0D 0A 50 43 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3447   13DC 20 20 20 41 
3447   13E0 46 20 20 20 
3447   13E4 42 43 20 20 
3447   13E8 20 44 45 20 
3447   13EC 20 20 48 4C 
3447   13F0 20 20 20 49 
3447   13F4 58 20 20 20 
3447   13F8 49 59 20 20 
3447   13FC 20 53 50 20 
3447   1400 20 20 53 5A 
3447   1404 2D 48 2D 56 
3447   1408 4E 43 0D 0A 
3447   140C 00 
3448   140D             ;
3449   140D             ; DISPLAY THE REGISTERS
3450   140D             ;
3451   140D 06 08       	LD	B,08H
3452   140F 21 00 3E    	LD	HL,BUFFER
3453   1412 DD 21 41 3F 	LD	IX,TMPPC
3454   1416 DD 7E 01    DSREG1	LD	A,(IX+1)
3455   1419 CD 3B 13    	CALL	BYTASC
3456   141C DD 7E 00    	LD	A,(IX+0)
3457   141F CD 3B 13    	CALL	BYTASC
3458   1422 DD 23       	INC	IX
3459   1424 DD 23       	INC	IX
3460   1426 3E 20       	LD	A,' '
3461   1428 77          	LD	(HL),A
3462   1429 23          	INC	HL
3463   142A 10 EA       	DJNZ	DSREG1
3464   142C             ;
3465   142C             ; DISPLAY THE FLAGS
3466   142C             ;
3467   142C 3A 43 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3468   142F CD 4F 13    	CALL	BITASC	;SHOW THEM AS BITS
3469   1432             
3470   1432 CD 1F 13    SZCRLF CALL  BCRLF
3471   1435 3E 00       	LD	A,0
3472   1437 77          	LD	(HL),A	;TERMINATE THE STRING
3473   1438 C9          	RET
3474   1439             ;-----------------------------------------
3475   1439             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3476   1439             ;-----------------------------------------
3477   1439             ; PUT THE STRING IN THE CODE LIKE THE EXAMPLE BELOW
3478   1439             ; THE ROUTINE SENDS THE STRING FROM THE RETURN ADDRESS,
3479   1439             ; (THE ADDRESS PUT ON THE STACK AS THE RETURN ADDRESS FROM THE 'CALL PRNTSZ') TO THE ZERO TERMINATOR.
3480   1439             ; THEN JUMPS TO THE 'NEXT INSTRUCTION ADDRESS' (AFTER THE ZERO TERMINATOR) TO RESUME THE PROGRAM. 
3481   1439             ;
3482   1439             ;      CALL PRNTSZ
3483   1439             ;      .DB  "STRING TO PRINT",0
3484   1439             ;      NEXT INSTRUCTION
3485   1439             ;
3486   1439 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3487   143A 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3488   143B CD 5D 08    	CALL	TXDATA	;AND SEND IT
3489   143E 23          	INC	HL	;POINT TO THE NEXT
3490   143F B7          	OR	A	;CHARACTER AND
3491   1440 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3492   1442 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3493   1443             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F12      ADRESS        3F3B      ADDKEY        0312      
ADMODE        0392      ASCHEX        083A      ASCHX1        0840      
ADDRA         08C2      ADDRB         08D4      ASC2HEX       1278      
AC2HEX1       1284      AC2HEX2       1286      AC2HEX3       1292      
AC2HEX4       12A1      BOTRAM        2000      BUFFER        3E00      
B300          0220      B1200         0080      B2400         003F      
B4800         001B      B9600         000B      BAUD          3F21      
BLKSRT        3F29      BLKEND        3F2B      BLKDST        3F2D      
BEEP          05E9      BEEP1         05F9      BEEP2         0600      
BEEP3         0610      BITIME        08B5      BITIM1        08BA      
BLKMVE        08E6      BLKMV1        0905      BLKMV2        0908      
BLKMV3        091A      BLKSUM        093C      BLKSM1        0958      
BRANCH        097A      BRNCH1        099C      BRNCH2        09A7      
BCRLF         131F      BYTOUT        132D      BYTASC        133B      
BITASC        134F      BTASC1        1352      BTASC2        1358      
BTASC3        135B      BTASC4        135E      CALMDE        3F17      
COUNT         3F27      CONBYT        03EB      CONVHI        03F8      
CONVLO        03FC      CLRBUF        044C      CLRBF1        0453      
CHKSUM        04FB      CHKSM1        04FF      CANCEL        0757      
CANCL1        075A      CHKKEY        0B39      CHKKY1        0B47      
CHKKY2        0B70      CHKKY3        0B7D      CHKKY4        0B85      
CHKKY5        0B8C      CHKKY6        0B9A      CHKKY7        0B9C      
CHKKY8        0BA1      CHKKY9        0BC6      CHKKYA        0BD4      
CLKEXT        0D4E      CALKEY        0D58      CR            000D      
COLD          0F83      DISPLY        0084      DATA          3F14      
DISBUF        3F31      DALLAS        3F60      DECKEY        034A      
DECKY1        034D      DECKY2        035A      DECKY3        0375      
DISADD        03CD      DISBYT        03E2      DECSTP        0706      
DECSP1        0716      DELONE        0C4A      DELON1        0C53      
DELON2        0C55      DSPLAY        12A4      DPLAY1        12B5      
DPLAY2        12C2      DPLAY3        12C9      DPLINE        12D7      
DLINE1        12E6      DLINE2        12F9      DOT           1305      
DISREG        13D5      DSREG1        1416      EDTKEY        0B09      
ENDKEY        0B30      ESC           001B      EXIT          1255      
FUNTBL        3F15      FUNJMP        3F2F      FUNKEY        073C      
FUNKY1        073F      FUNKY2        074E      FUNLST        0761      
FUNFUN        0795      GOEXEC        0799      GETBYT        080E      
GETBT1        0818      GETBT2        082C      GETCHR        1037      
GETNYB        104C      GETOUT        1065      GOJUMP        1076      
GOJMP1        1087      HEXKEY        02E0      HEXKY1        02EB      
HEXKY2        02F9      HELP          1098      ISTACK        3C00      
IO0           0080      IO1           0081      IO2           0082      
IO3           0083      IO7           0087      INCKEY        031E      
INCKY1        0321      INCKY2        032E      INCKY3        0349      
INDEXB        050B      INDEXW        0512      INCSTP        06F1      
INCSP1        0701      INTELFN       07A3      INTELH        07B2      
INTEL1        07B6      INTEL2        07E1      INTEL4        07FC      
INTHEX        1204      ITHEX1        123E      INBUF         131C      
INSBUF        134C      KEYBUF        0086      KEYFN         0010      
KEYAD         0011      KEYINC        0012      KEYDEC        0013      
KEYTIM        3F23      KEYDEL        3F3D      KBDTYP        03B1      
KYBSZ         03C3      KYBDBF        03CC      KEYIN         04C4      
KEYREL        04CE      KEYRL1        04CF      LENGTH        05AE      
LOSE          0BED      LF            000A      LOOPSZ        143A      
MODE          3F39      MAIN          027D      MAIN1         028E      
MAIN2         0291      MENLST        02A3      MENU          04D8      
MENU1         04E6      MENU2         04F2      MUL16         0533      
MULT          053C      MULT1         0542      MUSIC         054A      
MSDELAY       0853      MSDEL1        0856      MOVE          0920      
MONMENU       1021      MODIFY        11B1      MDIFY1        11C2      
MDIFY2        11FD      NXTBIT        086E      NDOT          1307      
NYBOUT        1330      NYBASC        1344      ONTIM         3F37      
OFTIM         3F38      ONESEC        0F67      ONESC1        0F70      
OUTSP         1067      PCBTYP        03A3      PAUSE         055B      
PERIOD        0596      PLAY1         09BF      PLAY2         09CE      
PLAY3         09DD      PATERN        0EC7      PRNTSZ        1439      
RAMEND        3800      RAMSRT        2000      REGPNT        3F3F      
RST08         3F51      RST10         3F53      RST18         3F55      
RST20         3F57      RST28         3F59      RST38         3F5B      
RST66         3F5D      RAMSUM        3F5F      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          051B      REGTBL        0651      REGNAM        068E      
REGKEY        069E      RETMON        06C5      RETPGM        06CF      
RXDATA        0888      RXDAT1        088A      RXDAT2        08A2      
RELSQR        0C07      RLTEST        0C16      RLSTEP        0C1C      
RELSR1        0C22      RELSR2        0C33      RELSR3        0C3B      
RELSR4        0C40      RWATCH        0E7D      RWACH1        0E89      
RWACH2        0E92      RWACH3        0EA4      REGSTR        126E      
SCAN          0085      SPSAVE        3F10      SWREG0        3F19      
SWREG1        3F1A      SWREG2        3F1B      SWREG3        3F1C      
SWREG4        3F1D      SWREG5        3F1E      SWREG6        3F1F      
SWREG7        3F20      SPTEMP        3F25      SYSERR        3F61      
SYSCALL       006B      STOP          008E      SYSJMP        0100      
SETDP         0397      SEGMNT        040B      SCAND         041B      
SCAND1        0423      SCAND2        042F      SCAND3        043A      
SCANKEY       045B      SCANKY1       045E      SCANKY2       0466      
SCANKY3       0468      SCANKY4       0477      SCANKY5       049A      
SCANKY6       04A1      SCANKY7       04A6      SKEYIN        04AA      
SKEYRL        04B7      SKEYL1        04B8      STEP          0550      
STEP1         0565      STEP2         056F      STEP3         057A      
SSTEP         0613      SSTEP1        063F      SETREG        071C      
SERINI        0843      SDELAY        092E      SDELY1        0933      
SWBEEP        09EC      SECRET        0A86      SECRT1        0AC3      
SECNUM        0AD2      SPLIT         0BF4      SCOPE         0C60      
SCOPE2        0C75      SCOPE3        0C7D      SCOPE4        0C8C      
SCOPE5        0C93      SCOPE6        0C9A      SCOPE7        0CA1      
SCOPE8        0CA8      SCOPE9        0CB1      SCOPEA        0CBE      
SEED          0CDF      SKATE         0CEE      SKATE1        0CF3      
SKATE2        0CFB      SKATE3        0D04      SETCLK        0DDF      
SETCK1        0DE5      SETCK2        0E14      SETCK3        0E28      
SETCK4        0E36      SETCK5        0E45      SETCK6        0E4C      
SETCK7        0E5C      SETCK8        0E63      SCBUG         0F7D      
START2        0FF7      START3        0FFC      START4        1007      
START5        100F      SSTOGL        1194      SPCBUF        131A      
SNDMSG        1364      SDMSG1        1369      SDMSG2        1374      
SSSTEP        1378      SSTEP3        13A2      SSTEP4        13B3      
SZCRLF        1432      TOPRAM        3FFF      TMPPC         3F41      
TMPAF         3F43      TMPBC         3F45      TMPDE         3F47      
TMPHL         3F49      TMPIX         3F4B      TMPIY         3F4D      
TMPSP         3F4F      TRAP          008A      TYPESZ        03B8      
TYPEBF        03BD      TONE          05C7      TONE1         05D1      
TONE2         05D8      TONE3         05DB      TXDATA        085D      
TRACE         09B1      TUNE1         09FA      TUNE2         0A3A      
TIME          0D0F      TIME1         0D27      TIMKEY        0D41      
TXCRLF        106C      UPDATE        0376      UPDBUF        0D67      
UPDBF1        0D6D      UPDBF2        0D8F      UPDBF3        0DB3      
UPDBF4        0DC5      UPDBF5        0DDE      VARBLS        3F00      
VARIDX        3F00      VARRAM        039F      VERS          03AA      
VERSZ         03BE      VERBCD        03C2      WIN           0BE4      
WWATCH        0F07      WWACH1        0F21      WWACH2        0F23      
WWACH3        0F3E      WWACH4        0F41      WWACH5        0F43      
WWACH6        0F54      WARM          101B      WRDOUT        132A      
WRDASC        1336      

tasm: Number of errors = 0
