0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ;
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ; VERSION 1.8  03/2023  ADD 'UPDATE','SCBUG' TO SYSTEM CALLS
0028   0000             ;                       ADD A SYSTEM CALL TO RETURN THE BASE ADDRESS OF THE RAM VARIABLES
0029   0000             ;                       ADDED SYSTEM CALLS FOR STRINGS AND BIT FIELDS TO RETURN BOARD TYPE AND KEYBOARD TYPE
0030   0000             ;                       FIXED THE SERIAL GO ROUTINE SO IT RETURNS TO THE SERIAL MONITOR WHEN RET
0031   0000             ;                       REMOVE INCH/PUTCH SERIAL REDIRECTION
0032   0000             ;                       ADDED A BIT BANG SERIAL INITIALISATION SYSTEM CALL
0033   0000             ;                       TRAPPED UNUSED SYSTEM CALLS
0034   0000             ;                       CONVERT TEC-1F KEY CODES FOR KEYS ABOVE 'F' INTO SC KEY CODES
0035   0000             ;                       SCANKEY ROUTINE RETURNS SHIFT KEY STATUS WITH KEYPRESS
0036   0000             ;                       TURN ON THE SPEAKER AT STARTUP
0037   0000             ;
0038   0000             ;IF DEFINED THE TARGET IS THE TEC-1F ELSE SC
0039   0000             #DEFINE TEC-1F
0040   0000             ; IF DEFINED USE THE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0041   0000             #DEFINE 74C923
0042   0000             ;
0043   0000             ;---------------
0044   0000             ; RAM MEMORY MAP
0045   0000             ;---------------
0046   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0047   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0048   0000             ;
0049   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0050   0000             BUFFER	.EQU	VARBLS-0100H	;GENERAL PURPOSE BUFFER AREA
0051   0000             ISTACK	.EQU	BUFFER-0200H	;INITIAL MONITOR STACK
0052   0000             ;
0053   0000             RAMEND	.EQU	ISTACK-0400H	;END OF USER RAM
0054   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0055   0000             ;
0056   0000             ; I/O PORT ADDRESSES
0057   0000             ;
0058   0000             #IFDEF TEC-1F
0059   0000             ;
0060   0000             ; TEC-1 I/O ASSIGNMENTS
0061   0000             ;
0062   0000             KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0063   0000             SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0064   0000             DISPLY	.EQU	02H	;DISPLAY LATCH
0065   0000             PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0066   0000             PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0067   0000             PORT5	.EQU	05H
0068   0000             PORT6	.EQU	06H
0069   0000             PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0070   0000~            #ELSE
0071   0000~            ;
0072   0000~            ; SOUTHERN CROSS I/O ASSIGNMENTS
0073   0000~            ;
0074   0000~            IO0	.EQU	80H	;IO PORT 0
0075   0000~            IO1	.EQU	81H	;IO PORT 1
0076   0000~            IO2	.EQU	82H	;IO PORT 2
0077   0000~            IO3	.EQU	83H	;IO PORT 3
0078   0000~            DISPLY	.EQU	84H	;DISPLAY LATCH
0079   0000~            SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0080   0000~            KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0081   0000~            IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0082   0000             #ENDIF
0083   0000             ;
0084   0000             ; BIT BANG BAUD RATE CONSTANTS
0085   0000             ;
0086   0000             B300	.EQU	0220H	;300 BAUD
0087   0000             B1200	.EQU	0080H	;1200 BAUD
0088   0000             B2400	.EQU	003FH	;2400 BAUD
0089   0000             B4800	.EQU	001BH	;4800 BAUD
0090   0000             B9600	.EQU	000BH	;9600 BAUD
0091   0000             ;
0092   0000             ; KEY CODES
0093   0000             ;
0094   0000             KEYFN	.EQU	10H	;FN OR GO KEY
0095   0000             KEYAD	.EQU	11H	;ADDRESS KEY
0096   0000             KEYINC	.EQU	12H	;PLUS KEY
0097   0000             KEYDEC	.EQU	13H	;MINUS KEY
0098   0000             
0099   0000             ;-------------------------
0100   0000             ; MONITOR GLOBAL VARIABLES
0101   0000             ;-------------------------
0102   0000             ;
0103   3F00             	.ORG	VARBLS
0104   3F00             ;
0105   3F00             ;BIT BANG SERIAL MONITOR (SCBUG) VARIABLES
0106   3F00             ;
0107   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0108   3F10             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0109   3F12             ADDR	.BLOCK	2	;TEMP ADDRESS
0110   3F14             DATA	.BLOCK	1	;TEMP DATA @ ADDRESS
0111   3F15             ;
0112   3F15             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0113   3F17             ;
0114   3F17             ; DALLAS SMARTWATCH REGISTERS
0115   3F17             ;
0116   3F17             CALMDE	.BLOCK	2	;CALENDAR MODE
0117   3F19             SWREG0	.BLOCK	1	;10THS, 100THS
0118   3F1A             SWREG1	.BLOCK	1	;SECONDS
0119   3F1B             SWREG2	.BLOCK	1	;MINUTES
0120   3F1C             SWREG3	.BLOCK	1	;HOURS
0121   3F1D             SWREG4	.BLOCK	1	;DAY
0122   3F1E             SWREG5	.BLOCK	1	;DATE
0123   3F1F             SWREG6	.BLOCK	1	;MONTH
0124   3F20             SWREG7	.BLOCK	1	;YEAR
0125   3F21             ;
0126   3F21             BAUD	.BLOCK	2	;BIT BANG BAUD RATE
0127   3F23             KEYTIM	.BLOCK	2	;BEEP DELAY
0128   3F25             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0129   3F27             ;
0130   3F27             ; BLOCK FUNCTIONS
0131   3F27             ;
0132   3F27             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0133   3F29             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0134   3F2B             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0135   3F2D             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0136   3F2F             ;
0137   3F2F             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0138   3F31             ;
0139   3F31             ; DISPLAY SCAN REGISTERS
0140   3F31             ;
0141   3F31             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0142   3F37             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0143   3F38             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0144   3F39             ;
0145   3F39             ; MONITOR VARIABLES
0146   3F39             ;
0147   3F39             MODE	.BLOCK	2	;DISPLAY MODE
0148   3F3B             ADRESS	.BLOCK	2	;USER ADDRESS
0149   3F3D             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0150   3F3F             ;
0151   3F3F             ; TEMPORARY REGISTER STORAGE
0152   3F3F             ;
0153   3F3F             REGPNT	.BLOCK	2	;REGISTER POINTER
0154   3F41             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0155   3F43             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0156   3F45             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0157   3F47             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0158   3F49             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0159   3F4B             TMPIX	.BLOCK	2	;INDEX REGISTER X
0160   3F4D             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0161   3F4F             TMPSP	.BLOCK	2	;STACK POINTER
0162   3F51             ;
0163   3F51             ; RESTART JUMP TABLE AND HARWARE TEST
0164   3F51             ;
0165   3F51             RST08	.BLOCK	2	;RESTART 08H JUMP
0166   3F53             RST10	.BLOCK	2	;RESTART 10H JUMP
0167   3F55             RST18	.BLOCK	2	;RESTART 18H JUMP
0168   3F57             RST20	.BLOCK	2	;RESTART 20H JUMP
0169   3F59             RST28	.BLOCK	2	;RESTART 28H JUMP
0170   3F5B             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0171   3F5D             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0172   3F5F             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0173   3F60             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0174   3F61             SYSERR	.BLOCK	2	;SYSTEM CALL ERROR JUMP
0175   3F63             ;----------------
0176   3F63             ; RESTART VECTORS
0177   3F63             ;----------------
0178   3F63             ;
0179   3F63             ;  RESTART 00H - RST 0
0180   3F63             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0181   3F63             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0182   3F63             ;
0183   0000             	.ORG	0000H
0184   0000 C3 00 02    RSTVEC	JP	RESET
0185   0003             ;
0186   0003             ; RESTART 08H - RST 1
0187   0003             ;
0188   0008             	.ORG	0008H
0189   0008 E5          	PUSH	HL
0190   0009 2A 51 3F    	LD	HL,(RST08)
0191   000C E9          	JP	(HL)
0192   000D             ;
0193   000D             ; RESTART 10H - RST 2
0194   000D             ;
0195   0010             	.ORG	0010H
0196   0010 E5          	PUSH	HL
0197   0011 2A 53 3F    	LD	HL,(RST10)
0198   0014 E9          	JP	(HL)
0199   0015             ;
0200   0015             ; RESTART 18H - RST 3
0201   0015             ;
0202   0018             	.ORG	0018H
0203   0018 E5          	PUSH	HL
0204   0019 2A 55 3F    	LD	HL,(RST18)
0205   001C E9          	JP	(HL)
0206   001D             ;
0207   001D             ; RESTART 20H - RST 4
0208   001D             ;
0209   0020             	.ORG	0020H
0210   0020 E5          	PUSH	HL
0211   0021 2A 57 3F    	LD	HL,(RST20)
0212   0024 E9          	JP	(HL)
0213   0025             ;
0214   0025             ; RESTART 28H - RST 5
0215   0025             ;
0216   0028             	.ORG	0028H
0217   0028 E5          	PUSH	HL
0218   0029 2A 59 3F    	LD	HL,(RST28)
0219   002C E9          	JP	(HL)
0220   002D             ;
0221   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0222   002D             ;
0223   0030             	.ORG	0030H
0224   0030 C3 68 00    RST30	JP	SYSCALL
0225   0033             ;
0226   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0227   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0228   0033             ;INT OCCURS- FURTHER INTERRUPTS
0229   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0230   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0231   0033             ;STARTS HERE
0232   0033             ;
0233   0038             	.ORG	0038H
0234   0038 E5          	PUSH	HL
0235   0039 2A 5B 3F    	LD	HL,(RST38)
0236   003C E9          	JP	(HL)
0237   003D             ;
0238   003D             ; RESTART 66H NMI VECTOR
0239   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0240   003D             ;
0241   0066             	.ORG	0066H
0242   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0243   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0244   0066             #IFDEF TEC-1F
0245   0066 ED 4D           RETI
0246   0068~            #ELSE
0247   0068~            	PUSH	HL
0248   0068~            	LD	HL,(RST66)
0249   0068~            	JP	(HL)
0250   0068             #ENDIF
0251   0068             ;--------------------
0252   0068             ; SYSTEM CALL HANDLER
0253   0068             ;--------------------
0254   0068             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0255   0068             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0256   0068             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0257   0068             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0258   0068             ;CHANGE IN SUBSEQUENT MONITORS
0259   0068             ;
0260   0068             ;ENTRY : C = CALL NUMBER
0261   0068             ;SEE ROUTINES FOR ENTRY AND EXIT
0262   0068             ;PARAMETERS
0263   0068             ;
0264   0068 3B          SYSCALL	DEC	SP
0265   0069 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0266   006A ED 73 25 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0267   006E F5          	PUSH	AF
0268   006F D5          	PUSH	DE
0269   0070 E5          	PUSH	HL	;SAVE REGISTERS
0270   0071 79          	LD	A,C	;GET CALL NUMBER
0271   0072 E6 7F       	AND	127	;ENSURE IN LIMITS
0272   0074 CB 27       	SLA	A	;MULTIPLY BY TWO
0273   0076 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0274   0078 6F          	LD	L,A	;LOAD INDEX
0275   0079 7E          	LD	A,(HL)
0276   007A 23          	INC	HL
0277   007B 56          	LD	D,(HL)	;GET JUMP ADDRESS
0278   007C 2A 25 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0279   007F 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0280   0080 23          	INC	HL
0281   0081 7A          	LD	A,D
0282   0082 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0283   0083 E1          	POP	HL
0284   0084 D1          	POP	DE
0285   0085 F1          	POP	AF	;RESTORE REGISTERS
0286   0086 C9          	RET		;JUMPS TO SYSTEM CALL
0287   0087             ;
0288   0087             ; ERROR TRAP
0289   0087             ; HALT THE MACHINE UNTIL RESET OR INTERRUPT
0290   0087 2A 61 3F    TRAP	LD	HL,(SYSERR)
0291   008A E9          	JP	(HL)
0292   008B             ;
0293   008B 76          STOP	HALT
0294   008C             ;-----------------------
0295   008C             ; SYSTEM CALL JUMP TABLE
0296   008C             ;-----------------------
0297   0100             	.ORG	0100H
0298   0100 7D 02 AA 03 SYSJMP	.DW	MAIN,VERS,DISADD,DISBYT,CLRBUF,SCAND,CONBYT,CONVHI
0298   0104 CF 03 E4 03 
0298   0108 4E 04 1D 04 
0298   010C ED 03 FA 03 
0299   0110 FE 03 98 04 	.DW CONVLO,SKEYIN,SKEYRL,KEYIN,KEYREL,MENU,CHKSUM,MUL16
0299   0114 A5 04 B2 04 
0299   0118 BC 04 C6 04 
0299   011C E9 04 21 05 
0300   0120 09 05 F9 04 	.DW RAND,INDEXB,INDEXW,MUSIC,TONE,BEEP,SKATE,TXDATA
0300   0124 00 05 38 05 
0300   0128 B5 05 D7 05 
0300   012C DC 0C 4B 08 
0301   0130 76 08 28 08 	.DW RXDATA,ASCHEX,WWATCH,RWATCH,ONESEC,RLSTEP,DELONE,SCANKEY
0301   0134 F5 0E 6B 0E 
0301   0138 55 0F 0A 0C 
0301   013C 38 0C 5D 04 
0302   0140             	
0303   0140 A0 07 E2 0B 	.DW INTELH,SPLIT,SNDMSG,BITASC,WRDASC,BYTASC,NYBASC,PCBTYP
0303   0144 52 13 3D 13 
0303   0148 24 13 29 13 
0303   014C 32 13 A3 03 
0304   0150 27 14 B1 03 	.DW PRNTSZ,KBDTYP,UPDATE,VARRAM,SERINI,SCBUG,TRAP,TRAP
0304   0154 76 03 9F 03 
0304   0158 31 08 6B 0F 
0304   015C 87 00 87 00 
0305   0160 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0305   0164 87 00 87 00 
0305   0168 87 00 87 00 
0305   016C 87 00 87 00 
0306   0170 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0306   0174 87 00 87 00 
0306   0178 87 00 87 00 
0306   017C 87 00 87 00 
0307   0180             	
0308   0180 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0308   0184 87 00 87 00 
0308   0188 87 00 87 00 
0308   018C 87 00 87 00 
0309   0190 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0309   0194 87 00 87 00 
0309   0198 87 00 87 00 
0309   019C 87 00 87 00 
0310   01A0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0310   01A4 87 00 87 00 
0310   01A8 87 00 87 00 
0310   01AC 87 00 87 00 
0311   01B0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0311   01B4 87 00 87 00 
0311   01B8 87 00 87 00 
0311   01BC 87 00 87 00 
0312   01C0             	
0313   01C0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0313   01C4 87 00 87 00 
0313   01C8 87 00 87 00 
0313   01CC 87 00 87 00 
0314   01D0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0314   01D4 87 00 87 00 
0314   01D8 87 00 87 00 
0314   01DC 87 00 87 00 
0315   01E0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0315   01E4 87 00 87 00 
0315   01E8 87 00 87 00 
0315   01EC 87 00 87 00 
0316   01F0 87 00 87 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0316   01F4 87 00 87 00 
0316   01F8 87 00 87 00 
0316   01FC 87 00 87 00 
0317   0200             ;------------------------------
0318   0200             ; POWER UP RESET / MANUAL RESET
0319   0200             ;------------------------------
0320   0200             	.ORG	0200H
0321   0200             ;
0322   0200             ; WAIT FOR SMART SOCKET
0323   0200             ; TO RECOVER FROM POWER DOWN
0324   0200             ;
0325   0200 3E 55       RESET	LD	A,55H
0326   0202 32 60 3F    	LD	(DALLAS),A	;WRITE TO RAM
0327   0205 AF          	XOR	A
0328   0206 D3 02       	OUT	(DISPLY),A	;WRITE NOTHING TO
0329   0208 D3 01       	OUT	(SCAN),A	;ON BOARD I/O
0330   020A DB 00       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0331   020C 3A 60 3F    	LD	A,(DALLAS)	;READ FROM RAM
0332   020F FE 55       	CP	55H	;IS IT READY?
0333   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0334   0214             ;
0335   0214             ; LOAD STACK POINTER
0336   0214             ;
0337   0214 31 00 3C    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0338   0217 ED 56       	IM	1	;SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0339   0219             ;
0340   0219             ; SET UP RESTART VECTORS
0341   0219             ;
0342   0219 21 14 02    	LD	HL,RESET1
0343   021C 22 51 3F    	LD	(RST08),HL
0344   021F 22 53 3F    	LD	(RST10),HL
0345   0222 22 55 3F    	LD	(RST18),HL
0346   0225 22 57 3F    	LD	(RST20),HL
0347   0228 22 59 3F    	LD	(RST28),HL
0348   022B 22 5D 3F    	LD	(RST66),HL	;NMI INTERRUPT
0349   022E 21 01 06    	LD	HL,SSTEP
0350   0231 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
0351   0234 21 8B 00    	LD	HL,STOP
0352   0237 22 61 3F    	LD	(SYSERR),HL	;INVALID SYSTEM CALL ERROR
0353   023A             ;
0354   023A             ; PERFORM CHECKSUM ON USER RAM
0355   023A             ;
0356   023A 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0357   023D 11 00 38    	LD	DE,RAMEND	;END OF USER RAM
0358   0240 CD E9 04    	CALL	CHKSUM
0359   0243 32 5F 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0360   0246             ;
0361   0246             ; SET UP DEFAULT VARIABLES
0362   0246             ;
0363   0246 21 4F 07    	LD	HL,FUNLST
0364   0249 22 15 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0365   024C             ;
0366   024C             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0367   024C             ;
0368   024C 21 6B 0F    	LD	HL,SCBUG	;SERIAL MONITOR
0369   024F 22 2F 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0370   0252 3E 00       	LD	A,00H
0371   0254 32 3F 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0372   0257 32 39 3F    	LD	(MODE),A	;START WITH SPEAKER ON
0373   025A             ;
0374   025A 21 1B 00    	LD	HL,B4800	;DEFAULT BAUD RATE
0375   025D CD 31 08    	CALL SERINI	;INITIALISE THE SERIAL PORT
0376   0260             ;
0377   0260 21 00 01    	LD	HL,0100H
0378   0263 22 3D 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0379   0266 21 00 10    	LD	HL,1000H
0380   0269 22 23 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0381   026C             #IFDEF 74C923
0382   026C 3E 20       	LD	A,20H
0383   026E~            #ELSE
0384   026E~            	LD	A,08H
0385   026E             #ENDIF
0386   026E 32 38 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0387   0271 CD D7 05    	CALL	BEEP
0388   0274 CD D7 05    	CALL	BEEP
0389   0277             #IFDEF 74C923
0390   0277 3E 08       	LD	A,08H
0391   0279~            #ELSE
0392   0279~            	LD	A,10H
0393   0279             #ENDIF
0394   0279 32 37 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0395   027C             ;
0396   027C FB          	EI		;ENABLE INTERRUPTS
0397   027D             ;
0398   027D             ;-----------------
0399   027D             ; SET UP MAIN LOOP
0400   027D             ;-----------------
0401   027D 31 00 3C    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0402   0280 21 00 20    	LD	HL,RAMSRT
0403   0283 22 3B 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0404   0286 3A 39 3F    	LD	A,(MODE)
0405   0289 F6 80       	OR	80H	;START OFF IN DATA MODE
0406   028B 32 39 3F    	LD	(MODE),A
0407   028E             ;
0408   028E             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0409   028E             ;
0410   028E CD 76 03    MAIN1	CALL	UPDATE
0411   0291 CD 98 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0412   0294 21 A3 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0413   0297 CD C6 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0414   029A CD 76 03    	CALL	UPDATE	;UPDATE BUFFER AND
0415   029D CD A5 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0416   02A0 C3 91 02    	JP	MAIN2
0417   02A3             ;
0418   02A3             ; MAIN MENU KEY TABLE
0419   02A3             ;
0420   02A3 14          MENLST	.DB	20
0421   02A4 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0421   02A8 04 05 06 07 
0422   02AC 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0422   02B0 0C 0D 0E 0F 
0423   02B4 10 11 12 13 	.DB	10H,11H,12H,13H
0424   02B8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0424   02BC E0 02 E0 02 
0425   02C0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0425   02C4 E0 02 E0 02 
0426   02C8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0426   02CC E0 02 E0 02 
0427   02D0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0427   02D4 E0 02 E0 02 
0428   02D8 2A 07 12 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0428   02DC 1E 03 4A 03 
0429   02E0             ;---------------------------------------------------
0430   02E0             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0431   02E0             ;---------------------------------------------------
0432   02E0 CD D7 05    HEXKEY	CALL	BEEP
0433   02E3 21 39 3F    	LD	HL,MODE
0434   02E6 CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0435   02E8 CA F9 02    	JP	Z,HEXKY2	;IN ADDR MODE
0436   02EB             ;
0437   02EB             ; IN DATA MODE
0438   02EB             ;
0439   02EB 2A 3B 3F    HEXKY1	LD	HL,(ADRESS)
0440   02EE CB 26       	SLA	(HL)	;FROM THE CURRENT
0441   02F0 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0442   02F2 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0443   02F4 CB 26       	SLA	(HL)	;PUT THE KEY IN
0444   02F6 B6          	OR	(HL)	;THE NEW DATA BACK AT
0445   02F7 77          	LD	(HL),A	;THE CURRENT ADDRESS
0446   02F8 C9          	RET
0447   02F9             ;
0448   02F9             ; IN ADDRESS MODE
0449   02F9             ;
0450   02F9 2A 3B 3F    HEXKY2	LD	HL,(ADRESS)
0451   02FC CB 25       	SLA	L	;CURRENT ADDRESS
0452   02FE CB 14       	RL	H	;AND DO A 16 BIT
0453   0300 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0454   0302 CB 14       	RL	H	;TO MAKE  ROOM
0455   0304 CB 25       	SLA	L	;FOR THE NEW KEY
0456   0306 CB 14       	RL	H
0457   0308 CB 25       	SLA	L
0458   030A CB 14       	RL	H
0459   030C B5          	OR	L	;IT IN THE LEAST
0460   030D 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0461   030E 22 3B 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0462   0311 C9          	RET
0463   0312             ;-------------
0464   0312             ; CHANGE MODES
0465   0312             ;-------------
0466   0312 CD D7 05    ADDKEY	CALL	BEEP
0467   0315 3A 39 3F    	LD	A,(MODE)
0468   0318 EE 80       	XOR	80H	;TOGGLE MODE
0469   031A 32 39 3F    	LD	(MODE),A
0470   031D C9          	RET
0471   031E             ;------------------
0472   031E             ; INCREMENT ADDRESS
0473   031E             ;------------------
0474   031E CD D7 05    INCKEY	CALL	BEEP
0475   0321 2A 3B 3F    INCKY1	LD	HL,(ADRESS)
0476   0324 23          	INC	HL	;INC ADDRESS
0477   0325 22 3B 3F    	LD	(ADRESS),HL
0478   0328 CD 76 03    	CALL	UPDATE
0479   032B 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0480   032E CD 1D 04    INCKY2	CALL	SCAND
0481   0331 CD 5D 04    	CALL	SCANKEY
0482   0334 CB 6F       	BIT	5,A	;RETURN IF
0483   0336 28 11       	JR	Z,INCKY3	; KEY RELEASED
0484   0338 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0485   033A FE 12       	CP	KEYINC	; '+'
0486   033C 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0487   033E 11 01 00    	LD	DE,0001H
0488   0341 ED 52       	SBC	HL,DE
0489   0343 D2 2E 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0490   0346 C3 21 03    	JP	INCKY1	;INC ADDRESS
0491   0349 C9          INCKY3	RET
0492   034A             ;------------------
0493   034A             ; DECREMENT ADDRESS
0494   034A             ;------------------
0495   034A CD D7 05    DECKEY	CALL	BEEP
0496   034D 2A 3B 3F    DECKY1	LD	HL,(ADRESS)
0497   0350 2B          	DEC	HL	;DEC ADDRESS
0498   0351 22 3B 3F    	LD	(ADRESS),HL
0499   0354 CD 76 03    	CALL	UPDATE
0500   0357 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0501   035A CD 1D 04    DECKY2	CALL	SCAND
0502   035D CD 5D 04    	CALL	SCANKEY
0503   0360 CB 6F       	BIT	5,A	;RETURN IF
0504   0362 28 11       	JR	Z,DECKY3	;KEY RELEASED
0505   0364 E6 1F       	AND	1FH
0506   0366 FE 13       	CP	KEYDEC	; '-'
0507   0368 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0508   036A 11 01 00    	LD	DE,0001H
0509   036D ED 52       	SBC	HL,DE
0510   036F D2 5A 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0511   0372 C3 4D 03    	JP	DECKY1	;INC ADDRESS 
0512   0375 C9          DECKY3	RET
0513   0376             ;-----------------------------------------
0514   0376             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0515   0376             ;-----------------------------------------
0516   0376             ;
0517   0376             ; UPDATE THE DISPLAY BUFFER WITH THE 
0518   0376             ; CURRENT ADDRESS, THE DATA AT THE CURRENT ADDRESS
0519   0376             ; AND SET THE DECIMAL POINTS TO
0520   0376             ; ADDRESS OR DATA MODE
0521   0376             ;
0522   0376             ;	ENTRY : NONE
0523   0376             ;	EXIT :  MODIFIES A
0524   0376             ;
0525   0376 E5          UPDATE	PUSH	HL
0526   0377 C5          	PUSH	BC
0527   0378 2A 3B 3F    	LD	HL,(ADRESS)
0528   037B CD CF 03    	CALL	DISADD	;AND DATA, PUT IN
0529   037E 7E          	LD	A,(HL)
0530   037F CD E4 03    	CALL	DISBYT	;DISPLAY BUFFER
0531   0382             ;
0532   0382             ; IN ADDRESS OR DATA MODE?
0533   0382             ;
0534   0382 21 39 3F    	LD	HL,MODE
0535   0385 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0536   0387 CA 92 03    	JP	Z,ADMODE	;ADDRESS MODE
0537   038A             ;
0538   038A             ; SHOW DATA MODE
0539   038A             ;
0540   038A 21 31 3F    	LD	HL,DISBUF	;SET THE DP'S
0541   038D 06 02       	LD	B,2	;IN THE DATA
0542   038F C3 97 03    	JP	SETDP	;DISPLAY
0543   0392             ;
0544   0392             ; SHOW ADDRESS MODE
0545   0392             ;
0546   0392 21 33 3F    ADMODE	LD	HL,DISBUF+2
0547   0395 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0548   0397             ;
0549   0397             ; SET DECIMAL POINT
0550   0397             ;
0551   0397             ;SET DP IN THE BYTE POINTED TO BY HL
0552   0397             ;
0553   0397             #IFDEF TEC-1F
0554   0397 CB E6       SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0555   0399~            #ELSE
0556   0399~            SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0557   0399             #ENDIF
0558   0399 23          	INC	HL	;POINT TO NEXT BYTE
0559   039A 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0560   039C C1          	POP	BC
0561   039D E1          	POP	HL
0562   039E C9          	RET
0563   039F             ;-----------------------------------------
0564   039F             ; RETURN THE BASE ADDRESS OF RAM VARIABLES
0565   039F             ;-----------------------------------------
0566   039F             ;
0567   039F             ;	ENTRY: NONE
0568   039F             ;	EXIT: HL
0569   039F             ;
0570   039F 21 00 3F    VARRAM	LD	HL,VARBLS
0571   03A2 C9          		RET
0572   03A3             ;-----------
0573   03A3             ; BOARD TYPE
0574   03A3             ;-----------
0575   03A3             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0576   03A3             ; ENTRY = NONE
0577   03A3             ; EXIT: HL -> 'SC-1'    ACCA = 01H
0578   03A3             ;             'TEC-1F'	ACCA = 02H
0579   03A3             ;
0580   03A3 21 B8 03    PCBTYP	LD	HL,TYPESZ
0581   03A6 3A BF 03    	LD	A,(TYPEBF)
0582   03A9 C9          	RET
0583   03AA             ;---------------
0584   03AA             ; VERSION NUMBER
0585   03AA             ;---------------
0586   03AA             ;RETURNS THE SOFTWARE VERSION NUMBER
0587   03AA             ;
0588   03AA             ;	ENTRY : NONE
0589   03AA             ; EXIT : HL -> VERSION NUMBER STRING
0590   03AA             ;        ACCA = BCD VERSION NUMBER D7-D4 = MAJOR, D3-D0 MINOR
0591   03AA             ;
0592   03AA 21 C0 03    VERS	LD	HL,VERSZ
0593   03AD 3A C4 03    	LD	A,(VERBCD)
0594   03B0 C9          	RET
0595   03B1             ;--------------
0596   03B1             ; KEYBOARD TYPE
0597   03B1             ;--------------
0598   03B1             ; RETURNS THE TYPE OF KEYBOARD USED
0599   03B1             ; ENTRY = NONE
0600   03B1             ; EXIT: HL -> KEYBOARD TYPE STRING
0601   03B1             ;       ACCA = 01H MM74C923 HARDWARE ENCODER
0602   03B1             ;       ACCA = 02H SOFTWARE SCANNED
0603   03B1             ;
0604   03B1 21 C5 03    KBDTYP	LD	HL,KYBSZ
0605   03B4 3A CE 03    	LD	A,(KYBDBF)
0606   03B7 C9          	RET
0607   03B8             
0608   03B8             #IFDEF TEC-1F
0609   03B8 54 45 43 2D TYPESZ	.DB	"TEC-1F",0
0609   03BC 31 46 00 
0610   03BF 02          TYPEBF	.DB	02H
0611   03C0~            #ELSE
0612   03C0~            TYPESZ	.DB	"SC-1",0
0613   03C0~            TYPEBF	.DB 01H
0614   03C0             #ENDIF
0615   03C0             
0616   03C0 31 2E 38 00 VERSZ	.DB	"1.8",0
0617   03C4 18          VERBCD	.DB 18H
0618   03C5             
0619   03C5             #IFDEF 74C923
0620   03C5 48 61 72 64 KYBSZ	.DB "Hardware",0
0620   03C9 77 61 72 65 
0620   03CD 00 
0621   03CE 01          KYBDBF	.DB	01H	
0622   03CF~            #ELSE
0623   03CF~            KYBSZ	.DB "Software",0
0624   03CF~            KYBDBF	.DB	02H	
0625   03CF             #ENDIF
0626   03CF             
0627   03CF             ;-------------------------
0628   03CF             ; ADDRESS > DISPLAY BUFFER
0629   03CF             ;-------------------------
0630   03CF             ;CONVERT HL TO SEVEN SEGMENT CODE
0631   03CF             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0632   03CF             ;
0633   03CF             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0634   03CF             ;
0635   03CF             ; EXIT  : NO REGISTERS MODIFIED
0636   03CF             ;
0637   03CF F5          DISADD	PUSH	AF
0638   03D0 E5          	PUSH	HL
0639   03D1 E5          	PUSH	HL
0640   03D2 7C          	LD	A,H
0641   03D3 CD ED 03    	CALL	CONBYT
0642   03D6 22 35 3F    	LD	(DISBUF+4),HL
0643   03D9 E1          	POP	HL
0644   03DA 7D          	LD	A,L
0645   03DB CD ED 03    	CALL	CONBYT
0646   03DE 22 33 3F    	LD	(DISBUF+2),HL
0647   03E1 E1          	POP	HL
0648   03E2 F1          	POP	AF
0649   03E3 C9          	RET
0650   03E4             ;---------------------------
0651   03E4             ; DATA BYTE > DISPLAY BUFFER
0652   03E4             ;---------------------------
0653   03E4             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0654   03E4             ;AND PUT IN DATA DISPLAY BUFFER.
0655   03E4             ;
0656   03E4             ; ENTRY :  A = DATA DISPLAY BYTE
0657   03E4             ;
0658   03E4             ; EXIT  : NO REGISTERS MODIFIED
0659   03E4             ;
0660   03E4 E5          DISBYT	PUSH	HL
0661   03E5 CD ED 03    	CALL	CONBYT
0662   03E8 22 31 3F    	LD	(DISBUF),HL
0663   03EB E1          	POP	HL
0664   03EC C9          	RET
0665   03ED             ;---------------------------------------
0666   03ED             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0667   03ED             ;---------------------------------------
0668   03ED             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0669   03ED             ; FOR DISPLAY
0670   03ED             ; ENTRY : A = BYTE TO BE CONVERTED
0671   03ED             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0672   03ED             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0673   03ED             ;         A = NOT MODIFIED
0674   03ED F5          CONBYT	PUSH	AF
0675   03EE F5          	PUSH	AF
0676   03EF CD FA 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0677   03F2 67          	LD	H,A
0678   03F3 F1          	POP	AF
0679   03F4 CD FE 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0680   03F7 6F          	LD	L,A
0681   03F8 F1          	POP	AF
0682   03F9 C9          	RET
0683   03FA             ;---------------------------------------------
0684   03FA             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0685   03FA             ;---------------------------------------------
0686   03FA             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0687   03FA             ; FOR SEVEN SEGMENT DISPLAYS
0688   03FA             ; CONVHI = CONVERTS HIGH NYBBLE
0689   03FA             ; CONVLO = CONVERTS LO NYBBLE
0690   03FA             ;
0691   03FA             ; ENTRY : A = NYBBLE TO BE CONVERTED
0692   03FA             ; EXIT  : A = SEVEN SEGMENT CODE
0693   03FA             ;
0694   03FA 07          CONVHI	RLCA
0695   03FB 07          	RLCA
0696   03FC 07          	RLCA	;MOVE TO LO NYBBLE
0697   03FD 07          	RLCA	;FOR CONVERSION
0698   03FE C5          CONVLO	PUSH	BC
0699   03FF E5          	PUSH	HL
0700   0400 21 0D 04    	LD	HL,SEGMNT	;USE THE HEX VALUE
0701   0403 E6 0F       	AND	0FH	;TO INDEX TO THE
0702   0405 4F          	LD	C,A	;THE SEVEN SEGMENT
0703   0406 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0704   0408 09          	ADD	HL,BC	;AND RETURN WITH
0705   0409 7E          	LD	A,(HL)	;CODE IN A
0706   040A E1          	POP	HL
0707   040B C1          	POP	BC
0708   040C C9          	RET
0709   040D             ;
0710   040D             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0711   040D             ;
0712   040D             #IFDEF TEC-1F
0713   040D EB 28 CD AD SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0714   0411 2E A7 E7 29 	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0715   0415 EF 2F 6F E6 	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0716   0419 C3 EC C7 47 	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0717   041D~            #ELSE
0718   041D~            SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0719   041D~            	.DB	66H,6DH,7DH,07H	;4,5,6,7
0720   041D~            	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0721   041D~            	.DB	39H,5EH,79H,71H	;C,D,E,F
0722   041D             #ENDIF
0723   041D             ;-------------
0724   041D             ; SCAN DISPLAY
0725   041D             ;-------------
0726   041D             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0727   041D             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0728   041D             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0729   041D             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0730   041D             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0731   041D             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0732   041D             ;
0733   041D             ; ENTRY : NONE
0734   041D             ; EXIT  : NO REGISTERS MODIFIED
0735   041D             ;
0736   041D F5          SCAND   PUSH    AF
0737   041E C5          	PUSH	BC
0738   041F E5          	PUSH	HL	;SAVE REGISTERS
0739   0420 21 36 3F    	LD	HL,DISBUF+5
0740   0423 0E 20       	LD	C,20H
0741   0425 7E          SCAND1	LD	A,(HL)
0742   0426 D3 02       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0743   0428 79          	LD	A,C
0744   0429 F6 40       	OR	40H	;KEEP D6 HIGH
0745   042B D3 01       	OUT	(SCAN),A	;TURN ON DISPLAY
0746   042D 3A 37 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0747   0430 47          	LD	B,A	;TO ADJUST ON TIME
0748   0431 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0749   0433 78          	LD	A,B	;B IS NOW CLEAR, USE
0750   0434 F6 40       	OR	40H	;KEEP D6 HIGH
0751   0436 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0752   0438 3A 38 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0753   043B 47          	LD	B,A	;TO ADJUST OFF TIME
0754   043C 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0755   043E 2B          	DEC	HL	;POINT TO NEXT
0756   043F CB 09       	RRC	C	;ELEMENT IN BUFFER
0757   0441 30 E2       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0758   0443 78          	LD	A,B	;B IS NOW CLEAR, USE
0759   0444 D3 02       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0760   0446 F6 40       	OR	40H	;KEEP D6 HIGH
0761   0448 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0762   044A E1          	POP	HL
0763   044B C1          	POP	BC
0764   044C F1          	POP	AF	;RESTORE REGISTERS
0765   044D C9          	RET
0766   044E             ;---------------------
0767   044E             ; CLEAR DISPLAY BUFFER
0768   044E             ;---------------------
0769   044E E5          CLRBUF	PUSH	HL
0770   044F C5          	PUSH	BC
0771   0450 21 31 3F    	LD	HL,DISBUF
0772   0453 06 06       	LD	B,6
0773   0455 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0774   0457 23          	INC	HL	;LOCATIONS POINTED
0775   0458 10 FB       	DJNZ	CLRBF1	;TO BY HL
0776   045A C1          	POP	BC
0777   045B E1          	POP	HL
0778   045C C9          	RET
0779   045D             ;--------------
0780   045D             ; SCAN KEYBOARD
0781   045D             ;--------------
0782   045D             ; USE THE HARDWARE OR SOFTWARE SCANNED KEYBOARD
0783   045D             ;
0784   045D             ; BIT 7 NOT USED
0785   045D             ; BIT 6 SHIFT KEY. HIGH IF SHIFT KEY PRESSED
0786   045D             ;
0787   045D             ; BIT 5 DATA AVAILABLE FLAG HIGH IF KEY PRESSED
0788   045D             ; BITS 4 -0 KEY CODE
0789   045D             ;
0790   045D             ; SOFTWARE SCANNED KEYBOARD
0791   045D             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0792   045D             ; AND KEYBOARD BUFFER AS ROWS.
0793   045D             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0794   045D             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0795   045D             ;
0796   045D             ; ENTRY : NONE
0797   045D             ; EXIT  : A = 00H IF NO KEY DETECTED
0798   045D             ;         A = DETECTED KEY BITS 0-4
0799   045D             ;             BIT 5 = KEY AVAILABLE
0800   045D             ;             BIT 6 = SHIFT KEY PUSHED
0801   045D C5          SCANKEY	PUSH	BC
0802   045E D5          	PUSH	DE	;SAVE REGISTERS
0803   045F E5          	PUSH	HL
0804   0460             ;
0805   0460             ;USE THE KEYBOARD ENCODER
0806   0460             ;
0807   0460             #IFDEF 74C923
0808   0460             ;
0809   0460             ; TEC-1F - 74C923 KEYBOARD ENCODER
0810   0460             ;
0811   0460             #IFDEF TEC-1F
0812   0460 DB 00       	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0813   0462 E6 7F       	AND	7FH	;STRIP UNUSED BIT
0814   0464 CB 77       	BIT	6,A	;DA LOW?
0815   0466 28 04       	JR	Z,SCANKY1	;HANDLE THE KEY
0816   0468 3E 00       	LD	A,00H
0817   046A 18 14       	JR	SCANKY4	;NO KEY
0818   046C             ;
0819   046C CB 6F       SCANKY1	BIT	5,A	;SHIFT KEY LOW?
0820   046E 28 09       	JR	Z,SCANKY2
0821   0470 CB AF       	RES	5,A
0822   0472 CD 84 04    	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0823   0475 CB B7       	RES	6,A	;RESET SHIFT BIT
0824   0477 18 05       	JR	SCANKY3
0825   0479             ;
0826   0479 CD 84 04    SCANKY2	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0827   047C CB F7       	SET	6,A	;SET SHIFT BIT
0828   047E CB EF       SCANKY3	SET	5,A	;SET DATA AVAILABLE FLAG
0829   0480 E1          SCANKY4	POP	HL
0830   0481 D1          	POP	DE
0831   0482 C1          	POP	BC
0832   0483 C9          	RET
0833   0484~            #ELSE
0834   0484~            ;
0835   0484~            ;SC - 74C923 KEYBOARD ENCODER
0836   0484~            ;
0837   0484~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0838   0484~            	AND	7FH	;STRIP UNUSED BIT
0839   0484~            	BIT	5,A	;DA HIGH?
0840   0484~            	JR	NZ,SCANKY1	;HANDLE THE KEY
0841   0484~            	LD	A,00H
0842   0484~            	JR SCANKY3	;NO KEY
0843   0484~            ;
0844   0484~            SCANKY1	BIT	6,A	;SHIFT KEY LOW?
0845   0484~            	JR	Z,SCANKY2
0846   0484~            	RES	6,A	;RESET SHIFT BIT
0847   0484~            	JR	SCANKY3
0848   0484~            ;
0849   0484~            SCANKY2	SET	6,A	;SET SHIFT BIT
0850   0484~            SCANKY3	POP	HL
0851   0484~            	POP	DE
0852   0484~            	POP	BC
0853   0484~            	RET
0854   0484             #ENDIF
0855   0484~            #ELSE
0856   0484~            ;
0857   0484~            ; SOFTWARE SCAN KEYBOARD 
0858   0484~            ; SAME FOR TEC-1 AND SC
0859   0484~            ;
0860   0484~            SCANKY1	LD	A,00H
0861   0484~            	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0862   0484~            	LD	B,A		;KEY
0863   0484~            	LD	D,A		;COUNT
0864   0484~            	LD	E,01H	;MASK
0865   0484~            SCANKY2	LD	C,08H	;SCAN
0866   0484~            SCANKY3	LD	A,C
0867   0484~            	OR	40H	;KEEP SERIAL OUTPUT BIT HIGH
0868   0484~            	OUT	(SCAN),A	;OUTPUT SCAN
0869   0484~            	NOP
0870   0484~            	NOP
0871   0484~            	NOP
0872   0484~            	IN	A,(KEYBUF)	;READ KEY BUFFER
0873   0484~            	AND	E	;MASK
0874   0484~            	JR	Z,SCANKY4	;KEY NOT DETECTED
0875   0484~            	INC	D
0876   0484~            	LD	L,B		;SAVE KEY
0877   0484~            ;
0878   0484~            ; END OF ROWS?
0879   0484~            ;
0880   0484~            SCANKY4	INC	B	;NEXT KEY
0881   0484~            	SRA	C	;SHIFT SCAN RIGHT
0882   0484~            	JR	NC,SCANKY3	;NEXT ROW
0883   0484~            ;
0884   0484~            ; END OF COLUMNS?
0885   0484~            ;
0886   0484~            	SLA	E	;SHIFT MASK LEFT
0887   0484~            	BIT	5,E	;END OF KEYSCAN?
0888   0484~            	JR	Z,SCANKY2	;NEXT COLUMN
0889   0484~            ;
0890   0484~            ; END OF SCAN
0891   0484~            ;
0892   0484~            	LD	A,D
0893   0484~            	CP	00H
0894   0484~            	JR	Z,SCANKY6	;NO KEY PRESSED
0895   0484~            	CP	01H
0896   0484~            	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0897   0484~            ;
0898   0484~            ; ONE KEY DETECTED
0899   0484~            ;
0900   0484~            	LD	A,40H
0901   0484~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0902   0484~            ;
0903   0484~            ; HANDLE SHIFT KEY FOR TEC-1F SOFTWARE SCANNED KEYBOARD 
0904   0484~            ;
0905   0484~            #IFDEF TEC-1F
0906   0484~            	IN	A,(KEYBUF)
0907   0484~            	BIT 5,A	;SHIFT LOW?
0908   0484~            	JR	Z,SCANKY5
0909   0484~            ;
0910   0484~            	LD	A,L		;RETURN KEY IN A
0911   0484~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0912   0484~            	SET	5,A	;SET DATA AVAILABLE FLAG
0913   0484~            	JR	SCANKY7
0914   0484~            ;
0915   0484~            SCANKY5	LD	A,L		;RETURN KEY IN A
0916   0484~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0917   0484~            	SET	5,A	;SET DATA AVAILABLE FLAG
0918   0484~            	SET	6,A	;SET SHIFT KEY FLAG
0919   0484~            	JR	SCANKY7
0920   0484~            ;
0921   0484~            ; HANDLE SHIFT KEY FOR SC SOFTWARE SCANNED KEYBOARD
0922   0484~            ;
0923   0484~            #ELSE
0924   0484~            	IN	A,(KEYBUF)
0925   0484~            	BIT 6,A	;SHIFT LOW?
0926   0484~            	JR	Z,SCANKY5
0927   0484~            ;
0928   0484~            	LD	A,L		;RETURN KEY IN A
0929   0484~            	SET	5,A	;SET DATA AVAILABLE FLAG
0930   0484~            	JR	SCANKY7
0931   0484~            ;	
0932   0484~            SCANKY5	LD	A,L		;RETURN KEY IN A
0933   0484~            	SET	5,A	;SET DATA AVAILABLE FLAG
0934   0484~            	SET	6,A	;SET SHIFT KEY FLAG
0935   0484~            	JR	SCANKY7
0936   0484~            #ENDIF
0937   0484~            ;
0938   0484~            ; NO KEY
0939   0484~            ;
0940   0484~            SCANKY6	LD	A,40H
0941   0484~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0942   0484~            	XOR	A	;CLEAR A
0943   0484~            SCANKY7	POP	HL
0944   0484~            	POP	DE
0945   0484~            	POP	BC
0946   0484~            	RET
0947   0484             #ENDIF
0948   0484             
0949   0484             #IFDEF TEC-1F 
0950   0484             ;--------------------------------------------------
0951   0484             ; CONVERT TEC KEY CODES TO SOUTHERN CROSS KEY CODES
0952   0484             ;--------------------------------------------------
0953   0484             ; CONVERT THE TEC KEYCODES;
0954   0484             ; 'PLUS' (10H) TO 12H
0955   0484             ; 'MINUS' (11H) TO 13H
0956   0484             ; 'GO' (12H) TO 'FN' 10H
0957   0484             ; 'AD' (13H) TO 11H
0958   0484 E6 1F       KEYCVT	AND	1FH
0959   0486 CB 67       	BIT	4,A		;ONLY KEYS ABOVE 0FH
0960   0488 28 0D       	JR	Z,KEYCVT1
0961   048A FE 12       	CP	12H		;TEC GO KEY?
0962   048C 28 07       	JR	Z,DEC2
0963   048E FE 13       	CP	13H		;TEC AD KEY?
0964   0490 28 03       	JR	Z,DEC2
0965   0492             INC2
0966   0492 3C          	INC	A
0967   0493 3C          	INC	A
0968   0494 C9          	RET
0969   0495             DEC2
0970   0495 3D          	DEC	A
0971   0496 3D          	DEC	A
0972   0497 C9          KEYCVT1	RET
0973   0498             #ENDIF
0974   0498             ;-----------------------------
0975   0498             ; SCAN DISPLAY UNTIL KEY PRESS
0976   0498             ;-----------------------------
0977   0498             ; ENTRY : NONE
0978   0498             ; EXIT  : A = KEY VALUE 00H TO 1FH
0979   0498             ;         FLAG REGISTER MODIFIED
0980   0498             ;
0981   0498 CD 1D 04    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0982   049B CD 5D 04    	CALL	SCANKEY
0983   049E CB 6F       	BIT	5,A
0984   04A0 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0985   04A2 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0986   04A4 C9          	RET
0987   04A5             ;-------------------------------
0988   04A5             ; SCAN DISPLAY UNTIL KEY RELEASE
0989   04A5             ;-------------------------------
0990   04A5             ; ENTRY : NONE
0991   04A5             ; EXIT  : NONE
0992   04A5             ;
0993   04A5 F5          SKEYRL	PUSH	AF
0994   04A6 CD 1D 04    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0995   04A9 CD 5D 04    	CALL	SCANKEY
0996   04AC CB 6F       	BIT	5,A
0997   04AE 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0998   04B0 F1          	POP	AF
0999   04B1 C9          	RET
1000   04B2             ;-------------------
1001   04B2             ; WAIT FOR KEY PRESS
1002   04B2             ;-------------------
1003   04B2             ; ENTRY : NONE
1004   04B2             ; EXIT  : A = KEY VALUE 00H TO 1FH
1005   04B2             ;         FLAG REGISTER MODIFIED
1006   04B2             ;
1007   04B2 CD 5D 04    KEYIN	CALL	SCANKEY
1008   04B5 CB 6F       	BIT	5,A
1009   04B7 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
1010   04B9 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1011   04BB C9          	RET
1012   04BC             ;---------------------
1013   04BC             ; WAIT FOR KEY RELEASE
1014   04BC             ;---------------------
1015   04BC             ; ENTRY : NONE
1016   04BC             ; EXIT  : NONE
1017   04BC             ;
1018   04BC F5          KEYREL	PUSH	AF
1019   04BD CD 5D 04    KEYRL1	CALL	SCANKEY
1020   04C0 CB 6F       	BIT	5,A
1021   04C2 20 F9       	JR	NZ,KEYRL1
1022   04C4 F1          	POP	AF
1023   04C5 C9          	RET
1024   04C6             ;-----------------
1025   04C6             ; KEY MENU HANDLER
1026   04C6             ;-----------------
1027   04C6             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
1028   04C6             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
1029   04C6             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
1030   04C6             ; ENTRY :  A = ELEMENT TO LOOK FOR
1031   04C6             ;         HL = POINTS TO TABLE
1032   04C6             ; EXIT  :  ELEMENT NOT FOUND
1033   04C6             ;           HL HOLDS ADDRESS OF LAST ELEMENT
1034   04C6             ;          ELEMENT FOUND
1035   04C6             ;           CONTROL PASSES TO JUMP ADDRESS WITH
1036   04C6             ;          RETURN ADDRESS OF MENU CALL ON STACK
1037   04C6             ;
1038   04C6 F5          MENU	PUSH	AF
1039   04C7 C5          	PUSH	BC
1040   04C8 D5          	PUSH	DE	;SAVE REGISTERS
1041   04C9 E5          	PUSH	HL	;CALCULATE ADDRESS
1042   04CA 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
1043   04CC 5E          	LD	E,(HL)	;ADDING THE INDEX TO
1044   04CD 23          	INC	HL	;THE ELEMENTS
1045   04CE 19          	ADD	HL,DE	;TO THE ADDR OF THE
1046   04CF 54          	LD	D,H	;TABLE
1047   04D0 5D          	LD	E,L
1048   04D1 E1          	POP	HL
1049   04D2 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
1050   04D3 23          	INC	HL	;POINT TO LIST OF ENTRIES
1051   04D4 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
1052   04D5 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
1053   04D7 23          	INC	HL	;NEXT ENTRY IN LIST
1054   04D8 13          	INC	DE	;NEXT ENTRY IN
1055   04D9 13          	INC	DE	;JUMP TABLE
1056   04DA 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
1057   04DC D1          	POP	DE
1058   04DD C1          	POP	BC
1059   04DE F1          	POP	AF
1060   04DF C9          	RET	;NOT IN TABLE
1061   04E0             ;
1062   04E0             ; FOUND ELEMENT IN THE TABLE
1063   04E0             ; PASS CONTROL TO THE JUMP HANDLER
1064   04E0             ;
1065   04E0 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
1066   04E1 6F          	LD	L,A	;FROM THE TABLE
1067   04E2 13          	INC	DE	;AND JUMP TO
1068   04E3 1A          	LD	A,(DE)	;THE JUMP ADDRESS
1069   04E4 67          	LD	H,A	;FOR THAT ENTRY
1070   04E5 D1          	POP	DE
1071   04E6 C1          	POP	BC
1072   04E7 F1          	POP	AF	;RESTORE REGISTERS
1073   04E8 E9          	JP	(HL)
1074   04E9             ;-------------------
1075   04E9             ; CALCULATE CHECKSUM
1076   04E9             ;-------------------
1077   04E9             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
1078   04E9             ;
1079   04E9             ; ENTRY : HL = START OF BLOCK TO SUM
1080   04E9             ;         DE = END OF BLOCK TO SUM
1081   04E9             ; EXIT  : A =  CHECKSUM
1082   04E9             ;         FLAG REGISTER MODIFIED
1083   04E9             ;
1084   04E9 E5          CHKSUM	PUSH	HL
1085   04EA D5          	PUSH	DE
1086   04EB 13          	INC	DE	;END OF BLOCK+1
1087   04EC AF          	XOR	A	;CLEAR CHECKSUM
1088   04ED 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
1089   04EE 23          	INC	HL	;POINT TO NEXT ELEMENT
1090   04EF A7          	AND	A	;SET CARRY
1091   04F0 E5          	PUSH	HL
1092   04F1 ED 52       	SBC	HL,DE	;SUBTRACT
1093   04F3 E1          	POP	HL
1094   04F4 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
1095   04F6 D1          	POP	DE
1096   04F7 E1          	POP	HL
1097   04F8 C9          	RET
1098   04F9             ;--------------------------
1099   04F9             ; ACCESS BYTE LOOK UP TABLE
1100   04F9             ;--------------------------
1101   04F9             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
1102   04F9             ; UP TABLE
1103   04F9             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1104   04F9             ;         HL = ADDRESS OF LOOK UP TABLE
1105   04F9             ; EXIT : HL = ADDRESS OF ELEMENT A
1106   04F9             ;
1107   04F9 D5          INDEXB	PUSH	DE
1108   04FA 5F          	LD	E,A	;USE DE AS INDEX
1109   04FB 16 00       	LD	D,0	;TO ELEMENT IN TABLE
1110   04FD 19          	ADD	HL,DE	;BY ADDING TO HL
1111   04FE D1          	POP	DE
1112   04FF C9          	RET
1113   0500             ;--------------------------
1114   0500             ; ACCESS WORD LOOK UP TABLE
1115   0500             ;--------------------------
1116   0500             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
1117   0500             ; UP TABLE
1118   0500             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1119   0500             ;         HL = ADDRESS OF LOOK UP TABLE
1120   0500             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
1121   0500             ;
1122   0500 D5          INDEXW	PUSH	DE
1123   0501 5F          	LD	E,A
1124   0502 CB 23       	SLA	E	;MULTIPLY BY TWO
1125   0504 16 00       	LD	D,0
1126   0506 19          	ADD	HL,DE
1127   0507 D1          	POP	DE
1128   0508 C9          	RET
1129   0509             ;-------------------------------
1130   0509             ; GENERATE A QUASI-RANDOM NUMBER
1131   0509             ;-------------------------------
1132   0509             ; GENERATE AN 16 BIT RANDOM NUMBER
1133   0509             ; USING LINEAR CONGRUENTIAL METHOD.
1134   0509             ;     Rn+1 = (aRn+c) MOD m
1135   0509             ; REFRESH REGISTER USED FOR Rn AND c
1136   0509             ;	ENTRY : NONE
1137   0509             ;	EXIT  : HL = RANDOM WORD
1138   0509             ;	NO REGISTERS MODIFIED
1139   0509             ;
1140   0509 F5          RAND	PUSH	AF
1141   050A C5          	PUSH	BC
1142   050B D5          	PUSH	DE	;SAVE REGISTERS
1143   050C             ;
1144   050C             ; CALCULATE aRn
1145   050C             ;
1146   050C ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
1147   050E 5F          	LD	E,A	;(Rn) BY
1148   050F 16 00       	LD	D,0
1149   0511 21 48 05    	LD	HL,0548H	;CONSTANT (a)
1150   0514 CD 21 05    	CALL	MUL16
1151   0517             ;
1152   0517             ; CALCULATE aRn+c
1153   0517             ;
1154   0517 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
1155   0519 06 00       	LD	B,0	;READ OF THE
1156   051B 4F          	LD	C,A	;THE REFRESH
1157   051C 09          	ADD	HL,BC	;REGISTER (c)
1158   051D D1          	POP	DE
1159   051E C1          	POP	BC
1160   051F F1          	POP	AF	;RESTORE REGISTERS
1161   0520 C9          	RET
1162   0521             ;----------------------
1163   0521             ; 16 BIT MULTIPLICATION
1164   0521             ;----------------------
1165   0521             ;16 BIT MULTIPLY
1166   0521             ; ENTRY : HL = MULTIPLICAND (MPD)
1167   0521             ;         DE = MULTIPLIER (MPR)
1168   0521             ; EXIT : HL = RESULT
1169   0521             ;FROM ZAKS 'PROGRAMMING THE Z80'
1170   0521             ;
1171   0521 F5          MUL16	PUSH	AF
1172   0522 C5          	PUSH	BC
1173   0523 4C          	LD	C,H	;MPR(H)
1174   0524 7D          	LD	A,L	;MPR(L)
1175   0525 06 10       	LD	B,16	;BIT COUNTER
1176   0527 21 00 00    	LD	HL,0	;CLEAR RESULT
1177   052A CB 39       MULT	SRL	C	;MPR (H)
1178   052C 1F          	RRA	;MPR (L)
1179   052D 30 01       	JR	NC,MULT1	;TEST CARRY
1180   052F 19          	ADD	HL,DE	;ADD MPD TO RESULT
1181   0530 EB          MULT1	EX	DE,HL
1182   0531 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1183   0532 EB          	EX	DE,HL
1184   0533 10 F5       	DJNZ	MULT	;DONE?
1185   0535 C1          	POP	BC
1186   0536 F1          	POP	AF
1187   0537 C9          	RET
1188   0538             ; MUSIC ROUTINE
1189   0538             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1190   0538             ; MONITOR MON-1
1191   0538             ; BY JOHN HARDY AND KEN STONE
1192   0538             ;
1193   0538             ;----------------
1194   0538             ; MUSIC SEQUENCER
1195   0538             ;----------------
1196   0538             ; SEQUENCES THROUGH A TABLE OF NOTES
1197   0538             ; 1EH = REPEAT TUNE UNTIL RESET
1198   0538             ; 1FH = PLAY ONCE AND RETURN
1199   0538             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1200   0538             ; EXIT : NO REGISTERS MODIFIED
1201   0538 F5          MUSIC	PUSH	AF
1202   0539 C5          	PUSH	BC
1203   053A D5          	PUSH	DE
1204   053B E5          	PUSH	HL	;SAVE REGISTERS
1205   053C E5          	PUSH	HL
1206   053D EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1207   053E             ;
1208   053E             ; PLAY EACH NOTE IN TURN
1209   053E             ;
1210   053E 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1211   053F E6 1F       	AND	1FH	;STRIP UNUSED BITS
1212   0541             ;
1213   0541             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1214   0541             ;
1215   0541 FE 00       	CP	00H
1216   0543 C2 53 05    	JP	NZ,STEP1
1217   0546 01 00 10    	LD	BC,1000H
1218   0549 0B          PAUSE	DEC	BC
1219   054A 78          	LD	A,B
1220   054B B1          	OR	C
1221   054C C2 49 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1222   054F 13          	INC	DE	;POINT TO NEXT ELEMENT
1223   0550 C3 3E 05    	JP	STEP
1224   0553             ;
1225   0553             ; IF ELEMENT IS 1EH REPEAT TUNE
1226   0553             ;
1227   0553 FE 1E       STEP1	CP	1EH
1228   0555 C2 5D 05    	JP	NZ,STEP2
1229   0558 D1          	POP	DE	;GET TABLE ADDRESS BACK
1230   0559 D5          	PUSH	DE	;SAVE IT FOR LATER
1231   055A C3 3E 05    	JP	STEP
1232   055D             ;
1233   055D             ; IF ELEMENT IS 1FH RETURN
1234   055D             ;
1235   055D FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1236   055F C2 68 05    	JP	NZ,STEP3
1237   0562 E1          	POP	HL
1238   0563 E1          	POP	HL
1239   0564 D1          	POP	DE
1240   0565 C1          	POP	BC
1241   0566 F1          	POP	AF
1242   0567 C9          	RET
1243   0568             ;
1244   0568             ;NOW PLAY THE NOTE
1245   0568             ;
1246   0568 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1247   0569 21 84 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1248   056C CD F9 04    	CALL	INDEXB	;GET PERIOD/2
1249   056F 7E          	LD	A,(HL)	;GET ELEMENT
1250   0570 F5          	PUSH	AF	;SAVE FOR LATER
1251   0571 78          	LD	A,B	;GET ELEMENT BACK IN A
1252   0572 21 9C 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1253   0575 CD F9 04    	CALL	INDEXB	;GET DURATION/2
1254   0578 7E          	LD	A,(HL)	;GET ELEMENT
1255   0579 6F          	LD	L,A
1256   057A 26 00       	LD	H,0	;HL = DURATION/2
1257   057C F1          	POP	AF
1258   057D CD B5 05    	CALL	TONE	;DO NOTE ROUTINE
1259   0580 13          	INC	DE
1260   0581 C3 3E 05    	JP	STEP	;STEP TO NEXT ELEMENT
1261   0584             ;
1262   0584             ; PERIOD/2 OF NOTE
1263   0584             ;
1264   0584 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1264   0588 70 67 62 5C 
1265   058C 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1265   0590 45 41 3C 39 
1266   0594 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1266   0598 2A 27 25 23 
1267   059C             ;
1268   059C             ; NOTE DURATION/2
1269   059C             ;
1270   059C 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1270   05A0 1E 20 23 25 
1271   05A4 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1271   05A8 31 33 37 3A 
1272   05AC 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1272   05B0 4D 52 57 5C 
1273   05B4 10          	.DB	10H
1274   05B5             ; TONE ROUTINE
1275   05B5             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1276   05B5             ; MONITOR MON-1
1277   05B5             ; BY JOHN HARDY AND KEN STONE
1278   05B5             ;
1279   05B5             ;--------------
1280   05B5             ; OUTPUT A TONE
1281   05B5             ;--------------
1282   05B5             ;
1283   05B5             ; ENTRY : A = PERIOD/2 OF NOTE
1284   05B5             ;         HL = DURATION/2 OF NOTE
1285   05B5             ; EXIT NO REGISTERS MODIFIED
1286   05B5 F5          TONE	PUSH	AF
1287   05B6 C5          	PUSH	BC
1288   05B7 D5          	PUSH	DE
1289   05B8 E5          	PUSH	HL
1290   05B9 11 01 00    	LD	DE,0001H
1291   05BC 4F          	LD	C,A
1292   05BD 29          	ADD	HL,HL	;DOUBLE DURATION
1293   05BE AF          	XOR	A
1294   05BF EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1295   05C1 F6 40       	OR	40H	;KEEP D6 HIGH
1296   05C3 D3 01       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1297   05C5 41          	LD	B,C
1298   05C6 C5          TONE2	PUSH	BC
1299   05C7 06 02       	LD	B,02H
1300   05C9 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1301   05CB C1          	POP	BC
1302   05CC 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1303   05CE ED 52       	SBC	HL,DE	;END OF NOTE?
1304   05D0 20 ED       	JR	NZ,TONE1	;DO AGAIN
1305   05D2 E1          	POP	HL
1306   05D3 D1          	POP	DE
1307   05D4 C1          	POP	BC
1308   05D5 F1          	POP	AF
1309   05D6 C9          	RET
1310   05D7             ;---------------
1311   05D7             ; KEY ENTRY BEEP
1312   05D7             ;---------------
1313   05D7 E5          BEEP	PUSH	HL
1314   05D8 F5          	PUSH	AF
1315   05D9 21 39 3F    	LD	HL,MODE
1316   05DC CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1317   05DE 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1318   05E0             ;
1319   05E0             ; DO KEYPRESS DELAY
1320   05E0             ;
1321   05E0 D5          	PUSH	DE	;DO A SHORT
1322   05E1 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1323   05E4 2A 23 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1324   05E7 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1325   05E9 30 FC       	JR	NC,BEEP1	;KEY STROKES
1326   05EB D1          	POP	DE
1327   05EC 18 10       	JR	BEEP3
1328   05EE             ;
1329   05EE             ; OUTPUT KEYPRESS TONES
1330   05EE             ;
1331   05EE 3E 24       BEEP2	LD	A,24H
1332   05F0 21 30 00    	LD	HL,0030H
1333   05F3 CD B5 05    	CALL	TONE	;DO FIRST TONE
1334   05F6 3E 0E       	LD	A,0EH
1335   05F8 21 50 00    	LD	HL,0050H
1336   05FB CD B5 05    	CALL	TONE	;DO SECOND TONE
1337   05FE F1          BEEP3	POP	AF
1338   05FF E1          	POP	HL
1339   0600 C9          	RET
1340   0601             ;----------------------------------------
1341   0601             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1342   0601             ;----------------------------------------
1343   0601             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1344   0601             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1345   0601             ; ATTACHED).
1346   0601             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1347   0601             ; AND MODIFY REGISTERS.
1348   0601             ;
1349   0601 E1          SSTEP	POP	HL	;GET HL BACK
1350   0602 F5          	PUSH	AF	;SAVE AF FOR LATER
1351   0603 22 49 3F    	LD	(TMPHL),HL
1352   0606 ED 53 47 3F 	LD	(TMPDE),DE
1353   060A ED 43 45 3F 	LD	(TMPBC),BC
1354   060E DD 22 4B 3F 	LD	(TMPIX),IX
1355   0612 FD 22 4D 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1356   0616 E1          	POP	HL	;GET AF BACK
1357   0617 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
1358   061A E1          	POP	HL	;GET PC RETURN ADDRESS
1359   061B 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
1360   061E ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1361   0622             ;
1362   0622             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1363   0622             ;
1364   0622 CD D7 05    	CALL	BEEP
1365   0625 3A 3F 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1366   0628 E6 07       	AND	7	;MAKE SURE IN LIMITS
1367   062A 32 3F 3F    	LD	(REGPNT),A	;SAVE IT
1368   062D CD 0A 07    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1369   0630 CD A5 04    	CALL	SKEYRL	;WAIT FOR A KEY
1370   0633 CD 98 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1371   0636 21 3F 06    	LD	HL,REGTBL	;HANDLE THE KEY
1372   0639 CD C6 04    	CALL	MENU	;AND UPDATE DISPLAY
1373   063C C3 2D 06    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1374   063F             ;
1375   063F             ; REGISTER DISPLAY KEY TABLE
1376   063F             ;
1377   063F 14          REGTBL	.DB	14H
1378   0640 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1378   0644 04 05 06 07 
1379   0648 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1379   064C 0C 0D 0E 0F 
1380   0650 10 11 12 13 	.DB	10H,11H,12H,13H
1381   0654 8C 06 8C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1381   0658 8C 06 8C 06 
1382   065C 8C 06 8C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1382   0660 8C 06 8C 06 
1383   0664 8C 06 8C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1383   0668 8C 06 8C 06 
1384   066C 8C 06 8C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1384   0670 8C 06 8C 06 
1385   0674             ;
1386   0674             ; MAKE THE GO KEY RETURN TO THE PROGRAM
1387   0674             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
1388   0674             ;
1389   0674             #IFDEF TEC-1F
1390   0674 BD 06 B3 06 	.DW RETPGM,RETMON,INCSTP,DECSTP
1390   0678 DF 06 F4 06 
1391   067C~            #ELSE
1392   067C~            	.DW	RETMON,RETPGM,INCSTP,DECSTP
1393   067C             #ENDIF
1394   067C             ;
1395   067C             ; REGISTER NAME CHARACTERS
1396   067C             ;
1397   067C             #IFDEF TEC-1F
1398   067C C3 4F       REGNAM	.DW	4FC3H
1399   067E 47 6F C3 E6 	.DW	6F47H,0E6C3H,0ECC7H
1399   0682 C7 EC 
1400   0684 C2 66 6E 28 	.DW	66C2H,286EH,28AEH
1400   0688 AE 28 
1401   068A 4F A7       	.DW	0A74FH
1402   068C~            #ELSE
1403   068C~            REGNAM	.DW	7339H
1404   068C~            	.DW	7771H,7C39H,5E79H
1405   068C~            	.DW	7438H,0676H,066EH
1406   068C~            	.DW	6D73H
1407   068C             #ENDIF
1408   068C             ;--------------
1409   068C             ; EDIT REGISTER
1410   068C             ;--------------
1411   068C CD D7 05    REGKEY	CALL	BEEP
1412   068F F5          	PUSH	AF	;SAVE KEY FOR LATER
1413   0690 3A 3F 3F    	LD	A,(REGPNT)
1414   0693             ;
1415   0693             ; EDIT REGISTER
1416   0693             ;
1417   0693 21 41 3F    	LD	HL,TMPPC
1418   0696 CD 00 05    	CALL	INDEXW
1419   0699 4E          	LD	C,(HL)
1420   069A 23          	INC	HL
1421   069B 46          	LD	B,(HL)	;GET REG CONTENTS
1422   069C CB 21       	SLA	C
1423   069E CB 10       	RL	B
1424   06A0 CB 21       	SLA	C
1425   06A2 CB 10       	RL	B
1426   06A4 CB 21       	SLA	C
1427   06A6 CB 10       	RL	B	;SHIFT REGISTER
1428   06A8 CB 21       	SLA	C	;FOUR BITS
1429   06AA CB 10       	RL	B	;LEFT AND
1430   06AC F1          	POP	AF	;PUT THE KEY
1431   06AD B1          	OR	C	;INTO THE LSN
1432   06AE 4F          	LD	C,A	;AND PUT THE
1433   06AF 70          	LD	(HL),B	;REGISTER BACK
1434   06B0 2B          	DEC	HL	;WHERE IT BELONGS
1435   06B1 71          	LD	(HL),C
1436   06B2 C9          	RET
1437   06B3             ;------------------
1438   06B3             ; RETURN TO MONITOR
1439   06B3             ;------------------
1440   06B3 CD D7 05    RETMON	CALL	BEEP
1441   06B6 CD A5 04    	CALL	SKEYRL
1442   06B9 FB          	EI	;ENABLE INTERRUPTS AGAIN
1443   06BA C3 7D 02    	JP	MAIN
1444   06BD             ;------------------
1445   06BD             ; RETURN TO PROGRAM
1446   06BD             ;------------------
1447   06BD ED 7B 4F 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1448   06C1 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
1449   06C4 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1450   06C5 2A 43 3F    	LD	HL,(TMPAF)
1451   06C8 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1452   06C9 FD 2A 4D 3F 	LD	IY,(TMPIY)
1453   06CD DD 2A 4B 3F 	LD	IX,(TMPIX)
1454   06D1 ED 4B 45 3F 	LD	BC,(TMPBC)
1455   06D5 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1456   06D9 F1          	POP	AF	;RESTORE AF
1457   06DA 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
1458   06DD FB          	EI	;ENABLE INTERRUPTS
1459   06DE C9          	RET	;AND RETURN TO PROGRAM
1460   06DF             ;----------------------
1461   06DF             ; DISPLAY NEXT REGISTER
1462   06DF             ;----------------------
1463   06DF CD D7 05    INCSTP	CALL	BEEP
1464   06E2 3A 3F 3F    	LD	A,(REGPNT)
1465   06E5 FE 07       	CP	7	;END OF REG TABLE?
1466   06E7 CA EF 06    	JP	Z,INCSP1
1467   06EA 3C          	INC	A
1468   06EB 32 3F 3F    	LD	(REGPNT),A
1469   06EE C9          	RET
1470   06EF AF          INCSP1	XOR	A
1471   06F0 32 3F 3F    	LD	(REGPNT),A
1472   06F3 C9          	RET
1473   06F4             ;--------------------------
1474   06F4             ; DISPLAY PREVIOUS REGISTER
1475   06F4             ;--------------------------
1476   06F4 CD D7 05    DECSTP	CALL	BEEP
1477   06F7 3A 3F 3F    	LD	A,(REGPNT)
1478   06FA FE 00       	CP	0	;START OF REG TABLE?
1479   06FC CA 04 07    	JP	Z,DECSP1
1480   06FF 3D          	DEC	A
1481   0700 32 3F 3F    	LD	(REGPNT),A
1482   0703 C9          	RET
1483   0704 3E 07       DECSP1	LD	A,7
1484   0706 32 3F 3F    	LD	(REGPNT),A
1485   0709 C9          	RET
1486   070A             ;-----------------
1487   070A             ; DISPLAY REGISTER
1488   070A             ;-----------------
1489   070A 3A 3F 3F    SETREG	LD	A,(REGPNT)
1490   070D 21 41 3F    	LD	HL,TMPPC	;START OF TABLE
1491   0710 CD 00 05    	CALL	INDEXW	;GET ELEMENT ADDRESS
1492   0713 5E          	LD	E,(HL)
1493   0714 23          	INC	HL
1494   0715 56          	LD	D,(HL)
1495   0716 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1496   0717 CD CF 03    	CALL	DISADD
1497   071A             ;
1498   071A             ; DISPLAY REGISTER NAME
1499   071A             ;
1500   071A 21 7C 06    	LD	HL,REGNAM
1501   071D CD 00 05    	CALL	INDEXW
1502   0720 7E          	LD	A,(HL)
1503   0721 32 31 3F    	LD	(DISBUF+0),A
1504   0724 23          	INC	HL
1505   0725 7E          	LD	A,(HL)
1506   0726 32 32 3F    	LD	(DISBUF+1),A
1507   0729 C9          	RET
1508   072A             ;------------------
1509   072A             ; FUNCTION KEY MENU
1510   072A             ;------------------
1511   072A             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1512   072A             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1513   072A             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1514   072A             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1515   072A             ;
1516   072A CD D7 05    FUNKEY	CALL	BEEP
1517   072D 2A 3B 3F    FUNKY1	LD	HL,(ADRESS)
1518   0730 CD CF 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1519   0733             #IFDEF TEC-1F
1520   0733 21 0F AF    	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1521   0736~            #ELSE
1522   0736~            	LD	HL,7154H	;FN
1523   0736             #ENDIF
1524   0736 22 31 3F    	LD	(DISBUF),HL	;DISPLAY FN
1525   0739 CD A5 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1526   073C CD 98 04    FUNKY2	CALL	SKEYIN
1527   073F 2A 15 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1528   0742 CD C6 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1529   0745             ;
1530   0745             ; RETURN TO MAIN
1531   0745             ;
1532   0745 CD D7 05    CANCEL	CALL	BEEP
1533   0748 CD 76 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1534   074B CD A5 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1535   074E C9          	RET
1536   074F             ;
1537   074F             ; FUNCTION MENU KEY TABLE
1538   074F             ;
1539   074F 11          FUNLST	.DB	11H
1540   0750 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1540   0754 04 05 06 07 
1541   0758 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1541   075C 0C 0D 0E 0F 
1542   0760 10          	.DB	10H	;FN KEY
1543   0761 87 07 91 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1543   0765 B0 08 C2 08 
1544   0769 D4 08 2A 09 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1544   076D 68 09 9F 09 
1545   0771 AD 09 BC 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1545   0775 CB 09 DA 09 
1546   0779 74 0A F5 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1546   077D 4E 0C FD 0C 
1547   0781 83 07       	.DW	FUNFUN
1548   0783             ;-----------------------
1549   0783             ; CALL FUNCTION FUNCTION
1550   0783             ;-----------------------
1551   0783 2A 2F 3F    FUNFUN	LD	HL,(FUNJMP)
1552   0786 E9          	JP	(HL)
1553   0787             ;------------------------------------------
1554   0787             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1555   0787             ;------------------------------------------
1556   0787 CD D7 05    GOEXEC	CALL	BEEP
1557   078A CD BC 04    	CALL	KEYREL
1558   078D             ;	POP	HL	;REMOVE EXEC RETURN
1559   078D 2A 3B 3F    	LD	HL,(ADRESS)
1560   0790 E9          	JP	(HL)	;START EXECUCTION
1561   0791             ;------------------------------------
1562   0791             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1563   0791             ;------------------------------------
1564   0791 CD D7 05    INTELFN	CALL	BEEP
1565   0794 CD BC 04    	CALL	KEYREL
1566   0797 CD A0 07    	CALL	INTELH
1567   079A C2 F3 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1568   079D C3 45 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1569   07A0             ;-----------------------
1570   07A0             ; RECEIVE INTEL HEX FILE
1571   07A0             ;-----------------------
1572   07A0 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1573   07A4             ;
1574   07A4             ; WAIT FOR RECORD MARK
1575   07A4             ;
1576   07A4 AF          INTEL1	XOR	A
1577   07A5 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1578   07A8 CD 76 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1579   07AB FE 3A       	CP	':'	;TO BE TRANSMITTED
1580   07AD 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1581   07AF             ;
1582   07AF             ; GET RECORD LENGTH
1583   07AF             ;
1584   07AF CD FC 07    	CALL	GETBYT
1585   07B2 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1586   07B5             ;
1587   07B5             ; GET ADDRESS FIELD
1588   07B5             ;
1589   07B5 CD FC 07    	CALL	GETBYT
1590   07B8 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1591   07BB CD FC 07    	CALL	GETBYT
1592   07BE DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1593   07C1             ;
1594   07C1             ; GET RECORD TYPE
1595   07C1             ;
1596   07C1 CD FC 07    	CALL	GETBYT
1597   07C4 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1598   07C6             ;
1599   07C6             ; READ IN THE DATA
1600   07C6             ;
1601   07C6 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1602   07C9 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1603   07CC DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1604   07CF             
1605   07CF CD FC 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1606   07D2 77          	LD	(HL),A	;STORE DATA BYTE
1607   07D3 23          	INC	HL
1608   07D4 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1609   07D6             ;
1610   07D6             ; GET CHECKSUM AND COMPARE
1611   07D6             ;
1612   07D6 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1613   07D9 ED 44       	NEG		;TWO'S COMPLEMENT
1614   07DB DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1615   07DE CD FC 07    	CALL	GETBYT
1616   07E1 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1617   07E4 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1618   07E7 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1619   07E9 C9          	RET	;NZ=CHECKSUM ERROR
1620   07EA             ;
1621   07EA             ; END OF FILE RECORD
1622   07EA             ;
1623   07EA DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1624   07ED ED 44       	NEG		;TWO'S COMPLEMENT
1625   07EF DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1626   07F2 CD FC 07    	CALL	GETBYT
1627   07F5 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1628   07F8 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1629   07FB C9          	RET	;NZ=CHECKSUM ERROR
1630   07FC             ;--------------------------
1631   07FC             ; GET BYTE FROM SERIAL PORT
1632   07FC             ;--------------------------
1633   07FC C5          GETBYT	PUSH	BC
1634   07FD CD 76 08    	CALL	RXDATA
1635   0800 CB 77       	BIT	6,A
1636   0802 28 02       	JR	Z,GETBT1
1637   0804 C6 09       	ADD	A,09H
1638   0806 E6 0F       GETBT1	AND	0FH
1639   0808 CB 27       	SLA 	A
1640   080A CB 27       	SLA	A
1641   080C CB 27       	SLA	A
1642   080E CB 27       	SLA	A
1643   0810 4F          	LD	C,A
1644   0811             ;
1645   0811             ; GET LOW NYBBLE
1646   0811             ;
1647   0811 CD 76 08    	CALL	RXDATA
1648   0814 CB 77       	BIT	6,A
1649   0816 28 02       	JR	Z,GETBT2
1650   0818 C6 09       	ADD	A,09H
1651   081A E6 0F       GETBT2	AND	0FH
1652   081C B1          	OR	C
1653   081D 47          	LD	B,A
1654   081E DD 86 03    	ADD	A,(IX+3)
1655   0821 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1656   0824 78          	LD	A,B
1657   0825 A7          	AND	A	;CLEAR CARRY
1658   0826 C1          	POP	BC
1659   0827 C9          	RET
1660   0828             ;-------------------------------
1661   0828             ; CONVERT ASCII CHARACTER TO HEX
1662   0828             ;-------------------------------
1663   0828             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1664   0828             ;ENTRY : A= ASCII 0-9,A-F
1665   0828             ;EXIT  : A= HEX 0-F IN LSN
1666   0828             ; A AND F REGISTERS MODIFIED
1667   0828             ;
1668   0828 CB 77       ASCHEX	BIT	6,A
1669   082A 28 02       	JR	Z,ASCHX1
1670   082C C6 09       	ADD	A,09H
1671   082E E6 0F       ASCHX1	AND	0FH
1672   0830 C9          	RET
1673   0831             ;------------------------------------
1674   0831             ; BIT BANG SERIAL PORT INITIALISATION
1675   0831             ;------------------------------------
1676   0831             ; SET THE SERIAL TRANSMIT PIN HIGH SO THE 
1677   0831             ; HOST CAN SEE THAT WE ARE PREPARING TO TRANSMIT
1678   0831             ; 
1679   0831             ; ENTRY : HL = BAUD RATE
1680   0831             ;         HL = 0 USE EXISTING BAUD CONSTANT
1681   0831             ; EXIT  : HL PRESERVED
1682   0831             ;       ; AF MODIFIED
1683   0831             ;
1684   0831 3E 40       SERINI	LD	A,40H
1685   0833 D3 01       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
1686   0835 06 32       	LD	B,50
1687   0837 CD 41 08    	CALL	MSDELAY	;WAIT SO THE HOST SEES TX HIGH
1688   083A 7C          	LD	A,H
1689   083B B5          	OR	L
1690   083C C8          	RET	Z	;HL IS ZERO DON'T UPDATE THE BAUD RATE
1691   083D 22 21 3F    	LD  (BAUD),HL	;UPDATE THE BAUD RATE
1692   0840 C9              RET	
1693   0841             ;------------------
1694   0841             ; MILLISECOND DELAY
1695   0841             ;------------------
1696   0841             ; APPROX. 1 MILLISECOND DELAY
1697   0841             ; 
1698   0841             ; ENTRY : B = 1 TO 255 MILLISECONDS
1699   0841             ; EXIT  : B = 0
1700   0841             ;
1701   0841 C5          MSDELAY	PUSH	BC	;11T
1702   0842 06 E9       	LD	B,233	;7T
1703   0844 00          MSDEL1	NOP	;4T
1704   0845 10 FD       	DJNZ	MSDEL1	;NZ=13T,Z=8T
1705   0847 C1          	POP	BC	;10T
1706   0848 10 F7       	DJNZ	MSDELAY	;NZ=13T,Z=8T
1707   084A C9          	RET	;10T
1708   084B             ;------------------------
1709   084B             ; SERIAL TRANSMIT ROUTINE
1710   084B             ;------------------------
1711   084B             ;TRANSMIT BYTE SERIALLY ON DOUT
1712   084B             ;
1713   084B             ; ENTRY : A = BYTE TO TRANSMIT
1714   084B             ;  EXIT : NO REGISTERS MODIFIED
1715   084B             ;
1716   084B F5          TXDATA	PUSH	AF
1717   084C C5          	PUSH	BC
1718   084D E5          	PUSH	HL
1719   084E 2A 21 3F    	LD	HL,(BAUD)
1720   0851 4F          	LD	C,A
1721   0852             ;
1722   0852             ; TRANSMIT START BIT
1723   0852             ;
1724   0852 AF          	XOR	A
1725   0853 D3 01       	OUT	(SCAN),A
1726   0855 CD A3 08    	CALL	BITIME
1727   0858             ;
1728   0858             ; TRANSMIT DATA
1729   0858             ;
1730   0858 06 08       	LD	B,08H
1731   085A CB 09       	RRC	C
1732   085C CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1733   085E 79          	LD	A,C	;LSB FIRST AND OUTPUT
1734   085F E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1735   0861 D3 01       	OUT	(SCAN),A
1736   0863 CD A3 08    	CALL	BITIME
1737   0866 10 F4       	DJNZ	NXTBIT
1738   0868             ;
1739   0868             ; SEND STOP BITS
1740   0868             ;
1741   0868 3E 40       	LD	A,40H
1742   086A D3 01       	OUT	(SCAN),A
1743   086C CD A3 08    	CALL	BITIME
1744   086F CD A3 08    	CALL	BITIME
1745   0872 E1          	POP	HL
1746   0873 C1          	POP	BC
1747   0874 F1          	POP	AF
1748   0875 C9          	RET
1749   0876             ;-----------------------
1750   0876             ; SERIAL RECEIVE ROUTINE
1751   0876             ;-----------------------
1752   0876             ;RECEIVE SERIAL BYTE FROM DIN
1753   0876             ;
1754   0876             ; ENTRY : NONE
1755   0876             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1756   0876             ;
1757   0876             ; REGISTERS MODIFIED A AND F
1758   0876             ;
1759   0876 C5          RXDATA	PUSH	BC
1760   0877 E5          	PUSH	HL
1761   0878             ;
1762   0878             ; WAIT FOR START BIT
1763   0878             ;
1764   0878 DB 00       RXDAT1	IN	A,(KEYBUF)
1765   087A CB 7F       	BIT	7,A
1766   087C 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1767   087E             ;
1768   087E             ; DETECTED START BIT
1769   087E             ;
1770   087E 2A 21 3F    	LD	HL,(BAUD)
1771   0881 CB 3C       	SRL	H
1772   0883 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1773   0885 CD A3 08    	CALL	BITIME
1774   0888 DB 00       	IN	A,(KEYBUF)
1775   088A CB 7F       	BIT	7,A
1776   088C 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1777   088E             ;
1778   088E             ; DETECTED VALID START BIT,READ IN DATA
1779   088E             ;
1780   088E 06 08       	LD	B,08H
1781   0890 2A 21 3F    RXDAT2	LD	HL,(BAUD)
1782   0893 CD A3 08    	CALL	BITIME	;DELAY ONE BIT TIME
1783   0896 DB 00       	IN	A,(KEYBUF)
1784   0898 CB 17       	RL	A
1785   089A CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1786   089C 10 F2       	DJNZ	RXDAT2
1787   089E 79          	LD	A,C
1788   089F B7          	OR	A	;CLEAR CARRY FLAG
1789   08A0 E1          	POP	HL
1790   08A1 C1          	POP	BC
1791   08A2 C9          	RET
1792   08A3             ;---------------
1793   08A3             ; BIT TIME DELAY
1794   08A3             ;---------------
1795   08A3             ;DELAY FOR ONE SERIAL BIT TIME
1796   08A3             ;ENTRY : HL = DELAY TIME
1797   08A3             ; NO REGISTERS MODIFIED
1798   08A3             ;
1799   08A3 E5          BITIME	PUSH	HL
1800   08A4 D5          	PUSH	DE
1801   08A5 11 01 00    	LD	DE,0001H
1802   08A8 ED 52       BITIM1	SBC	HL,DE
1803   08AA D2 A8 08    	JP	NC,BITIM1
1804   08AD D1          	POP	DE
1805   08AE E1          	POP	HL
1806   08AF C9          	RET
1807   08B0             ;-----------------------------
1808   08B0             ; FUNCTION 2 - ENTER ADDRESS 1
1809   08B0             ;-----------------------------
1810   08B0 CD D7 05    ADDRA	CALL	BEEP
1811   08B3 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1812   08B6 22 29 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1813   08B9             #IFDEF TEC-1F
1814   08B9 21 00 C3    	LD	HL,0C300H	;ADDRESS [
1815   08BC~            #ELSE
1816   08BC~            	LD	HL,3900H	;ADDRESS [
1817   08BC             #ENDIF
1818   08BC CD 1C 09    	CALL	SDELAY
1819   08BF C3 48 07    	JP	CANCL1
1820   08C2             ;-----------------------------
1821   08C2             ; FUNCTION 3 - ENTER ADDRESS 2
1822   08C2             ;-----------------------------
1823   08C2 CD D7 05    ADDRB	CALL	BEEP
1824   08C5 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1825   08C8 22 2B 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1826   08CB             #IFDEF TEC-1F
1827   08CB 21 A9 00    	LD	HL,00A9H	;ADDRESS ]
1828   08CE~            #ELSE
1829   08CE~            	LD	HL,000FH	;ADDRESS ]
1830   08CE             #ENDIF
1831   08CE CD 1C 09    	CALL	SDELAY
1832   08D1 C3 48 07    	JP	CANCL1
1833   08D4             ;------------------------
1834   08D4             ; FUNCTION 4 - BLOCK MOVE
1835   08D4             ;------------------------
1836   08D4 CD D7 05    BLKMVE	CALL	BEEP
1837   08D7 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1838   08DA 22 2D 3F    	LD	(BLKDST),HL	;ADDRESS AS
1839   08DD             #IFDEF TEC-1F
1840   08DD 21 A9 C3    	LD	HL,0C3A9H	;DESTINATION
1841   08E0~            #ELSE
1842   08E0~            	LD	HL,390FH	;DESTINATION
1843   08E0             #ENDIF
1844   08E0 CD 1C 09    	CALL	SDELAY
1845   08E3             ;
1846   08E3             ; CALCULATE NUMBER OF BYTES TO MOVE
1847   08E3             ;
1848   08E3 2A 2B 3F    	LD	HL,(BLKEND)
1849   08E6 ED 5B 29 3F 	LD	DE,(BLKSRT)
1850   08EA A7          	AND	A
1851   08EB ED 52       	SBC	HL,DE
1852   08ED 23          	INC	HL	;MAKE MOVE INCLUSIVE
1853   08EE 22 27 3F    	LD	(COUNT),HL
1854   08F1 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1855   08F3             ;
1856   08F3             ; SHOW ERROR
1857   08F3             ;
1858   08F3             #IFDEF TEC-1F
1859   08F3 21 C7 00    BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1860   08F6~            #ELSE
1861   08F6~            BLKMV1	LD	HL,0079H	;SHOW ERROR E
1862   08F6             #ENDIF
1863   08F6 CD D7 05    BLKMV2	CALL	BEEP
1864   08F9 22 31 3F    	LD	(DISBUF),HL	;AND WAIT
1865   08FC CD 98 04    	CALL	SKEYIN	;FOR KEYPRESS
1866   08FF CD D7 05    	CALL	BEEP
1867   0902 CD A5 04    	CALL	SKEYRL
1868   0905 C3 48 07    	JP	CANCL1
1869   0908             ;
1870   0908             ; MOVE BLOCK
1871   0908             ;
1872   0908 CD 0E 09    BLKMV3	CALL	MOVE
1873   090B C3 48 07    	JP	CANCL1
1874   090E             ;-----------
1875   090E             ; BLOCK MOVE
1876   090E             ;-----------
1877   090E ED 4B 27 3F MOVE	LD	BC,(COUNT)
1878   0912 2A 29 3F    	LD	HL,(BLKSRT)	;START ADDR
1879   0915 ED 5B 2D 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1880   0919 ED B0       	LDIR
1881   091B C9          	RET
1882   091C             ;-------------------------------
1883   091C             ; SCAN DISPLAY UNTIL KEY RELEASE
1884   091C             ;-------------------------------
1885   091C 22 31 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1886   091F 06 FF       	LD	B,255	;IN DATA DISPLAYS
1887   0921 CD 1D 04    SDELY1	CALL	SCAND	;UNTIL KEY
1888   0924 10 FB       	DJNZ SDELY1	;IS RELEASED
1889   0926 CD A5 04    	CALL	SKEYRL
1890   0929 C9          	RET
1891   092A             ;---------------------------
1892   092A             ;FUNCTION 5 - BLOCK CHECKSUM
1893   092A             ;---------------------------
1894   092A CD D7 05    BLKSUM	CALL	BEEP
1895   092D             #IFDEF TEC-1F
1896   092D 21 A7 C3    	LD	HL,0C3A7H	;CS
1897   0930~            #ELSE
1898   0930~            	LD	HL,396DH	;CS
1899   0930             #ENDIF
1900   0930 CD 1C 09    	CALL	SDELAY	;SHOW PROMPT
1901   0933 ED 5B 29 3F 	LD	DE,(BLKSRT)
1902   0937 2A 2B 3F    	LD	HL,(BLKEND)
1903   093A A7          	AND	A
1904   093B ED 52       	SBC	HL,DE
1905   093D 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1906   093E 22 27 3F    	LD	(COUNT),HL
1907   0941 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1908   0943             ;
1909   0943             ; SHOW ERROR
1910   0943             ;
1911   0943 C3 F3 08    	JP	BLKMV1
1912   0946             ;
1913   0946             ; CALCULATE CHECKSUM
1914   0946             ;
1915   0946 2A 29 3F    BLKSM1	LD	HL,(BLKSRT)
1916   0949 ED 5B 2B 3F 	LD	DE,(BLKEND)
1917   094D CD E9 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1918   0950 CD E4 03    	CALL	DISBYT	;DISPLAY
1919   0953 2A 27 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1920   0956 CD CF 03    	CALL	DISADD	;SUMMED AND
1921   0959 CD D7 05    	CALL	BEEP
1922   095C CD 98 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1923   095F CD D7 05    	CALL	BEEP	;A KEY IS PRESSED
1924   0962 CD A5 04    	CALL	SKEYRL
1925   0965 C3 48 07    	JP	CANCL1
1926   0968             ;----------------------------------------
1927   0968             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1928   0968             ;----------------------------------------
1929   0968 CD D7 05    BRANCH	CALL	BEEP
1930   096B             #IFDEF TEC-1F
1931   096B 21 E6 44    	LD	HL,44E6H	;RB
1932   096E~            #ELSE
1933   096E~            	LD	HL,507CH	;RB
1934   096E             #ENDIF
1935   096E CD 1C 09    	CALL	SDELAY
1936   0971 2A 3B 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1937   0974 ED 5B 29 3F 	LD	DE,(BLKSRT)
1938   0978 13          	INC	DE	;POINT TO PC+2
1939   0979 A7          	AND	A
1940   097A ED 52       	SBC	HL,DE	;SUBTRACT
1941   097C             ;
1942   097C             ;TEST HIGH BYTE OF RESULT TO
1943   097C             ;DETERMINE IF BACKWARD BRANCH
1944   097C             ;
1945   097C 7C          	LD	A,H
1946   097D FE FF       	CP	255	;BACKWARD BRANCH?
1947   097F C2 8A 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1948   0982             ;
1949   0982             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1950   0982             ;
1951   0982 7D          	LD	A,L
1952   0983 CB 7F       	BIT	7,A
1953   0985 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1954   0987 C3 F3 08    	JP	BLKMV1	;TOO FAR BACK
1955   098A             ;
1956   098A             ;TEST HIGH BYTE OF RESULT TO
1957   098A             ;DETERMINE IF FORWARD BRANCH
1958   098A             ;
1959   098A FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1960   098C C2 F3 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1961   098F             ;
1962   098F             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1963   098F             ;
1964   098F 7D          	LD	A,L
1965   0990 CB 7F       	BIT	7,A
1966   0992 C2 F3 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1967   0995             ;
1968   0995             ; WITHIN LIMITS PUT IN RAM
1969   0995             ; AND SHOW AS CURRENT ADDRESS
1970   0995             ;
1971   0995 2A 29 3F    BRNCH2	LD	HL,(BLKSRT)
1972   0998 22 3B 3F    	LD	(ADRESS),HL
1973   099B 77          	LD	(HL),A
1974   099C C3 48 07    	JP	CANCL1
1975   099F             ;-----------------------------------------
1976   099F             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1977   099F             ;-----------------------------------------
1978   099F CD D7 05    TRACE	CALL	BEEP
1979   09A2             #IFDEF TEC-1F
1980   09A2 D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1981   09A4 21 46 00    	LD	HL,0046H	;SHOW T
1982   09A7~            #ELSE
1983   09A7~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1984   09A7~            	LD	HL,0070H	;SHOW T
1985   09A7             #ENDIF
1986   09A7 CD 1C 09    	CALL	SDELAY
1987   09AA C3 48 07    	JP	CANCL1
1988   09AD             ;-------------------------
1989   09AD             ; FUNCTION 8 - PLAY TUNE 1
1990   09AD             ;-------------------------
1991   09AD CD D7 05    PLAY1	CALL	BEEP
1992   09B0 CD BC 04    	CALL	KEYREL
1993   09B3 21 E8 09    	LD	HL,TUNE1
1994   09B6 CD 38 05    	CALL	MUSIC
1995   09B9 C3 48 07    	JP	CANCL1
1996   09BC             ;-------------------------
1997   09BC             ; FUNCTION 9 - PLAY TUNE 2
1998   09BC             ;-------------------------
1999   09BC CD D7 05    PLAY2	CALL	BEEP
2000   09BF CD BC 04    	CALL	KEYREL
2001   09C2 21 28 0A    	LD	HL,TUNE2
2002   09C5 CD 38 05    	CALL	MUSIC
2003   09C8 C3 48 07    	JP	CANCL1
2004   09CB             ;------------------------------
2005   09CB             ; FUNCTION A - PLAY TUNE IN RAM
2006   09CB             ;------------------------------
2007   09CB CD D7 05    PLAY3	CALL	BEEP
2008   09CE CD BC 04    	CALL	KEYREL
2009   09D1 2A 3B 3F    	LD	HL,(ADRESS)
2010   09D4 CD 38 05    	CALL	MUSIC
2011   09D7 C3 48 07    	JP	CANCL1
2012   09DA             ;-----------------------------
2013   09DA             ; FUNCTION B - TOGGLE KEY BEEP
2014   09DA             ;-----------------------------
2015   09DA CD D7 05    SWBEEP	CALL	BEEP
2016   09DD 3A 39 3F    	LD	A,(MODE)
2017   09E0 EE 40       	XOR	40H
2018   09E2 32 39 3F    	LD	(MODE),A
2019   09E5 C3 48 07    	JP	CANCL1
2020   09E8             ;
2021   09E8             ; TUNE 1
2022   09E8             ; FROM TALKING ELECTRONICS TEC-1
2023   09E8             ; MONITOR MON-1
2024   09E8             ; BY JOHN HARDY AND KEN STONE
2025   09E8             ;
2026   09E8 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2026   09EC 06 0D 0A 0D 
2027   09F0 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2027   09F4 0F 11 12 0F 
2028   09F8 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2028   09FC 12 0F 0D 0A 
2029   0A00 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
2029   0A04 0F 0A 0D 0F 
2030   0A08 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2030   0A0C 06 0D 0A 0D 
2031   0A10 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2031   0A14 0F 11 12 0F 
2032   0A18 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2032   0A1C 12 0F 0D 0A 
2033   0A20 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
2033   0A24 06 12 00 1E 
2034   0A28             ;
2035   0A28             ; TUNE 2
2036   0A28             ; FROM TALKING ELECTRONICS TEC-1
2037   0A28             ; MONITOR MON-1
2038   0A28             ; BY JOHN HARDY AND KEN STONE
2039   0A28             ;
2040   0A28 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
2040   0A2C 0A 0A 06 06 
2041   0A30 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
2041   0A34 0A 0A 0A 0A 
2042   0A38 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
2042   0A3C 08 0A 0A 0A 
2043   0A40 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
2043   0A44 08 0A 0D 0D 
2044   0A48 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
2044   0A4C 0D 05 08 0B 
2045   0A50 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
2045   0A54 06 0B 0A 08 
2046   0A58 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
2046   0A5C 06 06 0B 0A 
2047   0A60 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
2047   0A64 08 08 0A 0B 
2048   0A68 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
2048   0A6C 06 06 06 06 
2049   0A70 00 00 00 1E 	.DB	00H,00H,00H,1EH
2050   0A74             ;---------------------------
2051   0A74             ; FUNCTION C - SECRET NUMBER
2052   0A74             ;---------------------------
2053   0A74 CD D7 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
2054   0A77 CD BC 04    	CALL	KEYREL	;AND CLEAR DISPLAY
2055   0A7A CD 4E 04    	CALL	CLRBUF	;BUFFER
2056   0A7D DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
2057   0A81             ;
2058   0A81             ; SEPARATE NYBBLES IN RANDOM NUMBER
2059   0A81             ;
2060   0A81 CD 09 05    	CALL	RAND
2061   0A84 DD 75 0B    	LD	(IX+11),L
2062   0A87 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
2063   0A8A DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
2064   0A8D CD E2 0B    	CALL	SPLIT	;NUMBER INTO
2065   0A90 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
2066   0A93 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
2067   0A96 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
2068   0A99 CD E2 0B    	CALL	SPLIT	;GUESS EASIER
2069   0A9C DD 75 06    	LD	(IX+6),L
2070   0A9F DD 74 07    	LD	(IX+7),H
2071   0AA2 AF          	XOR	A
2072   0AA3 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
2073   0AA5 21 00 00    	LD	HL,0
2074   0AA8 DD 75 08    	LD	(IX+8),L
2075   0AAB DD 74 09    	LD	(IX+9),H
2076   0AAE CD CF 03    	CALL	DISADD	;AND DISPLAY GUESS
2077   0AB1             ;
2078   0AB1             ; SCAN THE KEYBOARD
2079   0AB1             ;
2080   0AB1 CD 98 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
2081   0AB4 21 C0 0A    	LD	HL,SECNUM
2082   0AB7 CD C6 04    	CALL	MENU	;EXECUTE KEY HANDLER
2083   0ABA CD A5 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2084   0ABD C3 B1 0A    	JP	SECRT1
2085   0AC0             ;
2086   0AC0             ; SECRET NUMBER KEY TABLE
2087   0AC0             ;
2088   0AC0 12          SECNUM	.DB	12H
2089   0AC1 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
2089   0AC5 04 05 06 07 
2090   0AC9 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
2090   0ACD 0C 0D 0E 0F 
2091   0AD1 10 11       	.DB	10H,11H
2092   0AD3 F7 0A F7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2092   0AD7 F7 0A F7 0A 
2093   0ADB F7 0A F7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2093   0ADF F7 0A F7 0A 
2094   0AE3 F7 0A F7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2094   0AE7 F7 0A F7 0A 
2095   0AEB F7 0A F7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2095   0AEF F7 0A F7 0A 
2096   0AF3             ;
2097   0AF3             ; MAKE THE GO KEY CHECK THE NUMBER
2098   0AF3             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
2099   0AF3             ;
2100   0AF3             #IFDEF TEC-1F
2101   0AF3 27 0B 1E 0B 	.DW	CHKKEY,ENDKEY
2102   0AF7~            #ELSE
2103   0AF7~            	.DW	ENDKEY,CHKKEY
2104   0AF7             #ENDIF
2105   0AF7             ;---------------
2106   0AF7             ; EDIT GUESS KEY
2107   0AF7             ;---------------
2108   0AF7 F5          EDTKEY	PUSH	AF
2109   0AF8 DD 6E 08    	LD	L,(IX+8)
2110   0AFB DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
2111   0AFE CB 25       	SLA	L
2112   0B00 CB 14       	RL	H	;AND DO A 16 BIT
2113   0B02 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
2114   0B04 CB 14       	RL	H	;TO MAKE  ROOM
2115   0B06 CB 25       	SLA	L	;FOR THE NEW KEY
2116   0B08 CB 14       	RL	H
2117   0B0A CB 25       	SLA	L
2118   0B0C CB 14       	RL	H
2119   0B0E F1          	POP	AF
2120   0B0F B5          	OR	L	;IT IN THE LEAST
2121   0B10 6F          	LD	L,A	;SIGNIFICANT NYBBLE
2122   0B11 DD 75 08    	LD	(IX+8),L
2123   0B14 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
2124   0B17 CD CF 03    	CALL	DISADD
2125   0B1A CD D7 05    	CALL	BEEP
2126   0B1D C9          	RET
2127   0B1E             ;----------
2128   0B1E             ; QUIT GAME
2129   0B1E             ;----------
2130   0B1E CD D7 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
2131   0B21 CD BC 04    	CALL	KEYREL	;AND RETURN TO
2132   0B24 C3 7D 02    	JP	MAIN	;MONITOR
2133   0B27             ;---------------------------
2134   0B27             ; SEE IF ITS THE RIGHT GUESS
2135   0B27             ;---------------------------
2136   0B27 CD D7 05    CHKKEY	CALL	BEEP
2137   0B2A ED 57       	LD	A,I
2138   0B2C 3C          	INC	A
2139   0B2D 27          	DAA	;INC BCD NO. OF TRIES
2140   0B2E             ;
2141   0B2E             ; BRIEFLY SHOW GUESS NO.
2142   0B2E             ;
2143   0B2E ED 47       	LD	I,A
2144   0B30 CD E4 03    	CALL	DISBYT
2145   0B33 06 FF       	LD	B,255
2146   0B35 CD 1D 04    CHKKY1	CALL	SCAND
2147   0B38 10 FB       	DJNZ	CHKKY1
2148   0B3A             ;
2149   0B3A             ; SEPARATE GUESS INTO NYBBLES
2150   0B3A             ;
2151   0B3A DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
2152   0B3D CD E2 0B    	CALL	SPLIT	;NUMBER INTO
2153   0B40 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
2154   0B43 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
2155   0B46 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
2156   0B49 CD E2 0B    	CALL	SPLIT	;GUESS EASIER
2157   0B4C DD 75 02    	LD	(IX+2),L
2158   0B4F DD 74 03    	LD	(IX+3),H
2159   0B52             ;
2160   0B52             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
2161   0B52             ;
2162   0B52 AF          	XOR	A
2163   0B53 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
2164   0B56 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
2165   0B59 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
2166   0B5C 06 04       	LD	B,4	;NUMBER OF DIGITS
2167   0B5E 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
2168   0B5F EB          	EX	DE,HL
2169   0B60 BE          	CP	(HL)	;SAME AS GUESS?
2170   0B61 20 10       	JR	NZ,CHKKY4	;NOT SAME
2171   0B63 DD 7E 0A    	LD	A,(IX+10)
2172   0B66 C6 10       	ADD	A,10H	;RIGHT POSITION
2173   0B68 DD 77 0A    	LD	(IX+10),A
2174   0B6B 23          CHKKY3	INC	HL	;POINT TO NEXT
2175   0B6C EB          	EX	DE,HL	;DIGIT POSITION
2176   0B6D 23          	INC	HL	;AND GO
2177   0B6E 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
2178   0B70 C3 8F 0B    	JP	CHKKY8
2179   0B73             ;
2180   0B73             ; CHECK IF NUMBER IS THERE
2181   0B73             ;
2182   0B73 C5          CHKKY4	PUSH	BC
2183   0B74 E5          	PUSH	HL
2184   0B75 06 04       	LD	B,4	;CHECK EACH DIGIT
2185   0B77 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
2186   0B7A BE          CHKKY5	CP	(HL)	;NUMBER IS IN
2187   0B7B 23          	INC	HL	;THE WRONG
2188   0B7C 20 0A       	JR	NZ,CHKKY6	;POSITION
2189   0B7E DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
2190   0B81 3C          	INC	A	;THE RESULT
2191   0B82 DD 77 0A    	LD	(IX+10),A
2192   0B85 C3 8A 0B    	JP	CHKKY7
2193   0B88 10 F0       CHKKY6	DJNZ	CHKKY5
2194   0B8A E1          CHKKY7	POP	HL
2195   0B8B C1          	POP	BC
2196   0B8C C3 6B 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
2197   0B8F             ;
2198   0B8F             ; CHECK IF CORRECT
2199   0B8F             ;
2200   0B8F DD 7E 0A    CHKKY8	LD	A,(IX+10)
2201   0B92 FE 40       	CP	40H	;IS IT CORRECT?
2202   0B94 CA B4 0B    	JP	Z,CHKKY9	;YES!
2203   0B97 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
2204   0B9A CD E4 03    	CALL	DISBYT	;IN DATA DISPLAYS
2205   0B9D ED 57       	LD	A,I	;WAS THAT THE
2206   0B9F FE 20       	CP	20H	;LAST GUESS?
2207   0BA1 C0          	RET	NZ	;NO TRY AGAIN
2208   0BA2             ;
2209   0BA2             ; RAN OUT OF TRYS
2210   0BA2             ;
2211   0BA2 CD 4E 04    	CALL	CLRBUF	;DISPLAY
2212   0BA5 DD 6E 0B    	LD	L,(IX+11)
2213   0BA8 DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
2214   0BAB CD CF 03    	CALL	DISADD	;AND PLAY
2215   0BAE 21 DB 0B    	LD	HL,LOSE	;THE LOSE
2216   0BB1 C3 C2 0B    	JP	CHKKYA	;MUSIC
2217   0BB4             ;
2218   0BB4             ; GOT THE RIGHT ANSWER
2219   0BB4             ;
2220   0BB4 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2221   0BB6 CD E4 03    	CALL	DISBYT	;AND PLAY THE WIN
2222   0BB9 DD 6E 0B    	LD	L,(IX+11)
2223   0BBC DD 66 0C    	LD	H,(IX+12)
2224   0BBF 21 D2 0B    	LD	HL,WIN	;MUSIC
2225   0BC2             ;
2226   0BC2             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2227   0BC2             ;
2228   0BC2 CD 38 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2229   0BC5 CD 98 04    	CALL	SKEYIN	;WAIT FOR A KEY
2230   0BC8 CD D7 05    	CALL	BEEP
2231   0BCB CD A5 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2232   0BCE E1          	POP	HL	;AND RESTART THE GAME
2233   0BCF C3 74 0A    	JP	SECRET
2234   0BD2             ;
2235   0BD2             ; WIN AND LOSE MUSIC
2236   0BD2             ; FROM TALKING ELECTRONICS TEC-1
2237   0BD2             ; MONITOR MON-1
2238   0BD2             ; BY JOHN HARDY AND KEN STONE
2239   0BD2             ;
2240   0BD2 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2240   0BD6 17 12 14 10 
2240   0BDA 1F 
2241   0BDB 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2241   0BDF 01 11 1F 
2242   0BE2             ;-------------------------------
2243   0BE2             ; SEPARATE BYTE INTO TWO NYBBLES
2244   0BE2             ;-------------------------------
2245   0BE2             ;SEPARATES A BYTE INTO TWO
2246   0BE2             ;RIGHT JUSTIFIED NYBBLES
2247   0BE2             ; ENTRY : A = BYTE TO BE SEPARATED
2248   0BE2             ; EXIT  : H = MSN
2249   0BE2             ;         L = LSN
2250   0BE2             ;
2251   0BE2 F5          SPLIT	PUSH	AF
2252   0BE3 C5          	PUSH	BC
2253   0BE4 47          	LD	B,A	;SAVE BYTE
2254   0BE5 E6 0F       	AND	0FH	;STRIP BITS LSN
2255   0BE7 6F          	LD	L,A	;RETURN LSN IN L
2256   0BE8 78          	LD	A,B
2257   0BE9 CB 3F       	SRL	A
2258   0BEB CB 3F       	SRL	A
2259   0BED CB 3F       	SRL	A	;MOVE MSN
2260   0BEF CB 3F       	SRL	A	;INTO LSN
2261   0BF1 67          	LD	H,A	;RETURN MSN IN H
2262   0BF2 C1          	POP	BC
2263   0BF3 F1          	POP	AF
2264   0BF4 C9          	RET
2265   0BF5             ;-----------------------------------
2266   0BF5             ; FUNCTION D - RELAY BOARD SEQUENCER
2267   0BF5             ;-----------------------------------
2268   0BF5 CD D7 05    RELSQR	CALL	BEEP
2269   0BF8 CD BC 04    	CALL	KEYREL
2270   0BFB 21 04 0C    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2271   0BFE CD 0A 0C    	CALL	RLSTEP
2272   0C01 C3 48 07    	JP	CANCL1
2273   0C04             ;--------------
2274   0C04             ; TEST SEQUENCE
2275   0C04             ;--------------
2276   0C04 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2276   0C08 00 FF 
2277   0C0A             ;----------------
2278   0C0A             ; RELAY SEQUENCER
2279   0C0A             ;----------------
2280   0C0A             ; SEQUENCES RELAYS ON RELAY BOARD
2281   0C0A             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2282   0C0A             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2283   0C0A             ; OR REPEAT.
2284   0C0A             ;  TABLE:
2285   0C0A             ;  <BYTE1>,<BYTE2>
2286   0C0A             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2287   0C0A             ;  BYTE2 = FF - REPEAT
2288   0C0A             ;          00 - FINISHED
2289   0C0A             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2290   0C0A             ;  EXIT : NONE MODIFIED
2291   0C0A             ;
2292   0C0A F5          RLSTEP	PUSH	AF
2293   0C0B C5          	PUSH	BC
2294   0C0C D5          	PUSH	DE
2295   0C0D E5          	PUSH	HL	;SAVE REGISTERS
2296   0C0E E5          	PUSH	HL
2297   0C0F EB          	EX	DE,HL	;GET ADDRESS OF DATA
2298   0C10 1A          RELSR1	LD	A,(DE)
2299   0C11 4F          	LD	C,A	;GET OUTPUT DATA
2300   0C12 13          	INC	DE
2301   0C13 1A          	LD	A,(DE)	;GET TIME DELAY
2302   0C14 FE 00       	CP	0
2303   0C16 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2304   0C18 FE FF       	CP	255
2305   0C1A 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2306   0C1C 47          	LD	B,A
2307   0C1D 79          	LD	A,C
2308   0C1E             #IFDEF TEC-1F
2309   0C1E D3 03       	OUT	(PORT3),A	;STROBE
2310   0C20~            #ELSE
2311   0C20~            	OUT	(IO1),A
2312   0C20             #ENDIF
2313   0C20 13          	INC	DE
2314   0C21 CD 38 0C    RELSR2	CALL	DELONE	;1 SEC DELAY
2315   0C24 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2316   0C26 C3 10 0C    	JP	RELSR1
2317   0C29             ;
2318   0C29             ; REPEAT
2319   0C29             ;
2320   0C29 D1          RELSR3	POP	DE	;GET START ADDRESS
2321   0C2A D5          	PUSH	DE	;SAVE FOR LATER
2322   0C2B C3 10 0C    	JP	RELSR1
2323   0C2E             ;
2324   0C2E             ; FINISHED
2325   0C2E             ;
2326   0C2E 3E 00       RELSR4	LD	A,00H
2327   0C30             #IFDEF TEC-1F
2328   0C30 D3 03       	OUT	(PORT3),A	;STROBE
2329   0C32~            #ELSE
2330   0C32~            	OUT	(IO1),A	;CLEAR OUTPUT REG
2331   0C32             #ENDIF
2332   0C32 E1          	POP	HL
2333   0C33 E1          	POP	HL
2334   0C34 D1          	POP	DE
2335   0C35 C1          	POP	BC
2336   0C36 F1          	POP	AF
2337   0C37 C9          	RET
2338   0C38             ;-----------------
2339   0C38             ; ONE SECOND DELAY
2340   0C38             ;-----------------
2341   0C38             ;
2342   0C38             ; ENTRY : NONE
2343   0C38             ; EXIT : FLAG REGISTER MODIFIED
2344   0C38             ;
2345   0C38 C5          DELONE	PUSH	BC
2346   0C39 D5          	PUSH	DE
2347   0C3A E5          	PUSH	HL
2348   0C3B 11 01 00    	LD	DE,0001H
2349   0C3E 21 70 08    	LD	HL,0870H
2350   0C41 06 92       DELON1	LD	B,92H
2351   0C43 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2352   0C45 ED 52       	SBC	HL,DE
2353   0C47 D2 41 0C    	JP	NC,DELON1	;OUTER LOOP
2354   0C4A E1          	POP	HL
2355   0C4B D1          	POP	DE
2356   0C4C C1          	POP	BC
2357   0C4D C9          	RET
2358   0C4E             ;--------------------------
2359   0C4E             ; FUNCTION E - KALEIDOSCOPE
2360   0C4E             ;--------------------------
2361   0C4E CD D7 05    SCOPE	CALL	BEEP
2362   0C51 CD BC 04    	CALL	KEYREL
2363   0C54 CD 09 05    	CALL	RAND	;GENERATE RANDOM
2364   0C57 EB          	EX	DE,HL
2365   0C58 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2366   0C5B 7B          	LD	A,E	;THE FIRST QUADRANT
2367   0C5C CD CD 0C    	CALL	SEED	;WITH A RANDOM BIT
2368   0C5F 7A          	LD	A,D	;PATTERN
2369   0C60 CD CD 0C    	CALL	SEED
2370   0C63             ;
2371   0C63             ; GENERATE MIRROR IMAGES
2372   0C63             ;
2373   0C63 06 04       SCOPE2	LD	B,04H
2374   0C65 21 00 3E    	LD	HL,BUFFER
2375   0C68 11 07 3E    	LD	DE,BUFFER+7
2376   0C6B 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2377   0C6C 12          	LD	(DE),A	;QUADRANT INTO
2378   0C6D 23          	INC	HL	;THE FOURTH
2379   0C6E 1B          	DEC	DE	;QUADRANT
2380   0C6F 10 FA       	DJNZ	SCOPE3
2381   0C71             ;
2382   0C71             ; MIRROR ACROSS CENTRE OF DISPLAY
2383   0C71             ;
2384   0C71 06 08       	LD	B,8	;MIRROR THE FIRST
2385   0C73 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2386   0C76 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2387   0C77 E6 0F       	AND	0FH	;OF THE DISPLAY
2388   0C79 77          	LD	(HL),A	;INTO THE SECOND
2389   0C7A CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2390   0C7C CA 81 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2391   0C7F CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2392   0C81 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2393   0C83 CA 88 0C    	JP	Z,SCOPE6	;CORRESPONDING
2394   0C86 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2395   0C88 CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2396   0C8A CA 8F 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2397   0C8D CB EE       	SET	5,(HL)	;DO THIS FOR
2398   0C8F CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2399   0C91 CA 96 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2400   0C94 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2401   0C96 23          SCOPE8	INC	HL
2402   0C97 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2403   0C99             ;
2404   0C99             ; DISPLAY RANDOM BIT PATTERN
2405   0C99             ;
2406   0C99 11 01 00    	LD	DE,0001H	;SET UP DELAY
2407   0C9C 21 00 02    	LD	HL,0200H
2408   0C9F E5          SCOPE9	PUSH	HL
2409   0CA0 21 00 3E    	LD	HL,BUFFER
2410   0CA3 CD DC 0C    	CALL	SKATE	;SCAN 8X8
2411   0CA6 E1          	POP	HL
2412   0CA7 ED 52       	SBC	HL,DE
2413   0CA9 C2 9F 0C    	JP	NZ,SCOPE9
2414   0CAC             ;
2415   0CAC             ; MANIPULATE BITS FOR NEXT IMAGE
2416   0CAC             ;
2417   0CAC 21 00 3E    SCOPEA	LD	HL,BUFFER
2418   0CAF 3E 05       	LD	A,5
2419   0CB1 86          	ADD	A,(HL)
2420   0CB2 E6 0F       	AND	0FH
2421   0CB4 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2422   0CB5 23          	INC	HL
2423   0CB6 3E 03       	LD	A,03H
2424   0CB8 86          	ADD	A,(HL)
2425   0CB9 E6 0F       	AND	0FH
2426   0CBB 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2427   0CBC 23          	INC	HL
2428   0CBD 3E 01       	LD	A,01H
2429   0CBF 86          	ADD	A,(HL)
2430   0CC0 E6 0F       	AND	0FH
2431   0CC2 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2432   0CC3 23          	INC	HL
2433   0CC4 3E 07       	LD	A,07H
2434   0CC6 86          	ADD	A,(HL)
2435   0CC7 E6 0F       	AND	0FH
2436   0CC9 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2437   0CCA C3 63 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2438   0CCD             ;
2439   0CCD             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2440   0CCD             ;
2441   0CCD 47          SEED	LD	B,A	;PUT THE
2442   0CCE E6 0F       	AND	0FH	;RANDOM NUMBER
2443   0CD0 77          	LD	(HL),A	;INTO THE
2444   0CD1 23          	INC	HL	;FIRST QUADRANT
2445   0CD2 78          	LD	A,B	;OF THE
2446   0CD3 E6 F0       	AND	240	;DISPLAY
2447   0CD5 1F          	RRA
2448   0CD6 1F          	RRA
2449   0CD7 1F          	RRA
2450   0CD8 1F          	RRA
2451   0CD9 77          	LD	(HL),A
2452   0CDA 23          	INC	HL
2453   0CDB C9          	RET
2454   0CDC             ;-----------------
2455   0CDC             ; SCAN 8X8 DISPLAY
2456   0CDC             ;-----------------
2457   0CDC             ;PUT THE 8 RAM LOCATIONS POINTED TO
2458   0CDC             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2459   0CDC             ;ON TOP ROW.
2460   0CDC             ;  ROUTINE PERIOD IS 500uS
2461   0CDC             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2462   0CDC             ;
2463   0CDC             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2464   0CDC             ;	EXIT : NO REGISTERS MODIFIED
2465   0CDC             ;
2466   0CDC F5          SKATE	PUSH	AF
2467   0CDD C5          	PUSH	BC
2468   0CDE E5          	PUSH	HL	;SAVE REGISTERS
2469   0CDF 0E 80       	LD	C,80H
2470   0CE1 7E          SKATE1	LD	A,(HL)
2471   0CE2             #IFDEF TEC-1F
2472   0CE2 D3 03       	OUT	(PORT3),A	;OUTPUT X
2473   0CE4~            #ELSE
2474   0CE4~            	OUT	(IO0),A	;OUTPUT X
2475   0CE4             #ENDIF
2476   0CE4 79          	LD	A,C
2477   0CE5             #IFDEF TEC-1F
2478   0CE5 D3 04       	OUT	(PORT4),A	;OUTPUT Y
2479   0CE7~            #ELSE
2480   0CE7~            	OUT	(IO2),A	;OUTPUT Y
2481   0CE7             #ENDIF
2482   0CE7 06 02       	LD	B,02H
2483   0CE9 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2484   0CEB AF          	XOR	A
2485   0CEC             #IFDEF TEC-1F
2486   0CEC D3 03       	OUT	(PORT3),A
2487   0CEE D3 04       	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2488   0CF0~            #ELSE
2489   0CF0~            	OUT	(IO0),A
2490   0CF0~            	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2491   0CF0             #ENDIF
2492   0CF0 06 08       	LD	B,08H
2493   0CF2 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2494   0CF4 23          	INC	HL
2495   0CF5 CB 09       	RRC	C
2496   0CF7 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2497   0CF9 E1          	POP	HL
2498   0CFA C1          	POP	BC
2499   0CFB F1          	POP	AF
2500   0CFC C9          	RET
2501   0CFD             ;----------------------------
2502   0CFD             ; FUNCTION F - CLOCK CALENDAR
2503   0CFD             ;----------------------------
2504   0CFD CD D7 05    TIME	CALL	BEEP
2505   0D00 CD BC 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2506   0D03 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2507   0D07 3A 37 3F    	LD	A,(ONTIM)
2508   0D0A DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2509   0D0D 3E 60       	LD	A,60H
2510   0D0F 32 37 3F    	LD	(ONTIM),A	;USE NEW DELAY
2511   0D12 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2512   0D15             ;
2513   0D15             ; DISPLAY TIME,CHECK FOR KEY
2514   0D15             ;
2515   0D15 CD 6B 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2516   0D18 CD 55 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2517   0D1B CD 1D 04    	CALL	SCAND
2518   0D1E CD 5D 04    	CALL	SCANKEY
2519   0D21 CB 6F       	BIT	5,A
2520   0D23 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2521   0D25 E6 1F       	AND	1FH
2522   0D27 21 2F 0D    	LD	HL,TIMKEY
2523   0D2A CD C6 04    	CALL	MENU
2524   0D2D 18 E6       	JR	TIME1
2525   0D2F             
2526   0D2F 04          TIMKEY	.DB	4
2527   0D30 10 11 12 13 	.DB	10H,11H,12H,13H
2528   0D34 3C 0D CD 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2528   0D38 46 0D 46 0D 
2529   0D3C             ;--------------------
2530   0D3C             ; EXIT CLOCK CALENDAR
2531   0D3C             ;--------------------
2532   0D3C E1          CLKEXT	POP	HL	;REMOVE RETURN
2533   0D3D DD 7E 00    	LD	A,(IX+0)
2534   0D40 32 37 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2535   0D43 C3 45 07    	JP	CANCEL
2536   0D46             ;--------------------
2537   0D46             ; TOGGLE DISPLAY MODE
2538   0D46             ;--------------------
2539   0D46 CD D7 05    CALKEY	CALL	BEEP
2540   0D49 CD BC 04    	CALL	KEYREL
2541   0D4C DD 7E 01    	LD	A,(IX+1)
2542   0D4F EE 80       	XOR	80H	;TOGGLE DISPLAY
2543   0D51 DD 77 01    	LD	(IX+1),A
2544   0D54 C9          	RET
2545   0D55             ;----------------------
2546   0D55             ; UPDATE DISPLAY BUFFER
2547   0D55             ;----------------------
2548   0D55 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2549   0D59 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2550   0D5B             ;
2551   0D5B             ; TIME DISPLAY
2552   0D5B             ;
2553   0D5B 3A 1A 3F    UPDBF1	LD	A,(SWREG1)
2554   0D5E CD ED 03    	CALL	CONBYT
2555   0D61             #IFDEF	TEC-1F
2556   0D61 CB E5       	SET	4,L
2557   0D63~            #ELSE
2558   0D63~            	SET	7,L	;SET DECIMAL POINT
2559   0D63             #ENDIF
2560   0D63 22 31 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2561   0D66 3A 1B 3F    	LD	A,(SWREG2)
2562   0D69 CD ED 03    	CALL	CONBYT
2563   0D6C             #IFDEF	TEC-1F
2564   0D6C CB E5       	SET	4,L
2565   0D6E~            #ELSE
2566   0D6E~            	SET	7,L	;SET DECIMAL POINT
2567   0D6E             #ENDIF	
2568   0D6E 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2569   0D71 3A 1C 3F    	LD	A,(SWREG3)
2570   0D74 CD ED 03    	CALL	CONBYT
2571   0D77             #IFDEF	TEC-1F
2572   0D77 CB E5       	SET	4,L
2573   0D79~            #ELSE
2574   0D79~            	SET	7,L	;SET DECIMAL POINT
2575   0D79             #ENDIF
2576   0D79 22 35 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2577   0D7C C9          	RET
2578   0D7D             ;
2579   0D7D             ; CALENDAR DISPLAY
2580   0D7D             ;
2581   0D7D 3A 20 3F    UPDBF2	LD	A,(SWREG7)
2582   0D80 CD ED 03    	CALL	CONBYT
2583   0D83 22 31 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2584   0D86             ;
2585   0D86             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2586   0D86             ;
2587   0D86 21 17 3F    	LD	HL,CALMDE
2588   0D89 CB 7E       	BIT	7,(HL)
2589   0D8B 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2590   0D8D             ;
2591   0D8D             ; DD/MM/YY MODE
2592   0D8D             ;
2593   0D8D 3A 1F 3F    	LD	A,(SWREG6)
2594   0D90 CD ED 03    	CALL	CONBYT
2595   0D93 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2596   0D96 3A 1E 3F    	LD	A,(SWREG5)
2597   0D99 CD ED 03    	CALL	CONBYT
2598   0D9C 22 35 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2599   0D9F 18 12       	JR	UPDBF4
2600   0DA1             ;
2601   0DA1             ; MM/DD/YY MODE
2602   0DA1             ;
2603   0DA1 3A 1F 3F    UPDBF3	LD	A,(SWREG6)
2604   0DA4 CD ED 03    	CALL	CONBYT
2605   0DA7 22 35 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2606   0DAA 3A 1E 3F    	LD	A,(SWREG5)
2607   0DAD CD ED 03    	CALL	CONBYT
2608   0DB0 22 33 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2609   0DB3             ;
2610   0DB3             ; SHOW DAY
2611   0DB3             ;
2612   0DB3 3A 1D 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2613   0DB6 E6 07       	AND	07H
2614   0DB8 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2615   0DBA FE 07       	CP	07H
2616   0DBC 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2617   0DBE 2F          	CPL	;WORK OUT
2618   0DBF D6 01       	SUB	01H	;WHICH DECIMAL POINT
2619   0DC1 E6 07       	AND	07H	;TO LIGHT
2620   0DC3 21 31 3F    	LD	HL,DISBUF	;ADDING THE DAY
2621   0DC6 06 00       	LD	B,00H	;TO A DISPLAY
2622   0DC8 4F          	LD	C,A	;BUFFER INDEX
2623   0DC9 09          	ADD	HL,BC	;AND SETTING THE
2624   0DCA             #IFDEF	TEC-1F
2625   0DCA CB E6       	SET	4,(HL)
2626   0DCC~            #ELSE
2627   0DCC~            	SET	7,(HL)	;DECIMAL POINT
2628   0DCC             #ENDIF	
2629   0DCC C9          UPDBF5	RET	;IN THAT DISPLAY
2630   0DCD             ;--------------
2631   0DCD             ; SET TIME/DATE
2632   0DCD             ;--------------
2633   0DCD CD D7 05    SETCLK	CALL	BEEP
2634   0DD0 CD BC 04    	CALL	KEYREL
2635   0DD3             ;
2636   0DD3             ; EDIT THE DISPLAY BUFFER
2637   0DD3             ;
2638   0DD3 CD 55 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2639   0DD6 CD 98 04    	CALL	SKEYIN
2640   0DD9 CD BC 04    	CALL	KEYREL
2641   0DDC FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2642   0DDE C8          	RET	Z
2643   0DDF FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2644   0DE1 28 6E       	JR	Z,SETCK8
2645   0DE3 FE 12       	CP	12H
2646   0DE5 28 3D       	JR	Z,SETCK4	;PLUS KEY
2647   0DE7 FE 13       	CP	13H
2648   0DE9 28 4F       	JR	Z,SETCK6	;MINUS KEY
2649   0DEB FE 0A       	CP	0AH	;NO A-F KEYS
2650   0DED 30 E4       	JR	NC,SETCK1
2651   0DEF             ;
2652   0DEF             ; IS IT SET CLOCK OR SET CALENDAR?
2653   0DEF             ;
2654   0DEF DD CB 01 7E 	BIT	7,(IX+1)
2655   0DF3 20 0D       	JR	NZ,SETCK2
2656   0DF5             ;
2657   0DF5             ; SET CLOCK DISPLAY
2658   0DF5             ;
2659   0DF5 21 1A 3F    	LD	HL,SWREG1
2660   0DF8 ED 6F       	RLD	;MOVE THE NEW KEY
2661   0DFA 23          	INC	HL	;INTO THE CLOCK BUFFER
2662   0DFB ED 6F       	RLD
2663   0DFD 23          	INC	HL
2664   0DFE ED 6F       	RLD
2665   0E00 18 D1       	JR	SETCK1
2666   0E02             ;
2667   0E02             ; SET CALENDAR DISPLAY
2668   0E02             ;
2669   0E02 21 17 3F    SETCK2	LD	HL,CALMDE
2670   0E05 CB 7E       	BIT	7,(HL)
2671   0E07 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2672   0E09             ;
2673   0E09             ; SET CALENDAR AS DD/MM/YY
2674   0E09             ;
2675   0E09 21 20 3F    	LD	HL,SWREG7
2676   0E0C ED 6F       	RLD	;MOVE THE NEW KEY
2677   0E0E 2B          	DEC	HL	;INTO THE CAL BUFFER
2678   0E0F ED 6F       	RLD
2679   0E11 2B          	DEC	HL
2680   0E12 ED 6F       	RLD
2681   0E14 18 BD       	JR	SETCK1
2682   0E16             ;
2683   0E16             ; SET CALENDAR AS MM/DD/YY
2684   0E16             ;
2685   0E16 21 20 3F    SETCK3	LD	HL,SWREG7
2686   0E19 ED 6F       	RLD	;MOVE THE NEW KEY
2687   0E1B 2B          	DEC	HL	;INTO THE CAL BUFFER
2688   0E1C 2B          	DEC	HL
2689   0E1D ED 6F       	RLD
2690   0E1F 23          	INC	HL
2691   0E20 ED 6F       	RLD
2692   0E22 18 AF       	JR	SETCK1
2693   0E24             ;
2694   0E24             ; INC DAY
2695   0E24             ;
2696   0E24 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2697   0E28 28 A9       	JR	Z,SETCK1
2698   0E2A 3A 1D 3F    	LD	A,(SWREG4)
2699   0E2D FE 07       	CP	07H	;IS THE DAY SUNDAY?
2700   0E2F 20 02       	JR	NZ,SETCK5
2701   0E31 3E 00       	LD	A,00H	;SET MONDAY
2702   0E33 3C          SETCK5	INC	A	;DAY=DAY+1
2703   0E34 32 1D 3F    	LD	(SWREG4),A
2704   0E37 C3 D3 0D    	JP	SETCK1
2705   0E3A             ;
2706   0E3A             ; DEC DAY
2707   0E3A             ;
2708   0E3A DD CB 01 7E SETCK6	BIT	7,(IX+1)
2709   0E3E CA D3 0D    	JP	Z,SETCK1
2710   0E41 3A 1D 3F    	LD	A,(SWREG4)
2711   0E44 FE 01       	CP	01H	;IS THE DAY MONDAY?
2712   0E46 20 02       	JR	NZ,SETCK7
2713   0E48 3E 08       	LD	A,08H	;SET SUNDAY
2714   0E4A 3D          SETCK7	DEC	A	;DAY=DAY-1
2715   0E4B 32 1D 3F    	LD	(SWREG4),A
2716   0E4E C3 D3 0D    	JP	SETCK1
2717   0E51             ;
2718   0E51             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2719   0E51             ;
2720   0E51 CD D7 05    SETCK8	CALL	BEEP
2721   0E54 CD BC 04    	CALL	KEYREL
2722   0E57 3A 1C 3F    	LD	A,(SWREG3)
2723   0E5A E6 3F       	AND	3FH	;24 HOUR MODE
2724   0E5C 32 1C 3F    	LD	(SWREG3),A
2725   0E5F 3A 1D 3F    	LD	A,(SWREG4)
2726   0E62 E6 07       	AND	07H	;OSC ON,RST ENABLED
2727   0E64 32 1D 3F    	LD	(SWREG4),A
2728   0E67 CD F5 0E    	CALL	WWATCH	;WRITE CHANGES
2729   0E6A C9          	RET
2730   0E6B             ;---------------------
2731   0E6B             ; READ FROM SMARTWATCH
2732   0E6B             ;---------------------
2733   0E6B             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2734   0E6B             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2735   0E6B             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2736   0E6B             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2737   0E6B             ;
2738   0E6B             ;  ENTRY : NONE
2739   0E6B             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2740   0E6B             ;          (ALTERNATE SET MODIFIED)
2741   0E6B             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2742   0E6B             ;
2743   0E6B             ;
2744   0E6B             ; ENABLE SMARTWATCH
2745   0E6B             ;
2746   0E6B F5          RWATCH	PUSH	AF
2747   0E6C C5          	PUSH	BC
2748   0E6D D5          	PUSH	DE
2749   0E6E E5          	PUSH	HL
2750   0E6F 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2751   0E72 21 B5 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2752   0E75 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2753   0E77 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2754   0E78 32 60 3F    	LD	(DALLAS),A
2755   0E7B 23          	INC	HL
2756   0E7C 10 F9       	DJNZ	RWACH1
2757   0E7E             ;
2758   0E7E             ; READ DATA FROM WATCH
2759   0E7E             ;
2760   0E7E 06 20       	LD	B,32
2761   0E80 3A 60 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2762   0E83 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2763   0E85 CB 1A       	RR	D	;DE AND HL
2764   0E87 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2765   0E89 CB 1C       	RR	H	;THE ALTERNATE PAIR
2766   0E8B CB 1D       	RR	L
2767   0E8D 10 F1       	DJNZ	RWACH2
2768   0E8F D9          	EXX
2769   0E90 06 20       	LD	B,32
2770   0E92 3A 60 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2771   0E95 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2772   0E97 CB 1A       	RR	D
2773   0E99 CB 1B       	RR	E
2774   0E9B CB 1C       	RR	H
2775   0E9D CB 1D       	RR	L
2776   0E9F 10 F1       	DJNZ	RWACH3
2777   0EA1             ;
2778   0EA1             ; SAVE IN WATCH REGISTERS
2779   0EA1             ;
2780   0EA1 22 1D 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2781   0EA4 ED 53 1F 3F 	LD	(SWREG6),DE	;GET THE DATA
2782   0EA8 D9          	EXX
2783   0EA9 22 19 3F    	LD	(SWREG0),HL
2784   0EAC ED 53 1B 3F 	LD	(SWREG2),DE
2785   0EB0 E1          	POP	HL
2786   0EB1 D1          	POP	DE
2787   0EB2 C1          	POP	BC
2788   0EB3 F1          	POP	AF
2789   0EB4 C9          	RET
2790   0EB5             ;
2791   0EB5             ; SMARTWATCH ACCESS PATTERN
2792   0EB5             ;
2793   0EB5 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2793   0EB9 5C 2E 17 8B 
2794   0EBD 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2794   0EC1 A3 D1 E8 74 
2795   0EC5 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2795   0EC9 3A 1D 8E 47 
2796   0ECD 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2796   0ED1 C5 E2 71 B8 
2797   0ED5 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2797   0ED9 5C 2E 17 8B 
2798   0EDD 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2798   0EE1 A3 D1 E8 74 
2799   0EE5 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2799   0EE9 3A 1D 8E 47 
2800   0EED 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2800   0EF1 C5 E2 71 B8 
2801   0EF5             ;--------------------
2802   0EF5             ; WRITE TO SMARTWATCH
2803   0EF5             ;--------------------
2804   0EF5             ;
2805   0EF5             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2806   0EF5             ; IT USING BIT MANIPULATION.
2807   0EF5             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2808   0EF5             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2809   0EF5             ; SMARTWATCH IS ENABLED.
2810   0EF5             ;
2811   0EF5             ; ENTRY : NONE
2812   0EF5             ; THE DATA TO WRITE TO THE SMARTWATCH
2813   0EF5             ; MUST BE IN SWREG0 - SWREG7
2814   0EF5             ;  EXIT : NO WORKING REGISTERS MODIFIED
2815   0EF5             ;  (ALTERNATE SET MODIFIED)
2816   0EF5             ; GET DATA TO WRITE TO WATCH
2817   0EF5             ;
2818   0EF5 F5          WWATCH	PUSH	AF
2819   0EF6 C5          	PUSH	BC
2820   0EF7 D5          	PUSH	DE
2821   0EF8 E5          	PUSH	HL
2822   0EF9 2A 1D 3F    	LD	HL,(SWREG4)	;SET UP THE
2823   0EFC ED 5B 1F 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2824   0F00 D9          	EXX
2825   0F01 2A 19 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2826   0F04 ED 5B 1B 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2827   0F08             ;
2828   0F08             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2829   0F08             ;
2830   0F08 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2831   0F0B 3E C5       	LD	A,0C5H
2832   0F0D 0E 80       	LD	C,80H	;NUMBER OF BYTES
2833   0F0F 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2834   0F11 32 60 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2835   0F14 CB 0F       	RRC	A
2836   0F16 CB 38       	SRL	B
2837   0F18 30 F7       	JR	NC,WWACH2	;MORE BITS
2838   0F1A CB 39       	SRL	C
2839   0F1C 38 11       	JR	C,WWACH4	;NO MORE BYTES
2840   0F1E CB 47       	BIT	0,A
2841   0F20 20 0A       	JR	NZ,WWACH3
2842   0F22 CB 0F       	RRC	A
2843   0F24 CB 0F       	RRC	A
2844   0F26 CB 0F       	RRC	A
2845   0F28 CB 0F       	RRC	A
2846   0F2A 18 E3       	JR	WWACH1
2847   0F2C 2F          WWACH3	CPL
2848   0F2D 18 E0       	JR	WWACH1
2849   0F2F             ;
2850   0F2F             ; WRITE DATA TO WATCH
2851   0F2F             ;
2852   0F2F 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2853   0F31 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2854   0F33 CB 1B       	RR	E	;ONTO D0 AND INTO
2855   0F35 CB 1C       	RR	H	;THE SMARTWATCH
2856   0F37 CB 1D       	RR	L
2857   0F39 17          	RLA
2858   0F3A 32 60 3F    	LD	(DALLAS),A
2859   0F3D 10 F2       	DJNZ	WWACH5
2860   0F3F D9          	EXX	;RESTORE REGISTERS
2861   0F40 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2862   0F42 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2863   0F44 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2864   0F46 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2865   0F48 CB 1D       	RR	L
2866   0F4A 17          	RLA
2867   0F4B 32 60 3F    	LD	(DALLAS),A
2868   0F4E 10 F2       	DJNZ	WWACH6
2869   0F50 E1          	POP	HL
2870   0F51 D1          	POP	DE
2871   0F52 C1          	POP	BC
2872   0F53 F1          	POP	AF
2873   0F54 C9          	RET
2874   0F55             ;-----------------
2875   0F55             ; ONE SECOND DELAY
2876   0F55             ;-----------------
2877   0F55             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2878   0F55             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2879   0F55             ;
2880   0F55             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2881   0F55             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2882   0F55             ; READS THE SAME AS THE REFERENCE VALUE,
2883   0F55             ; THEN THE ROUTINE RETURNS
2884   0F55             ;
2885   0F55             ; ENTRY : NONE
2886   0F55             ; EXIT : NONE MODIFIED
2887   0F55             ;
2888   0F55 F5          ONESEC	PUSH	AF
2889   0F56 C5          	PUSH	BC
2890   0F57 CD 6B 0E    	CALL	RWATCH	;READ WATCH
2891   0F5A 3A 1A 3F    	LD	A,(SWREG1)
2892   0F5D 47          	LD	B,A	;SAVE REF COUNT
2893   0F5E CD 6B 0E    ONESC1	CALL	RWATCH
2894   0F61 3A 1A 3F    	LD	A,(SWREG1)
2895   0F64 B8          	CP	B	;SAME AS REF?
2896   0F65 CA 5E 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2897   0F68 C1          	POP	BC
2898   0F69 F1          	POP	AF
2899   0F6A C9          	RET
2900   0F6B             ;---------------------
2901   0F6B             ; SCBUG SERIAL MONITOR
2902   0F6B             ;---------------------
2903   0F6B             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2904   0F6B             ; COMMS PARAMETERS ARE 4800,n,8,2
2905   0F6B             ;
2906   0F6B             ;------------
2907   0F6B             ; ASCII CODES
2908   0F6B             ;------------
2909   0F6B             ESC	.EQU	1BH
2910   0F6B             CR	.EQU	0DH
2911   0F6B             LF	.EQU	0AH
2912   0F6B             ;
2913   0F6B 21 1B 00    SCBUG	LD	HL,B4800	;INITIALISE THE BAUD RATE
2914   0F6E CD 31 08    	CALL SERINI	;SET UP TX OUTPUT PIN
2915   0F71             ;
2916   0F71             ; START UP THE MONITOR
2917   0F71             ;
2918   0F71 ED 73 10 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2919   0F75 21 66 13    	LD	HL,SSSTEP
2920   0F78 22 5B 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2921   0F7B CD 27 14    	CALL	PRNTSZ
2922   0F7E 1B 5B 48 1B 	.DB	27,"[H",27,"[2J",0	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2922   0F82 5B 32 4A 00 
2923   0F86 CD A3 03    	CALL	PCBTYP
2924   0F89 CD 52 13    	CALL	SNDMSG	;BOARD TYPE
2925   0F8C CD 27 14    	CALL	PRNTSZ
2926   0F8F 20 53 6F 75 	.DB	" Southern Cross Serial Monitor ",0
2926   0F93 74 68 65 72 
2926   0F97 6E 20 43 72 
2926   0F9B 6F 73 73 20 
2926   0F9F 53 65 72 69 
2926   0FA3 61 6C 20 4D 
2926   0FA7 6F 6E 69 74 
2926   0FAB 6F 72 20 00 
2927   0FAF CD AA 03    	CALL	VERS
2928   0FB2 CD 52 13    	CALL	SNDMSG	;MONITOR VERSION
2929   0FB5 CD 5A 10    	CALL	TXCRLF
2930   0FB8 CD B1 03    	CALL	KBDTYP
2931   0FBB CD 52 13    	CALL	SNDMSG	;KEYBOARD TYPE
2932   0FBE CD 27 14    	CALL	PRNTSZ
2933   0FC1 20 4B 65 79 	.DB	" Keyboard",0
2933   0FC5 62 6F 61 72 
2933   0FC9 64 00 
2934   0FCB CD 27 14    	CALL	PRNTSZ
2935   0FCE 0D 0A 48 20 	.DB	CR,LF,"H for command list",CR,LF,0
2935   0FD2 66 6F 72 20 
2935   0FD6 63 6F 6D 6D 
2935   0FDA 61 6E 64 20 
2935   0FDE 6C 69 73 74 
2935   0FE2 0D 0A 00 
2936   0FE5             ;
2937   0FE5             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2938   0FE5             ;
2939   0FE5 3E 3E       START2	LD	A,'>'
2940   0FE7 CD 4B 08    	CALL	TXDATA	;DISPLAY THE PROMPT
2941   0FEA CD 76 08    START3	CALL	RXDATA	;GET A CHARACTER FROM THE CONSOLE
2942   0FED 4F          	LD	C,A	;SAVE FOR LATER
2943   0FEE E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2944   0FF0             ;
2945   0FF0             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2946   0FF0             ;
2947   0FF0 21 0F 10    	LD	HL,MONMENU
2948   0FF3 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2949   0FF4 23          	INC	HL
2950   0FF5 BE          START4	CP	(HL)	;IN THE LIST?
2951   0FF6 28 05       	JR	Z,START5	;OK DO IT
2952   0FF8 23          	INC	HL
2953   0FF9 10 FA       	DJNZ	START4	;KEEP LOOKING
2954   0FFB 18 ED       	JR	START3
2955   0FFD 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2956   0FFE CD 4B 08    	CALL	TXDATA	;TO ECHO IT
2957   1001 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2958   1003 21 0F 10    	LD	HL,MONMENU	;USE THE MENU HANDLER
2959   1006 CD C6 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2960   1009             ;
2961   1009             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2962   1009             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2963   1009             ;
2964   1009 CD 5A 10    WARM	CALL	TXCRLF	;START ON A NEW LINE
2965   100C C3 E5 0F    	JP	START2
2966   100F             ;
2967   100F             ; SCBUG MONITOR COMMANDS
2968   100F             ;
2969   100F 07          MONMENU	.DB 7
2970   1010 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2970   1014 47 49 58 
2971   1017 92 12 86 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2971   101B 82 11 9F 11 
2972   101F 64 10 F2 11 	.DW	GOJUMP,INTHEX,EXIT
2972   1023 43 12 
2973   1025             ;-----------------------------
2974   1025             ; GET A BYTE FROM THE TERMINAL
2975   1025             ;-----------------------------
2976   1025 CD 76 08    GETCHR	CALL	RXDATA
2977   1028 FE 1B       	CP	ESC
2978   102A 28 27       	JR	Z,GETOUT
2979   102C 47          	LD	B,A	;SAVE TO ECHO
2980   102D CD 66 12    	CALL	ASC2HEX
2981   1030 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2982   1032 21 14 3F    	LD	HL,DATA
2983   1035 77          	LD	(HL),A
2984   1036 78          	LD	A,B
2985   1037 CD 4B 08    	CALL	TXDATA	;ECHO VALID HEX
2986   103A             ;	
2987   103A CD 76 08    GETNYB	CALL	RXDATA
2988   103D FE 1B       	CP	ESC
2989   103F 28 12       	JR	Z,GETOUT
2990   1041 47          	LD	B,A	;SAVE TO ECHO
2991   1042 CD 66 12    	CALL	ASC2HEX
2992   1045 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2993   1047 ED 6F       	RLD
2994   1049 78          	LD	A,B
2995   104A CD 4B 08    	CALL	TXDATA	;ECHO VALID HEX
2996   104D 7E          	LD	A,(HL)
2997   104E CD 53 10    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2998   1051 3F          	CCF	;AND THEN COMPLEMENTING IT
2999   1052 C9          	RET
3000   1053 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
3001   1054 C9          	RET
3002   1055             ;---------------
3003   1055             ; OUTPUT A SPACE
3004   1055             ;---------------
3005   1055 3E 20       OUTSP	LD	A,' '
3006   1057 C3 4B 08    	    JP	TXDATA
3007   105A             ;-------------
3008   105A             ; OUTPUT CRLF
3009   105A             ;------------
3010   105A 3E 0D       TXCRLF	LD	A,CR
3011   105C CD 4B 08    	CALL	TXDATA
3012   105F 3E 0A       	LD	A,LF
3013   1061 C3 4B 08    	JP	TXDATA
3014   1064             ;------------------------------
3015   1064             ; GO <ADDR>
3016   1064             ; TRANSFERS EXECUTION TO <ADDR>
3017   1064             ;------------------------------
3018   1064 CD 55 10    GOJUMP	CALL	OUTSP
3019   1067 CD 25 10    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
3020   106A D8          	RET	C
3021   106B 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3022   106E CD 25 10    	CALL	GETCHR	;GET ADDRESS LOW BYTE
3023   1071 D8          	RET	C
3024   1072 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3025   1075             ;
3026   1075             ; WAIT FOR A CR OR ESC
3027   1075             ;
3028   1075 CD 76 08    GOJMP1	CALL	RXDATA
3029   1078 FE 1B       	CP	ESC	;ESC KEY?
3030   107A C8          	RET	Z
3031   107B FE 0D       	CP	CR
3032   107D 20 F6       	JR	NZ,GOJMP1
3033   107F CD 5A 10    	CALL	TXCRLF
3034   1082 2A 12 3F    	LD	HL,(ADDR)
3035   1085 E9          	JP	(HL)	;JUMP TO USER ADDRESS
3036   1086             ;---------------------
3037   1086             ; DISPLAY COMMAND HELP
3038   1086             ;---------------------
3039   1086 CD 27 14    HELP	CALL	PRNTSZ
3040   1089 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
3040   108D 41 41 41 41 
3040   1091 20 20 20 20 
3040   1095 44 69 73 70 
3040   1099 6C 61 79 20 
3040   109D 44 61 74 61 
3040   10A1 20 61 74 20 
3040   10A5 41 64 64 72 
3040   10A9 65 73 73 20 
3040   10AD 41 41 41 41 
3041   10B1 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
3041   10B5 20 20 20 20 
3041   10B9 20 20 20 20 
3041   10BD 53 50 41 43 
3041   10C1 45 20 74 6F 
3041   10C5 20 43 4F 4E 
3041   10C9 54 49 4E 55 
3041   10CD 45 2C 20 45 
3041   10D1 53 43 20 74 
3041   10D5 6F 20 51 55 
3041   10D9 49 54 
3042   10DB 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
3042   10DF 20 20 20 20 
3042   10E3 20 20 20 20 
3042   10E7 54 6F 67 67 
3042   10EB 6C 65 20 53 
3042   10EF 69 6E 67 6C 
3042   10F3 65 20 53 74 
3042   10F7 65 70 70 65 
3042   10FB 72 
3043   10FC 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
3043   1100 41 41 41 41 
3043   1104 20 20 20 20 
3043   1108 4D 6F 64 69 
3043   110C 66 79 20 41 
3043   1110 64 64 72 65 
3043   1114 73 73 20 41 
3043   1118 41 41 41 
3044   111B 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
3044   111F 41 41 41 41 
3044   1123 20 20 20 20 
3044   1127 47 4F 20 66 
3044   112B 72 6F 6D 20 
3044   112F 41 41 41 41 
3045   1133 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
3045   1137 20 20 20 20 
3045   113B 20 20 20 20 
3045   113F 44 6F 77 6E 
3045   1143 6C 6F 61 64 
3045   1147 20 49 4E 54 
3045   114B 45 4C 20 48 
3045   114F 65 78 
3046   1151 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
3046   1155 20 20 20 20 
3046   1159 20 20 20 20 
3046   115D 45 78 69 74 
3047   1161 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
3047   1165 20 20 20 20 
3047   1169 20 20 20 20 
3047   116D 54 68 69 73 
3047   1171 20 48 65 6C 
3047   1175 70 20 4D 65 
3047   1179 73 73 61 67 
3047   117D 65 0D 0A 00 
3048   1181 C9          	RET
3049   1182             ;-----------------------------------------------
3050   1182             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
3051   1182             ;-----------------------------------------------
3052   1182             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
3053   1182             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
3054   1182             ;
3055   1182 CD 27 14    SSTOGL	CALL	PRNTSZ
3056   1185 0D 0A 53 69 	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3056   1189 6E 67 6C 65 
3056   118D 20 53 74 65 
3056   1191 70 20 54 6F 
3056   1195 67 67 6C 65 
3056   1199 0D 0A 00 
3057   119C             #IFDEF TEC-1F
3058   119C D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
3059   119E~            #ELSE
3060   119E~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
3061   119E             #ENDIF
3062   119E C9          	RET
3063   119F             ;----------------------------
3064   119F             ; M DISPLAY AND MODIFY MEMORY
3065   119F             ;----------------------------
3066   119F CD 55 10    MODIFY	CALL	OUTSP
3067   11A2             ;
3068   11A2             ;GET THE ADDRESS
3069   11A2             ;
3070   11A2 CD 25 10    	CALL	GETCHR
3071   11A5 D8          	RET	C
3072   11A6 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3073   11A9 CD 25 10    	CALL	GETCHR
3074   11AC D8          	RET	C
3075   11AD 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3076   11B0             ;
3077   11B0             ; DISPLAY ON A NEW LINE
3078   11B0             ;
3079   11B0 CD 5A 10    MDIFY1	CALL	TXCRLF
3080   11B3 ED 5B 12 3F 	LD	DE,(ADDR)
3081   11B7 21 00 3E    	LD	HL,BUFFER
3082   11BA CD 24 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3083   11BD 21 00 3E    	LD	HL,BUFFER
3084   11C0 CD 18 13    	CALL	WRDOUT	;OUTPUT THE ADDRESS
3085   11C3 CD 55 10    	CALL	OUTSP
3086   11C6             ;
3087   11C6             ;GET THE DATA AT THE ADDRESS
3088   11C6             ;
3089   11C6 2A 12 3F    	LD	HL,(ADDR)
3090   11C9 7E          	LD	A,(HL)
3091   11CA             ;
3092   11CA             ; DISPLAY THE DATA
3093   11CA             ;
3094   11CA 21 00 3E    	LD	HL,BUFFER
3095   11CD CD 29 13    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
3096   11D0 21 00 3E    	LD	HL,BUFFER
3097   11D3 CD 1B 13    	CALL	BYTOUT	;OUTPUT THE BYTE
3098   11D6 CD 55 10    	CALL	OUTSP
3099   11D9             ;
3100   11D9             ; GET NEW DATA,EXIT OR CONTINUE
3101   11D9             ;
3102   11D9 CD 25 10    	CALL	GETCHR
3103   11DC D8          	RET	C
3104   11DD 47          	LD	B,A	;SAVE IT FOR LATER
3105   11DE 2A 12 3F    	LD	HL,(ADDR)
3106   11E1 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
3107   11E2 78          	LD	A,B
3108   11E3 BE          	CP	(HL)
3109   11E4 28 05       	JR	Z,MDIFY2
3110   11E6 3E 3F       	LD	A,'?'
3111   11E8 CD 4B 08    	CALL	TXDATA	;NOT THE SAME DATA, PROBABLY NO RAM THERE
3112   11EB             ;
3113   11EB             ; INCREMENT THE ADDRESS
3114   11EB             ;
3115   11EB 23          MDIFY2	INC	HL
3116   11EC 22 12 3F    	LD	(ADDR),HL
3117   11EF C3 B0 11    	JP	MDIFY1
3118   11F2             ;-----------------------
3119   11F2             ; RECEIVE INTEL HEX FILE
3120   11F2             ;-----------------------
3121   11F2 CD 27 14    INTHEX	CALL	PRNTSZ
3122   11F5 0D 0A 53 65 	.DB	CR,LF,"Send INTEL Hex File...",0
3122   11F9 6E 64 20 49 
3122   11FD 4E 54 45 4C 
3122   1201 20 48 65 78 
3122   1205 20 46 69 6C 
3122   1209 65 2E 2E 2E 
3122   120D 00 
3123   120E CD A0 07    	CALL	INTELH
3124   1211 20 19       	JR	NZ,ITHEX1
3125   1213 CD 27 14    	CALL	PRNTSZ
3126   1216 0D 0A 46 69 	.DB	CR,LF,"File Received OK",CR,LF,0
3126   121A 6C 65 20 52 
3126   121E 65 63 65 69 
3126   1222 76 65 64 20 
3126   1226 4F 4B 0D 0A 
3126   122A 00 
3127   122B C9          	RET
3128   122C CD 27 14    ITHEX1	CALL	PRNTSZ
3129   122F 0D 0A 43 68 	.DB	CR,LF,"Checksum Error",CR,LF,0
3129   1233 65 63 6B 73 
3129   1237 75 6D 20 45 
3129   123B 72 72 6F 72 
3129   123F 0D 0A 00 
3130   1242 C9          	RET
3131   1243             ;------------------------
3132   1243             ; EXIT BACK TO SC MONITOR
3133   1243             ;------------------------
3134   1243             ; WE SAVED THE STACK POINTER WHEN WE ENTERED SCBUG
3135   1243             ; WE WILL USE IT NOW TO RETURN FROM WHERE WE CAME FROM
3136   1243             ;
3137   1243 21 01 06    EXIT	LD	HL,SSTEP	;	RESTORE THE 
3138   1246 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
3139   1249 CD 27 14    	CALL	PRNTSZ
3140   124C 0D 0A 42 79 	.DB	CR,LF,"Bye...",CR,LF,0
3140   1250 65 2E 2E 2E 
3140   1254 0D 0A 00 
3141   1257             ;
3142   1257 ED 7B 10 3F 	LD	SP,(SPSAVE)	;RESTORE STACK POINTER
3143   125B C9          	RET
3144   125C             ;------------------
3145   125C             ; DISPLAY REGISTERS
3146   125C             ;------------------
3147   125C CD C3 13    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
3148   125F 21 00 3E    	LD	HL,BUFFER
3149   1262 CD 52 13    	CALL	SNDMSG
3150   1265 C9          	RET
3151   1266             ;----------------------------------------
3152   1266             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
3153   1266             ;----------------------------------------
3154   1266             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
3155   1266             ; ENTRY OTHER THAN HEXADECIMAL KEYS
3156   1266             ;
3157   1266             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
3158   1266             ;ENTRY : A= ASCII 0-9,A-F
3159   1266             ;EXIT  : CARRY =  1
3160   1266             ;          A= HEX 0-F IN LSN
3161   1266             ;      : CARRY = 0
3162   1266             ;          A= OUT OF RANGE CHARACTER & 7FH
3163   1266             ; A AND F REGISTERS MODIFIED
3164   1266             ;
3165   1266 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
3166   1268 FE 30       	CP	'0'
3167   126A 38 23       	JR	C,AC2HEX4	;LESS THAN 0
3168   126C FE 3A       	CP	3AH
3169   126E 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
3170   1270 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
3171   1272 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
3172   1273 C9          	RET
3173   1274             ;
3174   1274 FE 41       AC2HEX2	CP	'A'
3175   1276 38 17       	JR	C,AC2HEX4	;LESS THAN A
3176   1278 FE 47       	CP	47H
3177   127A 30 04       	JR	NC,AC2HEX3	;MORE THAN F
3178   127C D6 07       	SUB	07H	;CONVERT TO NYBBLE
3179   127E 18 F2       	JR	AC2HEX1
3180   1280             	
3181   1280 FE 61       AC2HEX3	CP	'a'
3182   1282 DA 8F 12    	JP	C,AC2HEX4	;LESS THAN a
3183   1285 FE 67       	CP	67H
3184   1287 30 06       	JR	NC,AC2HEX4	;MORE THAN f
3185   1289 E6 DF       	AND 0DFH
3186   128B D6 07       	SUB 07H	;CONVERT TO NYBBLE
3187   128D 18 E3       	JR	AC2HEX1
3188   128F E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
3189   1291 C9          	RET
3190   1292             ;--------------------------
3191   1292             ; D DISPLAY MEMORY LOCATION
3192   1292             ;--------------------------
3193   1292 CD 55 10    DSPLAY	CALL	OUTSP	;A SPACE
3194   1295 CD 25 10    	CALL	GETCHR
3195   1298 D8          	RET	C
3196   1299 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3197   129C CD 25 10    	CALL	GETCHR
3198   129F D8          	RET	C
3199   12A0 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3200   12A3             ;
3201   12A3             ; WAIT FOR CR OR ESC
3202   12A3             ;
3203   12A3 CD 76 08    DPLAY1	CALL	RXDATA
3204   12A6 FE 1B       	CP	ESC
3205   12A8 C8          	RET	Z
3206   12A9 FE 0D       	CP	CR
3207   12AB 20 F6       	JR	NZ,DPLAY1
3208   12AD CD 5A 10    	CALL	TXCRLF	;NEWLINE
3209   12B0             ;
3210   12B0             ; DISPLAY THE LINE
3211   12B0             ;
3212   12B0 CD C5 12    DPLAY2 CALL  DPLINE
3213   12B3 ED 53 12 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
3214   12B7             ;
3215   12B7             ; DISPLAY MORE LINES OR EXIT
3216   12B7             ;
3217   12B7 CD 76 08    DPLAY3	CALL	RXDATA
3218   12BA 38 FB       	JR	C,DPLAY3
3219   12BC FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
3220   12BE 28 F0       	JR	Z,DPLAY2
3221   12C0 FE 1B       	CP	ESC	;ESC EXITS
3222   12C2 20 F3       	JR	NZ,DPLAY3
3223   12C4 C9          	RET
3224   12C5             ;-------------------------
3225   12C5             ; DISPLAY A LINE OF MEMORY
3226   12C5             ;-------------------------
3227   12C5 ED 5B 12 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
3228   12C9 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3229   12CC             ;
3230   12CC             ; DISPLAY THE ADDRESS
3231   12CC             ;
3232   12CC CD 24 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3233   12CF CD 08 13    	CALL	SPCBUF
3234   12D2             ;
3235   12D2             ; DISPLAY 16 BYTES
3236   12D2             ;
3237   12D2 06 10       	LD	B,16
3238   12D4 1A          DLINE1	LD	A,(DE)
3239   12D5 CD 29 13    	CALL	BYTASC
3240   12D8 CD 08 13    	CALL	SPCBUF
3241   12DB 13          	INC	DE
3242   12DC 10 F6       	DJNZ	DLINE1
3243   12DE CD 08 13    	CALL	SPCBUF
3244   12E1             ;
3245   12E1             ; NOW DISPLAY THE ASCII CHARACTER
3246   12E1             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3247   12E1             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3248   12E1             ;
3249   12E1 ED 5B 12 3F 	LD	DE,(ADDR)
3250   12E5 06 10       	LD	B,16
3251   12E7 1A          DLINE2	LD	A,(DE)
3252   12E8 FE 20       	CP	20H
3253   12EA 38 07       	JR	C,DOT
3254   12EC FE 7F       	CP	7FH
3255   12EE 30 03       	JR	NC,DOT
3256   12F0 C3 F5 12    	JP	NDOT
3257   12F3 3E 2E       DOT	LD	A,'.'
3258   12F5 CD 0A 13    NDOT	CALL	INBUF
3259   12F8 13          	INC	DE
3260   12F9 10 EC       	DJNZ	DLINE2
3261   12FB             ;
3262   12FB             ;TERMINATE AND DISPLAY STRING
3263   12FB             ;
3264   12FB CD 0D 13    	CALL	BCRLF
3265   12FE 3E 00       	LD	A,00H
3266   1300 77          	LD	(HL),A
3267   1301 21 00 3E    	LD	HL,BUFFER
3268   1304 CD 52 13    	CALL	SNDMSG
3269   1307 C9          	RET
3270   1308             ;
3271   1308             ; PUT A SPACE IN THE BUFFER
3272   1308             ;
3273   1308 3E 20       SPCBUF	LD	A,' '
3274   130A 77          INBUF	LD	(HL),A
3275   130B 23          	INC	HL
3276   130C C9          	RET
3277   130D             ;
3278   130D             ; PUT A CR LF IN THE BUFFER
3279   130D             ;
3280   130D 3E 0D       BCRLF	LD	A,CR
3281   130F CD 0A 13    	CALL	INBUF
3282   1312 3E 0A       	LD	A,LF
3283   1314 CD 0A 13    	CALL	INBUF
3284   1317 C9          	RET
3285   1318             ;----------------------
3286   1318             ; SEND ASCII HEX VALUES
3287   1318             ;----------------------
3288   1318             ;
3289   1318             ; OUTPUT THE 4 BYTE, WRDOUT
3290   1318             ; THE 2 BYTE, BYTOUT
3291   1318             ; OR THE SINGLE BYTE, NYBOUT
3292   1318             ; ASCII STRING AT HL TO THE SERIAL PORT
3293   1318             ;
3294   1318 CD 1B 13    WRDOUT	CALL	BYTOUT
3295   131B CD 1E 13    BYTOUT	CALL	NYBOUT
3296   131E 7E          NYBOUT	LD	A,(HL)
3297   131F CD 4B 08    	CALL	TXDATA
3298   1322 23          	INC	HL
3299   1323 C9          	RET
3300   1324             ;----------------
3301   1324             ;CONVERT TO ASCII
3302   1324             ;----------------
3303   1324             ;
3304   1324             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3305   1324             ;
3306   1324             ;        ENTRY :  WRDASC           DE = WORD TO CONVERT
3307   1324             ;                 BYTASC            A = BYTE TO CONVERT
3308   1324             ;                 NYBASC (B3-B0) OF A = NYBBLE TO CONVERT
3309   1324             ;                  HL = CHARACTER BUFFER ADDRESS
3310   1324             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3311   1324             ;                  AF IS MODIFIED
3312   1324             ;
3313   1324 7A          WRDASC	LD	A,D	;CONVERT AND
3314   1325 CD 29 13    	CALL	BYTASC	;OUTPUT D
3315   1328 7B          	LD	A,E	;THEN E
3316   1329             ;
3317   1329             ;CONVERT A BYTE TO ASCII 
3318   1329             ;
3319   1329 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3320   132A 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3321   132B 0F          	RRCA
3322   132C 0F          	RRCA
3323   132D 0F          	RRCA
3324   132E CD 32 13    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3325   1331 F1          	POP	AF	;RESTORE LOW NYBBLE
3326   1332             ;
3327   1332             ; CONVERT A NYBBLE TO ASCII
3328   1332             ;
3329   1332 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3330   1334 C6 90       	ADD	A,90H	;CONVERT TO
3331   1336 27          	DAA	;ASCII
3332   1337 CE 40       	ADC	A,40H
3333   1339 27          	DAA
3334   133A             ;
3335   133A             ; SAVE IN STRING
3336   133A             ;
3337   133A 77          INSBUF	LD	(HL),A
3338   133B 23          	INC	HL
3339   133C C9          	RET
3340   133D             ;------------------------------------------------------
3341   133D             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3342   133D             ;------------------------------------------------------
3343   133D             ;
3344   133D             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3345   133D             ;                      INTO A STRING OF ASCII
3346   133D             ;                      ONES AND ZEROES.
3347   133D             ;
3348   133D             ;           ENTRY :  A = BINARY TO CONVERT
3349   133D             ;                   HL = CHARACTER BUFFER ADDRESS
3350   133D             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3351   133D             ;
3352   133D             ;        MODIFIES : NONE
3353   133D             ;
3354   133D C5          BITASC PUSH  BC
3355   133E 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3356   1340 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3357   1342 20 05       	JR	NZ,BTASC3
3358   1344 0E 30       	LD	C,30H	;IT'S A ZERO
3359   1346 71          BTASC2	LD	(HL),C
3360   1347 18 03       	JR	BTASC4
3361   1349 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3362   134B 71          	LD	(HL),C
3363   134C 23          BTASC4	INC	HL
3364   134D 17          	RLA
3365   134E 10 F0       	DJNZ	BTASC1	;NEXT BIT
3366   1350 C1          	POP	BC
3367   1351 C9          	RET
3368   1352             ;-----------------------------------------
3369   1352             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3370   1352             ;-----------------------------------------
3371   1352             ;
3372   1352             ; SENDS A ZERO TERMINATED STRING OR 
3373   1352             ; 255 CHARACTERS MAX. OUT THE SERIAL PORT
3374   1352             ;
3375   1352             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3376   1352             ;      EXIT  : SAME AS ENTRY
3377   1352             ;
3378   1352 C5          SNDMSG	PUSH	BC
3379   1353 E5          	PUSH	HL
3380   1354 F5          	PUSH	AF
3381   1355 06 FF       	LD	B,255	;255 CHARS MAX
3382   1357 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3383   1358 FE 00       	CP	00H	;ZERO TERMINATOR?
3384   135A 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3385   135C CD 4B 08    	CALL	TXDATA	;TRANSMIT THE CHAR
3386   135F 23          	INC	HL
3387   1360 10 F5       	DJNZ	SDMSG1	;255 CHARS MAX!
3388   1362             	
3389   1362 F1          SDMSG2	POP	AF
3390   1363 E1          	POP	HL	
3391   1364 C1          	POP	BC	
3392   1365 C9          	RET
3393   1366             ;----------------------
3394   1366             ; SERIAL SINGLE STEPPER
3395   1366             ;----------------------
3396   1366 E1          SSSTEP	POP	HL	;GET HL BACK
3397   1367 F5          	PUSH	AF	;SAVE AF FOR LATER
3398   1368 22 49 3F    	LD	(TMPHL),HL
3399   136B ED 53 47 3F 	LD	(TMPDE),DE
3400   136F ED 43 45 3F 	LD	(TMPBC),BC
3401   1373 DD 22 4B 3F 	LD	(TMPIX),IX
3402   1377 FD 22 4D 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3403   137B E1          	POP	HL	;GET AF BACK
3404   137C 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
3405   137F E1          	POP	HL	;GET PC RETURN ADDRESS
3406   1380 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
3407   1383 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3408   1387             ;
3409   1387 CD C3 13    	CALL	DISREG	;DISPLAY REGISTERS
3410   138A 21 00 3E    	LD	HL,BUFFER
3411   138D CD 52 13    	CALL	SNDMSG
3412   1390             ; WE HAVE DISPLAYED THE REGISTER CONTENTS NOW
3413   1390             ; SPACE KEY CONTINUES EXECUTION, ESCAPE KEY
3414   1390             ; RETURNS TO SERIAL MONITOR
3415   1390             ;
3416   1390 CD 76 08    SSTEP3	CALL	RXDATA
3417   1393 38 FB       	JR	C,SSTEP3
3418   1395 FE 20       	CP	' '	;IS IT SPACE
3419   1397 28 08       	JR	Z,SSTEP4
3420   1399 FE 1B       	CP	ESC	;ESC QUITS
3421   139B 20 F3       	JR	NZ,SSTEP3
3422   139D             ;
3423   139D             ; RETURN TO MONITOR
3424   139D             ;
3425   139D FB          	EI	;RE-ENABLE INTERRUPTS
3426   139E C3 09 10    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3427   13A1             ;
3428   13A1             ; RETURN TO PROGRAM
3429   13A1             ;
3430   13A1 ED 7B 4F 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3431   13A5 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
3432   13A8 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3433   13A9 2A 43 3F    	LD	HL,(TMPAF)
3434   13AC E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3435   13AD FD 2A 4D 3F 	LD	IY,(TMPIY)
3436   13B1 DD 2A 4B 3F 	LD	IX,(TMPIX)
3437   13B5 ED 4B 45 3F 	LD	BC,(TMPBC)
3438   13B9 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3439   13BD F1          	POP	AF	;RESTORE AF
3440   13BE 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
3441   13C1 FB          	EI		;RE-ENABLE INTERRUPTS
3442   13C2 C9          	RET		;AND RETURN TO PROGRAM
3443   13C3             ;----------------------------
3444   13C3             ; DISPLAY THE SAVED REGISTERS
3445   13C3             ;----------------------------
3446   13C3 CD 27 14    DISREG	CALL	PRNTSZ
3447   13C6 0D 0A 50 43 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3447   13CA 20 20 20 41 
3447   13CE 46 20 20 20 
3447   13D2 42 43 20 20 
3447   13D6 20 44 45 20 
3447   13DA 20 20 48 4C 
3447   13DE 20 20 20 49 
3447   13E2 58 20 20 20 
3447   13E6 49 59 20 20 
3447   13EA 20 53 50 20 
3447   13EE 20 20 53 5A 
3447   13F2 2D 48 2D 56 
3447   13F6 4E 43 0D 0A 
3447   13FA 00 
3448   13FB             ;
3449   13FB             ; DISPLAY THE REGISTERS
3450   13FB             ;
3451   13FB 06 08       	LD	B,08H
3452   13FD 21 00 3E    	LD	HL,BUFFER
3453   1400 DD 21 41 3F 	LD	IX,TMPPC
3454   1404 DD 7E 01    DSREG1	LD	A,(IX+1)
3455   1407 CD 29 13    	CALL	BYTASC
3456   140A DD 7E 00    	LD	A,(IX+0)
3457   140D CD 29 13    	CALL	BYTASC
3458   1410 DD 23       	INC	IX
3459   1412 DD 23       	INC	IX
3460   1414 3E 20       	LD	A,' '
3461   1416 77          	LD	(HL),A
3462   1417 23          	INC	HL
3463   1418 10 EA       	DJNZ	DSREG1
3464   141A             ;
3465   141A             ; DISPLAY THE FLAGS
3466   141A             ;
3467   141A 3A 43 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3468   141D CD 3D 13    	CALL	BITASC	;SHOW THEM AS BITS
3469   1420             
3470   1420 CD 0D 13    SZCRLF CALL  BCRLF
3471   1423 3E 00       	LD	A,0
3472   1425 77          	LD	(HL),A	;TERMINATE THE STRING
3473   1426 C9          	RET
3474   1427             ;-----------------------------------------
3475   1427             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3476   1427             ;-----------------------------------------
3477   1427             ; PUT THE STRING IN THE CODE LIKE THE EXAMPLE BELOW
3478   1427             ; THE ROUTINE SENDS THE STRING FROM THE RETURN ADDRESS,
3479   1427             ; (THE ADDRESS PUT ON THE STACK AS THE RETURN ADDRESS FROM THE 'CALL PRNTSZ') TO THE ZERO TERMINATOR.
3480   1427             ; THEN JUMPS TO THE 'NEXT INSTRUCTION ADDRESS' (AFTER THE ZERO TERMINATOR) TO RESUME THE PROGRAM. 
3481   1427             ;
3482   1427             ;      CALL PRNTSZ
3483   1427             ;      .DB  "STRING TO PRINT",0
3484   1427             ;      NEXT INSTRUCTION
3485   1427             ;
3486   1427 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3487   1428 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3488   1429 CD 4B 08    	CALL	TXDATA	;AND SEND IT
3489   142C 23          	INC	HL	;POINT TO THE NEXT
3490   142D B7          	OR	A	;CHARACTER AND
3491   142E 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3492   1430 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3493   1431             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F12      ADRESS        3F3B      ADDKEY        0312      
ADMODE        0392      ASCHEX        0828      ASCHX1        082E      
ADDRA         08B0      ADDRB         08C2      ASC2HEX       1266      
AC2HEX1       1272      AC2HEX2       1274      AC2HEX3       1280      
AC2HEX4       128F      BOTRAM        2000      BUFFER        3E00      
B300          0220      B1200         0080      B2400         003F      
B4800         001B      B9600         000B      BAUD          3F21      
BLKSRT        3F29      BLKEND        3F2B      BLKDST        3F2D      
BEEP          05D7      BEEP1         05E7      BEEP2         05EE      
BEEP3         05FE      BITIME        08A3      BITIM1        08A8      
BLKMVE        08D4      BLKMV1        08F3      BLKMV2        08F6      
BLKMV3        0908      BLKSUM        092A      BLKSM1        0946      
BRANCH        0968      BRNCH1        098A      BRNCH2        0995      
BCRLF         130D      BYTOUT        131B      BYTASC        1329      
BITASC        133D      BTASC1        1340      BTASC2        1346      
BTASC3        1349      BTASC4        134C      CALMDE        3F17      
COUNT         3F27      CONBYT        03ED      CONVHI        03FA      
CONVLO        03FE      CLRBUF        044E      CLRBF1        0455      
CHKSUM        04E9      CHKSM1        04ED      CANCEL        0745      
CANCL1        0748      CHKKEY        0B27      CHKKY1        0B35      
CHKKY2        0B5E      CHKKY3        0B6B      CHKKY4        0B73      
CHKKY5        0B7A      CHKKY6        0B88      CHKKY7        0B8A      
CHKKY8        0B8F      CHKKY9        0BB4      CHKKYA        0BC2      
CLKEXT        0D3C      CALKEY        0D46      CR            000D      
COLD          0F71      DISPLY        0002      DATA          3F14      
DISBUF        3F31      DALLAS        3F60      DECKEY        034A      
DECKY1        034D      DECKY2        035A      DECKY3        0375      
DISADD        03CF      DISBYT        03E4      DEC2          0495      
DECSTP        06F4      DECSP1        0704      DELONE        0C38      
DELON1        0C41      DELON2        0C43      DSPLAY        1292      
DPLAY1        12A3      DPLAY2        12B0      DPLAY3        12B7      
DPLINE        12C5      DLINE1        12D4      DLINE2        12E7      
DOT           12F3      DISREG        13C3      DSREG1        1404      
EDTKEY        0AF7      ENDKEY        0B1E      ESC           001B      
EXIT          1243      FUNTBL        3F15      FUNJMP        3F2F      
FUNKEY        072A      FUNKY1        072D      FUNKY2        073C      
FUNLST        074F      FUNFUN        0783      GOEXEC        0787      
GETBYT        07FC      GETBT1        0806      GETBT2        081A      
GETCHR        1025      GETNYB        103A      GETOUT        1053      
GOJUMP        1064      GOJMP1        1075      HEXKEY        02E0      
HEXKY1        02EB      HEXKY2        02F9      HELP          1086      
ISTACK        3C00      INCKEY        031E      INCKY1        0321      
INCKY2        032E      INCKY3        0349      INC2          0492      
INDEXB        04F9      INDEXW        0500      INCSTP        06DF      
INCSP1        06EF      INTELFN       0791      INTELH        07A0      
INTEL1        07A4      INTEL2        07CF      INTEL4        07EA      
INTHEX        11F2      ITHEX1        122C      INBUF         130A      
INSBUF        133A      KEYBUF        0000      KEYFN         0010      
KEYAD         0011      KEYINC        0012      KEYDEC        0013      
KEYTIM        3F23      KEYDEL        3F3D      KBDTYP        03B1      
KYBSZ         03C5      KYBDBF        03CE      KEYCVT        0484      
KEYCVT1       0497      KEYIN         04B2      KEYREL        04BC      
KEYRL1        04BD      LENGTH        059C      LOSE          0BDB      
LF            000A      LOOPSZ        1428      MODE          3F39      
MAIN          027D      MAIN1         028E      MAIN2         0291      
MENLST        02A3      MENU          04C6      MENU1         04D4      
MENU2         04E0      MUL16         0521      MULT          052A      
MULT1         0530      MUSIC         0538      MSDELAY       0841      
MSDEL1        0844      MOVE          090E      MONMENU       100F      
MODIFY        119F      MDIFY1        11B0      MDIFY2        11EB      
NXTBIT        085C      NDOT          12F5      NYBOUT        131E      
NYBASC        1332      ONTIM         3F37      OFTIM         3F38      
ONESEC        0F55      ONESC1        0F5E      OUTSP         1055      
PORT3         0003      PORT4         0004      PORT5         0005      
PORT6         0006      PORT7         0007      PCBTYP        03A3      
PAUSE         0549      PERIOD        0584      PLAY1         09AD      
PLAY2         09BC      PLAY3         09CB      PATERN        0EB5      
PRNTSZ        1427      RAMEND        3800      RAMSRT        2000      
REGPNT        3F3F      RST08         3F51      RST10         3F53      
RST18         3F55      RST20         3F57      RST28         3F59      
RST38         3F5B      RST66         3F5D      RAMSUM        3F5F      
RSTVEC        0000      RST30         0030      RESET         0200      
RESET1        0214      RAND          0509      REGTBL        063F      
REGNAM        067C      REGKEY        068C      RETMON        06B3      
RETPGM        06BD      RXDATA        0876      RXDAT1        0878      
RXDAT2        0890      RELSQR        0BF5      RLTEST        0C04      
RLSTEP        0C0A      RELSR1        0C10      RELSR2        0C21      
RELSR3        0C29      RELSR4        0C2E      RWATCH        0E6B      
RWACH1        0E77      RWACH2        0E80      RWACH3        0E92      
REGSTR        125C      SCAN          0001      SPSAVE        3F10      
SWREG0        3F19      SWREG1        3F1A      SWREG2        3F1B      
SWREG3        3F1C      SWREG4        3F1D      SWREG5        3F1E      
SWREG6        3F1F      SWREG7        3F20      SPTEMP        3F25      
SYSERR        3F61      SYSCALL       0068      STOP          008B      
SYSJMP        0100      SETDP         0397      SEGMNT        040D      
SCAND         041D      SCAND1        0425      SCAND2        0431      
SCAND3        043C      SCANKEY       045D      SCANKY1       046C      
SCANKY2       0479      SCANKY3       047E      SCANKY4       0480      
SKEYIN        0498      SKEYRL        04A5      SKEYL1        04A6      
STEP          053E      STEP1         0553      STEP2         055D      
STEP3         0568      SSTEP         0601      SSTEP1        062D      
SETREG        070A      SERINI        0831      SDELAY        091C      
SDELY1        0921      SWBEEP        09DA      SECRET        0A74      
SECRT1        0AB1      SECNUM        0AC0      SPLIT         0BE2      
SCOPE         0C4E      SCOPE2        0C63      SCOPE3        0C6B      
SCOPE4        0C7A      SCOPE5        0C81      SCOPE6        0C88      
SCOPE7        0C8F      SCOPE8        0C96      SCOPE9        0C9F      
SCOPEA        0CAC      SEED          0CCD      SKATE         0CDC      
SKATE1        0CE1      SKATE2        0CE9      SKATE3        0CF2      
SETCLK        0DCD      SETCK1        0DD3      SETCK2        0E02      
SETCK3        0E16      SETCK4        0E24      SETCK5        0E33      
SETCK6        0E3A      SETCK7        0E4A      SETCK8        0E51      
SCBUG         0F6B      START2        0FE5      START3        0FEA      
START4        0FF5      START5        0FFD      SSTOGL        1182      
SPCBUF        1308      SNDMSG        1352      SDMSG1        1357      
SDMSG2        1362      SSSTEP        1366      SSTEP3        1390      
SSTEP4        13A1      SZCRLF        1420      TOPRAM        3FFF      
TMPPC         3F41      TMPAF         3F43      TMPBC         3F45      
TMPDE         3F47      TMPHL         3F49      TMPIX         3F4B      
TMPIY         3F4D      TMPSP         3F4F      TRAP          0087      
TYPESZ        03B8      TYPEBF        03BF      TONE          05B5      
TONE1         05BF      TONE2         05C6      TONE3         05C9      
TXDATA        084B      TRACE         099F      TUNE1         09E8      
TUNE2         0A28      TIME          0CFD      TIME1         0D15      
TIMKEY        0D2F      TXCRLF        105A      UPDATE        0376      
UPDBUF        0D55      UPDBF1        0D5B      UPDBF2        0D7D      
UPDBF3        0DA1      UPDBF4        0DB3      UPDBF5        0DCC      
VARBLS        3F00      VARIDX        3F00      VARRAM        039F      
VERS          03AA      VERSZ         03C0      VERBCD        03C4      
WIN           0BD2      WWATCH        0EF5      WWACH1        0F0F      
WWACH2        0F11      WWACH3        0F2C      WWACH4        0F2F      
WWACH5        0F31      WWACH6        0F42      WARM          1009      
WRDOUT        1318      WRDASC        1324      

tasm: Number of errors = 0
