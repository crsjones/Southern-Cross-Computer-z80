0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ;
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ; VERSION 1.8  03/2023  ADD 'UPDATE','SCBUG' TO SYSTEM CALLS
0028   0000             ;                       ADD A SYSTEM CALL TO RETURN THE BASE ADDRESS OF THE RAM VARIABLES
0029   0000             ;                       ADDED SYSTEM CALLS FOR STRINGS AND BIT FIELDS TO RETURN BOARD TYPE AND KEYBOARD TYPE
0030   0000             ;                       FIXED THE SERIAL GO ROUTINE SO IT RETURNS TO THE SERIAL MONITOR WHEN RET
0031   0000             ;                       REMOVE INCH/PUTCH SERIAL REDIRECTION
0032   0000             ;                       ADDED A BIT BANG SERIAL INITIALISATION SYSTEM CALL
0033   0000             ;                       TRAPPED UNUSED SYSTEM CALLS
0034   0000             ;                       CONVERT TEC-1F KEY CODES FOR KEYS ABOVE 'F' INTO SC KEY CODES
0035   0000             ;                       SCANKEY ROUTINE RETURNS SHIFT KEY STATUS WITH KEYPRESS
0036   0000             ;                       TURN ON THE SPEAKER AT STARTUP
0037   0000             ;
0038   0000             ;IF DEFINED THE TARGET IS THE TEC-1F ELSE SC
0039   0000             ;#DEFINE TEC-1F
0040   0000             ; IF DEFINED USE THE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0041   0000             #DEFINE 74C923
0042   0000             ;
0043   0000             ;---------------
0044   0000             ; RAM MEMORY MAP
0045   0000             ;---------------
0046   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0047   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0048   0000             ;
0049   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0050   0000             BUFFER	.EQU	VARBLS-0100H	;GENERAL PURPOSE BUFFER AREA
0051   0000             ISTACK	.EQU	BUFFER-0200H	;INITIAL MONITOR STACK
0052   0000             ;
0053   0000             RAMEND	.EQU	ISTACK-0400H	;END OF USER RAM
0054   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0055   0000             ;
0056   0000             ; I/O PORT ADDRESSES
0057   0000             ;
0058   0000~            #IFDEF TEC-1F
0059   0000~            ;
0060   0000~            ; TEC-1 I/O ASSIGNMENTS
0061   0000~            ;
0062   0000~            KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0063   0000~            SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0064   0000~            DISPLY	.EQU	02H	;DISPLAY LATCH
0065   0000~            PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0066   0000~            PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0067   0000~            PORT5	.EQU	05H
0068   0000~            PORT6	.EQU	06H
0069   0000~            PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0070   0000             #ELSE
0071   0000             ;
0072   0000             ; SOUTHERN CROSS I/O ASSIGNMENTS
0073   0000             ;
0074   0000             IO0	.EQU	80H	;IO PORT 0
0075   0000             IO1	.EQU	81H	;IO PORT 1
0076   0000             IO2	.EQU	82H	;IO PORT 2
0077   0000             IO3	.EQU	83H	;IO PORT 3
0078   0000             DISPLY	.EQU	84H	;DISPLAY LATCH
0079   0000             SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0080   0000             KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0081   0000             IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0082   0000             #ENDIF
0083   0000             ;
0084   0000             ; BIT BANG BAUD RATE CONSTANTS
0085   0000             ;
0086   0000             B300	.EQU	0220H	;300 BAUD
0087   0000             B1200	.EQU	0080H	;1200 BAUD
0088   0000             B2400	.EQU	003FH	;2400 BAUD
0089   0000             B4800	.EQU	001BH	;4800 BAUD
0090   0000             B9600	.EQU	000BH	;9600 BAUD
0091   0000             ;
0092   0000             ; KEY CODES
0093   0000             ;
0094   0000             KEYFN	.EQU	10H	;FN OR GO KEY
0095   0000             KEYAD	.EQU	11H	;ADDRESS KEY
0096   0000             KEYINC	.EQU	12H	;PLUS KEY
0097   0000             KEYDEC	.EQU	13H	;MINUS KEY
0098   0000             
0099   0000             ;-------------------------
0100   0000             ; MONITOR GLOBAL VARIABLES
0101   0000             ;-------------------------
0102   0000             ;
0103   3F00             	.ORG	VARBLS
0104   3F00             ;
0105   3F00             ;BIT BANG SERIAL MONITOR (SCBUG) VARIABLES
0106   3F00             ;
0107   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0108   3F10             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0109   3F12             ADDR	.BLOCK	2	;TEMP ADDRESS
0110   3F14             DATA	.BLOCK	1	;TEMP DATA @ ADDRESS
0111   3F15             ;
0112   3F15             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0113   3F17             ;
0114   3F17             ; DALLAS SMARTWATCH REGISTERS
0115   3F17             ;
0116   3F17             CALMDE	.BLOCK	2	;CALENDAR MODE
0117   3F19             SWREG0	.BLOCK	1	;10THS, 100THS
0118   3F1A             SWREG1	.BLOCK	1	;SECONDS
0119   3F1B             SWREG2	.BLOCK	1	;MINUTES
0120   3F1C             SWREG3	.BLOCK	1	;HOURS
0121   3F1D             SWREG4	.BLOCK	1	;DAY
0122   3F1E             SWREG5	.BLOCK	1	;DATE
0123   3F1F             SWREG6	.BLOCK	1	;MONTH
0124   3F20             SWREG7	.BLOCK	1	;YEAR
0125   3F21             ;
0126   3F21             BAUD	.BLOCK	2	;BIT BANG BAUD RATE
0127   3F23             KEYTIM	.BLOCK	2	;BEEP DELAY
0128   3F25             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0129   3F27             ;
0130   3F27             ; BLOCK FUNCTIONS
0131   3F27             ;
0132   3F27             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0133   3F29             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0134   3F2B             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0135   3F2D             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0136   3F2F             ;
0137   3F2F             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0138   3F31             ;
0139   3F31             ; DISPLAY SCAN REGISTERS
0140   3F31             ;
0141   3F31             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0142   3F37             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0143   3F38             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0144   3F39             ;
0145   3F39             ; MONITOR VARIABLES
0146   3F39             ;
0147   3F39             MODE	.BLOCK	2	;DISPLAY MODE
0148   3F3B             ADRESS	.BLOCK	2	;USER ADDRESS
0149   3F3D             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0150   3F3F             ;
0151   3F3F             ; TEMPORARY REGISTER STORAGE
0152   3F3F             ;
0153   3F3F             REGPNT	.BLOCK	2	;REGISTER POINTER
0154   3F41             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0155   3F43             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0156   3F45             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0157   3F47             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0158   3F49             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0159   3F4B             TMPIX	.BLOCK	2	;INDEX REGISTER X
0160   3F4D             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0161   3F4F             TMPSP	.BLOCK	2	;STACK POINTER
0162   3F51             ;
0163   3F51             ; RESTART JUMP TABLE AND HARWARE TEST
0164   3F51             ;
0165   3F51             RST08	.BLOCK	2	;RESTART 08H JUMP
0166   3F53             RST10	.BLOCK	2	;RESTART 10H JUMP
0167   3F55             RST18	.BLOCK	2	;RESTART 18H JUMP
0168   3F57             RST20	.BLOCK	2	;RESTART 20H JUMP
0169   3F59             RST28	.BLOCK	2	;RESTART 28H JUMP
0170   3F5B             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0171   3F5D             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0172   3F5F             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0173   3F60             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0174   3F61             SYSERR	.BLOCK	2	;SYSTEM CALL ERROR JUMP
0175   3F63             ;----------------
0176   3F63             ; RESTART VECTORS
0177   3F63             ;----------------
0178   3F63             ;
0179   3F63             ;  RESTART 00H - RST 0
0180   3F63             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0181   3F63             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0182   3F63             ;
0183   0000             	.ORG	0000H
0184   0000 C3 00 02    RSTVEC	JP	RESET
0185   0003             ;
0186   0003             ; RESTART 08H - RST 1
0187   0003             ;
0188   0008             	.ORG	0008H
0189   0008 E5          	PUSH	HL
0190   0009 2A 51 3F    	LD	HL,(RST08)
0191   000C E9          	JP	(HL)
0192   000D             ;
0193   000D             ; RESTART 10H - RST 2
0194   000D             ;
0195   0010             	.ORG	0010H
0196   0010 E5          	PUSH	HL
0197   0011 2A 53 3F    	LD	HL,(RST10)
0198   0014 E9          	JP	(HL)
0199   0015             ;
0200   0015             ; RESTART 18H - RST 3
0201   0015             ;
0202   0018             	.ORG	0018H
0203   0018 E5          	PUSH	HL
0204   0019 2A 55 3F    	LD	HL,(RST18)
0205   001C E9          	JP	(HL)
0206   001D             ;
0207   001D             ; RESTART 20H - RST 4
0208   001D             ;
0209   0020             	.ORG	0020H
0210   0020 E5          	PUSH	HL
0211   0021 2A 57 3F    	LD	HL,(RST20)
0212   0024 E9          	JP	(HL)
0213   0025             ;
0214   0025             ; RESTART 28H - RST 5
0215   0025             ;
0216   0028             	.ORG	0028H
0217   0028 E5          	PUSH	HL
0218   0029 2A 59 3F    	LD	HL,(RST28)
0219   002C E9          	JP	(HL)
0220   002D             ;
0221   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0222   002D             ;
0223   0030             	.ORG	0030H
0224   0030 C3 6B 00    RST30	JP	SYSCALL
0225   0033             ;
0226   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0227   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0228   0033             ;INT OCCURS- FURTHER INTERRUPTS
0229   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0230   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0231   0033             ;STARTS HERE
0232   0033             ;
0233   0038             	.ORG	0038H
0234   0038 E5          	PUSH	HL
0235   0039 2A 5B 3F    	LD	HL,(RST38)
0236   003C E9          	JP	(HL)
0237   003D             ;
0238   003D             ; RESTART 66H NMI VECTOR
0239   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0240   003D             ;
0241   0066             	.ORG	0066H
0242   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0243   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0244   0066~            #IFDEF TEC-1F
0245   0066~                RETI
0246   0066             #ELSE
0247   0066 E5          	PUSH	HL
0248   0067 2A 5D 3F    	LD	HL,(RST66)
0249   006A E9          	JP	(HL)
0250   006B             #ENDIF
0251   006B             ;--------------------
0252   006B             ; SYSTEM CALL HANDLER
0253   006B             ;--------------------
0254   006B             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0255   006B             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0256   006B             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0257   006B             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0258   006B             ;CHANGE IN SUBSEQUENT MONITORS
0259   006B             ;
0260   006B             ;ENTRY : C = CALL NUMBER
0261   006B             ;SEE ROUTINES FOR ENTRY AND EXIT
0262   006B             ;PARAMETERS
0263   006B             ;
0264   006B 3B          SYSCALL	DEC	SP
0265   006C 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0266   006D ED 73 25 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0267   0071 F5          	PUSH	AF
0268   0072 D5          	PUSH	DE
0269   0073 E5          	PUSH	HL	;SAVE REGISTERS
0270   0074 79          	LD	A,C	;GET CALL NUMBER
0271   0075 E6 7F       	AND	127	;ENSURE IN LIMITS
0272   0077 CB 27       	SLA	A	;MULTIPLY BY TWO
0273   0079 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0274   007B 6F          	LD	L,A	;LOAD INDEX
0275   007C 7E          	LD	A,(HL)
0276   007D 23          	INC	HL
0277   007E 56          	LD	D,(HL)	;GET JUMP ADDRESS
0278   007F 2A 25 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0279   0082 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0280   0083 23          	INC	HL
0281   0084 7A          	LD	A,D
0282   0085 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0283   0086 E1          	POP	HL
0284   0087 D1          	POP	DE
0285   0088 F1          	POP	AF	;RESTORE REGISTERS
0286   0089 C9          	RET		;JUMPS TO SYSTEM CALL
0287   008A             ;
0288   008A             ; ERROR TRAP
0289   008A             ; HALT THE MACHINE UNTIL RESET OR INTERRUPT
0290   008A 2A 61 3F    TRAP	LD	HL,(SYSERR)
0291   008D E9          	JP	(HL)
0292   008E             ;
0293   008E 76          STOP	HALT
0294   008F             ;-----------------------
0295   008F             ; SYSTEM CALL JUMP TABLE
0296   008F             ;-----------------------
0297   0100             	.ORG	0100H
0298   0100 7D 02 AA 03 SYSJMP	.DW	MAIN,VERS,DISADD,DISBYT,CLRBUF,SCAND,CONBYT,CONVHI
0298   0104 CD 03 E2 03 
0298   0108 4C 04 1B 04 
0298   010C EB 03 F8 03 
0299   0110 FC 03 78 04 	.DW CONVLO,SKEYIN,SKEYRL,KEYIN,KEYREL,MENU,CHKSUM,MUL16
0299   0114 85 04 92 04 
0299   0118 9C 04 A6 04 
0299   011C C9 04 01 05 
0300   0120 E9 04 D9 04 	.DW RAND,INDEXB,INDEXW,MUSIC,TONE,BEEP,SKATE,TXDATA
0300   0124 E0 04 18 05 
0300   0128 95 05 B7 05 
0300   012C BC 0C 2B 08 
0301   0130 56 08 08 08 	.DW RXDATA,ASCHEX,WWATCH,RWATCH,ONESEC,RLSTEP,DELONE,SCANKEY
0301   0134 D5 0E 4B 0E 
0301   0138 35 0F EA 0B 
0301   013C 18 0C 5B 04 
0302   0140             	
0303   0140 80 07 C2 0B 	.DW INTELH,SPLIT,SNDMSG,BITASC,WRDASC,BYTASC,NYBASC,PCBTYP
0303   0144 32 13 1D 13 
0303   0148 04 13 09 13 
0303   014C 12 13 A3 03 
0304   0150 07 14 B1 03 	.DW PRNTSZ,KBDTYP,UPDATE,VARRAM,SERINI,SCBUG,TRAP,TRAP
0304   0154 76 03 9F 03 
0304   0158 11 08 4B 0F 
0304   015C 8A 00 8A 00 
0305   0160 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0305   0164 8A 00 8A 00 
0305   0168 8A 00 8A 00 
0305   016C 8A 00 8A 00 
0306   0170 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0306   0174 8A 00 8A 00 
0306   0178 8A 00 8A 00 
0306   017C 8A 00 8A 00 
0307   0180             	
0308   0180 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0308   0184 8A 00 8A 00 
0308   0188 8A 00 8A 00 
0308   018C 8A 00 8A 00 
0309   0190 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0309   0194 8A 00 8A 00 
0309   0198 8A 00 8A 00 
0309   019C 8A 00 8A 00 
0310   01A0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0310   01A4 8A 00 8A 00 
0310   01A8 8A 00 8A 00 
0310   01AC 8A 00 8A 00 
0311   01B0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0311   01B4 8A 00 8A 00 
0311   01B8 8A 00 8A 00 
0311   01BC 8A 00 8A 00 
0312   01C0             	
0313   01C0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0313   01C4 8A 00 8A 00 
0313   01C8 8A 00 8A 00 
0313   01CC 8A 00 8A 00 
0314   01D0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0314   01D4 8A 00 8A 00 
0314   01D8 8A 00 8A 00 
0314   01DC 8A 00 8A 00 
0315   01E0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0315   01E4 8A 00 8A 00 
0315   01E8 8A 00 8A 00 
0315   01EC 8A 00 8A 00 
0316   01F0 8A 00 8A 00 	.DW	TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP,TRAP
0316   01F4 8A 00 8A 00 
0316   01F8 8A 00 8A 00 
0316   01FC 8A 00 8A 00 
0317   0200             ;------------------------------
0318   0200             ; POWER UP RESET / MANUAL RESET
0319   0200             ;------------------------------
0320   0200             	.ORG	0200H
0321   0200             ;
0322   0200             ; WAIT FOR SMART SOCKET
0323   0200             ; TO RECOVER FROM POWER DOWN
0324   0200             ;
0325   0200 3E 55       RESET	LD	A,55H
0326   0202 32 60 3F    	LD	(DALLAS),A	;WRITE TO RAM
0327   0205 AF          	XOR	A
0328   0206 D3 84       	OUT	(DISPLY),A	;WRITE NOTHING TO
0329   0208 D3 85       	OUT	(SCAN),A	;ON BOARD I/O
0330   020A DB 86       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0331   020C 3A 60 3F    	LD	A,(DALLAS)	;READ FROM RAM
0332   020F FE 55       	CP	55H	;IS IT READY?
0333   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0334   0214             ;
0335   0214             ; LOAD STACK POINTER
0336   0214             ;
0337   0214 31 00 3C    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0338   0217 ED 56       	IM	1	;SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0339   0219             ;
0340   0219             ; SET UP RESTART VECTORS
0341   0219             ;
0342   0219 21 14 02    	LD	HL,RESET1
0343   021C 22 51 3F    	LD	(RST08),HL
0344   021F 22 53 3F    	LD	(RST10),HL
0345   0222 22 55 3F    	LD	(RST18),HL
0346   0225 22 57 3F    	LD	(RST20),HL
0347   0228 22 59 3F    	LD	(RST28),HL
0348   022B 22 5D 3F    	LD	(RST66),HL	;NMI INTERRUPT
0349   022E 21 E1 05    	LD	HL,SSTEP
0350   0231 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
0351   0234 21 8E 00    	LD	HL,STOP
0352   0237 22 61 3F    	LD	(SYSERR),HL	;INVALID SYSTEM CALL ERROR
0353   023A             ;
0354   023A             ; PERFORM CHECKSUM ON USER RAM
0355   023A             ;
0356   023A 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0357   023D 11 00 38    	LD	DE,RAMEND	;END OF USER RAM
0358   0240 CD C9 04    	CALL	CHKSUM
0359   0243 32 5F 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0360   0246             ;
0361   0246             ; SET UP DEFAULT VARIABLES
0362   0246             ;
0363   0246 21 2F 07    	LD	HL,FUNLST
0364   0249 22 15 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0365   024C             ;
0366   024C             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0367   024C             ;
0368   024C 21 4B 0F    	LD	HL,SCBUG	;SERIAL MONITOR
0369   024F 22 2F 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0370   0252 3E 00       	LD	A,00H
0371   0254 32 3F 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0372   0257 32 39 3F    	LD	(MODE),A	;START WITH SPEAKER ON
0373   025A             ;
0374   025A 21 1B 00    	LD	HL,B4800	;DEFAULT BAUD RATE
0375   025D CD 11 08    	CALL SERINI	;INITIALISE THE SERIAL PORT
0376   0260             ;
0377   0260 21 00 01    	LD	HL,0100H
0378   0263 22 3D 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0379   0266 21 00 10    	LD	HL,1000H
0380   0269 22 23 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0381   026C             #IFDEF 74C923
0382   026C 3E 20       	LD	A,20H
0383   026E~            #ELSE
0384   026E~            	LD	A,08H
0385   026E             #ENDIF
0386   026E 32 38 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0387   0271 CD B7 05    	CALL	BEEP
0388   0274 CD B7 05    	CALL	BEEP
0389   0277             #IFDEF 74C923
0390   0277 3E 08       	LD	A,08H
0391   0279~            #ELSE
0392   0279~            	LD	A,10H
0393   0279             #ENDIF
0394   0279 32 37 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0395   027C             ;
0396   027C FB          	EI		;ENABLE INTERRUPTS
0397   027D             ;
0398   027D             ;-----------------
0399   027D             ; SET UP MAIN LOOP
0400   027D             ;-----------------
0401   027D 31 00 3C    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0402   0280 21 00 20    	LD	HL,RAMSRT
0403   0283 22 3B 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0404   0286 3A 39 3F    	LD	A,(MODE)
0405   0289 F6 80       	OR	80H	;START OFF IN DATA MODE
0406   028B 32 39 3F    	LD	(MODE),A
0407   028E             ;
0408   028E             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0409   028E             ;
0410   028E CD 76 03    MAIN1	CALL	UPDATE
0411   0291 CD 78 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0412   0294 21 A3 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0413   0297 CD A6 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0414   029A CD 76 03    	CALL	UPDATE	;UPDATE BUFFER AND
0415   029D CD 85 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0416   02A0 C3 91 02    	JP	MAIN2
0417   02A3             ;
0418   02A3             ; MAIN MENU KEY TABLE
0419   02A3             ;
0420   02A3 14          MENLST	.DB	20
0421   02A4 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0421   02A8 04 05 06 07 
0422   02AC 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0422   02B0 0C 0D 0E 0F 
0423   02B4 10 11 12 13 	.DB	10H,11H,12H,13H
0424   02B8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0424   02BC E0 02 E0 02 
0425   02C0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0425   02C4 E0 02 E0 02 
0426   02C8 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0426   02CC E0 02 E0 02 
0427   02D0 E0 02 E0 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0427   02D4 E0 02 E0 02 
0428   02D8 0A 07 12 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0428   02DC 1E 03 4A 03 
0429   02E0             ;---------------------------------------------------
0430   02E0             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0431   02E0             ;---------------------------------------------------
0432   02E0 CD B7 05    HEXKEY	CALL	BEEP
0433   02E3 21 39 3F    	LD	HL,MODE
0434   02E6 CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0435   02E8 CA F9 02    	JP	Z,HEXKY2	;IN ADDR MODE
0436   02EB             ;
0437   02EB             ; IN DATA MODE
0438   02EB             ;
0439   02EB 2A 3B 3F    HEXKY1	LD	HL,(ADRESS)
0440   02EE CB 26       	SLA	(HL)	;FROM THE CURRENT
0441   02F0 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0442   02F2 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0443   02F4 CB 26       	SLA	(HL)	;PUT THE KEY IN
0444   02F6 B6          	OR	(HL)	;THE NEW DATA BACK AT
0445   02F7 77          	LD	(HL),A	;THE CURRENT ADDRESS
0446   02F8 C9          	RET
0447   02F9             ;
0448   02F9             ; IN ADDRESS MODE
0449   02F9             ;
0450   02F9 2A 3B 3F    HEXKY2	LD	HL,(ADRESS)
0451   02FC CB 25       	SLA	L	;CURRENT ADDRESS
0452   02FE CB 14       	RL	H	;AND DO A 16 BIT
0453   0300 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0454   0302 CB 14       	RL	H	;TO MAKE  ROOM
0455   0304 CB 25       	SLA	L	;FOR THE NEW KEY
0456   0306 CB 14       	RL	H
0457   0308 CB 25       	SLA	L
0458   030A CB 14       	RL	H
0459   030C B5          	OR	L	;IT IN THE LEAST
0460   030D 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0461   030E 22 3B 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0462   0311 C9          	RET
0463   0312             ;-------------
0464   0312             ; CHANGE MODES
0465   0312             ;-------------
0466   0312 CD B7 05    ADDKEY	CALL	BEEP
0467   0315 3A 39 3F    	LD	A,(MODE)
0468   0318 EE 80       	XOR	80H	;TOGGLE MODE
0469   031A 32 39 3F    	LD	(MODE),A
0470   031D C9          	RET
0471   031E             ;------------------
0472   031E             ; INCREMENT ADDRESS
0473   031E             ;------------------
0474   031E CD B7 05    INCKEY	CALL	BEEP
0475   0321 2A 3B 3F    INCKY1	LD	HL,(ADRESS)
0476   0324 23          	INC	HL	;INC ADDRESS
0477   0325 22 3B 3F    	LD	(ADRESS),HL
0478   0328 CD 76 03    	CALL	UPDATE
0479   032B 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0480   032E CD 1B 04    INCKY2	CALL	SCAND
0481   0331 CD 5B 04    	CALL	SCANKEY
0482   0334 CB 6F       	BIT	5,A	;RETURN IF
0483   0336 28 11       	JR	Z,INCKY3	; KEY RELEASED
0484   0338 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0485   033A FE 12       	CP	KEYINC	; '+'
0486   033C 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0487   033E 11 01 00    	LD	DE,0001H
0488   0341 ED 52       	SBC	HL,DE
0489   0343 D2 2E 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0490   0346 C3 21 03    	JP	INCKY1	;INC ADDRESS
0491   0349 C9          INCKY3	RET
0492   034A             ;------------------
0493   034A             ; DECREMENT ADDRESS
0494   034A             ;------------------
0495   034A CD B7 05    DECKEY	CALL	BEEP
0496   034D 2A 3B 3F    DECKY1	LD	HL,(ADRESS)
0497   0350 2B          	DEC	HL	;DEC ADDRESS
0498   0351 22 3B 3F    	LD	(ADRESS),HL
0499   0354 CD 76 03    	CALL	UPDATE
0500   0357 2A 3D 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0501   035A CD 1B 04    DECKY2	CALL	SCAND
0502   035D CD 5B 04    	CALL	SCANKEY
0503   0360 CB 6F       	BIT	5,A	;RETURN IF
0504   0362 28 11       	JR	Z,DECKY3	;KEY RELEASED
0505   0364 E6 1F       	AND	1FH
0506   0366 FE 13       	CP	KEYDEC	; '-'
0507   0368 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0508   036A 11 01 00    	LD	DE,0001H
0509   036D ED 52       	SBC	HL,DE
0510   036F D2 5A 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0511   0372 C3 4D 03    	JP	DECKY1	;INC ADDRESS 
0512   0375 C9          DECKY3	RET
0513   0376             ;-----------------------------------------
0514   0376             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0515   0376             ;-----------------------------------------
0516   0376             ;
0517   0376             ; UPDATE THE DISPLAY BUFFER WITH THE 
0518   0376             ; CURRENT ADDRESS, THE DATA AT THE CURRENT ADDRESS
0519   0376             ; AND SET THE DECIMAL POINTS TO
0520   0376             ; ADDRESS OR DATA MODE
0521   0376             ;
0522   0376             ;	ENTRY : NONE
0523   0376             ;	EXIT :  MODIFIES A
0524   0376             ;
0525   0376 E5          UPDATE	PUSH	HL
0526   0377 C5          	PUSH	BC
0527   0378 2A 3B 3F    	LD	HL,(ADRESS)
0528   037B CD CD 03    	CALL	DISADD	;AND DATA, PUT IN
0529   037E 7E          	LD	A,(HL)
0530   037F CD E2 03    	CALL	DISBYT	;DISPLAY BUFFER
0531   0382             ;
0532   0382             ; IN ADDRESS OR DATA MODE?
0533   0382             ;
0534   0382 21 39 3F    	LD	HL,MODE
0535   0385 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0536   0387 CA 92 03    	JP	Z,ADMODE	;ADDRESS MODE
0537   038A             ;
0538   038A             ; SHOW DATA MODE
0539   038A             ;
0540   038A 21 31 3F    	LD	HL,DISBUF	;SET THE DP'S
0541   038D 06 02       	LD	B,2	;IN THE DATA
0542   038F C3 97 03    	JP	SETDP	;DISPLAY
0543   0392             ;
0544   0392             ; SHOW ADDRESS MODE
0545   0392             ;
0546   0392 21 33 3F    ADMODE	LD	HL,DISBUF+2
0547   0395 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0548   0397             ;
0549   0397             ; SET DECIMAL POINT
0550   0397             ;
0551   0397             ;SET DP IN THE BYTE POINTED TO BY HL
0552   0397             ;
0553   0397~            #IFDEF TEC-1F
0554   0397~            SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0555   0397             #ELSE
0556   0397 CB FE       SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0557   0399             #ENDIF
0558   0399 23          	INC	HL	;POINT TO NEXT BYTE
0559   039A 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0560   039C C1          	POP	BC
0561   039D E1          	POP	HL
0562   039E C9          	RET
0563   039F             ;-----------------------------------------
0564   039F             ; RETURN THE BASE ADDRESS OF RAM VARIABLES
0565   039F             ;-----------------------------------------
0566   039F             ;
0567   039F             ;	ENTRY: NONE
0568   039F             ;	EXIT: HL
0569   039F             ;
0570   039F 21 00 3F    VARRAM	LD	HL,VARBLS
0571   03A2 C9          		RET
0572   03A3             ;-----------
0573   03A3             ; BOARD TYPE
0574   03A3             ;-----------
0575   03A3             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0576   03A3             ; ENTRY = NONE
0577   03A3             ; EXIT: HL -> 'SC-1'    ACCA = 01H
0578   03A3             ;             'TEC-1F'	ACCA = 02H
0579   03A3             ;
0580   03A3 21 B8 03    PCBTYP	LD	HL,TYPESZ
0581   03A6 3A BD 03    	LD	A,(TYPEBF)
0582   03A9 C9          	RET
0583   03AA             ;---------------
0584   03AA             ; VERSION NUMBER
0585   03AA             ;---------------
0586   03AA             ;RETURNS THE SOFTWARE VERSION NUMBER
0587   03AA             ;
0588   03AA             ;	ENTRY : NONE
0589   03AA             ; EXIT : HL -> VERSION NUMBER STRING
0590   03AA             ;        ACCA = BCD VERSION NUMBER D7-D4 = MAJOR, D3-D0 MINOR
0591   03AA             ;
0592   03AA 21 BE 03    VERS	LD	HL,VERSZ
0593   03AD 3A C2 03    	LD	A,(VERBCD)
0594   03B0 C9          	RET
0595   03B1             ;--------------
0596   03B1             ; KEYBOARD TYPE
0597   03B1             ;--------------
0598   03B1             ; RETURNS THE TYPE OF KEYBOARD USED
0599   03B1             ; ENTRY = NONE
0600   03B1             ; EXIT: HL -> KEYBOARD TYPE STRING
0601   03B1             ;       ACCA = 01H MM74C923 HARDWARE ENCODER
0602   03B1             ;       ACCA = 02H SOFTWARE SCANNED
0603   03B1             ;
0604   03B1 21 C3 03    KBDTYP	LD	HL,KYBSZ
0605   03B4 3A CC 03    	LD	A,(KYBDBF)
0606   03B7 C9          	RET
0607   03B8             
0608   03B8~            #IFDEF TEC-1F
0609   03B8~            TYPESZ	.DB	"TEC-1F",0
0610   03B8~            TYPEBF	.DB	02H
0611   03B8             #ELSE
0612   03B8 53 43 2D 31 TYPESZ	.DB	"SC-1",0
0612   03BC 00 
0613   03BD 01          TYPEBF	.DB 01H
0614   03BE             #ENDIF
0615   03BE             
0616   03BE 31 2E 38 00 VERSZ	.DB	"1.8",0
0617   03C2 18          VERBCD	.DB 18H
0618   03C3             
0619   03C3             #IFDEF 74C923
0620   03C3 48 61 72 64 KYBSZ	.DB "Hardware",0
0620   03C7 77 61 72 65 
0620   03CB 00 
0621   03CC 01          KYBDBF	.DB	01H	
0622   03CD~            #ELSE
0623   03CD~            KYBSZ	.DB "Software",0
0624   03CD~            KYBDBF	.DB	02H	
0625   03CD             #ENDIF
0626   03CD             
0627   03CD             ;-------------------------
0628   03CD             ; ADDRESS > DISPLAY BUFFER
0629   03CD             ;-------------------------
0630   03CD             ;CONVERT HL TO SEVEN SEGMENT CODE
0631   03CD             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0632   03CD             ;
0633   03CD             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0634   03CD             ;
0635   03CD             ; EXIT  : NO REGISTERS MODIFIED
0636   03CD             ;
0637   03CD F5          DISADD	PUSH	AF
0638   03CE E5          	PUSH	HL
0639   03CF E5          	PUSH	HL
0640   03D0 7C          	LD	A,H
0641   03D1 CD EB 03    	CALL	CONBYT
0642   03D4 22 35 3F    	LD	(DISBUF+4),HL
0643   03D7 E1          	POP	HL
0644   03D8 7D          	LD	A,L
0645   03D9 CD EB 03    	CALL	CONBYT
0646   03DC 22 33 3F    	LD	(DISBUF+2),HL
0647   03DF E1          	POP	HL
0648   03E0 F1          	POP	AF
0649   03E1 C9          	RET
0650   03E2             ;---------------------------
0651   03E2             ; DATA BYTE > DISPLAY BUFFER
0652   03E2             ;---------------------------
0653   03E2             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0654   03E2             ;AND PUT IN DATA DISPLAY BUFFER.
0655   03E2             ;
0656   03E2             ; ENTRY :  A = DATA DISPLAY BYTE
0657   03E2             ;
0658   03E2             ; EXIT  : NO REGISTERS MODIFIED
0659   03E2             ;
0660   03E2 E5          DISBYT	PUSH	HL
0661   03E3 CD EB 03    	CALL	CONBYT
0662   03E6 22 31 3F    	LD	(DISBUF),HL
0663   03E9 E1          	POP	HL
0664   03EA C9          	RET
0665   03EB             ;---------------------------------------
0666   03EB             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0667   03EB             ;---------------------------------------
0668   03EB             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0669   03EB             ; FOR DISPLAY
0670   03EB             ; ENTRY : A = BYTE TO BE CONVERTED
0671   03EB             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0672   03EB             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0673   03EB             ;         A = NOT MODIFIED
0674   03EB F5          CONBYT	PUSH	AF
0675   03EC F5          	PUSH	AF
0676   03ED CD F8 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0677   03F0 67          	LD	H,A
0678   03F1 F1          	POP	AF
0679   03F2 CD FC 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0680   03F5 6F          	LD	L,A
0681   03F6 F1          	POP	AF
0682   03F7 C9          	RET
0683   03F8             ;---------------------------------------------
0684   03F8             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0685   03F8             ;---------------------------------------------
0686   03F8             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0687   03F8             ; FOR SEVEN SEGMENT DISPLAYS
0688   03F8             ; CONVHI = CONVERTS HIGH NYBBLE
0689   03F8             ; CONVLO = CONVERTS LO NYBBLE
0690   03F8             ;
0691   03F8             ; ENTRY : A = NYBBLE TO BE CONVERTED
0692   03F8             ; EXIT  : A = SEVEN SEGMENT CODE
0693   03F8             ;
0694   03F8 07          CONVHI	RLCA
0695   03F9 07          	RLCA
0696   03FA 07          	RLCA	;MOVE TO LO NYBBLE
0697   03FB 07          	RLCA	;FOR CONVERSION
0698   03FC C5          CONVLO	PUSH	BC
0699   03FD E5          	PUSH	HL
0700   03FE 21 0B 04    	LD	HL,SEGMNT	;USE THE HEX VALUE
0701   0401 E6 0F       	AND	0FH	;TO INDEX TO THE
0702   0403 4F          	LD	C,A	;THE SEVEN SEGMENT
0703   0404 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0704   0406 09          	ADD	HL,BC	;AND RETURN WITH
0705   0407 7E          	LD	A,(HL)	;CODE IN A
0706   0408 E1          	POP	HL
0707   0409 C1          	POP	BC
0708   040A C9          	RET
0709   040B             ;
0710   040B             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0711   040B             ;
0712   040B~            #IFDEF TEC-1F
0713   040B~            SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0714   040B~            	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0715   040B~            	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0716   040B~            	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0717   040B             #ELSE
0718   040B 3F 06 5B 4F SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0719   040F 66 6D 7D 07 	.DB	66H,6DH,7DH,07H	;4,5,6,7
0720   0413 7F 6F 77 7C 	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0721   0417 39 5E 79 71 	.DB	39H,5EH,79H,71H	;C,D,E,F
0722   041B             #ENDIF
0723   041B             ;-------------
0724   041B             ; SCAN DISPLAY
0725   041B             ;-------------
0726   041B             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0727   041B             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0728   041B             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0729   041B             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0730   041B             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0731   041B             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0732   041B             ;
0733   041B             ; ENTRY : NONE
0734   041B             ; EXIT  : NO REGISTERS MODIFIED
0735   041B             ;
0736   041B F5          SCAND   PUSH    AF
0737   041C C5          	PUSH	BC
0738   041D E5          	PUSH	HL	;SAVE REGISTERS
0739   041E 21 36 3F    	LD	HL,DISBUF+5
0740   0421 0E 20       	LD	C,20H
0741   0423 7E          SCAND1	LD	A,(HL)
0742   0424 D3 84       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0743   0426 79          	LD	A,C
0744   0427 F6 40       	OR	40H	;KEEP D6 HIGH
0745   0429 D3 85       	OUT	(SCAN),A	;TURN ON DISPLAY
0746   042B 3A 37 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0747   042E 47          	LD	B,A	;TO ADJUST ON TIME
0748   042F 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0749   0431 78          	LD	A,B	;B IS NOW CLEAR, USE
0750   0432 F6 40       	OR	40H	;KEEP D6 HIGH
0751   0434 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0752   0436 3A 38 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0753   0439 47          	LD	B,A	;TO ADJUST OFF TIME
0754   043A 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0755   043C 2B          	DEC	HL	;POINT TO NEXT
0756   043D CB 09       	RRC	C	;ELEMENT IN BUFFER
0757   043F 30 E2       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0758   0441 78          	LD	A,B	;B IS NOW CLEAR, USE
0759   0442 D3 84       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0760   0444 F6 40       	OR	40H	;KEEP D6 HIGH
0761   0446 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0762   0448 E1          	POP	HL
0763   0449 C1          	POP	BC
0764   044A F1          	POP	AF	;RESTORE REGISTERS
0765   044B C9          	RET
0766   044C             ;---------------------
0767   044C             ; CLEAR DISPLAY BUFFER
0768   044C             ;---------------------
0769   044C E5          CLRBUF	PUSH	HL
0770   044D C5          	PUSH	BC
0771   044E 21 31 3F    	LD	HL,DISBUF
0772   0451 06 06       	LD	B,6
0773   0453 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0774   0455 23          	INC	HL	;LOCATIONS POINTED
0775   0456 10 FB       	DJNZ	CLRBF1	;TO BY HL
0776   0458 C1          	POP	BC
0777   0459 E1          	POP	HL
0778   045A C9          	RET
0779   045B             ;--------------
0780   045B             ; SCAN KEYBOARD
0781   045B             ;--------------
0782   045B             ; USE THE HARDWARE OR SOFTWARE SCANNED KEYBOARD
0783   045B             ;
0784   045B             ; BIT 7 NOT USED
0785   045B             ; BIT 6 SHIFT KEY. HIGH IF SHIFT KEY PRESSED
0786   045B             ;
0787   045B             ; BIT 5 DATA AVAILABLE FLAG HIGH IF KEY PRESSED
0788   045B             ; BITS 4 -0 KEY CODE
0789   045B             ;
0790   045B             ; SOFTWARE SCANNED KEYBOARD
0791   045B             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0792   045B             ; AND KEYBOARD BUFFER AS ROWS.
0793   045B             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0794   045B             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0795   045B             ;
0796   045B             ; ENTRY : NONE
0797   045B             ; EXIT  : A = 00H IF NO KEY DETECTED
0798   045B             ;         A = DETECTED KEY BITS 0-4
0799   045B             ;             BIT 5 = KEY AVAILABLE
0800   045B             ;             BIT 6 = SHIFT KEY PUSHED
0801   045B C5          SCANKEY	PUSH	BC
0802   045C D5          	PUSH	DE	;SAVE REGISTERS
0803   045D E5          	PUSH	HL
0804   045E             ;
0805   045E             ;USE THE KEYBOARD ENCODER
0806   045E             ;
0807   045E             #IFDEF 74C923
0808   045E             ;
0809   045E             ; TEC-1F - 74C923 KEYBOARD ENCODER
0810   045E             ;
0811   045E~            #IFDEF TEC-1F
0812   045E~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0813   045E~            	AND	7FH	;STRIP UNUSED BIT
0814   045E~            	BIT	6,A	;DA LOW?
0815   045E~            	JR	Z,SCANKY1	;HANDLE THE KEY
0816   045E~            	LD	A,00H
0817   045E~            	JR	SCANKY4	;NO KEY
0818   045E~            ;
0819   045E~            SCANKY1	BIT	5,A	;SHIFT KEY LOW?
0820   045E~            	JR	Z,SCANKY2
0821   045E~            	RES	5,A
0822   045E~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0823   045E~            	RES	6,A	;RESET SHIFT BIT
0824   045E~            	JR	SCANKY3
0825   045E~            ;
0826   045E~            SCANKY2	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0827   045E~            	SET	6,A	;SET SHIFT BIT
0828   045E~            SCANKY3	SET	5,A	;SET DATA AVAILABLE FLAG
0829   045E~            SCANKY4	POP	HL
0830   045E~            	POP	DE
0831   045E~            	POP	BC
0832   045E~            	RET
0833   045E             #ELSE
0834   045E             ;
0835   045E             ;SC - 74C923 KEYBOARD ENCODER
0836   045E             ;
0837   045E DB 86       	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0838   0460 E6 7F       	AND	7FH	;STRIP UNUSED BIT
0839   0462 CB 6F       	BIT	5,A	;DA HIGH?
0840   0464 20 04       	JR	NZ,SCANKY1	;HANDLE THE KEY
0841   0466 3E 00       	LD	A,00H
0842   0468 18 0A       	JR SCANKY3	;NO KEY
0843   046A             ;
0844   046A CB 77       SCANKY1	BIT	6,A	;SHIFT KEY LOW?
0845   046C 28 04       	JR	Z,SCANKY2
0846   046E CB B7       	RES	6,A	;RESET SHIFT BIT
0847   0470 18 02       	JR	SCANKY3
0848   0472             ;
0849   0472 CB F7       SCANKY2	SET	6,A	;SET SHIFT BIT
0850   0474 E1          SCANKY3	POP	HL
0851   0475 D1          	POP	DE
0852   0476 C1          	POP	BC
0853   0477 C9          	RET
0854   0478             #ENDIF
0855   0478~            #ELSE
0856   0478~            ;
0857   0478~            ; SOFTWARE SCAN KEYBOARD 
0858   0478~            ; SAME FOR TEC-1 AND SC
0859   0478~            ;
0860   0478~            SCANKY1	LD	A,00H
0861   0478~            	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0862   0478~            	LD	B,A		;KEY
0863   0478~            	LD	D,A		;COUNT
0864   0478~            	LD	E,01H	;MASK
0865   0478~            SCANKY2	LD	C,08H	;SCAN
0866   0478~            SCANKY3	LD	A,C
0867   0478~            	OR	40H	;KEEP SERIAL OUTPUT BIT HIGH
0868   0478~            	OUT	(SCAN),A	;OUTPUT SCAN
0869   0478~            	NOP
0870   0478~            	NOP
0871   0478~            	NOP
0872   0478~            	IN	A,(KEYBUF)	;READ KEY BUFFER
0873   0478~            	AND	E	;MASK
0874   0478~            	JR	Z,SCANKY4	;KEY NOT DETECTED
0875   0478~            	INC	D
0876   0478~            	LD	L,B		;SAVE KEY
0877   0478~            ;
0878   0478~            ; END OF ROWS?
0879   0478~            ;
0880   0478~            SCANKY4	INC	B	;NEXT KEY
0881   0478~            	SRA	C	;SHIFT SCAN RIGHT
0882   0478~            	JR	NC,SCANKY3	;NEXT ROW
0883   0478~            ;
0884   0478~            ; END OF COLUMNS?
0885   0478~            ;
0886   0478~            	SLA	E	;SHIFT MASK LEFT
0887   0478~            	BIT	5,E	;END OF KEYSCAN?
0888   0478~            	JR	Z,SCANKY2	;NEXT COLUMN
0889   0478~            ;
0890   0478~            ; END OF SCAN
0891   0478~            ;
0892   0478~            	LD	A,D
0893   0478~            	CP	00H
0894   0478~            	JR	Z,SCANKY6	;NO KEY PRESSED
0895   0478~            	CP	01H
0896   0478~            	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0897   0478~            ;
0898   0478~            ; ONE KEY DETECTED
0899   0478~            ;
0900   0478~            	LD	A,40H
0901   0478~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0902   0478~            ;
0903   0478~            ; HANDLE SHIFT KEY FOR TEC-1F SOFTWARE SCANNED KEYBOARD 
0904   0478~            ;
0905   0478~            #IFDEF TEC-1F
0906   0478~            	IN	A,(KEYBUF)
0907   0478~            	BIT 5,A	;SHIFT LOW?
0908   0478~            	JR	Z,SCANKY5
0909   0478~            ;
0910   0478~            	LD	A,L		;RETURN KEY IN A
0911   0478~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0912   0478~            	SET	5,A	;SET DATA AVAILABLE FLAG
0913   0478~            	JR	SCANKY7
0914   0478~            ;
0915   0478~            SCANKY5	LD	A,L		;RETURN KEY IN A
0916   0478~            	CALL	KEYCVT	;CONVERT TEC CODE TO SC CODE
0917   0478~            	SET	5,A	;SET DATA AVAILABLE FLAG
0918   0478~            	SET	6,A	;SET SHIFT KEY FLAG
0919   0478~            	JR	SCANKY7
0920   0478~            ;
0921   0478~            ; HANDLE SHIFT KEY FOR SC SOFTWARE SCANNED KEYBOARD
0922   0478~            ;
0923   0478~            #ELSE
0924   0478~            	IN	A,(KEYBUF)
0925   0478~            	BIT 6,A	;SHIFT LOW?
0926   0478~            	JR	Z,SCANKY5
0927   0478~            ;
0928   0478~            	LD	A,L		;RETURN KEY IN A
0929   0478~            	SET	5,A	;SET DATA AVAILABLE FLAG
0930   0478~            	JR	SCANKY7
0931   0478~            ;	
0932   0478~            SCANKY5	LD	A,L		;RETURN KEY IN A
0933   0478~            	SET	5,A	;SET DATA AVAILABLE FLAG
0934   0478~            	SET	6,A	;SET SHIFT KEY FLAG
0935   0478~            	JR	SCANKY7
0936   0478~            #ENDIF
0937   0478~            ;
0938   0478~            ; NO KEY
0939   0478~            ;
0940   0478~            SCANKY6	LD	A,40H
0941   0478~            	OUT	(SCAN),A	;CLEAR SCAN REG (KEEP SERIAL DATA OUT BIT HIGH)
0942   0478~            	XOR	A	;CLEAR A
0943   0478~            SCANKY7	POP	HL
0944   0478~            	POP	DE
0945   0478~            	POP	BC
0946   0478~            	RET
0947   0478             #ENDIF
0948   0478             
0949   0478~            #IFDEF TEC-1F 
0950   0478~            ;--------------------------------------------------
0951   0478~            ; CONVERT TEC KEY CODES TO SOUTHERN CROSS KEY CODES
0952   0478~            ;--------------------------------------------------
0953   0478~            ; CONVERT THE TEC KEYCODES;
0954   0478~            ; 'PLUS' (10H) TO 12H
0955   0478~            ; 'MINUS' (11H) TO 13H
0956   0478~            ; 'GO' (12H) TO 'FN' 10H
0957   0478~            ; 'AD' (13H) TO 11H
0958   0478~            KEYCVT	AND	1FH
0959   0478~            	BIT	4,A		;ONLY KEYS ABOVE 0FH
0960   0478~            	JR	Z,KEYCVT1
0961   0478~            	CP	12H		;TEC GO KEY?
0962   0478~            	JR	Z,DEC2
0963   0478~            	CP	13H		;TEC AD KEY?
0964   0478~            	JR	Z,DEC2
0965   0478~            INC2
0966   0478~            	INC	A
0967   0478~            	INC	A
0968   0478~            	RET
0969   0478~            DEC2
0970   0478~            	DEC	A
0971   0478~            	DEC	A
0972   0478~            KEYCVT1	RET
0973   0478             #ENDIF
0974   0478             ;-----------------------------
0975   0478             ; SCAN DISPLAY UNTIL KEY PRESS
0976   0478             ;-----------------------------
0977   0478             ; ENTRY : NONE
0978   0478             ; EXIT  : A = KEY VALUE 00H TO 1FH
0979   0478             ;         FLAG REGISTER MODIFIED
0980   0478             ;
0981   0478 CD 1B 04    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0982   047B CD 5B 04    	CALL	SCANKEY
0983   047E CB 6F       	BIT	5,A
0984   0480 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0985   0482 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0986   0484 C9          	RET
0987   0485             ;-------------------------------
0988   0485             ; SCAN DISPLAY UNTIL KEY RELEASE
0989   0485             ;-------------------------------
0990   0485             ; ENTRY : NONE
0991   0485             ; EXIT  : NONE
0992   0485             ;
0993   0485 F5          SKEYRL	PUSH	AF
0994   0486 CD 1B 04    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0995   0489 CD 5B 04    	CALL	SCANKEY
0996   048C CB 6F       	BIT	5,A
0997   048E 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0998   0490 F1          	POP	AF
0999   0491 C9          	RET
1000   0492             ;-------------------
1001   0492             ; WAIT FOR KEY PRESS
1002   0492             ;-------------------
1003   0492             ; ENTRY : NONE
1004   0492             ; EXIT  : A = KEY VALUE 00H TO 1FH
1005   0492             ;         FLAG REGISTER MODIFIED
1006   0492             ;
1007   0492 CD 5B 04    KEYIN	CALL	SCANKEY
1008   0495 CB 6F       	BIT	5,A
1009   0497 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
1010   0499 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1011   049B C9          	RET
1012   049C             ;---------------------
1013   049C             ; WAIT FOR KEY RELEASE
1014   049C             ;---------------------
1015   049C             ; ENTRY : NONE
1016   049C             ; EXIT  : NONE
1017   049C             ;
1018   049C F5          KEYREL	PUSH	AF
1019   049D CD 5B 04    KEYRL1	CALL	SCANKEY
1020   04A0 CB 6F       	BIT	5,A
1021   04A2 20 F9       	JR	NZ,KEYRL1
1022   04A4 F1          	POP	AF
1023   04A5 C9          	RET
1024   04A6             ;-----------------
1025   04A6             ; KEY MENU HANDLER
1026   04A6             ;-----------------
1027   04A6             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
1028   04A6             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
1029   04A6             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
1030   04A6             ; ENTRY :  A = ELEMENT TO LOOK FOR
1031   04A6             ;         HL = POINTS TO TABLE
1032   04A6             ; EXIT  :  ELEMENT NOT FOUND
1033   04A6             ;           HL HOLDS ADDRESS OF LAST ELEMENT
1034   04A6             ;          ELEMENT FOUND
1035   04A6             ;           CONTROL PASSES TO JUMP ADDRESS WITH
1036   04A6             ;          RETURN ADDRESS OF MENU CALL ON STACK
1037   04A6             ;
1038   04A6 F5          MENU	PUSH	AF
1039   04A7 C5          	PUSH	BC
1040   04A8 D5          	PUSH	DE	;SAVE REGISTERS
1041   04A9 E5          	PUSH	HL	;CALCULATE ADDRESS
1042   04AA 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
1043   04AC 5E          	LD	E,(HL)	;ADDING THE INDEX TO
1044   04AD 23          	INC	HL	;THE ELEMENTS
1045   04AE 19          	ADD	HL,DE	;TO THE ADDR OF THE
1046   04AF 54          	LD	D,H	;TABLE
1047   04B0 5D          	LD	E,L
1048   04B1 E1          	POP	HL
1049   04B2 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
1050   04B3 23          	INC	HL	;POINT TO LIST OF ENTRIES
1051   04B4 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
1052   04B5 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
1053   04B7 23          	INC	HL	;NEXT ENTRY IN LIST
1054   04B8 13          	INC	DE	;NEXT ENTRY IN
1055   04B9 13          	INC	DE	;JUMP TABLE
1056   04BA 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
1057   04BC D1          	POP	DE
1058   04BD C1          	POP	BC
1059   04BE F1          	POP	AF
1060   04BF C9          	RET	;NOT IN TABLE
1061   04C0             ;
1062   04C0             ; FOUND ELEMENT IN THE TABLE
1063   04C0             ; PASS CONTROL TO THE JUMP HANDLER
1064   04C0             ;
1065   04C0 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
1066   04C1 6F          	LD	L,A	;FROM THE TABLE
1067   04C2 13          	INC	DE	;AND JUMP TO
1068   04C3 1A          	LD	A,(DE)	;THE JUMP ADDRESS
1069   04C4 67          	LD	H,A	;FOR THAT ENTRY
1070   04C5 D1          	POP	DE
1071   04C6 C1          	POP	BC
1072   04C7 F1          	POP	AF	;RESTORE REGISTERS
1073   04C8 E9          	JP	(HL)
1074   04C9             ;-------------------
1075   04C9             ; CALCULATE CHECKSUM
1076   04C9             ;-------------------
1077   04C9             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
1078   04C9             ;
1079   04C9             ; ENTRY : HL = START OF BLOCK TO SUM
1080   04C9             ;         DE = END OF BLOCK TO SUM
1081   04C9             ; EXIT  : A =  CHECKSUM
1082   04C9             ;         FLAG REGISTER MODIFIED
1083   04C9             ;
1084   04C9 E5          CHKSUM	PUSH	HL
1085   04CA D5          	PUSH	DE
1086   04CB 13          	INC	DE	;END OF BLOCK+1
1087   04CC AF          	XOR	A	;CLEAR CHECKSUM
1088   04CD 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
1089   04CE 23          	INC	HL	;POINT TO NEXT ELEMENT
1090   04CF A7          	AND	A	;SET CARRY
1091   04D0 E5          	PUSH	HL
1092   04D1 ED 52       	SBC	HL,DE	;SUBTRACT
1093   04D3 E1          	POP	HL
1094   04D4 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
1095   04D6 D1          	POP	DE
1096   04D7 E1          	POP	HL
1097   04D8 C9          	RET
1098   04D9             ;--------------------------
1099   04D9             ; ACCESS BYTE LOOK UP TABLE
1100   04D9             ;--------------------------
1101   04D9             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
1102   04D9             ; UP TABLE
1103   04D9             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1104   04D9             ;         HL = ADDRESS OF LOOK UP TABLE
1105   04D9             ; EXIT : HL = ADDRESS OF ELEMENT A
1106   04D9             ;
1107   04D9 D5          INDEXB	PUSH	DE
1108   04DA 5F          	LD	E,A	;USE DE AS INDEX
1109   04DB 16 00       	LD	D,0	;TO ELEMENT IN TABLE
1110   04DD 19          	ADD	HL,DE	;BY ADDING TO HL
1111   04DE D1          	POP	DE
1112   04DF C9          	RET
1113   04E0             ;--------------------------
1114   04E0             ; ACCESS WORD LOOK UP TABLE
1115   04E0             ;--------------------------
1116   04E0             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
1117   04E0             ; UP TABLE
1118   04E0             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
1119   04E0             ;         HL = ADDRESS OF LOOK UP TABLE
1120   04E0             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
1121   04E0             ;
1122   04E0 D5          INDEXW	PUSH	DE
1123   04E1 5F          	LD	E,A
1124   04E2 CB 23       	SLA	E	;MULTIPLY BY TWO
1125   04E4 16 00       	LD	D,0
1126   04E6 19          	ADD	HL,DE
1127   04E7 D1          	POP	DE
1128   04E8 C9          	RET
1129   04E9             ;-------------------------------
1130   04E9             ; GENERATE A QUASI-RANDOM NUMBER
1131   04E9             ;-------------------------------
1132   04E9             ; GENERATE AN 16 BIT RANDOM NUMBER
1133   04E9             ; USING LINEAR CONGRUENTIAL METHOD.
1134   04E9             ;     Rn+1 = (aRn+c) MOD m
1135   04E9             ; REFRESH REGISTER USED FOR Rn AND c
1136   04E9             ;	ENTRY : NONE
1137   04E9             ;	EXIT  : HL = RANDOM WORD
1138   04E9             ;	NO REGISTERS MODIFIED
1139   04E9             ;
1140   04E9 F5          RAND	PUSH	AF
1141   04EA C5          	PUSH	BC
1142   04EB D5          	PUSH	DE	;SAVE REGISTERS
1143   04EC             ;
1144   04EC             ; CALCULATE aRn
1145   04EC             ;
1146   04EC ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
1147   04EE 5F          	LD	E,A	;(Rn) BY
1148   04EF 16 00       	LD	D,0
1149   04F1 21 48 05    	LD	HL,0548H	;CONSTANT (a)
1150   04F4 CD 01 05    	CALL	MUL16
1151   04F7             ;
1152   04F7             ; CALCULATE aRn+c
1153   04F7             ;
1154   04F7 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
1155   04F9 06 00       	LD	B,0	;READ OF THE
1156   04FB 4F          	LD	C,A	;THE REFRESH
1157   04FC 09          	ADD	HL,BC	;REGISTER (c)
1158   04FD D1          	POP	DE
1159   04FE C1          	POP	BC
1160   04FF F1          	POP	AF	;RESTORE REGISTERS
1161   0500 C9          	RET
1162   0501             ;----------------------
1163   0501             ; 16 BIT MULTIPLICATION
1164   0501             ;----------------------
1165   0501             ;16 BIT MULTIPLY
1166   0501             ; ENTRY : HL = MULTIPLICAND (MPD)
1167   0501             ;         DE = MULTIPLIER (MPR)
1168   0501             ; EXIT : HL = RESULT
1169   0501             ;FROM ZAKS 'PROGRAMMING THE Z80'
1170   0501             ;
1171   0501 F5          MUL16	PUSH	AF
1172   0502 C5          	PUSH	BC
1173   0503 4C          	LD	C,H	;MPR(H)
1174   0504 7D          	LD	A,L	;MPR(L)
1175   0505 06 10       	LD	B,16	;BIT COUNTER
1176   0507 21 00 00    	LD	HL,0	;CLEAR RESULT
1177   050A CB 39       MULT	SRL	C	;MPR (H)
1178   050C 1F          	RRA	;MPR (L)
1179   050D 30 01       	JR	NC,MULT1	;TEST CARRY
1180   050F 19          	ADD	HL,DE	;ADD MPD TO RESULT
1181   0510 EB          MULT1	EX	DE,HL
1182   0511 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1183   0512 EB          	EX	DE,HL
1184   0513 10 F5       	DJNZ	MULT	;DONE?
1185   0515 C1          	POP	BC
1186   0516 F1          	POP	AF
1187   0517 C9          	RET
1188   0518             ; MUSIC ROUTINE
1189   0518             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1190   0518             ; MONITOR MON-1
1191   0518             ; BY JOHN HARDY AND KEN STONE
1192   0518             ;
1193   0518             ;----------------
1194   0518             ; MUSIC SEQUENCER
1195   0518             ;----------------
1196   0518             ; SEQUENCES THROUGH A TABLE OF NOTES
1197   0518             ; 1EH = REPEAT TUNE UNTIL RESET
1198   0518             ; 1FH = PLAY ONCE AND RETURN
1199   0518             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1200   0518             ; EXIT : NO REGISTERS MODIFIED
1201   0518 F5          MUSIC	PUSH	AF
1202   0519 C5          	PUSH	BC
1203   051A D5          	PUSH	DE
1204   051B E5          	PUSH	HL	;SAVE REGISTERS
1205   051C E5          	PUSH	HL
1206   051D EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1207   051E             ;
1208   051E             ; PLAY EACH NOTE IN TURN
1209   051E             ;
1210   051E 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1211   051F E6 1F       	AND	1FH	;STRIP UNUSED BITS
1212   0521             ;
1213   0521             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1214   0521             ;
1215   0521 FE 00       	CP	00H
1216   0523 C2 33 05    	JP	NZ,STEP1
1217   0526 01 00 10    	LD	BC,1000H
1218   0529 0B          PAUSE	DEC	BC
1219   052A 78          	LD	A,B
1220   052B B1          	OR	C
1221   052C C2 29 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1222   052F 13          	INC	DE	;POINT TO NEXT ELEMENT
1223   0530 C3 1E 05    	JP	STEP
1224   0533             ;
1225   0533             ; IF ELEMENT IS 1EH REPEAT TUNE
1226   0533             ;
1227   0533 FE 1E       STEP1	CP	1EH
1228   0535 C2 3D 05    	JP	NZ,STEP2
1229   0538 D1          	POP	DE	;GET TABLE ADDRESS BACK
1230   0539 D5          	PUSH	DE	;SAVE IT FOR LATER
1231   053A C3 1E 05    	JP	STEP
1232   053D             ;
1233   053D             ; IF ELEMENT IS 1FH RETURN
1234   053D             ;
1235   053D FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1236   053F C2 48 05    	JP	NZ,STEP3
1237   0542 E1          	POP	HL
1238   0543 E1          	POP	HL
1239   0544 D1          	POP	DE
1240   0545 C1          	POP	BC
1241   0546 F1          	POP	AF
1242   0547 C9          	RET
1243   0548             ;
1244   0548             ;NOW PLAY THE NOTE
1245   0548             ;
1246   0548 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1247   0549 21 64 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1248   054C CD D9 04    	CALL	INDEXB	;GET PERIOD/2
1249   054F 7E          	LD	A,(HL)	;GET ELEMENT
1250   0550 F5          	PUSH	AF	;SAVE FOR LATER
1251   0551 78          	LD	A,B	;GET ELEMENT BACK IN A
1252   0552 21 7C 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1253   0555 CD D9 04    	CALL	INDEXB	;GET DURATION/2
1254   0558 7E          	LD	A,(HL)	;GET ELEMENT
1255   0559 6F          	LD	L,A
1256   055A 26 00       	LD	H,0	;HL = DURATION/2
1257   055C F1          	POP	AF
1258   055D CD 95 05    	CALL	TONE	;DO NOTE ROUTINE
1259   0560 13          	INC	DE
1260   0561 C3 1E 05    	JP	STEP	;STEP TO NEXT ELEMENT
1261   0564             ;
1262   0564             ; PERIOD/2 OF NOTE
1263   0564             ;
1264   0564 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1264   0568 70 67 62 5C 
1265   056C 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1265   0570 45 41 3C 39 
1266   0574 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1266   0578 2A 27 25 23 
1267   057C             ;
1268   057C             ; NOTE DURATION/2
1269   057C             ;
1270   057C 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1270   0580 1E 20 23 25 
1271   0584 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1271   0588 31 33 37 3A 
1272   058C 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1272   0590 4D 52 57 5C 
1273   0594 10          	.DB	10H
1274   0595             ; TONE ROUTINE
1275   0595             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1276   0595             ; MONITOR MON-1
1277   0595             ; BY JOHN HARDY AND KEN STONE
1278   0595             ;
1279   0595             ;--------------
1280   0595             ; OUTPUT A TONE
1281   0595             ;--------------
1282   0595             ;
1283   0595             ; ENTRY : A = PERIOD/2 OF NOTE
1284   0595             ;         HL = DURATION/2 OF NOTE
1285   0595             ; EXIT NO REGISTERS MODIFIED
1286   0595 F5          TONE	PUSH	AF
1287   0596 C5          	PUSH	BC
1288   0597 D5          	PUSH	DE
1289   0598 E5          	PUSH	HL
1290   0599 11 01 00    	LD	DE,0001H
1291   059C 4F          	LD	C,A
1292   059D 29          	ADD	HL,HL	;DOUBLE DURATION
1293   059E AF          	XOR	A
1294   059F EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1295   05A1 F6 40       	OR	40H	;KEEP D6 HIGH
1296   05A3 D3 85       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1297   05A5 41          	LD	B,C
1298   05A6 C5          TONE2	PUSH	BC
1299   05A7 06 02       	LD	B,02H
1300   05A9 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1301   05AB C1          	POP	BC
1302   05AC 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1303   05AE ED 52       	SBC	HL,DE	;END OF NOTE?
1304   05B0 20 ED       	JR	NZ,TONE1	;DO AGAIN
1305   05B2 E1          	POP	HL
1306   05B3 D1          	POP	DE
1307   05B4 C1          	POP	BC
1308   05B5 F1          	POP	AF
1309   05B6 C9          	RET
1310   05B7             ;---------------
1311   05B7             ; KEY ENTRY BEEP
1312   05B7             ;---------------
1313   05B7 E5          BEEP	PUSH	HL
1314   05B8 F5          	PUSH	AF
1315   05B9 21 39 3F    	LD	HL,MODE
1316   05BC CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1317   05BE 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1318   05C0             ;
1319   05C0             ; DO KEYPRESS DELAY
1320   05C0             ;
1321   05C0 D5          	PUSH	DE	;DO A SHORT
1322   05C1 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1323   05C4 2A 23 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1324   05C7 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1325   05C9 30 FC       	JR	NC,BEEP1	;KEY STROKES
1326   05CB D1          	POP	DE
1327   05CC 18 10       	JR	BEEP3
1328   05CE             ;
1329   05CE             ; OUTPUT KEYPRESS TONES
1330   05CE             ;
1331   05CE 3E 24       BEEP2	LD	A,24H
1332   05D0 21 30 00    	LD	HL,0030H
1333   05D3 CD 95 05    	CALL	TONE	;DO FIRST TONE
1334   05D6 3E 0E       	LD	A,0EH
1335   05D8 21 50 00    	LD	HL,0050H
1336   05DB CD 95 05    	CALL	TONE	;DO SECOND TONE
1337   05DE F1          BEEP3	POP	AF
1338   05DF E1          	POP	HL
1339   05E0 C9          	RET
1340   05E1             ;----------------------------------------
1341   05E1             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1342   05E1             ;----------------------------------------
1343   05E1             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1344   05E1             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1345   05E1             ; ATTACHED).
1346   05E1             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1347   05E1             ; AND MODIFY REGISTERS.
1348   05E1             ;
1349   05E1 E1          SSTEP	POP	HL	;GET HL BACK
1350   05E2 F5          	PUSH	AF	;SAVE AF FOR LATER
1351   05E3 22 49 3F    	LD	(TMPHL),HL
1352   05E6 ED 53 47 3F 	LD	(TMPDE),DE
1353   05EA ED 43 45 3F 	LD	(TMPBC),BC
1354   05EE DD 22 4B 3F 	LD	(TMPIX),IX
1355   05F2 FD 22 4D 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1356   05F6 E1          	POP	HL	;GET AF BACK
1357   05F7 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
1358   05FA E1          	POP	HL	;GET PC RETURN ADDRESS
1359   05FB 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
1360   05FE ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1361   0602             ;
1362   0602             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1363   0602             ;
1364   0602 CD B7 05    	CALL	BEEP
1365   0605 3A 3F 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1366   0608 E6 07       	AND	7	;MAKE SURE IN LIMITS
1367   060A 32 3F 3F    	LD	(REGPNT),A	;SAVE IT
1368   060D CD EA 06    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1369   0610 CD 85 04    	CALL	SKEYRL	;WAIT FOR A KEY
1370   0613 CD 78 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1371   0616 21 1F 06    	LD	HL,REGTBL	;HANDLE THE KEY
1372   0619 CD A6 04    	CALL	MENU	;AND UPDATE DISPLAY
1373   061C C3 0D 06    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1374   061F             ;
1375   061F             ; REGISTER DISPLAY KEY TABLE
1376   061F             ;
1377   061F 14          REGTBL	.DB	14H
1378   0620 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1378   0624 04 05 06 07 
1379   0628 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1379   062C 0C 0D 0E 0F 
1380   0630 10 11 12 13 	.DB	10H,11H,12H,13H
1381   0634 6C 06 6C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1381   0638 6C 06 6C 06 
1382   063C 6C 06 6C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1382   0640 6C 06 6C 06 
1383   0644 6C 06 6C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1383   0648 6C 06 6C 06 
1384   064C 6C 06 6C 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1384   0650 6C 06 6C 06 
1385   0654             ;
1386   0654             ; MAKE THE GO KEY RETURN TO THE PROGRAM
1387   0654             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
1388   0654             ;
1389   0654~            #IFDEF TEC-1F
1390   0654~            	.DW RETPGM,RETMON,INCSTP,DECSTP
1391   0654             #ELSE
1392   0654 93 06 9D 06 	.DW	RETMON,RETPGM,INCSTP,DECSTP
1392   0658 BF 06 D4 06 
1393   065C             #ENDIF
1394   065C             ;
1395   065C             ; REGISTER NAME CHARACTERS
1396   065C             ;
1397   065C~            #IFDEF TEC-1F
1398   065C~            REGNAM	.DW	4FC3H
1399   065C~            	.DW	6F47H,0E6C3H,0ECC7H
1400   065C~            	.DW	66C2H,286EH,28AEH
1401   065C~            	.DW	0A74FH
1402   065C             #ELSE
1403   065C 39 73       REGNAM	.DW	7339H
1404   065E 71 77 39 7C 	.DW	7771H,7C39H,5E79H
1404   0662 79 5E 
1405   0664 38 74 76 06 	.DW	7438H,0676H,066EH
1405   0668 6E 06 
1406   066A 73 6D       	.DW	6D73H
1407   066C             #ENDIF
1408   066C             ;--------------
1409   066C             ; EDIT REGISTER
1410   066C             ;--------------
1411   066C CD B7 05    REGKEY	CALL	BEEP
1412   066F F5          	PUSH	AF	;SAVE KEY FOR LATER
1413   0670 3A 3F 3F    	LD	A,(REGPNT)
1414   0673             ;
1415   0673             ; EDIT REGISTER
1416   0673             ;
1417   0673 21 41 3F    	LD	HL,TMPPC
1418   0676 CD E0 04    	CALL	INDEXW
1419   0679 4E          	LD	C,(HL)
1420   067A 23          	INC	HL
1421   067B 46          	LD	B,(HL)	;GET REG CONTENTS
1422   067C CB 21       	SLA	C
1423   067E CB 10       	RL	B
1424   0680 CB 21       	SLA	C
1425   0682 CB 10       	RL	B
1426   0684 CB 21       	SLA	C
1427   0686 CB 10       	RL	B	;SHIFT REGISTER
1428   0688 CB 21       	SLA	C	;FOUR BITS
1429   068A CB 10       	RL	B	;LEFT AND
1430   068C F1          	POP	AF	;PUT THE KEY
1431   068D B1          	OR	C	;INTO THE LSN
1432   068E 4F          	LD	C,A	;AND PUT THE
1433   068F 70          	LD	(HL),B	;REGISTER BACK
1434   0690 2B          	DEC	HL	;WHERE IT BELONGS
1435   0691 71          	LD	(HL),C
1436   0692 C9          	RET
1437   0693             ;------------------
1438   0693             ; RETURN TO MONITOR
1439   0693             ;------------------
1440   0693 CD B7 05    RETMON	CALL	BEEP
1441   0696 CD 85 04    	CALL	SKEYRL
1442   0699 FB          	EI	;ENABLE INTERRUPTS AGAIN
1443   069A C3 7D 02    	JP	MAIN
1444   069D             ;------------------
1445   069D             ; RETURN TO PROGRAM
1446   069D             ;------------------
1447   069D ED 7B 4F 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1448   06A1 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
1449   06A4 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1450   06A5 2A 43 3F    	LD	HL,(TMPAF)
1451   06A8 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1452   06A9 FD 2A 4D 3F 	LD	IY,(TMPIY)
1453   06AD DD 2A 4B 3F 	LD	IX,(TMPIX)
1454   06B1 ED 4B 45 3F 	LD	BC,(TMPBC)
1455   06B5 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1456   06B9 F1          	POP	AF	;RESTORE AF
1457   06BA 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
1458   06BD FB          	EI	;ENABLE INTERRUPTS
1459   06BE C9          	RET	;AND RETURN TO PROGRAM
1460   06BF             ;----------------------
1461   06BF             ; DISPLAY NEXT REGISTER
1462   06BF             ;----------------------
1463   06BF CD B7 05    INCSTP	CALL	BEEP
1464   06C2 3A 3F 3F    	LD	A,(REGPNT)
1465   06C5 FE 07       	CP	7	;END OF REG TABLE?
1466   06C7 CA CF 06    	JP	Z,INCSP1
1467   06CA 3C          	INC	A
1468   06CB 32 3F 3F    	LD	(REGPNT),A
1469   06CE C9          	RET
1470   06CF AF          INCSP1	XOR	A
1471   06D0 32 3F 3F    	LD	(REGPNT),A
1472   06D3 C9          	RET
1473   06D4             ;--------------------------
1474   06D4             ; DISPLAY PREVIOUS REGISTER
1475   06D4             ;--------------------------
1476   06D4 CD B7 05    DECSTP	CALL	BEEP
1477   06D7 3A 3F 3F    	LD	A,(REGPNT)
1478   06DA FE 00       	CP	0	;START OF REG TABLE?
1479   06DC CA E4 06    	JP	Z,DECSP1
1480   06DF 3D          	DEC	A
1481   06E0 32 3F 3F    	LD	(REGPNT),A
1482   06E3 C9          	RET
1483   06E4 3E 07       DECSP1	LD	A,7
1484   06E6 32 3F 3F    	LD	(REGPNT),A
1485   06E9 C9          	RET
1486   06EA             ;-----------------
1487   06EA             ; DISPLAY REGISTER
1488   06EA             ;-----------------
1489   06EA 3A 3F 3F    SETREG	LD	A,(REGPNT)
1490   06ED 21 41 3F    	LD	HL,TMPPC	;START OF TABLE
1491   06F0 CD E0 04    	CALL	INDEXW	;GET ELEMENT ADDRESS
1492   06F3 5E          	LD	E,(HL)
1493   06F4 23          	INC	HL
1494   06F5 56          	LD	D,(HL)
1495   06F6 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1496   06F7 CD CD 03    	CALL	DISADD
1497   06FA             ;
1498   06FA             ; DISPLAY REGISTER NAME
1499   06FA             ;
1500   06FA 21 5C 06    	LD	HL,REGNAM
1501   06FD CD E0 04    	CALL	INDEXW
1502   0700 7E          	LD	A,(HL)
1503   0701 32 31 3F    	LD	(DISBUF+0),A
1504   0704 23          	INC	HL
1505   0705 7E          	LD	A,(HL)
1506   0706 32 32 3F    	LD	(DISBUF+1),A
1507   0709 C9          	RET
1508   070A             ;------------------
1509   070A             ; FUNCTION KEY MENU
1510   070A             ;------------------
1511   070A             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1512   070A             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1513   070A             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1514   070A             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1515   070A             ;
1516   070A CD B7 05    FUNKEY	CALL	BEEP
1517   070D 2A 3B 3F    FUNKY1	LD	HL,(ADRESS)
1518   0710 CD CD 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1519   0713~            #IFDEF TEC-1F
1520   0713~            	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1521   0713             #ELSE
1522   0713 21 54 71    	LD	HL,7154H	;FN
1523   0716             #ENDIF
1524   0716 22 31 3F    	LD	(DISBUF),HL	;DISPLAY FN
1525   0719 CD 85 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1526   071C CD 78 04    FUNKY2	CALL	SKEYIN
1527   071F 2A 15 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1528   0722 CD A6 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1529   0725             ;
1530   0725             ; RETURN TO MAIN
1531   0725             ;
1532   0725 CD B7 05    CANCEL	CALL	BEEP
1533   0728 CD 76 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1534   072B CD 85 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1535   072E C9          	RET
1536   072F             ;
1537   072F             ; FUNCTION MENU KEY TABLE
1538   072F             ;
1539   072F 11          FUNLST	.DB	11H
1540   0730 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1540   0734 04 05 06 07 
1541   0738 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1541   073C 0C 0D 0E 0F 
1542   0740 10          	.DB	10H	;FN KEY
1543   0741 67 07 71 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1543   0745 90 08 A2 08 
1544   0749 B4 08 0A 09 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1544   074D 48 09 7F 09 
1545   0751 8D 09 9C 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1545   0755 AB 09 BA 09 
1546   0759 54 0A D5 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1546   075D 2E 0C DD 0C 
1547   0761 63 07       	.DW	FUNFUN
1548   0763             ;-----------------------
1549   0763             ; CALL FUNCTION FUNCTION
1550   0763             ;-----------------------
1551   0763 2A 2F 3F    FUNFUN	LD	HL,(FUNJMP)
1552   0766 E9          	JP	(HL)
1553   0767             ;------------------------------------------
1554   0767             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1555   0767             ;------------------------------------------
1556   0767 CD B7 05    GOEXEC	CALL	BEEP
1557   076A CD 9C 04    	CALL	KEYREL
1558   076D             ;	POP	HL	;REMOVE EXEC RETURN
1559   076D 2A 3B 3F    	LD	HL,(ADRESS)
1560   0770 E9          	JP	(HL)	;START EXECUCTION
1561   0771             ;------------------------------------
1562   0771             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1563   0771             ;------------------------------------
1564   0771 CD B7 05    INTELFN	CALL	BEEP
1565   0774 CD 9C 04    	CALL	KEYREL
1566   0777 CD 80 07    	CALL	INTELH
1567   077A C2 D3 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1568   077D C3 25 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1569   0780             ;-----------------------
1570   0780             ; RECEIVE INTEL HEX FILE
1571   0780             ;-----------------------
1572   0780 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1573   0784             ;
1574   0784             ; WAIT FOR RECORD MARK
1575   0784             ;
1576   0784 AF          INTEL1	XOR	A
1577   0785 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1578   0788 CD 56 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1579   078B FE 3A       	CP	':'	;TO BE TRANSMITTED
1580   078D 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1581   078F             ;
1582   078F             ; GET RECORD LENGTH
1583   078F             ;
1584   078F CD DC 07    	CALL	GETBYT
1585   0792 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1586   0795             ;
1587   0795             ; GET ADDRESS FIELD
1588   0795             ;
1589   0795 CD DC 07    	CALL	GETBYT
1590   0798 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1591   079B CD DC 07    	CALL	GETBYT
1592   079E DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1593   07A1             ;
1594   07A1             ; GET RECORD TYPE
1595   07A1             ;
1596   07A1 CD DC 07    	CALL	GETBYT
1597   07A4 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1598   07A6             ;
1599   07A6             ; READ IN THE DATA
1600   07A6             ;
1601   07A6 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1602   07A9 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1603   07AC DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1604   07AF             
1605   07AF CD DC 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1606   07B2 77          	LD	(HL),A	;STORE DATA BYTE
1607   07B3 23          	INC	HL
1608   07B4 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1609   07B6             ;
1610   07B6             ; GET CHECKSUM AND COMPARE
1611   07B6             ;
1612   07B6 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1613   07B9 ED 44       	NEG		;TWO'S COMPLEMENT
1614   07BB DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1615   07BE CD DC 07    	CALL	GETBYT
1616   07C1 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1617   07C4 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1618   07C7 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1619   07C9 C9          	RET	;NZ=CHECKSUM ERROR
1620   07CA             ;
1621   07CA             ; END OF FILE RECORD
1622   07CA             ;
1623   07CA DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1624   07CD ED 44       	NEG		;TWO'S COMPLEMENT
1625   07CF DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1626   07D2 CD DC 07    	CALL	GETBYT
1627   07D5 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1628   07D8 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1629   07DB C9          	RET	;NZ=CHECKSUM ERROR
1630   07DC             ;--------------------------
1631   07DC             ; GET BYTE FROM SERIAL PORT
1632   07DC             ;--------------------------
1633   07DC C5          GETBYT	PUSH	BC
1634   07DD CD 56 08    	CALL	RXDATA
1635   07E0 CB 77       	BIT	6,A
1636   07E2 28 02       	JR	Z,GETBT1
1637   07E4 C6 09       	ADD	A,09H
1638   07E6 E6 0F       GETBT1	AND	0FH
1639   07E8 CB 27       	SLA 	A
1640   07EA CB 27       	SLA	A
1641   07EC CB 27       	SLA	A
1642   07EE CB 27       	SLA	A
1643   07F0 4F          	LD	C,A
1644   07F1             ;
1645   07F1             ; GET LOW NYBBLE
1646   07F1             ;
1647   07F1 CD 56 08    	CALL	RXDATA
1648   07F4 CB 77       	BIT	6,A
1649   07F6 28 02       	JR	Z,GETBT2
1650   07F8 C6 09       	ADD	A,09H
1651   07FA E6 0F       GETBT2	AND	0FH
1652   07FC B1          	OR	C
1653   07FD 47          	LD	B,A
1654   07FE DD 86 03    	ADD	A,(IX+3)
1655   0801 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1656   0804 78          	LD	A,B
1657   0805 A7          	AND	A	;CLEAR CARRY
1658   0806 C1          	POP	BC
1659   0807 C9          	RET
1660   0808             ;-------------------------------
1661   0808             ; CONVERT ASCII CHARACTER TO HEX
1662   0808             ;-------------------------------
1663   0808             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1664   0808             ;ENTRY : A= ASCII 0-9,A-F
1665   0808             ;EXIT  : A= HEX 0-F IN LSN
1666   0808             ; A AND F REGISTERS MODIFIED
1667   0808             ;
1668   0808 CB 77       ASCHEX	BIT	6,A
1669   080A 28 02       	JR	Z,ASCHX1
1670   080C C6 09       	ADD	A,09H
1671   080E E6 0F       ASCHX1	AND	0FH
1672   0810 C9          	RET
1673   0811             ;------------------------------------
1674   0811             ; BIT BANG SERIAL PORT INITIALISATION
1675   0811             ;------------------------------------
1676   0811             ; SET THE SERIAL TRANSMIT PIN HIGH SO THE 
1677   0811             ; HOST CAN SEE THAT WE ARE PREPARING TO TRANSMIT
1678   0811             ; 
1679   0811             ; ENTRY : HL = BAUD RATE
1680   0811             ;         HL = 0 USE EXISTING BAUD CONSTANT
1681   0811             ; EXIT  : HL PRESERVED
1682   0811             ;       ; AF MODIFIED
1683   0811             ;
1684   0811 3E 40       SERINI	LD	A,40H
1685   0813 D3 85       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
1686   0815 06 32       	LD	B,50
1687   0817 CD 21 08    	CALL	MSDELAY	;WAIT SO THE HOST SEES TX HIGH
1688   081A 7C          	LD	A,H
1689   081B B5          	OR	L
1690   081C C8          	RET	Z	;HL IS ZERO DON'T UPDATE THE BAUD RATE
1691   081D 22 21 3F    	LD  (BAUD),HL	;UPDATE THE BAUD RATE
1692   0820 C9              RET	
1693   0821             ;------------------
1694   0821             ; MILLISECOND DELAY
1695   0821             ;------------------
1696   0821             ; APPROX. 1 MILLISECOND DELAY
1697   0821             ; 
1698   0821             ; ENTRY : B = 1 TO 255 MILLISECONDS
1699   0821             ; EXIT  : B = 0
1700   0821             ;
1701   0821 C5          MSDELAY	PUSH	BC	;11T
1702   0822 06 E9       	LD	B,233	;7T
1703   0824 00          MSDEL1	NOP	;4T
1704   0825 10 FD       	DJNZ	MSDEL1	;NZ=13T,Z=8T
1705   0827 C1          	POP	BC	;10T
1706   0828 10 F7       	DJNZ	MSDELAY	;NZ=13T,Z=8T
1707   082A C9          	RET	;10T
1708   082B             ;------------------------
1709   082B             ; SERIAL TRANSMIT ROUTINE
1710   082B             ;------------------------
1711   082B             ;TRANSMIT BYTE SERIALLY ON DOUT
1712   082B             ;
1713   082B             ; ENTRY : A = BYTE TO TRANSMIT
1714   082B             ;  EXIT : NO REGISTERS MODIFIED
1715   082B             ;
1716   082B F5          TXDATA	PUSH	AF
1717   082C C5          	PUSH	BC
1718   082D E5          	PUSH	HL
1719   082E 2A 21 3F    	LD	HL,(BAUD)
1720   0831 4F          	LD	C,A
1721   0832             ;
1722   0832             ; TRANSMIT START BIT
1723   0832             ;
1724   0832 AF          	XOR	A
1725   0833 D3 85       	OUT	(SCAN),A
1726   0835 CD 83 08    	CALL	BITIME
1727   0838             ;
1728   0838             ; TRANSMIT DATA
1729   0838             ;
1730   0838 06 08       	LD	B,08H
1731   083A CB 09       	RRC	C
1732   083C CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1733   083E 79          	LD	A,C	;LSB FIRST AND OUTPUT
1734   083F E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1735   0841 D3 85       	OUT	(SCAN),A
1736   0843 CD 83 08    	CALL	BITIME
1737   0846 10 F4       	DJNZ	NXTBIT
1738   0848             ;
1739   0848             ; SEND STOP BITS
1740   0848             ;
1741   0848 3E 40       	LD	A,40H
1742   084A D3 85       	OUT	(SCAN),A
1743   084C CD 83 08    	CALL	BITIME
1744   084F CD 83 08    	CALL	BITIME
1745   0852 E1          	POP	HL
1746   0853 C1          	POP	BC
1747   0854 F1          	POP	AF
1748   0855 C9          	RET
1749   0856             ;-----------------------
1750   0856             ; SERIAL RECEIVE ROUTINE
1751   0856             ;-----------------------
1752   0856             ;RECEIVE SERIAL BYTE FROM DIN
1753   0856             ;
1754   0856             ; ENTRY : NONE
1755   0856             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1756   0856             ;
1757   0856             ; REGISTERS MODIFIED A AND F
1758   0856             ;
1759   0856 C5          RXDATA	PUSH	BC
1760   0857 E5          	PUSH	HL
1761   0858             ;
1762   0858             ; WAIT FOR START BIT
1763   0858             ;
1764   0858 DB 86       RXDAT1	IN	A,(KEYBUF)
1765   085A CB 7F       	BIT	7,A
1766   085C 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1767   085E             ;
1768   085E             ; DETECTED START BIT
1769   085E             ;
1770   085E 2A 21 3F    	LD	HL,(BAUD)
1771   0861 CB 3C       	SRL	H
1772   0863 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1773   0865 CD 83 08    	CALL	BITIME
1774   0868 DB 86       	IN	A,(KEYBUF)
1775   086A CB 7F       	BIT	7,A
1776   086C 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1777   086E             ;
1778   086E             ; DETECTED VALID START BIT,READ IN DATA
1779   086E             ;
1780   086E 06 08       	LD	B,08H
1781   0870 2A 21 3F    RXDAT2	LD	HL,(BAUD)
1782   0873 CD 83 08    	CALL	BITIME	;DELAY ONE BIT TIME
1783   0876 DB 86       	IN	A,(KEYBUF)
1784   0878 CB 17       	RL	A
1785   087A CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1786   087C 10 F2       	DJNZ	RXDAT2
1787   087E 79          	LD	A,C
1788   087F B7          	OR	A	;CLEAR CARRY FLAG
1789   0880 E1          	POP	HL
1790   0881 C1          	POP	BC
1791   0882 C9          	RET
1792   0883             ;---------------
1793   0883             ; BIT TIME DELAY
1794   0883             ;---------------
1795   0883             ;DELAY FOR ONE SERIAL BIT TIME
1796   0883             ;ENTRY : HL = DELAY TIME
1797   0883             ; NO REGISTERS MODIFIED
1798   0883             ;
1799   0883 E5          BITIME	PUSH	HL
1800   0884 D5          	PUSH	DE
1801   0885 11 01 00    	LD	DE,0001H
1802   0888 ED 52       BITIM1	SBC	HL,DE
1803   088A D2 88 08    	JP	NC,BITIM1
1804   088D D1          	POP	DE
1805   088E E1          	POP	HL
1806   088F C9          	RET
1807   0890             ;-----------------------------
1808   0890             ; FUNCTION 2 - ENTER ADDRESS 1
1809   0890             ;-----------------------------
1810   0890 CD B7 05    ADDRA	CALL	BEEP
1811   0893 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1812   0896 22 29 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1813   0899~            #IFDEF TEC-1F
1814   0899~            	LD	HL,0C300H	;ADDRESS [
1815   0899             #ELSE
1816   0899 21 00 39    	LD	HL,3900H	;ADDRESS [
1817   089C             #ENDIF
1818   089C CD FC 08    	CALL	SDELAY
1819   089F C3 28 07    	JP	CANCL1
1820   08A2             ;-----------------------------
1821   08A2             ; FUNCTION 3 - ENTER ADDRESS 2
1822   08A2             ;-----------------------------
1823   08A2 CD B7 05    ADDRB	CALL	BEEP
1824   08A5 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1825   08A8 22 2B 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1826   08AB~            #IFDEF TEC-1F
1827   08AB~            	LD	HL,00A9H	;ADDRESS ]
1828   08AB             #ELSE
1829   08AB 21 0F 00    	LD	HL,000FH	;ADDRESS ]
1830   08AE             #ENDIF
1831   08AE CD FC 08    	CALL	SDELAY
1832   08B1 C3 28 07    	JP	CANCL1
1833   08B4             ;------------------------
1834   08B4             ; FUNCTION 4 - BLOCK MOVE
1835   08B4             ;------------------------
1836   08B4 CD B7 05    BLKMVE	CALL	BEEP
1837   08B7 2A 3B 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1838   08BA 22 2D 3F    	LD	(BLKDST),HL	;ADDRESS AS
1839   08BD~            #IFDEF TEC-1F
1840   08BD~            	LD	HL,0C3A9H	;DESTINATION
1841   08BD             #ELSE
1842   08BD 21 0F 39    	LD	HL,390FH	;DESTINATION
1843   08C0             #ENDIF
1844   08C0 CD FC 08    	CALL	SDELAY
1845   08C3             ;
1846   08C3             ; CALCULATE NUMBER OF BYTES TO MOVE
1847   08C3             ;
1848   08C3 2A 2B 3F    	LD	HL,(BLKEND)
1849   08C6 ED 5B 29 3F 	LD	DE,(BLKSRT)
1850   08CA A7          	AND	A
1851   08CB ED 52       	SBC	HL,DE
1852   08CD 23          	INC	HL	;MAKE MOVE INCLUSIVE
1853   08CE 22 27 3F    	LD	(COUNT),HL
1854   08D1 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1855   08D3             ;
1856   08D3             ; SHOW ERROR
1857   08D3             ;
1858   08D3~            #IFDEF TEC-1F
1859   08D3~            BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1860   08D3             #ELSE
1861   08D3 21 79 00    BLKMV1	LD	HL,0079H	;SHOW ERROR E
1862   08D6             #ENDIF
1863   08D6 CD B7 05    BLKMV2	CALL	BEEP
1864   08D9 22 31 3F    	LD	(DISBUF),HL	;AND WAIT
1865   08DC CD 78 04    	CALL	SKEYIN	;FOR KEYPRESS
1866   08DF CD B7 05    	CALL	BEEP
1867   08E2 CD 85 04    	CALL	SKEYRL
1868   08E5 C3 28 07    	JP	CANCL1
1869   08E8             ;
1870   08E8             ; MOVE BLOCK
1871   08E8             ;
1872   08E8 CD EE 08    BLKMV3	CALL	MOVE
1873   08EB C3 28 07    	JP	CANCL1
1874   08EE             ;-----------
1875   08EE             ; BLOCK MOVE
1876   08EE             ;-----------
1877   08EE ED 4B 27 3F MOVE	LD	BC,(COUNT)
1878   08F2 2A 29 3F    	LD	HL,(BLKSRT)	;START ADDR
1879   08F5 ED 5B 2D 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1880   08F9 ED B0       	LDIR
1881   08FB C9          	RET
1882   08FC             ;-------------------------------
1883   08FC             ; SCAN DISPLAY UNTIL KEY RELEASE
1884   08FC             ;-------------------------------
1885   08FC 22 31 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1886   08FF 06 FF       	LD	B,255	;IN DATA DISPLAYS
1887   0901 CD 1B 04    SDELY1	CALL	SCAND	;UNTIL KEY
1888   0904 10 FB       	DJNZ SDELY1	;IS RELEASED
1889   0906 CD 85 04    	CALL	SKEYRL
1890   0909 C9          	RET
1891   090A             ;---------------------------
1892   090A             ;FUNCTION 5 - BLOCK CHECKSUM
1893   090A             ;---------------------------
1894   090A CD B7 05    BLKSUM	CALL	BEEP
1895   090D~            #IFDEF TEC-1F
1896   090D~            	LD	HL,0C3A7H	;CS
1897   090D             #ELSE
1898   090D 21 6D 39    	LD	HL,396DH	;CS
1899   0910             #ENDIF
1900   0910 CD FC 08    	CALL	SDELAY	;SHOW PROMPT
1901   0913 ED 5B 29 3F 	LD	DE,(BLKSRT)
1902   0917 2A 2B 3F    	LD	HL,(BLKEND)
1903   091A A7          	AND	A
1904   091B ED 52       	SBC	HL,DE
1905   091D 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1906   091E 22 27 3F    	LD	(COUNT),HL
1907   0921 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1908   0923             ;
1909   0923             ; SHOW ERROR
1910   0923             ;
1911   0923 C3 D3 08    	JP	BLKMV1
1912   0926             ;
1913   0926             ; CALCULATE CHECKSUM
1914   0926             ;
1915   0926 2A 29 3F    BLKSM1	LD	HL,(BLKSRT)
1916   0929 ED 5B 2B 3F 	LD	DE,(BLKEND)
1917   092D CD C9 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1918   0930 CD E2 03    	CALL	DISBYT	;DISPLAY
1919   0933 2A 27 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1920   0936 CD CD 03    	CALL	DISADD	;SUMMED AND
1921   0939 CD B7 05    	CALL	BEEP
1922   093C CD 78 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1923   093F CD B7 05    	CALL	BEEP	;A KEY IS PRESSED
1924   0942 CD 85 04    	CALL	SKEYRL
1925   0945 C3 28 07    	JP	CANCL1
1926   0948             ;----------------------------------------
1927   0948             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1928   0948             ;----------------------------------------
1929   0948 CD B7 05    BRANCH	CALL	BEEP
1930   094B~            #IFDEF TEC-1F
1931   094B~            	LD	HL,44E6H	;RB
1932   094B             #ELSE
1933   094B 21 7C 50    	LD	HL,507CH	;RB
1934   094E             #ENDIF
1935   094E CD FC 08    	CALL	SDELAY
1936   0951 2A 3B 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1937   0954 ED 5B 29 3F 	LD	DE,(BLKSRT)
1938   0958 13          	INC	DE	;POINT TO PC+2
1939   0959 A7          	AND	A
1940   095A ED 52       	SBC	HL,DE	;SUBTRACT
1941   095C             ;
1942   095C             ;TEST HIGH BYTE OF RESULT TO
1943   095C             ;DETERMINE IF BACKWARD BRANCH
1944   095C             ;
1945   095C 7C          	LD	A,H
1946   095D FE FF       	CP	255	;BACKWARD BRANCH?
1947   095F C2 6A 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1948   0962             ;
1949   0962             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1950   0962             ;
1951   0962 7D          	LD	A,L
1952   0963 CB 7F       	BIT	7,A
1953   0965 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1954   0967 C3 D3 08    	JP	BLKMV1	;TOO FAR BACK
1955   096A             ;
1956   096A             ;TEST HIGH BYTE OF RESULT TO
1957   096A             ;DETERMINE IF FORWARD BRANCH
1958   096A             ;
1959   096A FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1960   096C C2 D3 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1961   096F             ;
1962   096F             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1963   096F             ;
1964   096F 7D          	LD	A,L
1965   0970 CB 7F       	BIT	7,A
1966   0972 C2 D3 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1967   0975             ;
1968   0975             ; WITHIN LIMITS PUT IN RAM
1969   0975             ; AND SHOW AS CURRENT ADDRESS
1970   0975             ;
1971   0975 2A 29 3F    BRNCH2	LD	HL,(BLKSRT)
1972   0978 22 3B 3F    	LD	(ADRESS),HL
1973   097B 77          	LD	(HL),A
1974   097C C3 28 07    	JP	CANCL1
1975   097F             ;-----------------------------------------
1976   097F             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1977   097F             ;-----------------------------------------
1978   097F CD B7 05    TRACE	CALL	BEEP
1979   0982~            #IFDEF TEC-1F
1980   0982~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1981   0982~            	LD	HL,0046H	;SHOW T
1982   0982             #ELSE
1983   0982 D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1984   0984 21 70 00    	LD	HL,0070H	;SHOW T
1985   0987             #ENDIF
1986   0987 CD FC 08    	CALL	SDELAY
1987   098A C3 28 07    	JP	CANCL1
1988   098D             ;-------------------------
1989   098D             ; FUNCTION 8 - PLAY TUNE 1
1990   098D             ;-------------------------
1991   098D CD B7 05    PLAY1	CALL	BEEP
1992   0990 CD 9C 04    	CALL	KEYREL
1993   0993 21 C8 09    	LD	HL,TUNE1
1994   0996 CD 18 05    	CALL	MUSIC
1995   0999 C3 28 07    	JP	CANCL1
1996   099C             ;-------------------------
1997   099C             ; FUNCTION 9 - PLAY TUNE 2
1998   099C             ;-------------------------
1999   099C CD B7 05    PLAY2	CALL	BEEP
2000   099F CD 9C 04    	CALL	KEYREL
2001   09A2 21 08 0A    	LD	HL,TUNE2
2002   09A5 CD 18 05    	CALL	MUSIC
2003   09A8 C3 28 07    	JP	CANCL1
2004   09AB             ;------------------------------
2005   09AB             ; FUNCTION A - PLAY TUNE IN RAM
2006   09AB             ;------------------------------
2007   09AB CD B7 05    PLAY3	CALL	BEEP
2008   09AE CD 9C 04    	CALL	KEYREL
2009   09B1 2A 3B 3F    	LD	HL,(ADRESS)
2010   09B4 CD 18 05    	CALL	MUSIC
2011   09B7 C3 28 07    	JP	CANCL1
2012   09BA             ;-----------------------------
2013   09BA             ; FUNCTION B - TOGGLE KEY BEEP
2014   09BA             ;-----------------------------
2015   09BA CD B7 05    SWBEEP	CALL	BEEP
2016   09BD 3A 39 3F    	LD	A,(MODE)
2017   09C0 EE 40       	XOR	40H
2018   09C2 32 39 3F    	LD	(MODE),A
2019   09C5 C3 28 07    	JP	CANCL1
2020   09C8             ;
2021   09C8             ; TUNE 1
2022   09C8             ; FROM TALKING ELECTRONICS TEC-1
2023   09C8             ; MONITOR MON-1
2024   09C8             ; BY JOHN HARDY AND KEN STONE
2025   09C8             ;
2026   09C8 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2026   09CC 06 0D 0A 0D 
2027   09D0 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2027   09D4 0F 11 12 0F 
2028   09D8 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2028   09DC 12 0F 0D 0A 
2029   09E0 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
2029   09E4 0F 0A 0D 0F 
2030   09E8 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
2030   09EC 06 0D 0A 0D 
2031   09F0 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
2031   09F4 0F 11 12 0F 
2032   09F8 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
2032   09FC 12 0F 0D 0A 
2033   0A00 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
2033   0A04 06 12 00 1E 
2034   0A08             ;
2035   0A08             ; TUNE 2
2036   0A08             ; FROM TALKING ELECTRONICS TEC-1
2037   0A08             ; MONITOR MON-1
2038   0A08             ; BY JOHN HARDY AND KEN STONE
2039   0A08             ;
2040   0A08 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
2040   0A0C 0A 0A 06 06 
2041   0A10 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
2041   0A14 0A 0A 0A 0A 
2042   0A18 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
2042   0A1C 08 0A 0A 0A 
2043   0A20 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
2043   0A24 08 0A 0D 0D 
2044   0A28 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
2044   0A2C 0D 05 08 0B 
2045   0A30 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
2045   0A34 06 0B 0A 08 
2046   0A38 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
2046   0A3C 06 06 0B 0A 
2047   0A40 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
2047   0A44 08 08 0A 0B 
2048   0A48 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
2048   0A4C 06 06 06 06 
2049   0A50 00 00 00 1E 	.DB	00H,00H,00H,1EH
2050   0A54             ;---------------------------
2051   0A54             ; FUNCTION C - SECRET NUMBER
2052   0A54             ;---------------------------
2053   0A54 CD B7 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
2054   0A57 CD 9C 04    	CALL	KEYREL	;AND CLEAR DISPLAY
2055   0A5A CD 4C 04    	CALL	CLRBUF	;BUFFER
2056   0A5D DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
2057   0A61             ;
2058   0A61             ; SEPARATE NYBBLES IN RANDOM NUMBER
2059   0A61             ;
2060   0A61 CD E9 04    	CALL	RAND
2061   0A64 DD 75 0B    	LD	(IX+11),L
2062   0A67 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
2063   0A6A DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
2064   0A6D CD C2 0B    	CALL	SPLIT	;NUMBER INTO
2065   0A70 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
2066   0A73 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
2067   0A76 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
2068   0A79 CD C2 0B    	CALL	SPLIT	;GUESS EASIER
2069   0A7C DD 75 06    	LD	(IX+6),L
2070   0A7F DD 74 07    	LD	(IX+7),H
2071   0A82 AF          	XOR	A
2072   0A83 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
2073   0A85 21 00 00    	LD	HL,0
2074   0A88 DD 75 08    	LD	(IX+8),L
2075   0A8B DD 74 09    	LD	(IX+9),H
2076   0A8E CD CD 03    	CALL	DISADD	;AND DISPLAY GUESS
2077   0A91             ;
2078   0A91             ; SCAN THE KEYBOARD
2079   0A91             ;
2080   0A91 CD 78 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
2081   0A94 21 A0 0A    	LD	HL,SECNUM
2082   0A97 CD A6 04    	CALL	MENU	;EXECUTE KEY HANDLER
2083   0A9A CD 85 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2084   0A9D C3 91 0A    	JP	SECRT1
2085   0AA0             ;
2086   0AA0             ; SECRET NUMBER KEY TABLE
2087   0AA0             ;
2088   0AA0 12          SECNUM	.DB	12H
2089   0AA1 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
2089   0AA5 04 05 06 07 
2090   0AA9 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
2090   0AAD 0C 0D 0E 0F 
2091   0AB1 10 11       	.DB	10H,11H
2092   0AB3 D7 0A D7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2092   0AB7 D7 0A D7 0A 
2093   0ABB D7 0A D7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2093   0ABF D7 0A D7 0A 
2094   0AC3 D7 0A D7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2094   0AC7 D7 0A D7 0A 
2095   0ACB D7 0A D7 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
2095   0ACF D7 0A D7 0A 
2096   0AD3             ;
2097   0AD3             ; MAKE THE GO KEY CHECK THE NUMBER
2098   0AD3             ; AND THE AD KEY RETURN TO THE MONITOR FOR THE TEC-1F
2099   0AD3             ;
2100   0AD3~            #IFDEF TEC-1F
2101   0AD3~            	.DW	CHKKEY,ENDKEY
2102   0AD3             #ELSE
2103   0AD3 FE 0A 07 0B 	.DW	ENDKEY,CHKKEY
2104   0AD7             #ENDIF
2105   0AD7             ;---------------
2106   0AD7             ; EDIT GUESS KEY
2107   0AD7             ;---------------
2108   0AD7 F5          EDTKEY	PUSH	AF
2109   0AD8 DD 6E 08    	LD	L,(IX+8)
2110   0ADB DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
2111   0ADE CB 25       	SLA	L
2112   0AE0 CB 14       	RL	H	;AND DO A 16 BIT
2113   0AE2 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
2114   0AE4 CB 14       	RL	H	;TO MAKE  ROOM
2115   0AE6 CB 25       	SLA	L	;FOR THE NEW KEY
2116   0AE8 CB 14       	RL	H
2117   0AEA CB 25       	SLA	L
2118   0AEC CB 14       	RL	H
2119   0AEE F1          	POP	AF
2120   0AEF B5          	OR	L	;IT IN THE LEAST
2121   0AF0 6F          	LD	L,A	;SIGNIFICANT NYBBLE
2122   0AF1 DD 75 08    	LD	(IX+8),L
2123   0AF4 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
2124   0AF7 CD CD 03    	CALL	DISADD
2125   0AFA CD B7 05    	CALL	BEEP
2126   0AFD C9          	RET
2127   0AFE             ;----------
2128   0AFE             ; QUIT GAME
2129   0AFE             ;----------
2130   0AFE CD B7 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
2131   0B01 CD 9C 04    	CALL	KEYREL	;AND RETURN TO
2132   0B04 C3 7D 02    	JP	MAIN	;MONITOR
2133   0B07             ;---------------------------
2134   0B07             ; SEE IF ITS THE RIGHT GUESS
2135   0B07             ;---------------------------
2136   0B07 CD B7 05    CHKKEY	CALL	BEEP
2137   0B0A ED 57       	LD	A,I
2138   0B0C 3C          	INC	A
2139   0B0D 27          	DAA	;INC BCD NO. OF TRIES
2140   0B0E             ;
2141   0B0E             ; BRIEFLY SHOW GUESS NO.
2142   0B0E             ;
2143   0B0E ED 47       	LD	I,A
2144   0B10 CD E2 03    	CALL	DISBYT
2145   0B13 06 FF       	LD	B,255
2146   0B15 CD 1B 04    CHKKY1	CALL	SCAND
2147   0B18 10 FB       	DJNZ	CHKKY1
2148   0B1A             ;
2149   0B1A             ; SEPARATE GUESS INTO NYBBLES
2150   0B1A             ;
2151   0B1A DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
2152   0B1D CD C2 0B    	CALL	SPLIT	;NUMBER INTO
2153   0B20 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
2154   0B23 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
2155   0B26 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
2156   0B29 CD C2 0B    	CALL	SPLIT	;GUESS EASIER
2157   0B2C DD 75 02    	LD	(IX+2),L
2158   0B2F DD 74 03    	LD	(IX+3),H
2159   0B32             ;
2160   0B32             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
2161   0B32             ;
2162   0B32 AF          	XOR	A
2163   0B33 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
2164   0B36 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
2165   0B39 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
2166   0B3C 06 04       	LD	B,4	;NUMBER OF DIGITS
2167   0B3E 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
2168   0B3F EB          	EX	DE,HL
2169   0B40 BE          	CP	(HL)	;SAME AS GUESS?
2170   0B41 20 10       	JR	NZ,CHKKY4	;NOT SAME
2171   0B43 DD 7E 0A    	LD	A,(IX+10)
2172   0B46 C6 10       	ADD	A,10H	;RIGHT POSITION
2173   0B48 DD 77 0A    	LD	(IX+10),A
2174   0B4B 23          CHKKY3	INC	HL	;POINT TO NEXT
2175   0B4C EB          	EX	DE,HL	;DIGIT POSITION
2176   0B4D 23          	INC	HL	;AND GO
2177   0B4E 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
2178   0B50 C3 6F 0B    	JP	CHKKY8
2179   0B53             ;
2180   0B53             ; CHECK IF NUMBER IS THERE
2181   0B53             ;
2182   0B53 C5          CHKKY4	PUSH	BC
2183   0B54 E5          	PUSH	HL
2184   0B55 06 04       	LD	B,4	;CHECK EACH DIGIT
2185   0B57 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
2186   0B5A BE          CHKKY5	CP	(HL)	;NUMBER IS IN
2187   0B5B 23          	INC	HL	;THE WRONG
2188   0B5C 20 0A       	JR	NZ,CHKKY6	;POSITION
2189   0B5E DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
2190   0B61 3C          	INC	A	;THE RESULT
2191   0B62 DD 77 0A    	LD	(IX+10),A
2192   0B65 C3 6A 0B    	JP	CHKKY7
2193   0B68 10 F0       CHKKY6	DJNZ	CHKKY5
2194   0B6A E1          CHKKY7	POP	HL
2195   0B6B C1          	POP	BC
2196   0B6C C3 4B 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
2197   0B6F             ;
2198   0B6F             ; CHECK IF CORRECT
2199   0B6F             ;
2200   0B6F DD 7E 0A    CHKKY8	LD	A,(IX+10)
2201   0B72 FE 40       	CP	40H	;IS IT CORRECT?
2202   0B74 CA 94 0B    	JP	Z,CHKKY9	;YES!
2203   0B77 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
2204   0B7A CD E2 03    	CALL	DISBYT	;IN DATA DISPLAYS
2205   0B7D ED 57       	LD	A,I	;WAS THAT THE
2206   0B7F FE 20       	CP	20H	;LAST GUESS?
2207   0B81 C0          	RET	NZ	;NO TRY AGAIN
2208   0B82             ;
2209   0B82             ; RAN OUT OF TRYS
2210   0B82             ;
2211   0B82 CD 4C 04    	CALL	CLRBUF	;DISPLAY
2212   0B85 DD 6E 0B    	LD	L,(IX+11)
2213   0B88 DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
2214   0B8B CD CD 03    	CALL	DISADD	;AND PLAY
2215   0B8E 21 BB 0B    	LD	HL,LOSE	;THE LOSE
2216   0B91 C3 A2 0B    	JP	CHKKYA	;MUSIC
2217   0B94             ;
2218   0B94             ; GOT THE RIGHT ANSWER
2219   0B94             ;
2220   0B94 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2221   0B96 CD E2 03    	CALL	DISBYT	;AND PLAY THE WIN
2222   0B99 DD 6E 0B    	LD	L,(IX+11)
2223   0B9C DD 66 0C    	LD	H,(IX+12)
2224   0B9F 21 B2 0B    	LD	HL,WIN	;MUSIC
2225   0BA2             ;
2226   0BA2             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2227   0BA2             ;
2228   0BA2 CD 18 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2229   0BA5 CD 78 04    	CALL	SKEYIN	;WAIT FOR A KEY
2230   0BA8 CD B7 05    	CALL	BEEP
2231   0BAB CD 85 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2232   0BAE E1          	POP	HL	;AND RESTART THE GAME
2233   0BAF C3 54 0A    	JP	SECRET
2234   0BB2             ;
2235   0BB2             ; WIN AND LOSE MUSIC
2236   0BB2             ; FROM TALKING ELECTRONICS TEC-1
2237   0BB2             ; MONITOR MON-1
2238   0BB2             ; BY JOHN HARDY AND KEN STONE
2239   0BB2             ;
2240   0BB2 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2240   0BB6 17 12 14 10 
2240   0BBA 1F 
2241   0BBB 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2241   0BBF 01 11 1F 
2242   0BC2             ;-------------------------------
2243   0BC2             ; SEPARATE BYTE INTO TWO NYBBLES
2244   0BC2             ;-------------------------------
2245   0BC2             ;SEPARATES A BYTE INTO TWO
2246   0BC2             ;RIGHT JUSTIFIED NYBBLES
2247   0BC2             ; ENTRY : A = BYTE TO BE SEPARATED
2248   0BC2             ; EXIT  : H = MSN
2249   0BC2             ;         L = LSN
2250   0BC2             ;
2251   0BC2 F5          SPLIT	PUSH	AF
2252   0BC3 C5          	PUSH	BC
2253   0BC4 47          	LD	B,A	;SAVE BYTE
2254   0BC5 E6 0F       	AND	0FH	;STRIP BITS LSN
2255   0BC7 6F          	LD	L,A	;RETURN LSN IN L
2256   0BC8 78          	LD	A,B
2257   0BC9 CB 3F       	SRL	A
2258   0BCB CB 3F       	SRL	A
2259   0BCD CB 3F       	SRL	A	;MOVE MSN
2260   0BCF CB 3F       	SRL	A	;INTO LSN
2261   0BD1 67          	LD	H,A	;RETURN MSN IN H
2262   0BD2 C1          	POP	BC
2263   0BD3 F1          	POP	AF
2264   0BD4 C9          	RET
2265   0BD5             ;-----------------------------------
2266   0BD5             ; FUNCTION D - RELAY BOARD SEQUENCER
2267   0BD5             ;-----------------------------------
2268   0BD5 CD B7 05    RELSQR	CALL	BEEP
2269   0BD8 CD 9C 04    	CALL	KEYREL
2270   0BDB 21 E4 0B    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2271   0BDE CD EA 0B    	CALL	RLSTEP
2272   0BE1 C3 28 07    	JP	CANCL1
2273   0BE4             ;--------------
2274   0BE4             ; TEST SEQUENCE
2275   0BE4             ;--------------
2276   0BE4 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2276   0BE8 00 FF 
2277   0BEA             ;----------------
2278   0BEA             ; RELAY SEQUENCER
2279   0BEA             ;----------------
2280   0BEA             ; SEQUENCES RELAYS ON RELAY BOARD
2281   0BEA             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2282   0BEA             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2283   0BEA             ; OR REPEAT.
2284   0BEA             ;  TABLE:
2285   0BEA             ;  <BYTE1>,<BYTE2>
2286   0BEA             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2287   0BEA             ;  BYTE2 = FF - REPEAT
2288   0BEA             ;          00 - FINISHED
2289   0BEA             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2290   0BEA             ;  EXIT : NONE MODIFIED
2291   0BEA             ;
2292   0BEA F5          RLSTEP	PUSH	AF
2293   0BEB C5          	PUSH	BC
2294   0BEC D5          	PUSH	DE
2295   0BED E5          	PUSH	HL	;SAVE REGISTERS
2296   0BEE E5          	PUSH	HL
2297   0BEF EB          	EX	DE,HL	;GET ADDRESS OF DATA
2298   0BF0 1A          RELSR1	LD	A,(DE)
2299   0BF1 4F          	LD	C,A	;GET OUTPUT DATA
2300   0BF2 13          	INC	DE
2301   0BF3 1A          	LD	A,(DE)	;GET TIME DELAY
2302   0BF4 FE 00       	CP	0
2303   0BF6 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2304   0BF8 FE FF       	CP	255
2305   0BFA 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2306   0BFC 47          	LD	B,A
2307   0BFD 79          	LD	A,C
2308   0BFE~            #IFDEF TEC-1F
2309   0BFE~            	OUT	(PORT3),A	;STROBE
2310   0BFE             #ELSE
2311   0BFE D3 81       	OUT	(IO1),A
2312   0C00             #ENDIF
2313   0C00 13          	INC	DE
2314   0C01 CD 18 0C    RELSR2	CALL	DELONE	;1 SEC DELAY
2315   0C04 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2316   0C06 C3 F0 0B    	JP	RELSR1
2317   0C09             ;
2318   0C09             ; REPEAT
2319   0C09             ;
2320   0C09 D1          RELSR3	POP	DE	;GET START ADDRESS
2321   0C0A D5          	PUSH	DE	;SAVE FOR LATER
2322   0C0B C3 F0 0B    	JP	RELSR1
2323   0C0E             ;
2324   0C0E             ; FINISHED
2325   0C0E             ;
2326   0C0E 3E 00       RELSR4	LD	A,00H
2327   0C10~            #IFDEF TEC-1F
2328   0C10~            	OUT	(PORT3),A	;STROBE
2329   0C10             #ELSE
2330   0C10 D3 81       	OUT	(IO1),A	;CLEAR OUTPUT REG
2331   0C12             #ENDIF
2332   0C12 E1          	POP	HL
2333   0C13 E1          	POP	HL
2334   0C14 D1          	POP	DE
2335   0C15 C1          	POP	BC
2336   0C16 F1          	POP	AF
2337   0C17 C9          	RET
2338   0C18             ;-----------------
2339   0C18             ; ONE SECOND DELAY
2340   0C18             ;-----------------
2341   0C18             ;
2342   0C18             ; ENTRY : NONE
2343   0C18             ; EXIT : FLAG REGISTER MODIFIED
2344   0C18             ;
2345   0C18 C5          DELONE	PUSH	BC
2346   0C19 D5          	PUSH	DE
2347   0C1A E5          	PUSH	HL
2348   0C1B 11 01 00    	LD	DE,0001H
2349   0C1E 21 70 08    	LD	HL,0870H
2350   0C21 06 92       DELON1	LD	B,92H
2351   0C23 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2352   0C25 ED 52       	SBC	HL,DE
2353   0C27 D2 21 0C    	JP	NC,DELON1	;OUTER LOOP
2354   0C2A E1          	POP	HL
2355   0C2B D1          	POP	DE
2356   0C2C C1          	POP	BC
2357   0C2D C9          	RET
2358   0C2E             ;--------------------------
2359   0C2E             ; FUNCTION E - KALEIDOSCOPE
2360   0C2E             ;--------------------------
2361   0C2E CD B7 05    SCOPE	CALL	BEEP
2362   0C31 CD 9C 04    	CALL	KEYREL
2363   0C34 CD E9 04    	CALL	RAND	;GENERATE RANDOM
2364   0C37 EB          	EX	DE,HL
2365   0C38 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2366   0C3B 7B          	LD	A,E	;THE FIRST QUADRANT
2367   0C3C CD AD 0C    	CALL	SEED	;WITH A RANDOM BIT
2368   0C3F 7A          	LD	A,D	;PATTERN
2369   0C40 CD AD 0C    	CALL	SEED
2370   0C43             ;
2371   0C43             ; GENERATE MIRROR IMAGES
2372   0C43             ;
2373   0C43 06 04       SCOPE2	LD	B,04H
2374   0C45 21 00 3E    	LD	HL,BUFFER
2375   0C48 11 07 3E    	LD	DE,BUFFER+7
2376   0C4B 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2377   0C4C 12          	LD	(DE),A	;QUADRANT INTO
2378   0C4D 23          	INC	HL	;THE FOURTH
2379   0C4E 1B          	DEC	DE	;QUADRANT
2380   0C4F 10 FA       	DJNZ	SCOPE3
2381   0C51             ;
2382   0C51             ; MIRROR ACROSS CENTRE OF DISPLAY
2383   0C51             ;
2384   0C51 06 08       	LD	B,8	;MIRROR THE FIRST
2385   0C53 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2386   0C56 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2387   0C57 E6 0F       	AND	0FH	;OF THE DISPLAY
2388   0C59 77          	LD	(HL),A	;INTO THE SECOND
2389   0C5A CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2390   0C5C CA 61 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2391   0C5F CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2392   0C61 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2393   0C63 CA 68 0C    	JP	Z,SCOPE6	;CORRESPONDING
2394   0C66 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2395   0C68 CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2396   0C6A CA 6F 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2397   0C6D CB EE       	SET	5,(HL)	;DO THIS FOR
2398   0C6F CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2399   0C71 CA 76 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2400   0C74 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2401   0C76 23          SCOPE8	INC	HL
2402   0C77 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2403   0C79             ;
2404   0C79             ; DISPLAY RANDOM BIT PATTERN
2405   0C79             ;
2406   0C79 11 01 00    	LD	DE,0001H	;SET UP DELAY
2407   0C7C 21 00 02    	LD	HL,0200H
2408   0C7F E5          SCOPE9	PUSH	HL
2409   0C80 21 00 3E    	LD	HL,BUFFER
2410   0C83 CD BC 0C    	CALL	SKATE	;SCAN 8X8
2411   0C86 E1          	POP	HL
2412   0C87 ED 52       	SBC	HL,DE
2413   0C89 C2 7F 0C    	JP	NZ,SCOPE9
2414   0C8C             ;
2415   0C8C             ; MANIPULATE BITS FOR NEXT IMAGE
2416   0C8C             ;
2417   0C8C 21 00 3E    SCOPEA	LD	HL,BUFFER
2418   0C8F 3E 05       	LD	A,5
2419   0C91 86          	ADD	A,(HL)
2420   0C92 E6 0F       	AND	0FH
2421   0C94 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2422   0C95 23          	INC	HL
2423   0C96 3E 03       	LD	A,03H
2424   0C98 86          	ADD	A,(HL)
2425   0C99 E6 0F       	AND	0FH
2426   0C9B 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2427   0C9C 23          	INC	HL
2428   0C9D 3E 01       	LD	A,01H
2429   0C9F 86          	ADD	A,(HL)
2430   0CA0 E6 0F       	AND	0FH
2431   0CA2 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2432   0CA3 23          	INC	HL
2433   0CA4 3E 07       	LD	A,07H
2434   0CA6 86          	ADD	A,(HL)
2435   0CA7 E6 0F       	AND	0FH
2436   0CA9 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2437   0CAA C3 43 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2438   0CAD             ;
2439   0CAD             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2440   0CAD             ;
2441   0CAD 47          SEED	LD	B,A	;PUT THE
2442   0CAE E6 0F       	AND	0FH	;RANDOM NUMBER
2443   0CB0 77          	LD	(HL),A	;INTO THE
2444   0CB1 23          	INC	HL	;FIRST QUADRANT
2445   0CB2 78          	LD	A,B	;OF THE
2446   0CB3 E6 F0       	AND	240	;DISPLAY
2447   0CB5 1F          	RRA
2448   0CB6 1F          	RRA
2449   0CB7 1F          	RRA
2450   0CB8 1F          	RRA
2451   0CB9 77          	LD	(HL),A
2452   0CBA 23          	INC	HL
2453   0CBB C9          	RET
2454   0CBC             ;-----------------
2455   0CBC             ; SCAN 8X8 DISPLAY
2456   0CBC             ;-----------------
2457   0CBC             ;PUT THE 8 RAM LOCATIONS POINTED TO
2458   0CBC             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2459   0CBC             ;ON TOP ROW.
2460   0CBC             ;  ROUTINE PERIOD IS 500uS
2461   0CBC             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2462   0CBC             ;
2463   0CBC             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2464   0CBC             ;	EXIT : NO REGISTERS MODIFIED
2465   0CBC             ;
2466   0CBC F5          SKATE	PUSH	AF
2467   0CBD C5          	PUSH	BC
2468   0CBE E5          	PUSH	HL	;SAVE REGISTERS
2469   0CBF 0E 80       	LD	C,80H
2470   0CC1 7E          SKATE1	LD	A,(HL)
2471   0CC2~            #IFDEF TEC-1F
2472   0CC2~            	OUT	(PORT3),A	;OUTPUT X
2473   0CC2             #ELSE
2474   0CC2 D3 80       	OUT	(IO0),A	;OUTPUT X
2475   0CC4             #ENDIF
2476   0CC4 79          	LD	A,C
2477   0CC5~            #IFDEF TEC-1F
2478   0CC5~            	OUT	(PORT4),A	;OUTPUT Y
2479   0CC5             #ELSE
2480   0CC5 D3 82       	OUT	(IO2),A	;OUTPUT Y
2481   0CC7             #ENDIF
2482   0CC7 06 02       	LD	B,02H
2483   0CC9 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2484   0CCB AF          	XOR	A
2485   0CCC~            #IFDEF TEC-1F
2486   0CCC~            	OUT	(PORT3),A
2487   0CCC~            	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2488   0CCC             #ELSE
2489   0CCC D3 80       	OUT	(IO0),A
2490   0CCE D3 82       	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2491   0CD0             #ENDIF
2492   0CD0 06 08       	LD	B,08H
2493   0CD2 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2494   0CD4 23          	INC	HL
2495   0CD5 CB 09       	RRC	C
2496   0CD7 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2497   0CD9 E1          	POP	HL
2498   0CDA C1          	POP	BC
2499   0CDB F1          	POP	AF
2500   0CDC C9          	RET
2501   0CDD             ;----------------------------
2502   0CDD             ; FUNCTION F - CLOCK CALENDAR
2503   0CDD             ;----------------------------
2504   0CDD CD B7 05    TIME	CALL	BEEP
2505   0CE0 CD 9C 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2506   0CE3 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2507   0CE7 3A 37 3F    	LD	A,(ONTIM)
2508   0CEA DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2509   0CED 3E 60       	LD	A,60H
2510   0CEF 32 37 3F    	LD	(ONTIM),A	;USE NEW DELAY
2511   0CF2 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2512   0CF5             ;
2513   0CF5             ; DISPLAY TIME,CHECK FOR KEY
2514   0CF5             ;
2515   0CF5 CD 4B 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2516   0CF8 CD 35 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2517   0CFB CD 1B 04    	CALL	SCAND
2518   0CFE CD 5B 04    	CALL	SCANKEY
2519   0D01 CB 6F       	BIT	5,A
2520   0D03 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2521   0D05 E6 1F       	AND	1FH
2522   0D07 21 0F 0D    	LD	HL,TIMKEY
2523   0D0A CD A6 04    	CALL	MENU
2524   0D0D 18 E6       	JR	TIME1
2525   0D0F             
2526   0D0F 04          TIMKEY	.DB	4
2527   0D10 10 11 12 13 	.DB	10H,11H,12H,13H
2528   0D14 1C 0D AD 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2528   0D18 26 0D 26 0D 
2529   0D1C             ;--------------------
2530   0D1C             ; EXIT CLOCK CALENDAR
2531   0D1C             ;--------------------
2532   0D1C E1          CLKEXT	POP	HL	;REMOVE RETURN
2533   0D1D DD 7E 00    	LD	A,(IX+0)
2534   0D20 32 37 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2535   0D23 C3 25 07    	JP	CANCEL
2536   0D26             ;--------------------
2537   0D26             ; TOGGLE DISPLAY MODE
2538   0D26             ;--------------------
2539   0D26 CD B7 05    CALKEY	CALL	BEEP
2540   0D29 CD 9C 04    	CALL	KEYREL
2541   0D2C DD 7E 01    	LD	A,(IX+1)
2542   0D2F EE 80       	XOR	80H	;TOGGLE DISPLAY
2543   0D31 DD 77 01    	LD	(IX+1),A
2544   0D34 C9          	RET
2545   0D35             ;----------------------
2546   0D35             ; UPDATE DISPLAY BUFFER
2547   0D35             ;----------------------
2548   0D35 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2549   0D39 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2550   0D3B             ;
2551   0D3B             ; TIME DISPLAY
2552   0D3B             ;
2553   0D3B 3A 1A 3F    UPDBF1	LD	A,(SWREG1)
2554   0D3E CD EB 03    	CALL	CONBYT
2555   0D41~            #IFDEF	TEC-1F
2556   0D41~            	SET	4,L
2557   0D41             #ELSE
2558   0D41 CB FD       	SET	7,L	;SET DECIMAL POINT
2559   0D43             #ENDIF
2560   0D43 22 31 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2561   0D46 3A 1B 3F    	LD	A,(SWREG2)
2562   0D49 CD EB 03    	CALL	CONBYT
2563   0D4C~            #IFDEF	TEC-1F
2564   0D4C~            	SET	4,L
2565   0D4C             #ELSE
2566   0D4C CB FD       	SET	7,L	;SET DECIMAL POINT
2567   0D4E             #ENDIF	
2568   0D4E 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2569   0D51 3A 1C 3F    	LD	A,(SWREG3)
2570   0D54 CD EB 03    	CALL	CONBYT
2571   0D57~            #IFDEF	TEC-1F
2572   0D57~            	SET	4,L
2573   0D57             #ELSE
2574   0D57 CB FD       	SET	7,L	;SET DECIMAL POINT
2575   0D59             #ENDIF
2576   0D59 22 35 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2577   0D5C C9          	RET
2578   0D5D             ;
2579   0D5D             ; CALENDAR DISPLAY
2580   0D5D             ;
2581   0D5D 3A 20 3F    UPDBF2	LD	A,(SWREG7)
2582   0D60 CD EB 03    	CALL	CONBYT
2583   0D63 22 31 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2584   0D66             ;
2585   0D66             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2586   0D66             ;
2587   0D66 21 17 3F    	LD	HL,CALMDE
2588   0D69 CB 7E       	BIT	7,(HL)
2589   0D6B 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2590   0D6D             ;
2591   0D6D             ; DD/MM/YY MODE
2592   0D6D             ;
2593   0D6D 3A 1F 3F    	LD	A,(SWREG6)
2594   0D70 CD EB 03    	CALL	CONBYT
2595   0D73 22 33 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2596   0D76 3A 1E 3F    	LD	A,(SWREG5)
2597   0D79 CD EB 03    	CALL	CONBYT
2598   0D7C 22 35 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2599   0D7F 18 12       	JR	UPDBF4
2600   0D81             ;
2601   0D81             ; MM/DD/YY MODE
2602   0D81             ;
2603   0D81 3A 1F 3F    UPDBF3	LD	A,(SWREG6)
2604   0D84 CD EB 03    	CALL	CONBYT
2605   0D87 22 35 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2606   0D8A 3A 1E 3F    	LD	A,(SWREG5)
2607   0D8D CD EB 03    	CALL	CONBYT
2608   0D90 22 33 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2609   0D93             ;
2610   0D93             ; SHOW DAY
2611   0D93             ;
2612   0D93 3A 1D 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2613   0D96 E6 07       	AND	07H
2614   0D98 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2615   0D9A FE 07       	CP	07H
2616   0D9C 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2617   0D9E 2F          	CPL	;WORK OUT
2618   0D9F D6 01       	SUB	01H	;WHICH DECIMAL POINT
2619   0DA1 E6 07       	AND	07H	;TO LIGHT
2620   0DA3 21 31 3F    	LD	HL,DISBUF	;ADDING THE DAY
2621   0DA6 06 00       	LD	B,00H	;TO A DISPLAY
2622   0DA8 4F          	LD	C,A	;BUFFER INDEX
2623   0DA9 09          	ADD	HL,BC	;AND SETTING THE
2624   0DAA~            #IFDEF	TEC-1F
2625   0DAA~            	SET	4,(HL)
2626   0DAA             #ELSE
2627   0DAA CB FE       	SET	7,(HL)	;DECIMAL POINT
2628   0DAC             #ENDIF	
2629   0DAC C9          UPDBF5	RET	;IN THAT DISPLAY
2630   0DAD             ;--------------
2631   0DAD             ; SET TIME/DATE
2632   0DAD             ;--------------
2633   0DAD CD B7 05    SETCLK	CALL	BEEP
2634   0DB0 CD 9C 04    	CALL	KEYREL
2635   0DB3             ;
2636   0DB3             ; EDIT THE DISPLAY BUFFER
2637   0DB3             ;
2638   0DB3 CD 35 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2639   0DB6 CD 78 04    	CALL	SKEYIN
2640   0DB9 CD 9C 04    	CALL	KEYREL
2641   0DBC FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2642   0DBE C8          	RET	Z
2643   0DBF FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2644   0DC1 28 6E       	JR	Z,SETCK8
2645   0DC3 FE 12       	CP	12H
2646   0DC5 28 3D       	JR	Z,SETCK4	;PLUS KEY
2647   0DC7 FE 13       	CP	13H
2648   0DC9 28 4F       	JR	Z,SETCK6	;MINUS KEY
2649   0DCB FE 0A       	CP	0AH	;NO A-F KEYS
2650   0DCD 30 E4       	JR	NC,SETCK1
2651   0DCF             ;
2652   0DCF             ; IS IT SET CLOCK OR SET CALENDAR?
2653   0DCF             ;
2654   0DCF DD CB 01 7E 	BIT	7,(IX+1)
2655   0DD3 20 0D       	JR	NZ,SETCK2
2656   0DD5             ;
2657   0DD5             ; SET CLOCK DISPLAY
2658   0DD5             ;
2659   0DD5 21 1A 3F    	LD	HL,SWREG1
2660   0DD8 ED 6F       	RLD	;MOVE THE NEW KEY
2661   0DDA 23          	INC	HL	;INTO THE CLOCK BUFFER
2662   0DDB ED 6F       	RLD
2663   0DDD 23          	INC	HL
2664   0DDE ED 6F       	RLD
2665   0DE0 18 D1       	JR	SETCK1
2666   0DE2             ;
2667   0DE2             ; SET CALENDAR DISPLAY
2668   0DE2             ;
2669   0DE2 21 17 3F    SETCK2	LD	HL,CALMDE
2670   0DE5 CB 7E       	BIT	7,(HL)
2671   0DE7 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2672   0DE9             ;
2673   0DE9             ; SET CALENDAR AS DD/MM/YY
2674   0DE9             ;
2675   0DE9 21 20 3F    	LD	HL,SWREG7
2676   0DEC ED 6F       	RLD	;MOVE THE NEW KEY
2677   0DEE 2B          	DEC	HL	;INTO THE CAL BUFFER
2678   0DEF ED 6F       	RLD
2679   0DF1 2B          	DEC	HL
2680   0DF2 ED 6F       	RLD
2681   0DF4 18 BD       	JR	SETCK1
2682   0DF6             ;
2683   0DF6             ; SET CALENDAR AS MM/DD/YY
2684   0DF6             ;
2685   0DF6 21 20 3F    SETCK3	LD	HL,SWREG7
2686   0DF9 ED 6F       	RLD	;MOVE THE NEW KEY
2687   0DFB 2B          	DEC	HL	;INTO THE CAL BUFFER
2688   0DFC 2B          	DEC	HL
2689   0DFD ED 6F       	RLD
2690   0DFF 23          	INC	HL
2691   0E00 ED 6F       	RLD
2692   0E02 18 AF       	JR	SETCK1
2693   0E04             ;
2694   0E04             ; INC DAY
2695   0E04             ;
2696   0E04 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2697   0E08 28 A9       	JR	Z,SETCK1
2698   0E0A 3A 1D 3F    	LD	A,(SWREG4)
2699   0E0D FE 07       	CP	07H	;IS THE DAY SUNDAY?
2700   0E0F 20 02       	JR	NZ,SETCK5
2701   0E11 3E 00       	LD	A,00H	;SET MONDAY
2702   0E13 3C          SETCK5	INC	A	;DAY=DAY+1
2703   0E14 32 1D 3F    	LD	(SWREG4),A
2704   0E17 C3 B3 0D    	JP	SETCK1
2705   0E1A             ;
2706   0E1A             ; DEC DAY
2707   0E1A             ;
2708   0E1A DD CB 01 7E SETCK6	BIT	7,(IX+1)
2709   0E1E CA B3 0D    	JP	Z,SETCK1
2710   0E21 3A 1D 3F    	LD	A,(SWREG4)
2711   0E24 FE 01       	CP	01H	;IS THE DAY MONDAY?
2712   0E26 20 02       	JR	NZ,SETCK7
2713   0E28 3E 08       	LD	A,08H	;SET SUNDAY
2714   0E2A 3D          SETCK7	DEC	A	;DAY=DAY-1
2715   0E2B 32 1D 3F    	LD	(SWREG4),A
2716   0E2E C3 B3 0D    	JP	SETCK1
2717   0E31             ;
2718   0E31             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2719   0E31             ;
2720   0E31 CD B7 05    SETCK8	CALL	BEEP
2721   0E34 CD 9C 04    	CALL	KEYREL
2722   0E37 3A 1C 3F    	LD	A,(SWREG3)
2723   0E3A E6 3F       	AND	3FH	;24 HOUR MODE
2724   0E3C 32 1C 3F    	LD	(SWREG3),A
2725   0E3F 3A 1D 3F    	LD	A,(SWREG4)
2726   0E42 E6 07       	AND	07H	;OSC ON,RST ENABLED
2727   0E44 32 1D 3F    	LD	(SWREG4),A
2728   0E47 CD D5 0E    	CALL	WWATCH	;WRITE CHANGES
2729   0E4A C9          	RET
2730   0E4B             ;---------------------
2731   0E4B             ; READ FROM SMARTWATCH
2732   0E4B             ;---------------------
2733   0E4B             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2734   0E4B             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2735   0E4B             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2736   0E4B             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2737   0E4B             ;
2738   0E4B             ;  ENTRY : NONE
2739   0E4B             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2740   0E4B             ;          (ALTERNATE SET MODIFIED)
2741   0E4B             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2742   0E4B             ;
2743   0E4B             ;
2744   0E4B             ; ENABLE SMARTWATCH
2745   0E4B             ;
2746   0E4B F5          RWATCH	PUSH	AF
2747   0E4C C5          	PUSH	BC
2748   0E4D D5          	PUSH	DE
2749   0E4E E5          	PUSH	HL
2750   0E4F 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2751   0E52 21 95 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2752   0E55 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2753   0E57 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2754   0E58 32 60 3F    	LD	(DALLAS),A
2755   0E5B 23          	INC	HL
2756   0E5C 10 F9       	DJNZ	RWACH1
2757   0E5E             ;
2758   0E5E             ; READ DATA FROM WATCH
2759   0E5E             ;
2760   0E5E 06 20       	LD	B,32
2761   0E60 3A 60 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2762   0E63 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2763   0E65 CB 1A       	RR	D	;DE AND HL
2764   0E67 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2765   0E69 CB 1C       	RR	H	;THE ALTERNATE PAIR
2766   0E6B CB 1D       	RR	L
2767   0E6D 10 F1       	DJNZ	RWACH2
2768   0E6F D9          	EXX
2769   0E70 06 20       	LD	B,32
2770   0E72 3A 60 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2771   0E75 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2772   0E77 CB 1A       	RR	D
2773   0E79 CB 1B       	RR	E
2774   0E7B CB 1C       	RR	H
2775   0E7D CB 1D       	RR	L
2776   0E7F 10 F1       	DJNZ	RWACH3
2777   0E81             ;
2778   0E81             ; SAVE IN WATCH REGISTERS
2779   0E81             ;
2780   0E81 22 1D 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2781   0E84 ED 53 1F 3F 	LD	(SWREG6),DE	;GET THE DATA
2782   0E88 D9          	EXX
2783   0E89 22 19 3F    	LD	(SWREG0),HL
2784   0E8C ED 53 1B 3F 	LD	(SWREG2),DE
2785   0E90 E1          	POP	HL
2786   0E91 D1          	POP	DE
2787   0E92 C1          	POP	BC
2788   0E93 F1          	POP	AF
2789   0E94 C9          	RET
2790   0E95             ;
2791   0E95             ; SMARTWATCH ACCESS PATTERN
2792   0E95             ;
2793   0E95 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2793   0E99 5C 2E 17 8B 
2794   0E9D 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2794   0EA1 A3 D1 E8 74 
2795   0EA5 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2795   0EA9 3A 1D 8E 47 
2796   0EAD 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2796   0EB1 C5 E2 71 B8 
2797   0EB5 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2797   0EB9 5C 2E 17 8B 
2798   0EBD 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2798   0EC1 A3 D1 E8 74 
2799   0EC5 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2799   0EC9 3A 1D 8E 47 
2800   0ECD 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2800   0ED1 C5 E2 71 B8 
2801   0ED5             ;--------------------
2802   0ED5             ; WRITE TO SMARTWATCH
2803   0ED5             ;--------------------
2804   0ED5             ;
2805   0ED5             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2806   0ED5             ; IT USING BIT MANIPULATION.
2807   0ED5             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2808   0ED5             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2809   0ED5             ; SMARTWATCH IS ENABLED.
2810   0ED5             ;
2811   0ED5             ; ENTRY : NONE
2812   0ED5             ; THE DATA TO WRITE TO THE SMARTWATCH
2813   0ED5             ; MUST BE IN SWREG0 - SWREG7
2814   0ED5             ;  EXIT : NO WORKING REGISTERS MODIFIED
2815   0ED5             ;  (ALTERNATE SET MODIFIED)
2816   0ED5             ; GET DATA TO WRITE TO WATCH
2817   0ED5             ;
2818   0ED5 F5          WWATCH	PUSH	AF
2819   0ED6 C5          	PUSH	BC
2820   0ED7 D5          	PUSH	DE
2821   0ED8 E5          	PUSH	HL
2822   0ED9 2A 1D 3F    	LD	HL,(SWREG4)	;SET UP THE
2823   0EDC ED 5B 1F 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2824   0EE0 D9          	EXX
2825   0EE1 2A 19 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2826   0EE4 ED 5B 1B 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2827   0EE8             ;
2828   0EE8             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2829   0EE8             ;
2830   0EE8 3A 60 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2831   0EEB 3E C5       	LD	A,0C5H
2832   0EED 0E 80       	LD	C,80H	;NUMBER OF BYTES
2833   0EEF 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2834   0EF1 32 60 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2835   0EF4 CB 0F       	RRC	A
2836   0EF6 CB 38       	SRL	B
2837   0EF8 30 F7       	JR	NC,WWACH2	;MORE BITS
2838   0EFA CB 39       	SRL	C
2839   0EFC 38 11       	JR	C,WWACH4	;NO MORE BYTES
2840   0EFE CB 47       	BIT	0,A
2841   0F00 20 0A       	JR	NZ,WWACH3
2842   0F02 CB 0F       	RRC	A
2843   0F04 CB 0F       	RRC	A
2844   0F06 CB 0F       	RRC	A
2845   0F08 CB 0F       	RRC	A
2846   0F0A 18 E3       	JR	WWACH1
2847   0F0C 2F          WWACH3	CPL
2848   0F0D 18 E0       	JR	WWACH1
2849   0F0F             ;
2850   0F0F             ; WRITE DATA TO WATCH
2851   0F0F             ;
2852   0F0F 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2853   0F11 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2854   0F13 CB 1B       	RR	E	;ONTO D0 AND INTO
2855   0F15 CB 1C       	RR	H	;THE SMARTWATCH
2856   0F17 CB 1D       	RR	L
2857   0F19 17          	RLA
2858   0F1A 32 60 3F    	LD	(DALLAS),A
2859   0F1D 10 F2       	DJNZ	WWACH5
2860   0F1F D9          	EXX	;RESTORE REGISTERS
2861   0F20 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2862   0F22 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2863   0F24 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2864   0F26 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2865   0F28 CB 1D       	RR	L
2866   0F2A 17          	RLA
2867   0F2B 32 60 3F    	LD	(DALLAS),A
2868   0F2E 10 F2       	DJNZ	WWACH6
2869   0F30 E1          	POP	HL
2870   0F31 D1          	POP	DE
2871   0F32 C1          	POP	BC
2872   0F33 F1          	POP	AF
2873   0F34 C9          	RET
2874   0F35             ;-----------------
2875   0F35             ; ONE SECOND DELAY
2876   0F35             ;-----------------
2877   0F35             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2878   0F35             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2879   0F35             ;
2880   0F35             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2881   0F35             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2882   0F35             ; READS THE SAME AS THE REFERENCE VALUE,
2883   0F35             ; THEN THE ROUTINE RETURNS
2884   0F35             ;
2885   0F35             ; ENTRY : NONE
2886   0F35             ; EXIT : NONE MODIFIED
2887   0F35             ;
2888   0F35 F5          ONESEC	PUSH	AF
2889   0F36 C5          	PUSH	BC
2890   0F37 CD 4B 0E    	CALL	RWATCH	;READ WATCH
2891   0F3A 3A 1A 3F    	LD	A,(SWREG1)
2892   0F3D 47          	LD	B,A	;SAVE REF COUNT
2893   0F3E CD 4B 0E    ONESC1	CALL	RWATCH
2894   0F41 3A 1A 3F    	LD	A,(SWREG1)
2895   0F44 B8          	CP	B	;SAME AS REF?
2896   0F45 CA 3E 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2897   0F48 C1          	POP	BC
2898   0F49 F1          	POP	AF
2899   0F4A C9          	RET
2900   0F4B             ;---------------------
2901   0F4B             ; SCBUG SERIAL MONITOR
2902   0F4B             ;---------------------
2903   0F4B             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2904   0F4B             ; COMMS PARAMETERS ARE 4800,n,8,2
2905   0F4B             ;
2906   0F4B             ;------------
2907   0F4B             ; ASCII CODES
2908   0F4B             ;------------
2909   0F4B             ESC	.EQU	1BH
2910   0F4B             CR	.EQU	0DH
2911   0F4B             LF	.EQU	0AH
2912   0F4B             ;
2913   0F4B 21 1B 00    SCBUG	LD	HL,B4800	;INITIALISE THE BAUD RATE
2914   0F4E CD 11 08    	CALL SERINI	;SET UP TX OUTPUT PIN
2915   0F51             ;
2916   0F51             ; START UP THE MONITOR
2917   0F51             ;
2918   0F51 ED 73 10 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2919   0F55 21 46 13    	LD	HL,SSSTEP
2920   0F58 22 5B 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2921   0F5B CD 07 14    	CALL	PRNTSZ
2922   0F5E 1B 5B 48 1B 	.DB	27,"[H",27,"[2J",0	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2922   0F62 5B 32 4A 00 
2923   0F66 CD A3 03    	CALL	PCBTYP
2924   0F69 CD 32 13    	CALL	SNDMSG	;BOARD TYPE
2925   0F6C CD 07 14    	CALL	PRNTSZ
2926   0F6F 20 53 6F 75 	.DB	" Southern Cross Serial Monitor ",0
2926   0F73 74 68 65 72 
2926   0F77 6E 20 43 72 
2926   0F7B 6F 73 73 20 
2926   0F7F 53 65 72 69 
2926   0F83 61 6C 20 4D 
2926   0F87 6F 6E 69 74 
2926   0F8B 6F 72 20 00 
2927   0F8F CD AA 03    	CALL	VERS
2928   0F92 CD 32 13    	CALL	SNDMSG	;MONITOR VERSION
2929   0F95 CD 3A 10    	CALL	TXCRLF
2930   0F98 CD B1 03    	CALL	KBDTYP
2931   0F9B CD 32 13    	CALL	SNDMSG	;KEYBOARD TYPE
2932   0F9E CD 07 14    	CALL	PRNTSZ
2933   0FA1 20 4B 65 79 	.DB	" Keyboard",0
2933   0FA5 62 6F 61 72 
2933   0FA9 64 00 
2934   0FAB CD 07 14    	CALL	PRNTSZ
2935   0FAE 0D 0A 48 20 	.DB	CR,LF,"H for command list",CR,LF,0
2935   0FB2 66 6F 72 20 
2935   0FB6 63 6F 6D 6D 
2935   0FBA 61 6E 64 20 
2935   0FBE 6C 69 73 74 
2935   0FC2 0D 0A 00 
2936   0FC5             ;
2937   0FC5             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2938   0FC5             ;
2939   0FC5 3E 3E       START2	LD	A,'>'
2940   0FC7 CD 2B 08    	CALL	TXDATA	;DISPLAY THE PROMPT
2941   0FCA CD 56 08    START3	CALL	RXDATA	;GET A CHARACTER FROM THE CONSOLE
2942   0FCD 4F          	LD	C,A	;SAVE FOR LATER
2943   0FCE E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2944   0FD0             ;
2945   0FD0             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2946   0FD0             ;
2947   0FD0 21 EF 0F    	LD	HL,MONMENU
2948   0FD3 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2949   0FD4 23          	INC	HL
2950   0FD5 BE          START4	CP	(HL)	;IN THE LIST?
2951   0FD6 28 05       	JR	Z,START5	;OK DO IT
2952   0FD8 23          	INC	HL
2953   0FD9 10 FA       	DJNZ	START4	;KEEP LOOKING
2954   0FDB 18 ED       	JR	START3
2955   0FDD 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2956   0FDE CD 2B 08    	CALL	TXDATA	;TO ECHO IT
2957   0FE1 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2958   0FE3 21 EF 0F    	LD	HL,MONMENU	;USE THE MENU HANDLER
2959   0FE6 CD A6 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2960   0FE9             ;
2961   0FE9             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2962   0FE9             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2963   0FE9             ;
2964   0FE9 CD 3A 10    WARM	CALL	TXCRLF	;START ON A NEW LINE
2965   0FEC C3 C5 0F    	JP	START2
2966   0FEF             ;
2967   0FEF             ; SCBUG MONITOR COMMANDS
2968   0FEF             ;
2969   0FEF 07          MONMENU	.DB 7
2970   0FF0 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2970   0FF4 47 49 58 
2971   0FF7 72 12 66 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2971   0FFB 62 11 7F 11 
2972   0FFF 44 10 D2 11 	.DW	GOJUMP,INTHEX,EXIT
2972   1003 23 12 
2973   1005             ;-----------------------------
2974   1005             ; GET A BYTE FROM THE TERMINAL
2975   1005             ;-----------------------------
2976   1005 CD 56 08    GETCHR	CALL	RXDATA
2977   1008 FE 1B       	CP	ESC
2978   100A 28 27       	JR	Z,GETOUT
2979   100C 47          	LD	B,A	;SAVE TO ECHO
2980   100D CD 46 12    	CALL	ASC2HEX
2981   1010 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2982   1012 21 14 3F    	LD	HL,DATA
2983   1015 77          	LD	(HL),A
2984   1016 78          	LD	A,B
2985   1017 CD 2B 08    	CALL	TXDATA	;ECHO VALID HEX
2986   101A             ;	
2987   101A CD 56 08    GETNYB	CALL	RXDATA
2988   101D FE 1B       	CP	ESC
2989   101F 28 12       	JR	Z,GETOUT
2990   1021 47          	LD	B,A	;SAVE TO ECHO
2991   1022 CD 46 12    	CALL	ASC2HEX
2992   1025 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2993   1027 ED 6F       	RLD
2994   1029 78          	LD	A,B
2995   102A CD 2B 08    	CALL	TXDATA	;ECHO VALID HEX
2996   102D 7E          	LD	A,(HL)
2997   102E CD 33 10    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2998   1031 3F          	CCF	;AND THEN COMPLEMENTING IT
2999   1032 C9          	RET
3000   1033 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
3001   1034 C9          	RET
3002   1035             ;---------------
3003   1035             ; OUTPUT A SPACE
3004   1035             ;---------------
3005   1035 3E 20       OUTSP	LD	A,' '
3006   1037 C3 2B 08    	    JP	TXDATA
3007   103A             ;-------------
3008   103A             ; OUTPUT CRLF
3009   103A             ;------------
3010   103A 3E 0D       TXCRLF	LD	A,CR
3011   103C CD 2B 08    	CALL	TXDATA
3012   103F 3E 0A       	LD	A,LF
3013   1041 C3 2B 08    	JP	TXDATA
3014   1044             ;------------------------------
3015   1044             ; GO <ADDR>
3016   1044             ; TRANSFERS EXECUTION TO <ADDR>
3017   1044             ;------------------------------
3018   1044 CD 35 10    GOJUMP	CALL	OUTSP
3019   1047 CD 05 10    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
3020   104A D8          	RET	C
3021   104B 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3022   104E CD 05 10    	CALL	GETCHR	;GET ADDRESS LOW BYTE
3023   1051 D8          	RET	C
3024   1052 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3025   1055             ;
3026   1055             ; WAIT FOR A CR OR ESC
3027   1055             ;
3028   1055 CD 56 08    GOJMP1	CALL	RXDATA
3029   1058 FE 1B       	CP	ESC	;ESC KEY?
3030   105A C8          	RET	Z
3031   105B FE 0D       	CP	CR
3032   105D 20 F6       	JR	NZ,GOJMP1
3033   105F CD 3A 10    	CALL	TXCRLF
3034   1062 2A 12 3F    	LD	HL,(ADDR)
3035   1065 E9          	JP	(HL)	;JUMP TO USER ADDRESS
3036   1066             ;---------------------
3037   1066             ; DISPLAY COMMAND HELP
3038   1066             ;---------------------
3039   1066 CD 07 14    HELP	CALL	PRNTSZ
3040   1069 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
3040   106D 41 41 41 41 
3040   1071 20 20 20 20 
3040   1075 44 69 73 70 
3040   1079 6C 61 79 20 
3040   107D 44 61 74 61 
3040   1081 20 61 74 20 
3040   1085 41 64 64 72 
3040   1089 65 73 73 20 
3040   108D 41 41 41 41 
3041   1091 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
3041   1095 20 20 20 20 
3041   1099 20 20 20 20 
3041   109D 53 50 41 43 
3041   10A1 45 20 74 6F 
3041   10A5 20 43 4F 4E 
3041   10A9 54 49 4E 55 
3041   10AD 45 2C 20 45 
3041   10B1 53 43 20 74 
3041   10B5 6F 20 51 55 
3041   10B9 49 54 
3042   10BB 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
3042   10BF 20 20 20 20 
3042   10C3 20 20 20 20 
3042   10C7 54 6F 67 67 
3042   10CB 6C 65 20 53 
3042   10CF 69 6E 67 6C 
3042   10D3 65 20 53 74 
3042   10D7 65 70 70 65 
3042   10DB 72 
3043   10DC 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
3043   10E0 41 41 41 41 
3043   10E4 20 20 20 20 
3043   10E8 4D 6F 64 69 
3043   10EC 66 79 20 41 
3043   10F0 64 64 72 65 
3043   10F4 73 73 20 41 
3043   10F8 41 41 41 
3044   10FB 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
3044   10FF 41 41 41 41 
3044   1103 20 20 20 20 
3044   1107 47 4F 20 66 
3044   110B 72 6F 6D 20 
3044   110F 41 41 41 41 
3045   1113 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
3045   1117 20 20 20 20 
3045   111B 20 20 20 20 
3045   111F 44 6F 77 6E 
3045   1123 6C 6F 61 64 
3045   1127 20 49 4E 54 
3045   112B 45 4C 20 48 
3045   112F 65 78 
3046   1131 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
3046   1135 20 20 20 20 
3046   1139 20 20 20 20 
3046   113D 45 78 69 74 
3047   1141 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
3047   1145 20 20 20 20 
3047   1149 20 20 20 20 
3047   114D 54 68 69 73 
3047   1151 20 48 65 6C 
3047   1155 70 20 4D 65 
3047   1159 73 73 61 67 
3047   115D 65 0D 0A 00 
3048   1161 C9          	RET
3049   1162             ;-----------------------------------------------
3050   1162             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
3051   1162             ;-----------------------------------------------
3052   1162             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
3053   1162             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
3054   1162             ;
3055   1162 CD 07 14    SSTOGL	CALL	PRNTSZ
3056   1165 0D 0A 53 69 	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3056   1169 6E 67 6C 65 
3056   116D 20 53 74 65 
3056   1171 70 20 54 6F 
3056   1175 67 67 6C 65 
3056   1179 0D 0A 00 
3057   117C~            #IFDEF TEC-1F
3058   117C~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
3059   117C             #ELSE
3060   117C D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
3061   117E             #ENDIF
3062   117E C9          	RET
3063   117F             ;----------------------------
3064   117F             ; M DISPLAY AND MODIFY MEMORY
3065   117F             ;----------------------------
3066   117F CD 35 10    MODIFY	CALL	OUTSP
3067   1182             ;
3068   1182             ;GET THE ADDRESS
3069   1182             ;
3070   1182 CD 05 10    	CALL	GETCHR
3071   1185 D8          	RET	C
3072   1186 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3073   1189 CD 05 10    	CALL	GETCHR
3074   118C D8          	RET	C
3075   118D 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3076   1190             ;
3077   1190             ; DISPLAY ON A NEW LINE
3078   1190             ;
3079   1190 CD 3A 10    MDIFY1	CALL	TXCRLF
3080   1193 ED 5B 12 3F 	LD	DE,(ADDR)
3081   1197 21 00 3E    	LD	HL,BUFFER
3082   119A CD 04 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3083   119D 21 00 3E    	LD	HL,BUFFER
3084   11A0 CD F8 12    	CALL	WRDOUT	;OUTPUT THE ADDRESS
3085   11A3 CD 35 10    	CALL	OUTSP
3086   11A6             ;
3087   11A6             ;GET THE DATA AT THE ADDRESS
3088   11A6             ;
3089   11A6 2A 12 3F    	LD	HL,(ADDR)
3090   11A9 7E          	LD	A,(HL)
3091   11AA             ;
3092   11AA             ; DISPLAY THE DATA
3093   11AA             ;
3094   11AA 21 00 3E    	LD	HL,BUFFER
3095   11AD CD 09 13    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
3096   11B0 21 00 3E    	LD	HL,BUFFER
3097   11B3 CD FB 12    	CALL	BYTOUT	;OUTPUT THE BYTE
3098   11B6 CD 35 10    	CALL	OUTSP
3099   11B9             ;
3100   11B9             ; GET NEW DATA,EXIT OR CONTINUE
3101   11B9             ;
3102   11B9 CD 05 10    	CALL	GETCHR
3103   11BC D8          	RET	C
3104   11BD 47          	LD	B,A	;SAVE IT FOR LATER
3105   11BE 2A 12 3F    	LD	HL,(ADDR)
3106   11C1 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
3107   11C2 78          	LD	A,B
3108   11C3 BE          	CP	(HL)
3109   11C4 28 05       	JR	Z,MDIFY2
3110   11C6 3E 3F       	LD	A,'?'
3111   11C8 CD 2B 08    	CALL	TXDATA	;NOT THE SAME DATA, PROBABLY NO RAM THERE
3112   11CB             ;
3113   11CB             ; INCREMENT THE ADDRESS
3114   11CB             ;
3115   11CB 23          MDIFY2	INC	HL
3116   11CC 22 12 3F    	LD	(ADDR),HL
3117   11CF C3 90 11    	JP	MDIFY1
3118   11D2             ;-----------------------
3119   11D2             ; RECEIVE INTEL HEX FILE
3120   11D2             ;-----------------------
3121   11D2 CD 07 14    INTHEX	CALL	PRNTSZ
3122   11D5 0D 0A 53 65 	.DB	CR,LF,"Send INTEL Hex File...",0
3122   11D9 6E 64 20 49 
3122   11DD 4E 54 45 4C 
3122   11E1 20 48 65 78 
3122   11E5 20 46 69 6C 
3122   11E9 65 2E 2E 2E 
3122   11ED 00 
3123   11EE CD 80 07    	CALL	INTELH
3124   11F1 20 19       	JR	NZ,ITHEX1
3125   11F3 CD 07 14    	CALL	PRNTSZ
3126   11F6 0D 0A 46 69 	.DB	CR,LF,"File Received OK",CR,LF,0
3126   11FA 6C 65 20 52 
3126   11FE 65 63 65 69 
3126   1202 76 65 64 20 
3126   1206 4F 4B 0D 0A 
3126   120A 00 
3127   120B C9          	RET
3128   120C CD 07 14    ITHEX1	CALL	PRNTSZ
3129   120F 0D 0A 43 68 	.DB	CR,LF,"Checksum Error",CR,LF,0
3129   1213 65 63 6B 73 
3129   1217 75 6D 20 45 
3129   121B 72 72 6F 72 
3129   121F 0D 0A 00 
3130   1222 C9          	RET
3131   1223             ;------------------------
3132   1223             ; EXIT BACK TO SC MONITOR
3133   1223             ;------------------------
3134   1223             ; WE SAVED THE STACK POINTER WHEN WE ENTERED SCBUG
3135   1223             ; WE WILL USE IT NOW TO RETURN FROM WHERE WE CAME FROM
3136   1223             ;
3137   1223 21 E1 05    EXIT	LD	HL,SSTEP	;	RESTORE THE 
3138   1226 22 5B 3F    	LD	(RST38),HL	;SINGLE STEPPER INTERRUPT
3139   1229 CD 07 14    	CALL	PRNTSZ
3140   122C 0D 0A 42 79 	.DB	CR,LF,"Bye...",CR,LF,0
3140   1230 65 2E 2E 2E 
3140   1234 0D 0A 00 
3141   1237             ;
3142   1237 ED 7B 10 3F 	LD	SP,(SPSAVE)	;RESTORE STACK POINTER
3143   123B C9          	RET
3144   123C             ;------------------
3145   123C             ; DISPLAY REGISTERS
3146   123C             ;------------------
3147   123C CD A3 13    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
3148   123F 21 00 3E    	LD	HL,BUFFER
3149   1242 CD 32 13    	CALL	SNDMSG
3150   1245 C9          	RET
3151   1246             ;----------------------------------------
3152   1246             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
3153   1246             ;----------------------------------------
3154   1246             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
3155   1246             ; ENTRY OTHER THAN HEXADECIMAL KEYS
3156   1246             ;
3157   1246             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
3158   1246             ;ENTRY : A= ASCII 0-9,A-F
3159   1246             ;EXIT  : CARRY =  1
3160   1246             ;          A= HEX 0-F IN LSN
3161   1246             ;      : CARRY = 0
3162   1246             ;          A= OUT OF RANGE CHARACTER & 7FH
3163   1246             ; A AND F REGISTERS MODIFIED
3164   1246             ;
3165   1246 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
3166   1248 FE 30       	CP	'0'
3167   124A 38 23       	JR	C,AC2HEX4	;LESS THAN 0
3168   124C FE 3A       	CP	3AH
3169   124E 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
3170   1250 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
3171   1252 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
3172   1253 C9          	RET
3173   1254             ;
3174   1254 FE 41       AC2HEX2	CP	'A'
3175   1256 38 17       	JR	C,AC2HEX4	;LESS THAN A
3176   1258 FE 47       	CP	47H
3177   125A 30 04       	JR	NC,AC2HEX3	;MORE THAN F
3178   125C D6 07       	SUB	07H	;CONVERT TO NYBBLE
3179   125E 18 F2       	JR	AC2HEX1
3180   1260             	
3181   1260 FE 61       AC2HEX3	CP	'a'
3182   1262 DA 6F 12    	JP	C,AC2HEX4	;LESS THAN a
3183   1265 FE 67       	CP	67H
3184   1267 30 06       	JR	NC,AC2HEX4	;MORE THAN f
3185   1269 E6 DF       	AND 0DFH
3186   126B D6 07       	SUB 07H	;CONVERT TO NYBBLE
3187   126D 18 E3       	JR	AC2HEX1
3188   126F E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
3189   1271 C9          	RET
3190   1272             ;--------------------------
3191   1272             ; D DISPLAY MEMORY LOCATION
3192   1272             ;--------------------------
3193   1272 CD 35 10    DSPLAY	CALL	OUTSP	;A SPACE
3194   1275 CD 05 10    	CALL	GETCHR
3195   1278 D8          	RET	C
3196   1279 32 13 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
3197   127C CD 05 10    	CALL	GETCHR
3198   127F D8          	RET	C
3199   1280 32 12 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
3200   1283             ;
3201   1283             ; WAIT FOR CR OR ESC
3202   1283             ;
3203   1283 CD 56 08    DPLAY1	CALL	RXDATA
3204   1286 FE 1B       	CP	ESC
3205   1288 C8          	RET	Z
3206   1289 FE 0D       	CP	CR
3207   128B 20 F6       	JR	NZ,DPLAY1
3208   128D CD 3A 10    	CALL	TXCRLF	;NEWLINE
3209   1290             ;
3210   1290             ; DISPLAY THE LINE
3211   1290             ;
3212   1290 CD A5 12    DPLAY2 CALL  DPLINE
3213   1293 ED 53 12 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
3214   1297             ;
3215   1297             ; DISPLAY MORE LINES OR EXIT
3216   1297             ;
3217   1297 CD 56 08    DPLAY3	CALL	RXDATA
3218   129A 38 FB       	JR	C,DPLAY3
3219   129C FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
3220   129E 28 F0       	JR	Z,DPLAY2
3221   12A0 FE 1B       	CP	ESC	;ESC EXITS
3222   12A2 20 F3       	JR	NZ,DPLAY3
3223   12A4 C9          	RET
3224   12A5             ;-------------------------
3225   12A5             ; DISPLAY A LINE OF MEMORY
3226   12A5             ;-------------------------
3227   12A5 ED 5B 12 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
3228   12A9 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3229   12AC             ;
3230   12AC             ; DISPLAY THE ADDRESS
3231   12AC             ;
3232   12AC CD 04 13    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3233   12AF CD E8 12    	CALL	SPCBUF
3234   12B2             ;
3235   12B2             ; DISPLAY 16 BYTES
3236   12B2             ;
3237   12B2 06 10       	LD	B,16
3238   12B4 1A          DLINE1	LD	A,(DE)
3239   12B5 CD 09 13    	CALL	BYTASC
3240   12B8 CD E8 12    	CALL	SPCBUF
3241   12BB 13          	INC	DE
3242   12BC 10 F6       	DJNZ	DLINE1
3243   12BE CD E8 12    	CALL	SPCBUF
3244   12C1             ;
3245   12C1             ; NOW DISPLAY THE ASCII CHARACTER
3246   12C1             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3247   12C1             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3248   12C1             ;
3249   12C1 ED 5B 12 3F 	LD	DE,(ADDR)
3250   12C5 06 10       	LD	B,16
3251   12C7 1A          DLINE2	LD	A,(DE)
3252   12C8 FE 20       	CP	20H
3253   12CA 38 07       	JR	C,DOT
3254   12CC FE 7F       	CP	7FH
3255   12CE 30 03       	JR	NC,DOT
3256   12D0 C3 D5 12    	JP	NDOT
3257   12D3 3E 2E       DOT	LD	A,'.'
3258   12D5 CD EA 12    NDOT	CALL	INBUF
3259   12D8 13          	INC	DE
3260   12D9 10 EC       	DJNZ	DLINE2
3261   12DB             ;
3262   12DB             ;TERMINATE AND DISPLAY STRING
3263   12DB             ;
3264   12DB CD ED 12    	CALL	BCRLF
3265   12DE 3E 00       	LD	A,00H
3266   12E0 77          	LD	(HL),A
3267   12E1 21 00 3E    	LD	HL,BUFFER
3268   12E4 CD 32 13    	CALL	SNDMSG
3269   12E7 C9          	RET
3270   12E8             ;
3271   12E8             ; PUT A SPACE IN THE BUFFER
3272   12E8             ;
3273   12E8 3E 20       SPCBUF	LD	A,' '
3274   12EA 77          INBUF	LD	(HL),A
3275   12EB 23          	INC	HL
3276   12EC C9          	RET
3277   12ED             ;
3278   12ED             ; PUT A CR LF IN THE BUFFER
3279   12ED             ;
3280   12ED 3E 0D       BCRLF	LD	A,CR
3281   12EF CD EA 12    	CALL	INBUF
3282   12F2 3E 0A       	LD	A,LF
3283   12F4 CD EA 12    	CALL	INBUF
3284   12F7 C9          	RET
3285   12F8             ;----------------------
3286   12F8             ; SEND ASCII HEX VALUES
3287   12F8             ;----------------------
3288   12F8             ;
3289   12F8             ; OUTPUT THE 4 BYTE, WRDOUT
3290   12F8             ; THE 2 BYTE, BYTOUT
3291   12F8             ; OR THE SINGLE BYTE, NYBOUT
3292   12F8             ; ASCII STRING AT HL TO THE SERIAL PORT
3293   12F8             ;
3294   12F8 CD FB 12    WRDOUT	CALL	BYTOUT
3295   12FB CD FE 12    BYTOUT	CALL	NYBOUT
3296   12FE 7E          NYBOUT	LD	A,(HL)
3297   12FF CD 2B 08    	CALL	TXDATA
3298   1302 23          	INC	HL
3299   1303 C9          	RET
3300   1304             ;----------------
3301   1304             ;CONVERT TO ASCII
3302   1304             ;----------------
3303   1304             ;
3304   1304             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3305   1304             ;
3306   1304             ;        ENTRY :  WRDASC           DE = WORD TO CONVERT
3307   1304             ;                 BYTASC            A = BYTE TO CONVERT
3308   1304             ;                 NYBASC (B3-B0) OF A = NYBBLE TO CONVERT
3309   1304             ;                  HL = CHARACTER BUFFER ADDRESS
3310   1304             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3311   1304             ;                  AF IS MODIFIED
3312   1304             ;
3313   1304 7A          WRDASC	LD	A,D	;CONVERT AND
3314   1305 CD 09 13    	CALL	BYTASC	;OUTPUT D
3315   1308 7B          	LD	A,E	;THEN E
3316   1309             ;
3317   1309             ;CONVERT A BYTE TO ASCII 
3318   1309             ;
3319   1309 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3320   130A 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3321   130B 0F          	RRCA
3322   130C 0F          	RRCA
3323   130D 0F          	RRCA
3324   130E CD 12 13    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3325   1311 F1          	POP	AF	;RESTORE LOW NYBBLE
3326   1312             ;
3327   1312             ; CONVERT A NYBBLE TO ASCII
3328   1312             ;
3329   1312 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3330   1314 C6 90       	ADD	A,90H	;CONVERT TO
3331   1316 27          	DAA	;ASCII
3332   1317 CE 40       	ADC	A,40H
3333   1319 27          	DAA
3334   131A             ;
3335   131A             ; SAVE IN STRING
3336   131A             ;
3337   131A 77          INSBUF	LD	(HL),A
3338   131B 23          	INC	HL
3339   131C C9          	RET
3340   131D             ;------------------------------------------------------
3341   131D             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3342   131D             ;------------------------------------------------------
3343   131D             ;
3344   131D             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3345   131D             ;                      INTO A STRING OF ASCII
3346   131D             ;                      ONES AND ZEROES.
3347   131D             ;
3348   131D             ;           ENTRY :  A = BINARY TO CONVERT
3349   131D             ;                   HL = CHARACTER BUFFER ADDRESS
3350   131D             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3351   131D             ;
3352   131D             ;        MODIFIES : NONE
3353   131D             ;
3354   131D C5          BITASC PUSH  BC
3355   131E 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3356   1320 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3357   1322 20 05       	JR	NZ,BTASC3
3358   1324 0E 30       	LD	C,30H	;IT'S A ZERO
3359   1326 71          BTASC2	LD	(HL),C
3360   1327 18 03       	JR	BTASC4
3361   1329 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3362   132B 71          	LD	(HL),C
3363   132C 23          BTASC4	INC	HL
3364   132D 17          	RLA
3365   132E 10 F0       	DJNZ	BTASC1	;NEXT BIT
3366   1330 C1          	POP	BC
3367   1331 C9          	RET
3368   1332             ;-----------------------------------------
3369   1332             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3370   1332             ;-----------------------------------------
3371   1332             ;
3372   1332             ; SENDS A ZERO TERMINATED STRING OR 
3373   1332             ; 255 CHARACTERS MAX. OUT THE SERIAL PORT
3374   1332             ;
3375   1332             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3376   1332             ;      EXIT  : SAME AS ENTRY
3377   1332             ;
3378   1332 C5          SNDMSG	PUSH	BC
3379   1333 E5          	PUSH	HL
3380   1334 F5          	PUSH	AF
3381   1335 06 FF       	LD	B,255	;255 CHARS MAX
3382   1337 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3383   1338 FE 00       	CP	00H	;ZERO TERMINATOR?
3384   133A 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3385   133C CD 2B 08    	CALL	TXDATA	;TRANSMIT THE CHAR
3386   133F 23          	INC	HL
3387   1340 10 F5       	DJNZ	SDMSG1	;255 CHARS MAX!
3388   1342             	
3389   1342 F1          SDMSG2	POP	AF
3390   1343 E1          	POP	HL	
3391   1344 C1          	POP	BC	
3392   1345 C9          	RET
3393   1346             ;----------------------
3394   1346             ; SERIAL SINGLE STEPPER
3395   1346             ;----------------------
3396   1346 E1          SSSTEP	POP	HL	;GET HL BACK
3397   1347 F5          	PUSH	AF	;SAVE AF FOR LATER
3398   1348 22 49 3F    	LD	(TMPHL),HL
3399   134B ED 53 47 3F 	LD	(TMPDE),DE
3400   134F ED 43 45 3F 	LD	(TMPBC),BC
3401   1353 DD 22 4B 3F 	LD	(TMPIX),IX
3402   1357 FD 22 4D 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3403   135B E1          	POP	HL	;GET AF BACK
3404   135C 22 43 3F    	LD	(TMPAF),HL	;SAVE AF
3405   135F E1          	POP	HL	;GET PC RETURN ADDRESS
3406   1360 22 41 3F    	LD	(TMPPC),HL	;SAVE PC
3407   1363 ED 73 4F 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3408   1367             ;
3409   1367 CD A3 13    	CALL	DISREG	;DISPLAY REGISTERS
3410   136A 21 00 3E    	LD	HL,BUFFER
3411   136D CD 32 13    	CALL	SNDMSG
3412   1370             ; WE HAVE DISPLAYED THE REGISTER CONTENTS NOW
3413   1370             ; SPACE KEY CONTINUES EXECUTION, ESCAPE KEY
3414   1370             ; RETURNS TO SERIAL MONITOR
3415   1370             ;
3416   1370 CD 56 08    SSTEP3	CALL	RXDATA
3417   1373 38 FB       	JR	C,SSTEP3
3418   1375 FE 20       	CP	' '	;IS IT SPACE
3419   1377 28 08       	JR	Z,SSTEP4
3420   1379 FE 1B       	CP	ESC	;ESC QUITS
3421   137B 20 F3       	JR	NZ,SSTEP3
3422   137D             ;
3423   137D             ; RETURN TO MONITOR
3424   137D             ;
3425   137D FB          	EI	;RE-ENABLE INTERRUPTS
3426   137E C3 E9 0F    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3427   1381             ;
3428   1381             ; RETURN TO PROGRAM
3429   1381             ;
3430   1381 ED 7B 4F 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3431   1385 2A 41 3F    	LD	HL,(TMPPC)	;PUT RETURN
3432   1388 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3433   1389 2A 43 3F    	LD	HL,(TMPAF)
3434   138C E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3435   138D FD 2A 4D 3F 	LD	IY,(TMPIY)
3436   1391 DD 2A 4B 3F 	LD	IX,(TMPIX)
3437   1395 ED 4B 45 3F 	LD	BC,(TMPBC)
3438   1399 ED 5B 47 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3439   139D F1          	POP	AF	;RESTORE AF
3440   139E 2A 49 3F    	LD	HL,(TMPHL)	;RESTORE HL
3441   13A1 FB          	EI		;RE-ENABLE INTERRUPTS
3442   13A2 C9          	RET		;AND RETURN TO PROGRAM
3443   13A3             ;----------------------------
3444   13A3             ; DISPLAY THE SAVED REGISTERS
3445   13A3             ;----------------------------
3446   13A3 CD 07 14    DISREG	CALL	PRNTSZ
3447   13A6 0D 0A 50 43 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3447   13AA 20 20 20 41 
3447   13AE 46 20 20 20 
3447   13B2 42 43 20 20 
3447   13B6 20 44 45 20 
3447   13BA 20 20 48 4C 
3447   13BE 20 20 20 49 
3447   13C2 58 20 20 20 
3447   13C6 49 59 20 20 
3447   13CA 20 53 50 20 
3447   13CE 20 20 53 5A 
3447   13D2 2D 48 2D 56 
3447   13D6 4E 43 0D 0A 
3447   13DA 00 
3448   13DB             ;
3449   13DB             ; DISPLAY THE REGISTERS
3450   13DB             ;
3451   13DB 06 08       	LD	B,08H
3452   13DD 21 00 3E    	LD	HL,BUFFER
3453   13E0 DD 21 41 3F 	LD	IX,TMPPC
3454   13E4 DD 7E 01    DSREG1	LD	A,(IX+1)
3455   13E7 CD 09 13    	CALL	BYTASC
3456   13EA DD 7E 00    	LD	A,(IX+0)
3457   13ED CD 09 13    	CALL	BYTASC
3458   13F0 DD 23       	INC	IX
3459   13F2 DD 23       	INC	IX
3460   13F4 3E 20       	LD	A,' '
3461   13F6 77          	LD	(HL),A
3462   13F7 23          	INC	HL
3463   13F8 10 EA       	DJNZ	DSREG1
3464   13FA             ;
3465   13FA             ; DISPLAY THE FLAGS
3466   13FA             ;
3467   13FA 3A 43 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3468   13FD CD 1D 13    	CALL	BITASC	;SHOW THEM AS BITS
3469   1400             
3470   1400 CD ED 12    SZCRLF CALL  BCRLF
3471   1403 3E 00       	LD	A,0
3472   1405 77          	LD	(HL),A	;TERMINATE THE STRING
3473   1406 C9          	RET
3474   1407             ;-----------------------------------------
3475   1407             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3476   1407             ;-----------------------------------------
3477   1407             ; PUT THE STRING IN THE CODE LIKE THE EXAMPLE BELOW
3478   1407             ; THE ROUTINE SENDS THE STRING FROM THE RETURN ADDRESS,
3479   1407             ; (THE ADDRESS PUT ON THE STACK AS THE RETURN ADDRESS FROM THE 'CALL PRNTSZ') TO THE ZERO TERMINATOR.
3480   1407             ; THEN JUMPS TO THE 'NEXT INSTRUCTION ADDRESS' (AFTER THE ZERO TERMINATOR) TO RESUME THE PROGRAM. 
3481   1407             ;
3482   1407             ;      CALL PRNTSZ
3483   1407             ;      .DB  "STRING TO PRINT",0
3484   1407             ;      NEXT INSTRUCTION
3485   1407             ;
3486   1407 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3487   1408 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3488   1409 CD 2B 08    	CALL	TXDATA	;AND SEND IT
3489   140C 23          	INC	HL	;POINT TO THE NEXT
3490   140D B7          	OR	A	;CHARACTER AND
3491   140E 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3492   1410 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3493   1411             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F12      ADRESS        3F3B      ADDKEY        0312      
ADMODE        0392      ASCHEX        0808      ASCHX1        080E      
ADDRA         0890      ADDRB         08A2      ASC2HEX       1246      
AC2HEX1       1252      AC2HEX2       1254      AC2HEX3       1260      
AC2HEX4       126F      BOTRAM        2000      BUFFER        3E00      
B300          0220      B1200         0080      B2400         003F      
B4800         001B      B9600         000B      BAUD          3F21      
BLKSRT        3F29      BLKEND        3F2B      BLKDST        3F2D      
BEEP          05B7      BEEP1         05C7      BEEP2         05CE      
BEEP3         05DE      BITIME        0883      BITIM1        0888      
BLKMVE        08B4      BLKMV1        08D3      BLKMV2        08D6      
BLKMV3        08E8      BLKSUM        090A      BLKSM1        0926      
BRANCH        0948      BRNCH1        096A      BRNCH2        0975      
BCRLF         12ED      BYTOUT        12FB      BYTASC        1309      
BITASC        131D      BTASC1        1320      BTASC2        1326      
BTASC3        1329      BTASC4        132C      CALMDE        3F17      
COUNT         3F27      CONBYT        03EB      CONVHI        03F8      
CONVLO        03FC      CLRBUF        044C      CLRBF1        0453      
CHKSUM        04C9      CHKSM1        04CD      CANCEL        0725      
CANCL1        0728      CHKKEY        0B07      CHKKY1        0B15      
CHKKY2        0B3E      CHKKY3        0B4B      CHKKY4        0B53      
CHKKY5        0B5A      CHKKY6        0B68      CHKKY7        0B6A      
CHKKY8        0B6F      CHKKY9        0B94      CHKKYA        0BA2      
CLKEXT        0D1C      CALKEY        0D26      CR            000D      
COLD          0F51      DISPLY        0084      DATA          3F14      
DISBUF        3F31      DALLAS        3F60      DECKEY        034A      
DECKY1        034D      DECKY2        035A      DECKY3        0375      
DISADD        03CD      DISBYT        03E2      DECSTP        06D4      
DECSP1        06E4      DELONE        0C18      DELON1        0C21      
DELON2        0C23      DSPLAY        1272      DPLAY1        1283      
DPLAY2        1290      DPLAY3        1297      DPLINE        12A5      
DLINE1        12B4      DLINE2        12C7      DOT           12D3      
DISREG        13A3      DSREG1        13E4      EDTKEY        0AD7      
ENDKEY        0AFE      ESC           001B      EXIT          1223      
FUNTBL        3F15      FUNJMP        3F2F      FUNKEY        070A      
FUNKY1        070D      FUNKY2        071C      FUNLST        072F      
FUNFUN        0763      GOEXEC        0767      GETBYT        07DC      
GETBT1        07E6      GETBT2        07FA      GETCHR        1005      
GETNYB        101A      GETOUT        1033      GOJUMP        1044      
GOJMP1        1055      HEXKEY        02E0      HEXKY1        02EB      
HEXKY2        02F9      HELP          1066      ISTACK        3C00      
IO0           0080      IO1           0081      IO2           0082      
IO3           0083      IO7           0087      INCKEY        031E      
INCKY1        0321      INCKY2        032E      INCKY3        0349      
INDEXB        04D9      INDEXW        04E0      INCSTP        06BF      
INCSP1        06CF      INTELFN       0771      INTELH        0780      
INTEL1        0784      INTEL2        07AF      INTEL4        07CA      
INTHEX        11D2      ITHEX1        120C      INBUF         12EA      
INSBUF        131A      KEYBUF        0086      KEYFN         0010      
KEYAD         0011      KEYINC        0012      KEYDEC        0013      
KEYTIM        3F23      KEYDEL        3F3D      KBDTYP        03B1      
KYBSZ         03C3      KYBDBF        03CC      KEYIN         0492      
KEYREL        049C      KEYRL1        049D      LENGTH        057C      
LOSE          0BBB      LF            000A      LOOPSZ        1408      
MODE          3F39      MAIN          027D      MAIN1         028E      
MAIN2         0291      MENLST        02A3      MENU          04A6      
MENU1         04B4      MENU2         04C0      MUL16         0501      
MULT          050A      MULT1         0510      MUSIC         0518      
MSDELAY       0821      MSDEL1        0824      MOVE          08EE      
MONMENU       0FEF      MODIFY        117F      MDIFY1        1190      
MDIFY2        11CB      NXTBIT        083C      NDOT          12D5      
NYBOUT        12FE      NYBASC        1312      ONTIM         3F37      
OFTIM         3F38      ONESEC        0F35      ONESC1        0F3E      
OUTSP         1035      PCBTYP        03A3      PAUSE         0529      
PERIOD        0564      PLAY1         098D      PLAY2         099C      
PLAY3         09AB      PATERN        0E95      PRNTSZ        1407      
RAMEND        3800      RAMSRT        2000      REGPNT        3F3F      
RST08         3F51      RST10         3F53      RST18         3F55      
RST20         3F57      RST28         3F59      RST38         3F5B      
RST66         3F5D      RAMSUM        3F5F      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          04E9      REGTBL        061F      REGNAM        065C      
REGKEY        066C      RETMON        0693      RETPGM        069D      
RXDATA        0856      RXDAT1        0858      RXDAT2        0870      
RELSQR        0BD5      RLTEST        0BE4      RLSTEP        0BEA      
RELSR1        0BF0      RELSR2        0C01      RELSR3        0C09      
RELSR4        0C0E      RWATCH        0E4B      RWACH1        0E57      
RWACH2        0E60      RWACH3        0E72      REGSTR        123C      
SCAN          0085      SPSAVE        3F10      SWREG0        3F19      
SWREG1        3F1A      SWREG2        3F1B      SWREG3        3F1C      
SWREG4        3F1D      SWREG5        3F1E      SWREG6        3F1F      
SWREG7        3F20      SPTEMP        3F25      SYSERR        3F61      
SYSCALL       006B      STOP          008E      SYSJMP        0100      
SETDP         0397      SEGMNT        040B      SCAND         041B      
SCAND1        0423      SCAND2        042F      SCAND3        043A      
SCANKEY       045B      SCANKY1       046A      SCANKY2       0472      
SCANKY3       0474      SKEYIN        0478      SKEYRL        0485      
SKEYL1        0486      STEP          051E      STEP1         0533      
STEP2         053D      STEP3         0548      SSTEP         05E1      
SSTEP1        060D      SETREG        06EA      SERINI        0811      
SDELAY        08FC      SDELY1        0901      SWBEEP        09BA      
SECRET        0A54      SECRT1        0A91      SECNUM        0AA0      
SPLIT         0BC2      SCOPE         0C2E      SCOPE2        0C43      
SCOPE3        0C4B      SCOPE4        0C5A      SCOPE5        0C61      
SCOPE6        0C68      SCOPE7        0C6F      SCOPE8        0C76      
SCOPE9        0C7F      SCOPEA        0C8C      SEED          0CAD      
SKATE         0CBC      SKATE1        0CC1      SKATE2        0CC9      
SKATE3        0CD2      SETCLK        0DAD      SETCK1        0DB3      
SETCK2        0DE2      SETCK3        0DF6      SETCK4        0E04      
SETCK5        0E13      SETCK6        0E1A      SETCK7        0E2A      
SETCK8        0E31      SCBUG         0F4B      START2        0FC5      
START3        0FCA      START4        0FD5      START5        0FDD      
SSTOGL        1162      SPCBUF        12E8      SNDMSG        1332      
SDMSG1        1337      SDMSG2        1342      SSSTEP        1346      
SSTEP3        1370      SSTEP4        1381      SZCRLF        1400      
TOPRAM        3FFF      TMPPC         3F41      TMPAF         3F43      
TMPBC         3F45      TMPDE         3F47      TMPHL         3F49      
TMPIX         3F4B      TMPIY         3F4D      TMPSP         3F4F      
TRAP          008A      TYPESZ        03B8      TYPEBF        03BD      
TONE          0595      TONE1         059F      TONE2         05A6      
TONE3         05A9      TXDATA        082B      TRACE         097F      
TUNE1         09C8      TUNE2         0A08      TIME          0CDD      
TIME1         0CF5      TIMKEY        0D0F      TXCRLF        103A      
UPDATE        0376      UPDBUF        0D35      UPDBF1        0D3B      
UPDBF2        0D5D      UPDBF3        0D81      UPDBF4        0D93      
UPDBF5        0DAC      VARBLS        3F00      VARIDX        3F00      
VARRAM        039F      VERS          03AA      VERSZ         03BE      
VERBCD        03C2      WIN           0BB2      WWATCH        0ED5      
WWACH1        0EEF      WWACH2        0EF1      WWACH3        0F0C      
WWACH4        0F0F      WWACH5        0F11      WWACH6        0F22      
WARM          0FE9      WRDOUT        12F8      WRDASC        1304      

tasm: Number of errors = 0
