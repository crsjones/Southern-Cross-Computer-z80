                    0001  ;--------------------------------------------
                    0002  ; S O U T H E R N   C R O S S   M O N I T O R
                    0003  ;--------------------------------------------
                    0004  ;
                    0005  ; WRITTEN BY CRAIG R. S. JONES
                    0006  ; MELBOURNE, AUSTRALIA.
                    0007  ; 
                    0008  ;
                    0009  ; VERSION : 1.2  01/93. V1.21 7/93
                    0010  ;
                    0011  ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
                    0012  ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
                    0013  ;
                    0014  ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
                    0015  ;                       ADDED HELP FOR SBUG COMMANDS
                    0016  ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
                    0017  ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES  
                    0018  ;                       ADDED INITIALISATION CODE FOR KEYTIM
                    0019  ;    
                    0020  ;-----------------
                    0021  ; SYSTEM VARIABLES
                    0022  ;-----------------
2000:               0023  RAMSRT	EQU	2000H	;START OF USER RAM
3BFF:               0024  RAMEND	EQU	3BFFH	;END OF USER RAM
3E00:               0025  SYSTEM	EQU	3E00H	;INITIAL STACK POINTER
                    0026  ;
                    0027  ; BAUD RATE CONSTANTS
                    0028  ;
0220:               0029  B300	EQU	0220H	;300 BAUD
0080:               0030  B1200	EQU	0080H	;1200 BAUD
003F:               0031  B2400	EQU	003FH	;2400 BAUD
001B:               0032  B4800	EQU	001BH	;4800 BAUD
000B:               0033  B9600	EQU	000BH	;9600 BAUD
                    0034  ;
                    0035  ; I/O PORT ADDRESSES
                    0036  ;
0080:               0037  IO0	EQU	80H	;IO PORT 0
0081:               0038  IO1	EQU	81H	;IO PORT 1
0082:               0039  IO2	EQU	82H	;IO PORT 2
0083:               0040  IO3	EQU	83H	;IO PORT 3
0084:               0041  DISPLY	EQU	84H	;DISPLAY LATCH
0085:               0042  SCAN	EQU	85H	;DISPLAY SCAN LATCH
0086:               0043  KEYBUF	EQU	86H	;KEYBOARD BUFFER
0087:               0044  IO7	EQU	87H	;SPARE IO ADDRESS
                    0045  ;-------------------------
                    0046  ; MONITOR GLOBAL VARIABLES
                    0047  ;-------------------------
                    0048  ;
                    0049  ; SERIAL MONITOR VARIABLES
                    0050  ;
3E00:               0051  MSGBUF  EQU 3E00H   ;STRING HANDLING AREA
                    0052  ;
3FAA:               0053  PUTCH   EQU 3FAAH   ;OUTPUT A CHARACTER TO SERIAL
3FAC:               0054  GETCH   EQU 3FACH   ;WAIT FOR A CHARACTER FROM SERIAL
3FAE:               0055  ISTACK  EQU 3FAEH   ;SAVE THE INITIAL STACK POINTER    
3FB0:               0056  ADDR    EQU 3FB0H   ;THE ADDRESS  
3FB2:               0057  DATA    EQU 3FB2H   ;THE DATA
                    0058  ;
3FB3:               0059  SYSFLG	EQU	3FB3H	;SYSTEM FLAGS  BIT 0=KEYBOARD FLAG
3FB4:               0060  FUNTBL	EQU	3FB4H	;FN TABLE ADDRESS
                    0061  ;
                    0062  ; DALLAS SMARTWATCH REGISTERS
                    0063  ;
3FB6:               0064  CALMDE	EQU	3FB6H	;CALENDAR MODE
3FB8:               0065  SWREG0	EQU	3FB8H	;10THS, 100THS
3FB9:               0066  SWREG1	EQU	3FB9H	;SECONDS
3FBA:               0067  SWREG2	EQU	3FBAH	;MINUTES
3FBB:               0068  SWREG3	EQU	3FBBH	;HOURS
3FBC:               0069  SWREG4	EQU	3FBCH	;DAY
3FBD:               0070  SWREG5	EQU	3FBDH	;DATE
3FBE:               0071  SWREG6	EQU	3FBEH	;MONTH
3FBF:               0072  SWREG7	EQU	3FBFH	;YEAR
                    0073  ;
3FC0:               0074  BAUD	EQU	3FC0H	;BAUD RATE
3FC2:               0075  KEYTIM	EQU	3FC2H	;BEEP DELAY
3FC4:               0076  SPTEMP	EQU	3FC4H	;TEMP SYSTEM CALL SP
                    0077  ;
                    0078  ; BLOCK FUNCTIONS
                    0079  ;
3FC6:               0080  COUNT	EQU	3FC6H	;NUMBER OF BYTES TO MOVE
3FC8:               0081  BLKSRT	EQU	3FC8H	;BLOCK START ADDRESS
3FCA:               0082  BLKEND	EQU	3FCAH	;BLOCK END ADDRESS
3FCC:               0083  BLKDST	EQU	3FCCH	;DESTINATION ADDRESS
                    0084  ;
3FCE:               0085  FUNJMP	EQU	3FCEH	;FN FN KEY JUMP ADDRESS
                    0086  ;
                    0087  ; DISPLAY SCAN REGISTERS
                    0088  ;
3FD0:               0089  DISBUF	EQU	3FD0H	;DISPLAY BUFFER
3FD6:               0090  ONTIM	EQU	3FD6H	;DISPLAY SCAN ON TIME
3FD7:               0091  OFTIM	EQU	3FD7H	;DISPLAY SCAN OFF TIME
                    0092  ;
                    0093  ; MONITOR VARIABLES
                    0094  ;
3FD8:               0095  MODE	EQU	3FD8H	;DISPLAY MODE
3FDA:               0096  ADRESS	EQU	3FDAH	;USER ADDRESS
3FDC:               0097  KEYDEL	EQU	3FDCH	;AUTO INCREMENT DELAY
                    0098  ;
                    0099  ; TEMPORARY REGISTER STORAGE
                    0100  ;
3FDE:               0101  REGPNT	EQU	3FDEH	;REGISTER POINTER
3FE0:               0102  PC_REG	EQU	3FE0H	;PROGRAM COUNTER
3FE2:               0103  AF_REG	EQU	3FE2H	;ACCUMULATOR,FLAG
3FE4:               0104  BC_REG	EQU	3FE4H	;BC REGISTER PAIR
3FE6:               0105  DE_REG	EQU	3FE6H	;DE REGISTER PAIR
3FE8:               0106  HL_REG	EQU	3FE8H	;HL REGISTER PAIR
3FEA:               0107  IX_REG	EQU	3FEAH	;INDEX REGISTER X
3FEC:               0108  IY_REG	EQU	3FECH	;INDEX REGISTER Y
3FEE:               0109  SP_REG	EQU	3FEEH	;STACK POINTER
                    0110  ;
                    0111  ; RESTART JUMP TABLE AND HARWARE TEST
                    0112  ;
3FF0:               0113  RST08	EQU	3FF0H	;RESTART 08H JUMP
3FF2:               0114  RST10	EQU	3FF2H	;RESTART 10H JUMP
3FF4:               0115  RST18	EQU	3FF4H	;RESTART 18H JUMP
3FF6:               0116  RST20	EQU	3FF6H	;RESTART 20H JUMP
3FF8:               0117  RST28	EQU	3FF8H	;RESTART 28H JUMP
3FFA:               0118  RST38	EQU	3FFAH	;INT INTERRUPT JUMP
3FFC:               0119  RST66	EQU	3FFCH	;NMI INTERRUPT JUMP
3FFE:               0120  RAMSUM	EQU	3FFEH	;USER RAM CHECKSUM
3FFF:               0121  DALLAS	EQU	3FFFH	;RAM TEST LOCATION
                    0122  ;----------------
                    0123  ; RESTART VECTORS
                    0124  ;----------------
                    0125  ;
                    0126  ;  RESTART 00H - RST 0
                    0127  ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
                    0128  ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
                    0129  ;
                    0130  	ORG	0000H
0000: C3 00 02      0131  RSTVEC	JP	RESET
                    0132  ;
                    0133  ; RESTART 08H - RST 1
                    0134  ;
                    0135  	ORG	0008H
0008: E5            0136  	PUSH	HL
0009: 2A F0 3F      0137  	LD	HL,(RST08)
000C: E9            0138  	JP	(HL)
                    0139  ;
                    0140  ; RESTART 10H - RST 2
                    0141  ;
                    0142  	ORG	0010H
0010: E5            0143  	PUSH	HL
0011: 2A F2 3F      0144  	LD	HL,(RST10)
0014: E9            0145  	JP	(HL)
                    0146  ;
                    0147  ; RESTART 18H - RST 3
                    0148  ;
                    0149  	ORG	0018H
0018: E5            0150  	PUSH	HL
0019: 2A F4 3F      0151  	LD	HL,(RST18)
001C: E9            0152  	JP	(HL)
                    0153  ;
                    0154  ; RESTART 20H - RST 4
                    0155  ;
                    0156  	ORG	0020H
0020: E5            0157  	PUSH	HL
0021: 2A F6 3F      0158  	LD	HL,(RST20)
0024: E9            0159  	JP	(HL)
                    0160  ;
                    0161  ; RESTART 28H - RST 5
                    0162  ;
                    0163  	ORG	0028H
0028: E5            0164  	PUSH	HL
0029: 2A F8 3F      0165  	LD	HL,(RST28)
002C: E9            0166  	JP	(HL)
                    0167  ;
                    0168  ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
                    0169  ;
                    0170  	ORG	0030H
0030: C3 6B 00      0171  RST30	JP	SYSCALL
                    0172  ;
                    0173  ; RESTART 38H - RST 7     BREAKPOINT HANDLER
                    0174  ;IF INTERRUPTS ARE ENABLED,AND AN
                    0175  ;INT OCCURS- FURTHER INTERRUPTS
                    0176  ;ARE DISABLED, THE PROGRAM COUNTER
                    0177  ;IS PUSHED ONTO THE STACK, AND EXECUTION
                    0178  ;STARTS HERE
                    0179  ;
                    0180  	ORG	0038H
0038: E5            0181  	PUSH	HL
0039: 2A FA 3F      0182  	LD	HL,(RST38)
003C: E9            0183  	JP	(HL)
                    0184  ;
                    0185  ; RESTART 66H NMI VECTOR
                    0186  ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
                    0187  ;
                    0188  	ORG	0066H
0066: E5            0189  	PUSH	HL
0067: 2A FC 3F      0190  	LD	HL,(RST66)
006A: E9            0191  	JP	(HL)
                    0192  ;--------------------
                    0193  ; SYSTEM CALL HANDLER
                    0194  ;--------------------
                    0195  ;CALLS TO BASIC I/O AND OTHER ROUTINES
                    0196  ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
                    0197  ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
                    0198  ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
                    0199  ;CHANGE IN SUBSEQUENT MONITORS
                    0200  ;
                    0201  ;ENTRY : C = CALL NUMBER
                    0202  ;SEE ROUTINES FOR ENTRY AND EXIT
                    0203  ;PARAMETERS
                    0204  ;
006B: 3B            0205  SYSCALL	DEC	SP
006C: 3B            0206  	DEC	SP	;LEAVE SPACE FOR SYSCALL
006D: ED 73 C4 3F   0207  	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0071: F5            0208  	PUSH	AF
0072: D5            0209  	PUSH	DE
0073: E5            0210  	PUSH	HL	;SAVE REGISTERS
0074: 79            0211  	LD	A,C	;GET CALL NUMBER
0075: E6 7F         0212  	AND	127	;ENSURE IN LIMITS
0077: CB 27         0213  	SLA	A	;MULTIPLY BY TWO
0079: 26 01         0214  	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
007B: 6F            0215  	LD	L,A	;LOAD INDEX
007C: 7E            0216  	LD	A,(HL)
007D: 23            0217  	INC	HL
007E: 56            0218  	LD	D,(HL)	;GET JUMP ADDRESS
007F: 2A C4 3F      0219  	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0082: 77            0220  	LD	(HL),A	;PUT SYSCALL LO ON STACK
0083: 23            0221  	INC	HL
0084: 7A            0222  	LD	A,D
0085: 77            0223  	LD	(HL),A	;PUT SYSCALL HI ON STACK
0086: E1            0224  	POP	HL
0087: D1            0225  	POP	DE
0088: F1            0226  	POP	AF	;RESTORE REGISTERS
0089: C9            0227  	RET		;JUMPS TO SYSTEM CALL
                    0228  ;-----------------------
                    0229  ; SYSTEM CALL JUMP TABLE
                    0230  ;-----------------------
                    0231  	ORG	0100H
0100: 8E 02 A8 03   0232  SYSJMP	.DW	MAIN,VERS
0104: AC 03 C1 03   0233  	.DW	DISADD,DISBYT,CLRBUF,SCAND
0108: 25 04 FA 03   0233  
010C: CA 03 D7 03   0234  	.DW	CONBYT,CONVHI,CONVLO
0110: DB 03         0234  
0112: 80 04 8D 04   0235  	.DW	SKEYIN,SKEYRL,KEYIN,KEYREL
0116: 9A 04 A4 04   0235  
011A: AE 04 D1 04   0236  	.DW	MENU,CHKSUM
011E: 09 05 F1 04   0237  	.DW	MUL16,RAND
0122: E1 04 E8 04   0238  	.DW	INDEXB,INDEXW
0126: 20 05 9D 05   0239  	.DW	MUSIC,TONE,BEEP
012A: BD 05         0239  
012C: B6 0C         0240  	.DW	SKATE
012E: 1F 08 4A 08   0241  	.DW	TXDATA,RXDATA,ASCHEX
0132: 16 08         0241  
0134: CF 0E 45 0E   0242  	.DW	WWATCH,RWATCH,ONESEC
0138: 2F 0F         0242  
013A: DE 0B 0C 0C   0243  	.DW	RLSTEP,DELONE,SCANKEY
013E: 34 04         0243  
0140: 8E 07 B6 0B   0244      .DW INTELH,SPLIT
0144: 7A 11 65 11   0245      .DW SNDMSG,BITASC                       
0148: 4C 11 51 11   0246      .DW WRDASC,BYTASC,NYBASC 
014C: 5A 11         0246  
                    0247  ;------------------------------
                    0248  ; POWER UP RESET / MANUAL RESET
                    0249  ;------------------------------
                    0250  	ORG	0200H
                    0251  ;
                    0252  ; WAIT FOR SMART SOCKET
                    0253  ; TO RECOVER FROM POWER DOWN
                    0254  ;
0200: 3E 55         0255  RESET	LD	A,55H
0202: 32 FF 3F      0256  	LD	(DALLAS),A	;WRITE TO RAM
0205: AF            0257  	XOR	A
0206: D3 84         0258  	OUT	(DISPLY),A	;WRITE NOTHING TO
0208: D3 85         0259  	OUT	(SCAN),A	;ON BOARD I/O
020A: DB 86         0260  	IN	A,(KEYBUF)	;TO HELP DEBUGGING
020C: 3A FF 3F      0261  	LD	A,(DALLAS)	;READ FROM RAM
020F: FE 55         0262  	CP	55H	;IS IT READY?
0211: C2 00 02      0263  	JP	NZ,RESET	;KEEP TRYING
                    0264  ;
                    0265  ; LOAD STACK POINTER
                    0266  ;
0214: 31 00 3E      0267  RESET1	LD	SP,SYSTEM
                    0268  ;
                    0269  ; SET UP RESTART VECTORS
                    0270  ;
0217: 21 14 02      0271  	LD	HL,RESET1
021A: 22 F0 3F      0272  	LD	(RST08),HL
021D: 22 F2 3F      0273  	LD	(RST10),HL
0220: 22 F4 3F      0274  	LD	(RST18),HL
0223: 22 F6 3F      0275  	LD	(RST20),HL
0226: 22 F8 3F      0276  	LD	(RST28),HL
0229: 22 FC 3F      0277  	LD	(RST66),HL	;NMI INTERRUPT
022C: 21 E7 05      0278  	LD	HL,SSTEP
022F: 22 FA 3F      0279  	LD	(RST38),HL	;SINGLE STEPPER
                    0280  ;
                    0281  ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
                    0282  ;
0232: ED 56         0283  	IM	1
0234: FB            0284  	EI		;ENABLE INTERRUPTS
                    0285  ;
                    0286  ; PERFORM CHECKSUM ON USER RAM
                    0287  ;
0235: 21 00 20      0288  	LD	HL,RAMSRT	;START OF USER RAM
0238: 11 FF 3B      0289  	LD	DE,RAMEND	;END OF USER RAM
023B: CD D1 04      0290  	CALL	CHKSUM
023E: 32 FE 3F      0291  	LD	(RAMSUM),A	;RAM CHECKSUM
                    0292  ;
                    0293  ; SET UP DEFAULT VARIABLES
                    0294  ;
0241: 21 3C 07      0295  	LD	HL,FUNLST
0244: 22 B4 3F      0296  	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
                    0297  ;
                    0298  ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
                    0299  ;
0247: 21 45 0F      0300      LD  HL,SCBUG    ;JUMP TO SERIAL MONITOR 
024A: 22 CE 3F      0301  	LD	(FUNJMP),HL	;FN FN JUMP
                    0302      
024D: 3E 00         0303  	LD	A,00H
024F: 32 DE 3F      0304  	LD	(REGPNT),A	;INIT SINGLE STEPPER
0252: 21 1B 00      0305  	LD	HL,B4800
0255: 22 C0 3F      0306  	LD	(BAUD),HL	;DEFAULT SERIAL=4800 BAUD
0258: 21 00 01      0307  	LD	HL,0100H
025B: 22 DC 3F      0308  	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
025E: 21 00 10      0309      LD  HL,1000H
0261: 22 C2 3F      0310      LD  (KEYTIM),HL ;DELAY TIME INSTEAD OF A BEEP
0264: 3E 0A         0311  	LD	A,0AH
0266: 32 D7 3F      0312  	LD	(OFTIM),A	;DISPLAY OFF TIME
0269: CD BD 05      0313  	CALL	BEEP
026C: CD BD 05      0314  	CALL	BEEP
                    0315  ;
                    0316  ; SOFTWARE KEYBOARD ENCODER
                    0317  ;
026F: 3E 00         0318  	LD	A,00H
0271: CB C7         0319  	SET	0,A		        ;SOFTWARE SCANNED
0273: 32 B3 3F      0320  	LD	(SYSFLG),A
0276: 3E 20         0321  	LD	A,20H
0278: 32 D6 3F      0322  	LD	(ONTIM),A	    ;DISPLAY ON TIME FOR SOFTWARE KEYBOARD	
027B: DB 86         0323  	IN  A,(KEYBUF)      ;READ KEY BUFFER
027D: CB 6F         0324  	BIT	5,A		        ;DA HIGH? MUST BE SOFTWARE SCANNING
027F: 20 0D         0325  	JR	NZ,MAIN
                    0326  ;
                    0327  ; HARDWARE KEYBOARD ENCODER
                    0328  ;
0281: 3A B3 3F      0329  	LD	A,(SYSFLG)	    ;GET SYSTEM FLAGS
0284: CB 87         0330  	RES	0,A		        ;HARDWARE ENCODER
0286: 32 B3 3F      0331  	LD	(SYSFLG),A
0289: 3E 20         0332  	LD	A,20H
028B: 32 D6 3F      0333  	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
                    0334   
                    0335  ;-----------------
                    0336  ; SET UP MAIN LOOP
                    0337  ;-----------------
028E: 31 00 3E      0338  MAIN	LD	SP,SYSTEM	;SET STACK
0291: 21 00 20      0339  	LD	HL,RAMSRT
0294: 22 DA 3F      0340  	LD	(ADRESS),HL	;DEFAULT ADDRESS
0297: 3A D8 3F      0341  	LD	A,(MODE)
029A: F6 80         0342  	OR	80H	;START OFF IN DATA MODE
029C: 32 D8 3F      0343  	LD	(MODE),A 
                    0344  ;
                    0345  ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
                    0346  ;
029F: CD 83 03      0347  MAIN1	CALL	UPDATE
02A2: CD 80 04      0348  MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
02A5: 21 B4 02      0349  	LD	HL,MENLST	;USE THE MENU HANDLER
02A8: CD AE 04      0350  	CALL	MENU	;ROUTINE FOR EACH KEY
02AB: CD 83 03      0351  	CALL	UPDATE	;UPDATE BUFFER AND
02AE: CD 8D 04      0352  	CALL	SKEYRL	;WAIT FOR KEY RELEASE
02B1: C3 A2 02      0353  	JP	MAIN2
                    0354  ;
                    0355  ; MAIN MENU KEY TABLE
                    0356  ;
02B4: 14            0357  MENLST	.DB	20
02B5: 00 01 02 03   0358  	.DB	00H,01H,02H,03H,04H,05H,06H,07H
02B9: 04 05 06 07   0358  
02BD: 08 09 0A 0B   0359  	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
02C1: 0C 0D 0E 0F   0359  
02C5: 10 11 12 13   0360  	.DB	10H,11H,12H,13H
02C9: F1 02 F1 02   0361  	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
02CD: F1 02 F1 02   0361  
02D1: F1 02 F1 02   0362  	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
02D5: F1 02 F1 02   0362  
02D9: F1 02 F1 02   0363  	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
02DD: F1 02 F1 02   0363  
02E1: F1 02 F1 02   0364  	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
02E5: F1 02 F1 02   0364  
02E9: 10 07 23 03   0365  	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY
02ED: 2F 03 59 03   0365  
                    0366  ;---------------------------------------------------
                    0367  ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
                    0368  ;---------------------------------------------------
02F1: CD BD 05      0369  HEXKEY	CALL	BEEP
02F4: 21 D8 3F      0370  	LD	HL,MODE
02F7: CB 7E         0371  	BIT	7,(HL)	;ADDR OR DATA MODE?
02F9: CA 0A 03      0372  	JP	Z,HEXKY2	;IN ADDR MODE
                    0373  ;
                    0374  ; IN DATA MODE
                    0375  ;
02FC: 2A DA 3F      0376  HEXKY1	LD	HL,(ADRESS)
02FF: CB 26         0377  	SLA	(HL)	;FROM THE CURRENT
0301: CB 26         0378  	SLA	(HL)	;ADDRESS,MOVE THE
0303: CB 26         0379  	SLA	(HL)	;LSN TO THE MSN.
0305: CB 26         0380  	SLA	(HL)	;PUT THE KEY IN
0307: B6            0381  	OR	(HL)	;THE NEW DATA BACK AT
0308: 77            0382  	LD	(HL),A	;THE CURRENT ADDRESS.
0309: C9            0383  	RET
                    0384  ;
                    0385  ; IN ADDRESS MODE
                    0386  ;
030A: 2A DA 3F      0387  HEXKY2	LD	HL,(ADRESS)
030D: CB 25         0388  	SLA	L	;CURRENT ADDRESS
030F: CB 14         0389  	RL	H	;AND DO A 16 BIT
0311: CB 25         0390  	SLA	L	;LEFT SHIFT 4 TIMES
0313: CB 14         0391  	RL	H	;TO MAKE  ROOM
0315: CB 25         0392  	SLA	L	;FOR THE NEW KEY
0317: CB 14         0393  	RL	H
0319: CB 25         0394  	SLA	L
031B: CB 14         0395  	RL	H
031D: B5            0396  	OR	L	;IT IN THE LEAST
031E: 6F            0397  	LD	L,A	;SIGNIFICANT NYBBLE
031F: 22 DA 3F      0398  	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0322: C9            0399  	RET
                    0400  ;-------------
                    0401  ; CHANGE MODES
                    0402  ;-------------
0323: CD BD 05      0403  ADDKEY	CALL	BEEP
0326: 3A D8 3F      0404  	LD	A,(MODE)
0329: EE 80         0405  	XOR	80H	;TOGGLE MODE
032B: 32 D8 3F      0406  	LD	(MODE),A
032E: C9            0407  	RET
                    0408  ;------------------
                    0409  ; INCREMENT ADDRESS
                    0410  ;------------------
032F: CD BD 05      0411  INCKEY	CALL	BEEP
0332: 2A DA 3F      0412  INCKY1	LD	HL,(ADRESS)
0335: 23            0413  	INC	HL	;INC ADDRESS
0336: 22 DA 3F      0414  	LD	(ADRESS),HL
0339: CD 83 03      0415  	CALL	UPDATE
033C: 2A DC 3F      0416  	LD	HL,(KEYDEL)
033F: CD FA 03      0417  INCKY2	CALL	SCAND
0342: CD 34 04      0418  	CALL	SCANKEY
0345: CB 6F         0419  	BIT	5,A	;RETURN IF +
0347: 28 0F         0420  	JR	Z,INCKY3	;KEY RELEASED
0349: FE 32         0421  	CP	32H
034B: 20 0B         0422  	JR	NZ,INCKY3	;NOT INC KEY
034D: 11 01 00      0423  	LD	DE,0001H
0350: ED 52         0424  	SBC	HL,DE
0352: D2 3F 03      0425  	JP	NC,INCKY2
0355: C3 32 03      0426  	JP	INCKY1
0358: C9            0427  INCKY3	RET
                    0428  ;------------------
                    0429  ; DECREMENT ADDRESS
                    0430  ;------------------
0359: CD BD 05      0431  DECKEY	CALL	BEEP
035C: 2A DA 3F      0432  DECKY1	LD	HL,(ADRESS)
035F: 2B            0433  	DEC	HL	;DEC ADDRESS
0360: 22 DA 3F      0434  	LD	(ADRESS),HL
0363: CD 83 03      0435  	CALL	UPDATE
0366: 2A DC 3F      0436  	LD	HL,(KEYDEL)
0369: CD FA 03      0437  DECKY2	CALL	SCAND
036C: CD 34 04      0438  	CALL	SCANKEY
036F: CB 6F         0439  	BIT	5,A	;RETURN IF
0371: 28 0F         0440  	JR	Z,DECKY3	; - KEY RELEASED
0373: FE 33         0441  	CP	33H
0375: 20 0B         0442  	JR	NZ,DECKY3	;NOT DEC KEY
0377: 11 01 00      0443  	LD	DE,0001H
037A: ED 52         0444  	SBC	HL,DE
037C: D2 69 03      0445  	JP	NC,DECKY2
037F: C3 5C 03      0446  	JP	DECKY1
0382: C9            0447  DECKY3	RET
                    0448  ;-----------------------------------------
                    0449  ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
                    0450  ;-----------------------------------------
0383: 2A DA 3F      0451  UPDATE	LD	HL,(ADRESS)
0386: CD AC 03      0452  	CALL	DISADD	;AND DATA, PUT IN
0389: 7E            0453  	LD	A,(HL)
038A: CD C1 03      0454  	CALL	DISBYT	;DISPLAY BUFFER
                    0455  ;
                    0456  ; IN ADDRESS OR DATA MODE?
                    0457  ;
038D: 21 D8 3F      0458  	LD	HL,MODE
0390: CB 7E         0459  	BIT	7,(HL)	;DATA OR ADDR MODE?
0392: CA 9D 03      0460  	JP	Z,ADMODE	;ADDRESS MODE
                    0461  ;
                    0462  ; SHOW DATA MODE
                    0463  ;
0395: 21 D0 3F      0464  	LD	HL,DISBUF
0398: 06 02         0465  	LD	B,2	;IN THE DATA
039A: C3 A2 03      0466  	JP	SETDP	;DISPLAY
                    0467  ;
                    0468  ; SHOW ADDRESS MODE
                    0469  ;
039D: 21 D2 3F      0470  ADMODE	LD	HL,DISBUF+2
03A0: 06 04         0471  	LD	B,4	;SET THE DP'S IN THE
                    0472  ;
                    0473  ; SET DECIMAL POINT
                    0474  ;
                    0475  ;SET BIT 7 IN THE BYTE POINTED TO BY HL
                    0476  ;
03A2: CB FE         0477  SETDP	SET	7,(HL)	;SET BIT 7
03A4: 23            0478  	INC	HL	;POINT TO NEXT BYTE
03A5: 10 FB         0479  	DJNZ	SETDP	;MORE BITS TO SET
03A7: C9            0480  	RET
                    0481  ;---------------
                    0482  ; VERSION NUMBER
                    0483  ;---------------
                    0484  ;RETURNS THE SOFTWARE VERSION NUMBER
                    0485  ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
                    0486  ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
                    0487  ;
                    0488  ;	ENTRY : NONE
                    0489  ; EXIT : H = ASCII MINOR VERSION NUMBER
                    0490  ;        L = ASCII MAJOR VERSION NUMBER
                    0491  ;
03A8: 21 35 31      0492  VERS	LD	HL,3135H
03AB: C9            0493  	RET
                    0494  ;-------------------------
                    0495  ; ADDRESS > DISPLAY BUFFER
                    0496  ;-------------------------
                    0497  ;CONVERT HL TO SEVEN SEGMENT CODE
                    0498  ;AND PUT IN ADDRESS DISPLAY BUFFER.
                    0499  ;
                    0500  ; ENTRY : HL = ADDRESS TO BE DISPLAYED
                    0501  ;
                    0502  ; EXIT  : NO REGISTERS MODIFIED
                    0503  ;
03AC: F5            0504  DISADD	PUSH	AF
03AD: E5            0505  	PUSH	HL
03AE: E5            0506  	PUSH	 HL
03AF: 7C            0507  	LD	A,H
03B0: CD CA 03      0508  	CALL	CONBYT
03B3: 22 D4 3F      0509  	LD	(DISBUF+4),HL
03B6: E1            0510  	POP	HL
03B7: 7D            0511  	LD	A,L
03B8: CD CA 03      0512  	CALL	CONBYT
03BB: 22 D2 3F      0513  	LD	(DISBUF+2),HL
03BE: E1            0514  	POP	HL
03BF: F1            0515  	POP	AF
03C0: C9            0516  	RET
                    0517  ;---------------------------
                    0518  ; DATA BYTE > DISPLAY BUFFER
                    0519  ;---------------------------
                    0520  ;CONVERT THE ACC TO SEVEN SEGMENT CODE
                    0521  ;AND PUT IN DATA DISPLAY BUFFER.
                    0522  ;
                    0523  ; ENTRY :  A = DATA DISPLAY BYTE
                    0524  ;
                    0525  ; EXIT  : NO REGISTERS MODIFIED
                    0526  ;
03C1: E5            0527  DISBYT	PUSH	HL
03C2: CD CA 03      0528  	CALL	CONBYT
03C5: 22 D0 3F      0529  	LD	(DISBUF),HL
03C8: E1            0530  	POP	HL
03C9: C9            0531  	RET
                    0532  ;---------------------------------------
                    0533  ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
                    0534  ;---------------------------------------
                    0535  ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
                    0536  ; FOR DISPLAY
                    0537  ; ENTRY : A = BYTE TO BE CONVERTED
                    0538  ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
                    0539  ;         L = LO NYBBLE SEVEN SEGMENT CODE
                    0540  ;         A = NOT MODIFIED
03CA: F5            0541  CONBYT	PUSH	AF
03CB: F5            0542  	PUSH	AF
03CC: CD D7 03      0543  	CALL	CONVHI	;CONVERT HI NYBBLE
03CF: 67            0544  	LD	H,A
03D0: F1            0545  	POP	AF
03D1: CD DB 03      0546  	CALL	CONVLO	;CONVERT LO NYBBLE
03D4: 6F            0547  	LD	L,A
03D5: F1            0548  	POP	AF
03D6: C9            0549  	RET
                    0550  ;---------------------------------------------
                    0551  ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
                    0552  ;---------------------------------------------
                    0553  ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
                    0554  ; FOR SEVEN SEGMENT DISPLAYS
                    0555  ; CONVHI = CONVERTS HIGH NYBBLE
                    0556  ; CONVLO = CONVERTS LO NYBBLE
                    0557  ;
                    0558  ; ENTRY : A = NYBBLE TO BE CONVERTED
                    0559  ; EXIT  : A = SEVEN SEGMENT CODE
                    0560  ;
03D7: 07            0561  CONVHI	RLCA
03D8: 07            0562  	RLCA
03D9: 07            0563  	RLCA	;MOVE TO LO NYBBLE
03DA: 07            0564  	RLCA	;FOR CONVERSION
03DB: C5            0565  CONVLO	PUSH	BC
03DC: E5            0566  	PUSH	HL
03DD: 21 EA 03      0567  	LD	HL,SEGMNT	;USE THE HEX VALUE
03E0: E6 0F         0568  	AND	0FH	;TO INDEX TO THE
03E2: 4F            0569  	LD	C,A	;THE SEVEN SEGMENT
03E3: 06 00         0570  	LD	B,00H	;CODE FOR THAT VALUE
03E5: 09            0571  	ADD	HL,BC	;AND RETURN WITH
03E6: 7E            0572  	LD	A,(HL)	;CODE IN A
03E7: E1            0573  	POP	HL
03E8: C1            0574  	POP	BC
03E9: C9            0575  	RET
                    0576  ;
                    0577  ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
                    0578  ;
03EA: 3F 06 5B 4F   0579  SEGMNT	.DB	3FH,06H,5BH,4FH ;0,1,2,3
03EE: 66 6D 7D 07   0580  	.DB	66H,6DH,7DH,07H ;4,5,6,7
03F2: 7F 6F 77 7C   0581  	.DB	7FH,6FH,77H,7CH ;8,9,A,B
03F6: 39 5E 79 71   0582  	.DB	39H,5EH,79H,71H ;C,D,E,F
                    0583  ;-------------
                    0584  ; SCAN DISPLAY
                    0585  ;-------------
                    0586  ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
                    0587  ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
                    0588  ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
                    0589  ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
                    0590  ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
                    0591  ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
                    0592  ;
                    0593  ; ENTRY : NONE
                    0594  ; EXIT  : NO REGISTERS MODIFIED
                    0595  ;
03FA: F5            0596  SCAND   PUSH    AF
03FB: C5            0597  	PUSH	BC
03FC: E5            0598  	PUSH	HL	;SAVE REGISTERS
03FD: 21 D5 3F      0599  	LD	HL,DISBUF+5
0400: 0E 20         0600  	LD	C,20H
0402: 7E            0601  SCAND1	LD	A,(HL)
0403: D3 84         0602  	OUT	(DISPLY),A	;OUTPUT CHARACTER
0405: 79            0603  	LD	A,C
0406: D3 85         0604  	OUT	(SCAN),A	;TURN ON DISPLAY
0408: 3A D6 3F      0605  	LD	A,(ONTIM)	;DO A SHORT DELAY
040B: 47            0606  	LD	B,A	;TO ADJUST ON TIME
040C: 10 FE         0607  SCAND2	DJNZ	SCAND2	;OF DISPLAY
040E: 78            0608  	LD	A,B	;B IS NOW CLEAR, USE
040F: D3 85         0609  	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0411: 3A D7 3F      0610  	LD	A,(OFTIM)	;DO A SHORT DELAY
0414: 47            0611  	LD	B,A	;TO ADJUST OFF TIME
0415: 10 FE         0612  SCAND3	DJNZ	SCAND3	;OF DISPLAY
0417: 2B            0613  	DEC	HL	;POINT TO NEXT
0418: CB 09         0614  	RRC	C	;ELEMENT IN BUFFER
041A: 30 E6         0615  	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
041C: 78            0616  	LD	A,B	;B IS NOW CLEAR, USE
041D: D3 85         0617  	OUT	(SCAN),A	;IT TO TURN OFF SCAN
041F: D3 84         0618  	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0421: E1            0619  	POP	HL
0422: C1            0620  	POP	BC
0423: F1            0621  	POP	AF	;RESTORE REGISTERS
0424: C9            0622  	RET
                    0623  ;---------------------
                    0624  ; CLEAR DISPLAY BUFFER
                    0625  ;---------------------
0425: E5            0626  CLRBUF	PUSH	HL
0426: C5            0627  	PUSH	BC
0427: 21 D0 3F      0628  	LD	HL,DISBUF
042A: 06 06         0629  	LD	B,6
042C: 36 00         0630  CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
042E: 23            0631  	INC	HL	;LOCATIONS POINTED
042F: 10 FB         0632  	DJNZ	CLRBF1	;TO BY HL
0431: C1            0633  	POP	BC
0432: E1            0634  	POP	HL
0433: C9            0635  	RET
                    0636  ;--------------
                    0637  ; SCAN KEYBOARD
                    0638  ;--------------
                    0639  ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
                    0640  ; AND KEYBOARD BUFFER AS ROWS.
                    0641  ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
                    0642  ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
                    0643  ;
                    0644  ; NEW ROUTINE VERSION 1.3
                    0645  ;
                    0646  ; ENTRY : NONE
                    0647  ; EXIT  : A = 00H IF NO KEY DETECTED
                    0648  ;         A = DETECTED KEY WITH BIT 5 SET
                    0649  ;         BIT 5 USED AS DATA AVAILABLE LIKE 74C922 KEYBOARD ENCODER
0434: C5            0650  SCANKEY PUSH    BC
0435: D5            0651  	PUSH    DE              ;SAVE REGISTERS
0436: E5            0652  	PUSH	HL
0437: 3A B3 3F      0653  	LD	A,(SYSFLG)
043A: CB 47         0654  	BIT	0,A
043C: 20 06         0655  	JR	NZ,SCANKY1
043E: DB 86         0656  	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0440: E6 3F         0657  	AND	3FH		;STRIP UNUSED BITS
0442: 18 38         0658  	JR	SCANKY7		;EXIT
                    0659  ;
                    0660  ; SOFTWARE SCAN KEYBOARD
                    0661  ;
0444: 3E 00         0662  SCANKY1	LD      A,00H
0446: D3 84         0663  	OUT     (DISPLY),A      ;CLEAR DISPLAY LATCH
0448: 47            0664  	LD      B,A		;KEY
0449: 57            0665  	LD	D,A		;COUNT
044A: 1E 01         0666  	LD      E,01H           ;MASK
044C: 0E 08         0667  SCANKY2 LD      C,08H           ;SCAN
044E: 79            0668  SCANKY3 LD      A,C
044F: D3 85         0669  	OUT     (SCAN),A        ;OUTPUT SCAN
0451: 00            0670  	NOP
0452: 00            0671  	NOP
0453: 00            0672  	NOP
0454: DB 86         0673  	IN      A,(KEYBUF)      ;READ KEY BUFFER
0456: A3            0674  	AND     E               ;MASK 
0457: 28 02         0675  	JR      Z,SCANKY4       ;KEY NOT DETECTED
0459: 14            0676  	INC	D
045A: 68            0677  	LD	L,B		;SAVE KEY
                    0678  ;
                    0679  ; END OF ROWS?
                    0680  ;
045B: 04            0681  SCANKY4 INC     B               ;NEXT KEY
045C: CB 29         0682  	SRA     C               ;SHIFT SCAN RIGHT
045E: 30 EE         0683  	JR      NC,SCANKY3      ;NEXT ROW
                    0684  ;
                    0685  ; END OF COLUMNS?
                    0686  ;
0460: CB 23         0687  	SLA     E               ;SHIFT MASK LEFT
0462: CB 6B         0688  	BIT     5,E             ;END OF KEYSCAN?
0464: 28 E6         0689  	JR      Z,SCANKY2	;NEXT COLUMN
                    0690  ;
                    0691  ; END OF SCAN
                    0692  ;
0466: 7A            0693  	LD	A,D
0467: FE 00         0694  	CP	00H
0469: 28 0D         0695  	JR	Z,SCANKY6	;NO KEY PRESSED
046B: FE 01         0696  	CP	01H
046D: 20 D5         0697  	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
                    0698  ;
                    0699  ; ONE KEY DETECTED
                    0700  ;
046F: 3E 00         0701  	LD	A,00H
0471: D3 85         0702  	OUT	(SCAN),A	;CLEAR SCAN REG
0473: 7D            0703  	LD	A,L		;RETURN KEY IN A
0474: CB EF         0704  	SET	5,A		;SET DATA AVAILABLE FLAG
0476: 18 04         0705  	JR	SCANKY7
                    0706  ;
                    0707  ; NO KEY
                    0708  ;	
0478: 3E 00         0709  SCANKY6	LD	A,00H
047A: D3 85         0710  	OUT	(SCAN),A	;CLEAR SCAN REG
047C: E1            0711  SCANKY7 POP	HL
047D: D1            0712  	POP     DE
047E: C1            0713  	POP     BC
047F: C9            0714  	RET
                    0715  ;-----------------------------
                    0716  ; SCAN DISPLAY UNTIL KEY PRESS
                    0717  ;-----------------------------
                    0718  ; ENTRY : NONE
                    0719  ; EXIT  : A = KEY VALUE 00H TO 1FH
                    0720  ;         FLAG REGISTER MODIFIED
                    0721  ;
0480: CD FA 03      0722  SKEYIN	CALL	SCAND	;SCAN DISPLAY
0483: CD 34 04      0723  	CALL	SCANKEY
0486: CB 6F         0724  	BIT	5,A	;DA  HIGH?
0488: 28 F6         0725  	JR	Z,SKEYIN	;NO KEY PRESS
048A: E6 1F         0726  	AND	1FH	;STRIP UNUSED BITS
048C: C9            0727  	RET
                    0728  ;-------------------------------
                    0729  ; SCAN DISPLAY UNTIL KEY RELEASE
                    0730  ;-------------------------------
                    0731  ; ENTRY : NONE
                    0732  ; EXIT  : NONE
                    0733  ;
048D: F5            0734  SKEYRL	PUSH	AF
048E: CD FA 03      0735  SKEYL1	CALL	SCAND	;SCAN DISPLAY
0491: CD 34 04      0736  	CALL	SCANKEY
0494: CB 6F         0737  	BIT	5,A	;DA LOW?
0496: 20 F6         0738  	JR	NZ,SKEYL1	;KEY NOT RELEASED
0498: F1            0739  	POP	AF
0499: C9            0740  	RET
                    0741  ;-------------------
                    0742  ; WAIT FOR KEY PRESS
                    0743  ;-------------------
                    0744  ; ENTRY : NONE
                    0745  ; EXIT  : A = KEY VALUE 00H TO 1FH
                    0746  ;         FLAG REGISTER MODIFIED
                    0747  ;
049A: CD 34 04      0748  KEYIN	CALL	SCANKEY
049D: CB 6F         0749  	BIT	5,A
049F: 28 F9         0750  	JR	Z,KEYIN	;NO KEY PRESS
04A1: E6 1F         0751  	AND	1FH	;STRIP UNUSED BITS
04A3: C9            0752  	RET
                    0753  ;---------------------
                    0754  ; WAIT FOR KEY RELEASE
                    0755  ;---------------------
                    0756  ; ENTRY : NONE
                    0757  ; EXIT  : NONE
                    0758  ;
04A4: F5            0759  KEYREL	PUSH	AF
04A5: CD 34 04      0760  KEYRL1  CALL	SCANKEY
04A8: CB 6F         0761  	BIT	5,A
04AA: 20 F9         0762  	JR	NZ,KEYRL1
04AC: F1            0763  	POP	AF
04AD: C9            0764  	RET
                    0765  ;-----------------
                    0766  ; KEY MENU HANDLER
                    0767  ;-----------------
                    0768  ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
                    0769  ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
                    0770  ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
                    0771  ; ENTRY :  A = ELEMENT TO LOOK FOR
                    0772  ;         HL = POINTS TO TABLE
                    0773  ; EXIT  :  ELEMENT NOT FOUND
                    0774  ;           HL HOLDS ADDRESS OF LAST ELEMENT
                    0775  ;          ELEMENT FOUND
                    0776  ;           CONTROL PASSES TO JUMP ADDRESS WITH
                    0777  ;          RETURN ADDRESS OF MENU CALL ON STACK
                    0778  ;
04AE: F5            0779  MENU	PUSH	AF
04AF: C5            0780  	PUSH	BC
04B0: D5            0781  	PUSH	DE	;SAVE REGISTERS
04B1: E5            0782  	PUSH	HL	;CALCULATE ADDRESS
04B2: 16 00         0783  	LD	D,00H	;OF THE JUMP TABLE BY
04B4: 5E            0784  	LD	E,(HL)	;ADDING THE INDEX TO
04B5: 23            0785  	INC	HL	;THE ELEMENTS
04B6: 19            0786  	ADD	HL,DE	;TO THE ADDR OF THE
04B7: 54            0787  	LD	D,H	;TABLE
04B8: 5D            0788  	LD	E,L
04B9: E1            0789  	POP	HL
04BA: 46            0790  	LD	B,(HL)	;GET NUMBER OF ENTRIES
04BB: 23            0791  	INC	HL	;POINT TO LIST OF ENTRIES
04BC: BE            0792  MENU1	CP	(HL)	;COMPARE WITH ENTRY
04BD: 28 09         0793  	JR	Z,MENU2	;FOUND VALUE IN TABLE
04BF: 23            0794  	INC	HL	;NEXT ENTRY IN LIST
04C0: 13            0795  	INC	DE	;NEXT ENTRY IN
04C1: 13            0796  	INC	DE	;JUMP TABLE
04C2: 10 F8         0797  	DJNZ	MENU1	;CHECK MORE ENTRIES
04C4: D1            0798  	POP	DE
04C5: C1            0799  	POP	BC
04C6: F1            0800  	POP	AF
04C7: C9            0801  	RET	;NOT IN TABLE
                    0802  ;
                    0803  ; FOUND ELEMENT IN THE TABLE
                    0804  ; PASS CONTROL TO THE JUMP HANDLER
                    0805  ;
04C8: 1A            0806  MENU2	LD	A,(DE)	;GET THE JUMP ADDR
04C9: 6F            0807  	LD	L,A	;FROM THE TABLE
04CA: 13            0808  	INC	DE	;AND JUMP TO
04CB: 1A            0809  	LD	A,(DE)	;THE JUMP ADDRESS
04CC: 67            0810  	LD	H,A	;FOR THAT ENTRY
04CD: D1            0811  	POP	DE
04CE: C1            0812  	POP	BC
04CF: F1            0813  	POP	AF	;RESTORE REGISTERS
04D0: E9            0814  	JP	(HL)
                    0815  ;-------------------
                    0816  ; CALCULATE CHECKSUM
                    0817  ;-------------------
                    0818  ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
                    0819  ;
                    0820  ; ENTRY : HL = START OF BLOCK TO SUM
                    0821  ;         DE = END OF BLOCK TO SUM
                    0822  ; EXIT  : A =  CHECKSUM
                    0823  ;         FLAG REGISTER MODIFIED
                    0824  ;
04D1: E5            0825  CHKSUM	PUSH	HL
04D2: D5            0826  	PUSH	DE
04D3: 13            0827  	INC	DE	;END OF BLOCK+1
04D4: AF            0828  	XOR	A	;CLEAR CHECKSUM
04D5: 86            0829  CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
04D6: 23            0830  	INC	HL	;POINT TO NEXT ELEMENT
04D7: A7            0831  	AND	A	;SET CARRY
04D8: E5            0832  	PUSH	HL
04D9: ED 52         0833  	SBC	HL,DE	;SUBTRACT
04DB: E1            0834  	POP	HL
04DC: 38 F7         0835  	JR	C,CHKSM1	;MORE ELEMENTS
04DE: D1            0836  	POP	DE
04DF: E1            0837  	POP	HL
04E0: C9            0838  	RET
                    0839  ;--------------------------
                    0840  ; ACCESS BYTE LOOK UP TABLE
                    0841  ;--------------------------
                    0842  ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
                    0843  ; UP TABLE
                    0844  ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
                    0845  ;         HL = ADDRESS OF LOOK UP TABLE
                    0846  ; EXIT : HL = ADDRESS OF ELEMENT A
                    0847  ;
04E1: D5            0848  INDEXB	PUSH	DE
04E2: 5F            0849  	LD	E,A	;USE DE AS INDEX
04E3: 16 00         0850  	LD	D,0	;TO ELEMENT IN TABLE
04E5: 19            0851  	ADD	HL,DE	;BY ADDING TO HL
04E6: D1            0852  	POP	DE
04E7: C9            0853  	RET
                    0854  ;--------------------------
                    0855  ; ACCESS WORD LOOK UP TABLE
                    0856  ;--------------------------
                    0857  ; USE 8 BIT INDEX TO ACCESS WORD LOOK
                    0858  ; UP TABLE
                    0859  ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
                    0860  ;         HL = ADDRESS OF LOOK UP TABLE
                    0861  ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
                    0862  ;
04E8: D5            0863  INDEXW	PUSH	DE
04E9: 5F            0864  	LD	E,A
04EA: CB 23         0865  	SLA	E	;MULTIPLY BY TWO
04EC: 16 00         0866  	LD	D,0
04EE: 19            0867  	ADD	HL,DE
04EF: D1            0868  	POP	DE
04F0: C9            0869  	RET
                    0870  ;-------------------------------
                    0871  ; GENERATE A QUASI-RANDOM NUMBER
                    0872  ;-------------------------------
                    0873  ; GENERATE AN 16 BIT RANDOM NUMBER
                    0874  ; USING LINEAR CONGRUENTIAL METHOD.
                    0875  ;     Rn+1 = (aRn+c) MOD m
                    0876  ; REFRESH REGISTER USED FOR Rn AND c
                    0877  ;	ENTRY : NONE
                    0878  ;	EXIT  : HL = RANDOM WORD
                    0879  ;	NO REGISTERS MODIFIED
                    0880  ;
04F1: F5            0881  RAND	PUSH	AF
04F2: C5            0882  	PUSH	BC
04F3: D5            0883  	PUSH	DE	;SAVE REGISTERS
                    0884  ;
                    0885  ; CALCULATE aRn
                    0886  ;
04F4: ED 5F         0887  	LD	A,R	;MULTIPLY RANDOM NUMBER
04F6: 5F            0888  	LD	E,A	;(Rn) BY
04F7: 16 00         0889  	LD	D,0
04F9: 21 48 05      0890  	LD	HL,0548H	;CONSTANT (a)
04FC: CD 09 05      0891  	CALL	MUL16
                    0892  ;
                    0893  ; CALCULATE aRn+c
                    0894  ;
04FF: ED 5F         0895  	LD	A,R	;ADD IT TO ANOTHER
0501: 06 00         0896  	LD	B,0	;READ OF THE
0503: 4F            0897  	LD	C,A	;THE REFRESH
0504: 09            0898  	ADD	HL,BC	;REGISTER (c)
0505: D1            0899  	POP	DE
0506: C1            0900  	POP	BC
0507: F1            0901  	POP	AF	;RESTORE REGISTERS
0508: C9            0902  	RET
                    0903  ;----------------------
                    0904  ; 16 BIT MULTIPLICATION
                    0905  ;----------------------
                    0906  ;16 BIT MULTIPLY
                    0907  ; ENTRY : HL = MULTIPLICAND (MPD)
                    0908  ;         DE = MULTIPLIER (MPR)
                    0909  ; EXIT : HL = RESULT
                    0910  ;SEE ZAKS 'PROGRAMMING THE Z80'
                    0911  ;
0509: F5            0912  MUL16	PUSH	AF
050A: C5            0913  	PUSH	BC
050B: 4C            0914  	LD	C,H	;MPR(H)
050C: 7D            0915  	LD	A,L	;MPR(L)
050D: 06 10         0916  	LD	B,16	;BIT COUNTER
050F: 21 00 00      0917  	LD	HL,0	;CLEAR RESULT
0512: CB 39         0918  MULT	SRL	C	;MPR (H)
0514: 1F            0919  	RRA	;MPR (L)
0515: 30 01         0920  	JR	NC,MULT1	;TEST CARRY
0517: 19            0921  	ADD	HL,DE	;ADD MPD TO RESULT
0518: EB            0922  MULT1	EX	DE,HL
0519: 29            0923  	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
051A: EB            0924  	EX	DE,HL
051B: 10 F5         0925  	DJNZ	MULT	;DONE?
051D: C1            0926  	POP	BC
051E: F1            0927  	POP	AF
051F: C9            0928  	RET
                    0929  ;----------------
                    0930  ; MUSIC SEQUENCER
                    0931  ;----------------
                    0932  ; SEQUENCES THROUGH A TABLE OF NOTES
                    0933  ; 1EH = REPEAT TUNE UNTIL RESET
                    0934  ; 1FH = PLAY ONCE AND RETURN
                    0935  ; ENTRY : HL = ADDRESS OF NOTE TABLE
                    0936  ; EXIT : NO REGISTERS MODIFIED
0520: F5            0937  MUSIC	PUSH	AF
0521: C5            0938  	PUSH	BC
0522: D5            0939  	PUSH	DE
0523: E5            0940  	PUSH	HL	;SAVE REGISTERS
0524: E5            0941  	PUSH	HL
0525: EB            0942  	EX	DE,HL	;GET ADDRESS OF MUSIC
                    0943  ;
                    0944  ; PLAY EACH NOTE IN TURN
                    0945  ;
0526: 1A            0946  STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
0527: E6 1F         0947  	AND	1FH	;STRIP UNUSED BITS
                    0948  ;
                    0949  ; IF ELEMENT IS 00H PAUSE FOR A WHILE
                    0950  ;
0529: FE 00         0951  	CP	00H
052B: C2 3B 05      0952  	JP	NZ,STEP1
052E: 01 00 10      0953  	LD	BC,1000H
0531: 0B            0954  PAUSE	DEC	BC
0532: 78            0955  	LD	A,B
0533: B1            0956  	OR	C
0534: C2 31 05      0957  	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
0537: 13            0958  	INC	DE	;POINT TO NEXT ELEMENT
0538: C3 26 05      0959  	JP	STEP
                    0960  ;
                    0961  ; IF ELEMENT IS 1EH REPEAT TUNE
                    0962  ;
053B: FE 1E         0963  STEP1	CP	1EH
053D: C2 45 05      0964  	JP	NZ,STEP2
0540: D1            0965  	POP	DE	;GET TABLE ADDRESS BACK
0541: D5            0966  	PUSH	DE	;SAVE IT FOR LATER
0542: C3 26 05      0967  	JP	STEP
                    0968  ;
                    0969  ; IF ELEMENT IS 1FH RETURN
                    0970  ;
0545: FE 1F         0971  STEP2	CP	1FH	;END OF TUNE TABLE?
0547: C2 50 05      0972  	JP	NZ,STEP3
054A: E1            0973  	POP	HL
054B: E1            0974  	POP	HL
054C: D1            0975  	POP	DE
054D: C1            0976  	POP	BC
054E: F1            0977  	POP	AF
054F: C9            0978  	RET
                    0979  ;
                    0980  ;NOW PLAY THE NOTE
                    0981  ;
0550: 47            0982  STEP3	LD	B,A	;SAVE ELEMENT IN B
0551: 21 6C 05      0983  	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
0554: CD E1 04      0984  	CALL	INDEXB	;GET PERIOD/2
0557: 7E            0985  	LD	A,(HL)	;GET ELEMENT
0558: F5            0986  	PUSH	AF	;SAVE FOR LATER
0559: 78            0987  	LD	A,B	;GET ELEMENT BACK IN A
055A: 21 84 05      0988  	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
055D: CD E1 04      0989  	CALL	INDEXB	;GET DURATION/2
0560: 7E            0990  	LD	A,(HL)	;GET ELEMENT
0561: 6F            0991  	LD	L,A
0562: 26 00         0992  	LD	H,0	;HL = DURATION/2
0564: F1            0993  	POP	AF
0565: CD 9D 05      0994  	CALL	TONE	;DO NOTE ROUTINE
0568: 13            0995  	INC	DE
0569: C3 26 05      0996  	JP	STEP	;STEP TO NEXT ELEMENT
                    0997  ;
                    0998  ; PERIOD/2 OF NOTE
                    0999  ;
056C: 8C 83 7C 75   1000  PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
0570: 70 67 62 5C   1000  
0574: 57 52 4E 48   1001  	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
0578: 45 41 3C 39   1001  
057C: 36 32 2F 2C   1002  	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
0580: 2A 27 25 23   1002  
                    1003  ;
                    1004  ; NOTE DURATION/2
                    1005  ;
0584: 19 1A 1C 1D   1006  LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
0588: 1E 20 23 25   1006  
058C: 27 29 2C 2E   1007  	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
0590: 31 33 37 3A   1007  
0594: 3D 41 45 49   1008  	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
0598: 4D 52 57 5C   1008  
059C: 10            1009  	.DB	10H
                    1010  ;--------------
                    1011  ; OUTPUT A TONE
                    1012  ;--------------
                    1013  ;
                    1014  ; ENTRY : A = PERIOD/2 OF NOTE
                    1015  ;         HL = DURATION/2 OF NOTE
                    1016  ; EXIT NO REGISTERS MODIFIED
059D: F5            1017  TONE PUSH	AF
059E: C5            1018  	 PUSH	BC
059F: D5            1019  	 PUSH	DE
05A0: E5            1020  	 PUSH	HL
05A1: 11 01 00      1021  	 LD	DE,0001H
05A4: 4F            1022  	 LD	C,A
05A5: 29            1023  	 ADD	HL,HL	;DOUBLE DURATION
05A6: AF            1024  	 XOR	A
05A7: EE 80         1025  TONE1	XOR	80H	;TOGGLE SPEAKER BIT
05A9: D3 85         1026  	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
05AB: 41            1027  	LD	B,C
05AC: C5            1028  TONE2	PUSH	BC
05AD: 06 02         1029  	LD	B,02H
05AF: 10 FE         1030  TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
05B1: C1            1031  	POP	BC
05B2: 10 F8         1032  	DJNZ	TONE2	; DELAY FOR PERIOD/2
05B4: ED 52         1033  	SBC	HL,DE	;END OF NOTE?
05B6: 20 EF         1034  	JR	NZ,TONE1	;DO AGAIN
05B8: E1            1035  	POP	HL
05B9: D1            1036  	POP	DE
05BA: C1            1037  	POP	BC
05BB: F1            1038  	POP	AF
05BC: C9            1039  	RET
                    1040  ;---------------
                    1041  ; KEY ENTRY BEEP
                    1042  ;---------------
05BD: E5            1043  BEEP	PUSH	HL
05BE: F5            1044  	PUSH	AF
05BF: 21 D8 3F      1045  	LD	HL,MODE
05C2: CB 76         1046  	BIT	6,(HL)	;BEEP ENABLED?
05C4: 28 0E         1047  	JR	Z,BEEP2	;BEEP IS ENABLED
                    1048  ;
                    1049  ; DO KEYPRESS DELAY
                    1050  ;
05C6: D5            1051  	PUSH	DE	;DO A SHORT
05C7: 11 01 00      1052  	LD	DE,0001H	;DELAY TO PREVENT
05CA: 2A C2 3F      1053  	LD	HL,(KEYTIM)	;RECOGNITION
05CD: ED 52         1054  BEEP1	SBC	HL,DE	;OF DOUBLE
05CF: 30 FC         1055  	JR	NC,BEEP1	;KEY STROKES
05D1: D1            1056  	POP     DE
05D2: 18 10         1057  	JR	BEEP3
                    1058  ;
                    1059  ; OUTPUT KEYPRESS TONES
                    1060  ;
05D4: 3E 24         1061  BEEP2	LD	A,24H
05D6: 21 30 00      1062  	LD	HL,0030H
05D9: CD 9D 05      1063  	CALL	TONE	;DO FIRST TONE
05DC: 3E 0E         1064  	LD	A,0EH
05DE: 21 50 00      1065  	LD	HL,0050H
05E1: CD 9D 05      1066  	CALL	TONE	;DO SECOND TONE
05E4: F1            1067  BEEP3	POP	AF
05E5: E1            1068  	POP	HL
05E6: C9            1069  	RET
                    1070  ;----------------------------------------
                    1071  ; BREAKPOINT AND SINGLE STEPPING ROUTINES
                    1072  ;----------------------------------------
                    1073  ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
                    1074  ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
                    1075  ; ATTACHED).
                    1076  ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
                    1077  ; AND MODIFY REGISTERS.
                    1078  ;
05E7: E1            1079  SSTEP	POP	HL	;GET HL BACK
05E8: F5            1080  	PUSH	AF	;SAVE AF FOR LATER
05E9: 22 E8 3F      1081  	LD	(HL_REG),HL
05EC: ED 53 E6 3F   1082  	LD	(DE_REG),DE
05F0: ED 43 E4 3F   1083  	LD	(BC_REG),BC
05F4: DD 22 EA 3F   1084  	LD	(IX_REG),IX
05F8: FD 22 EC 3F   1085  	LD	(IY_REG),IY	;SAVE REGISTERS
05FC: E1            1086  	POP	HL	;GET AF BACK
05FD: 22 E2 3F      1087  	LD	(AF_REG),HL	;SAVE AF
0600: E1            1088  	POP	HL	;GET PC RETURN ADDRESS
0601: 22 E0 3F      1089  	LD	(PC_REG),HL	;SAVE PC
0604: ED 73 EE 3F   1090  	LD	(SP_REG),SP	;SAVE STACK POINTER
                    1091  ;
                    1092  ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
                    1093  ;
0608: CD BD 05      1094  	CALL	BEEP
060B: 3A DE 3F      1095  	LD	A,(REGPNT)	;GET CURRENT REG
060E: E6 07         1096  	AND	7	;MAKE SURE IN LIMITS
0610: 32 DE 3F      1097  	LD	(REGPNT),A	;SAVE IT
0613: CD F0 06      1098  DISREG	CALL	SETREG	;SET UP DISPLAY BUFFER
0616: CD 8D 04      1099  	CALL	SKEYRL	;WAIT FOR A KEY
0619: CD 80 04      1100  	CALL	SKEYIN	;WAIT FOR KEY RELEASE
061C: 21 25 06      1101  	LD	HL,REGTBL	;HANDLE THE KEY
061F: CD AE 04      1102  	CALL	MENU	;AND UPDATE DISPLAY
0622: C3 13 06      1103  	JP	DISREG	;BEFORE RETURNING TO LOOP
                    1104  ;
                    1105  ; REGISTER DISPLAY KEY TABLE
                    1106  ;
0625: 14            1107  REGTBL	.DB	14H
0626: 00 01 02 03   1108  	.DB	00H,01H,02H,03H,04H,05H,06H,07H
062A: 04 05 06 07   1108  
062E: 08 09 0A 0B   1109  	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0632: 0C 0D 0E 0F   1109  
0636: 10 11 12 13   1110  	.DB	10H,11H,12H,13H
063A: 72 06 72 06   1111  	.DW	REGKEY,REGKEY,REGKEY,REGKEY
063E: 72 06 72 06   1111  
0642: 72 06 72 06   1112  	.DW	REGKEY,REGKEY,REGKEY,REGKEY
0646: 72 06 72 06   1112  
064A: 72 06 72 06   1113  	.DW	REGKEY,REGKEY,REGKEY,REGKEY
064E: 72 06 72 06   1113  
0652: 72 06 72 06   1114  	.DW	REGKEY,REGKEY,REGKEY,REGKEY
0656: 72 06 72 06   1114  
065A: 99 06 A3 06   1115  	.DW	RETMON,RETPGM,INCSTP,DECSTP
065E: C5 06 DA 06   1115  
                    1116  ;
                    1117  ; REGISTER NAME CHARACTERS
                    1118  ;
0662: 39 73         1119  REGNAM	.DW	7339H
0664: 71 77 39 7C   1120  	.DW	7771H,7C39H,5E79H
0668: 79 5E         1120  
066A: 38 74 76 06   1121  	.DW	7438H,0676H,066EH
066E: 6E 06         1121  
0670: 73 6D         1122  	.DW	6D73H
                    1123  ;--------------
                    1124  ; EDIT REGISTER
                    1125  ;--------------
0672: CD BD 05      1126  REGKEY	CALL	BEEP
0675: F5            1127  	PUSH	AF	;SAVE KEY FOR LATER
0676: 3A DE 3F      1128  	LD	A,(REGPNT)
                    1129  ;
                    1130  ; EDIT REGISTER
                    1131  ;
0679: 21 E0 3F      1132  	LD	HL,PC_REG
067C: CD E8 04      1133  	CALL	INDEXW
067F: 4E            1134  	LD	C,(HL)
0680: 23            1135  	INC	HL
0681: 46            1136  	LD	B,(HL)	;GET REG CONTENTS
0682: CB 21         1137  	SLA	C
0684: CB 10         1138  	RL	B
0686: CB 21         1139  	SLA	C
0688: CB 10         1140  	RL	B
068A: CB 21         1141  	SLA	C
068C: CB 10         1142  	RL	B	;SHIFT REGISTER
068E: CB 21         1143  	SLA	C	;FOUR BITS
0690: CB 10         1144  	RL	B	;LEFT AND
0692: F1            1145  	POP	AF	;PUT THE KEY
0693: B1            1146  	OR	C	;INTO THE LSN
0694: 4F            1147  	LD	C,A	;AND PUT THE
0695: 70            1148  	LD	(HL),B	;REGISTER BACK
0696: 2B            1149  	DEC	HL	;WHERE IT BELONGS
0697: 71            1150  	LD	(HL),C
0698: C9            1151  	RET
                    1152  ;------------------
                    1153  ; RETURN TO MONITOR
                    1154  ;------------------
0699: CD BD 05      1155  RETMON	CALL	BEEP
069C: CD 8D 04      1156  	CALL	SKEYRL
069F: FB            1157  	EI	;ENABLE INTERRUPTS AGAIN
06A0: C3 8E 02      1158  	JP	MAIN
                    1159  ;------------------
                    1160  ; RETURN TO PROGRAM
                    1161  ;------------------
06A3: ED 7B EE 3F   1162  RETPGM	LD	SP,(SP_REG)	;PUT STACK POINTER BACK
06A7: 2A E0 3F      1163  	LD	HL,(PC_REG)	;PUT RETURN
06AA: E5            1164  	PUSH	HL	;ADDRESS BACK ON STACK
06AB: 2A E2 3F      1165  	LD	HL,(AF_REG)
06AE: E5            1166  	PUSH	HL	;SAVE AF REG FOR LATER
06AF: FD 2A EC 3F   1167  	LD	IY,(IY_REG)
06B3: DD 2A EA 3F   1168  	LD	IX,(IX_REG)
06B7: ED 4B E4 3F   1169  	LD	BC,(BC_REG)
06BB: ED 5B E6 3F   1170  	LD	DE,(DE_REG)	;RESTORE REGISTERS
06BF: F1            1171  	POP	AF	;RESTORE AF
06C0: 2A E8 3F      1172  	LD	HL,(HL_REG)	;RETORE HL
06C3: FB            1173  	EI	;ENABLE INTERRUPTS
06C4: C9            1174  	RET	;AND RETURN TO PROGRAM
                    1175  ;----------------------
                    1176  ; DISPLAY NEXT REGISTER
                    1177  ;----------------------
06C5: CD BD 05      1178  INCSTP	CALL	BEEP
06C8: 3A DE 3F      1179  	LD	A,(REGPNT)
06CB: FE 07         1180  	CP	A,7	;END OF REG TABLE?
06CD: CA D5 06      1181  	JP	Z,INCSP1
06D0: 3C            1182  	INC	A
06D1: 32 DE 3F      1183  	LD	(REGPNT),A
06D4: C9            1184  	RET
06D5: AF            1185  INCSP1	XOR	A
06D6: 32 DE 3F      1186  	LD	(REGPNT),A
06D9: C9            1187  	RET
                    1188  ;--------------------------
                    1189  ; DISPLAY PREVIOUS REGISTER
                    1190  ;--------------------------
06DA: CD BD 05      1191  DECSTP	CALL	BEEP
06DD: 3A DE 3F      1192  	LD	A,(REGPNT)
06E0: FE 00         1193  	CP	A,0	;START OF REG TABLE?
06E2: CA EA 06      1194  	JP	Z,DECSP1
06E5: 3D            1195  	DEC	A
06E6: 32 DE 3F      1196  	LD	(REGPNT),A
06E9: C9            1197  	RET
06EA: 3E 07         1198  DECSP1	LD	A,7
06EC: 32 DE 3F      1199  	LD	(REGPNT),A
06EF: C9            1200  	RET
                    1201  ;-----------------
                    1202  ; DISPLAY REGISTER
                    1203  ;-----------------
06F0: 3A DE 3F      1204  SETREG	LD	A,(REGPNT)
06F3: 21 E0 3F      1205  	LD	HL,PC_REG	;START OF TABLE
06F6: CD E8 04      1206  	CALL	INDEXW	;GET ELEMENT ADDRESS
06F9: 5E            1207  	LD	E,(HL)
06FA: 23            1208  	INC	HL
06FB: 56            1209  	LD	D,(HL)
06FC: EB            1210  	EX	DE,HL	;LOAD REGISTER CONTENTS
06FD: CD AC 03      1211  	CALL	DISADD
                    1212  ;
                    1213  ; DISPLAY REGISTER NAME
                    1214  ;
0700: 21 62 06      1215  	LD	HL,REGNAM
0703: CD E8 04      1216  	CALL	INDEXW
0706: 7E            1217  	LD	A,(HL)
0707: 32 D0 3F      1218  	LD	(DISBUF+0),A
070A: 23            1219  	INC	HL
070B: 7E            1220  	LD	A,(HL)
070C: 32 D1 3F      1221  	LD	(DISBUF+1),A
070F: C9            1222  	RET
                    1223  ;------------------
                    1224  ; FUNCTION KEY MENU
                    1225  ;------------------
                    1226  ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
                    1227  ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
                    1228  ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
                    1229  ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
                    1230  ;
0710: E1            1231  FUNKEY	POP	HL	;REMOVE RETURN ADDRESS
0711: CD BD 05      1232  	CALL	BEEP
0714: 2A DA 3F      1233  FUNKY1	LD	HL,(ADRESS)
0717: CD AC 03      1234  	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
071A: 21 54 71      1235  	LD	HL,7154H
071D: 22 D0 3F      1236  	LD	(DISBUF),HL	;DISPLAY FN
0720: CD 8D 04      1237  	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0723: CD 80 04      1238  FUNKY2	CALL	SKEYIN
0726: 2A B4 3F      1239  	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
0729: CD AE 04      1240  	CALL	MENU	;ROUTINE FOR EACH KEY
072C: C3 23 07      1241  	JP	FUNKY2	;TRY AGAIN
                    1242  ;
                    1243  ; RETURN TO MAIN
                    1244  ;
072F: CD BD 05      1245  CANCEL	CALL	BEEP
0732: CD 83 03      1246  CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
0735: CD 8D 04      1247  	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0738: E1            1248  	POP	HL	;REMOVE MENU RETURN
0739: C3 A2 02      1249  	JP	MAIN2
                    1250  ;
                    1251  ; FUNCTION MENU KEY TABLE
                    1252  ;
073C: 11            1253  FUNLST	.DB	11H
073D: 00 01 02 03   1254  	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0741: 04 05 06 07   1254  
0745: 08 09 0A 0B   1255  	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0749: 0C 0D 0E 0F   1255  
074D: 10            1256  	.DB	10H
074E: 74 07 7F 07   1257  	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
0752: 84 08 96 08   1257  
0756: A8 08 FE 08   1258  	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
075A: 3C 09 73 09   1258  
075E: 81 09 90 09   1259  	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
0762: 9F 09 AE 09   1259  
0766: 48 0A C9 0B   1260  	.DW	SECRET,RELSQR,SCOPE,TIME
076A: 22 0C D7 0C   1260  
076E: 70 07         1261  	.DW	FUNFUN
                    1262  ;--------------------------
                    1263  ; JUMP TO FUNCTION FUNCTION
                    1264  ;--------------------------
0770: 2A CE 3F      1265  FUNFUN	LD	HL,(FUNJMP)
0773: E9            1266  	JP	(HL)
                    1267  ;------------------------------------------
                    1268  ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
                    1269  ;------------------------------------------
0774: CD BD 05      1270  GOEXEC	CALL	BEEP
0777: CD A4 04      1271  	CALL	KEYREL
077A: E1            1272  	POP	HL	;REMOVE EXEC RETURN
077B: 2A DA 3F      1273  	LD	HL,(ADRESS)
077E: E9            1274  	JP	(HL)	;START EXECUCTION
                    1275  ;------------------------------------
                    1276  ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
                    1277  ;------------------------------------
077F: CD BD 05      1278  INTELFN	CALL	BEEP
0782: CD A4 04      1279  	    CALL	KEYREL
0785: CD 8E 07      1280          CALL  INTELH
0788: C2 C7 08      1281          JP    NZ,BLKMV1      ;SHOW THE ERROR 
078B: C3 2F 07      1282          JP    CANCEL         ;JUST RETURN IF ALL OK
                    1283  ;-----------------------
                    1284  ; RECEIVE INTEL HEX FILE
                    1285  ;-----------------------
078E: DD 21 00 3E   1286  INTELH	LD	IX,SYSTEM	;POINT TO SYSTEM VARIABLES
                    1287  ;
                    1288  ; WAIT FOR RECORD MARK
                    1289  ;
0792: AF            1290  INTEL1	XOR	A
0793: DD 77 03      1291  	LD	(IX+3),A	;CLEAR CHECKSUM
0796: CD 4A 08      1292  	CALL	RXDATA	;WAIT FOR THE RECORD MARK
0799: FE 3A         1293  	CP	':'	;TO BE TRANSMITTED
079B: 20 F5         1294  	JR	NZ,INTEL1	;NOT RECORD MARK
                    1295  ;
                    1296  ; GET RECORD LENGTH
                    1297  ;
079D: CD EA 07      1298  	CALL	GETBYT
07A0: DD 77 00      1299  	LD	(IX+0),A	;NUMBER OF DATA BYTES
                    1300  ;
                    1301  ; GET ADDRESS FIELD
                    1302  ;
07A3: CD EA 07      1303  	CALL	GETBYT
07A6: DD 77 02      1304  	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
07A9: CD EA 07      1305  	CALL	GETBYT
07AC: DD 77 01      1306  	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
                    1307  ;
                    1308  ; GET RECORD TYPE
                    1309  ;
07AF: CD EA 07      1310  	CALL	GETBYT
07B2: 20 24         1311  	JR	NZ,INTEL4	;END OF FILE RECORD
                    1312  ;
                    1313  ; READ IN THE DATA
                    1314  ;
07B4: DD 46 00      1315  	LD	B,(IX+0)	;NUMBER OF DATA BYTES
07B7: DD 66 02      1316  	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
07BA: DD 6E 01      1317  	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
                    1318  
07BD: CD EA 07      1319  INTEL2	CALL	GETBYT	;GET DATA BYTE
07C0: 77            1320  	LD	(HL),A	;STORE DATA BYTE
07C1: 23            1321  	INC	HL
07C2: 10 F9         1322  	DJNZ	INTEL2	;LOAD MORE BYTES
                    1323  ;
                    1324  ; GET CHECKSUM AND COMPARE
                    1325  ;
07C4: DD 7E 03      1326  	LD	A,(IX+3)	;CONVERT CHECKSUM TO
07C7: ED 44         1327  	NEG		;TWO'S COMPLEMENT
07C9: DD 77 04      1328  	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
07CC: CD EA 07      1329  	CALL	GETBYT
07CF: DD 77 03      1330  	LD	(IX+3),A	;SAVE RECORD CHECKSUM
07D2: DD BE 04      1331  	CP	(IX+4)	;COMPARE CHECKSUM
07D5: 28 BB         1332  	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
07D7: C9            1333      RET             ;NZ=CHECKSUM ERROR
                    1334  ;
                    1335  ; END OF FILE RECORD
                    1336  ;
07D8: DD 7E 03      1337  INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
07DB: ED 44         1338  	NEG		;TWO'S COMPLEMENT
07DD: DD 77 04      1339  	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
07E0: CD EA 07      1340  	CALL	GETBYT
07E3: DD 77 03      1341  	LD	(IX+3),A	;SAVE EOF CHECKSUM
07E6: DD BE 04      1342  	CP	(IX+4)	;COMPARE CHECKSUM
07E9: C9            1343  	RET  	    ;NZ=CHECKSUM ERROR
                    1344  ;--------------------------
                    1345  ; GET BYTE FROM SERIAL PORT
                    1346  ;--------------------------
07EA: C5            1347  GETBYT	PUSH	BC
07EB: CD 4A 08      1348  	CALL	RXDATA
07EE: CB 77         1349  	BIT	6,A
07F0: 28 02         1350  	JR	Z,GETBT1
07F2: C6 09         1351  	ADD	A,09H
07F4: E6 0F         1352  GETBT1	AND	0FH
07F6: CB 27         1353  	SLA 	A
07F8: CB 27         1354  	SLA	A
07FA: CB 27         1355  	SLA	A
07FC: CB 27         1356  	SLA	A
07FE: 4F            1357  	LD	C,A
                    1358  ;
                    1359  ; GET LOW NYBBLE
                    1360  ;
07FF: CD 4A 08      1361  	CALL	RXDATA
0802: CB 77         1362  	BIT	6,A
0804: 28 02         1363  	JR	Z,GETBT2
0806: C6 09         1364  	ADD	A,09H
0808: E6 0F         1365  GETBT2	AND	0FH
080A: B1            1366  	OR	C
080B: 47            1367  	LD	B,A
080C: DD 86 03      1368  	ADD	A,(IX+3)
080F: DD 77 03      1369  	LD	(IX+3),A	;ADD TO CHECKSUM
0812: 78            1370  	LD	A,B
0813: A7            1371  	AND	A	;CLEAR CARRY
0814: C1            1372      POP	BC
0815: C9            1373  	RET
                    1374  ;-------------------------------
                    1375  ; CONVERT ASCII CHARACTER TO HEX
                    1376  ;-------------------------------
                    1377  ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
                    1378  ;ENTRY : A= ASCII 0-9,A-F
                    1379  ;EXIT  : A= HEX 0-F IN LSN
                    1380  ; A AND F REGISTERS MODIFIED
                    1381  ;
0816: CB 77         1382  ASCHEX BIT   6,A
0818: 28 02         1383  	   JR    Z,ACHEX1
081A: C6 09         1384  	   ADD   A,09H
081C: E6 0F         1385  ACHEX1 AND   0FH
081E: C9            1386         RET
                    1387  ;------------------------
                    1388  ; SERIAL TRANSMIT ROUTINE
                    1389  ;------------------------
                    1390  ;TRANSMIT BYTE SERIALLY ON DOUT
                    1391  ;
                    1392  ; ENTRY : A = BYTE TO TRANSMIT
                    1393  ;  EXIT : NO REGISTERS MODIFIED
                    1394  ;
081F: F5            1395  TXDATA	PUSH	AF
0820: C5            1396  	PUSH	BC
0821: E5            1397  	PUSH	HL
0822: 2A C0 3F      1398  	LD	HL,(BAUD)
0825: 4F            1399  	LD	C,A
                    1400  ;
                    1401  ; TRANSMIT START BIT
                    1402  ;
0826: AF            1403  	XOR	A
0827: D3 85         1404  	OUT	(SCAN),A
0829: CD 77 08      1405  	CALL	BITIME
                    1406  ;
                    1407  ; TRANSMIT DATA
                    1408  ;
082C: 06 08         1409  	LD	B,08H
082E: CB 09         1410  	RRC	C
0830: CB 09         1411  NXTBIT	RRC	C	;SHIFT BITS TO D6,
0832: 79            1412  	LD	A,C	;LSB FIRST AND OUTPUT
0833: E6 40         1413  	AND	40H	;THEM FOR ONE BIT TIME.
0835: D3 85         1414  	OUT	(SCAN),A
0837: CD 77 08      1415  	CALL	BITIME
083A: 10 F4         1416  	DJNZ	NXTBIT
                    1417  ;
                    1418  ; SEND STOP BITS
                    1419  ;
083C: 3E 40         1420  	LD	A,40H
083E: D3 85         1421  	OUT	(SCAN),A
0840: CD 77 08      1422  	CALL	BITIME
0843: CD 77 08      1423  	CALL	BITIME
0846: E1            1424  	POP	HL
0847: C1            1425  	POP	BC
0848: F1            1426  	POP	AF
0849: C9            1427  	RET
                    1428  ;-----------------------
                    1429  ; SERIAL RECEIVE ROUTINE
                    1430  ;-----------------------
                    1431  ;RECEIVE SERIAL BYTE FROM DIN
                    1432  ;
                    1433  ; ENTRY : NONE
                    1434  ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                    1435  ;
                    1436  ; REGISTERS MODIFIED A AND F
                    1437  ;
084A: C5            1438  RXDATA	PUSH	BC
084B: E5            1439  	PUSH	HL
                    1440  ;
                    1441  ; WAIT FOR START BIT 
                    1442  ;
084C: DB 86         1443  RXDAT1 IN	A,(KEYBUF)
084E: CB 7F         1444  	   BIT	7,A
0850: 20 FA         1445  	   JR	NZ,RXDAT1	;NO START BIT
                    1446  ;
                    1447  ; DETECTED START BIT
                    1448  ;
0852: 2A C0 3F      1449  	LD	HL,(BAUD)
0855: CB 3C         1450  	SRL	H
0857: CB 1D         1451  	RR	L 	;DELAY FOR HALF BIT TIME
0859: CD 77 08      1452  	CALL 	BITIME
085C: DB 86         1453  	IN	A,(KEYBUF)
085E: CB 7F         1454  	BIT	7,A
0860: 20 EA         1455  	JR	NZ,RXDAT1	;START BIT NOT VALID
                    1456  ;
                    1457  ; DETECTED VALID START BIT,READ IN DATA
                    1458  ;
0862: 06 08         1459  	LD	B,08H
0864: 2A C0 3F      1460  RXDAT2	LD	HL,(BAUD)
0867: CD 77 08      1461  	CALL	BITIME	;DELAY ONE BIT TIME
086A: DB 86         1462  	IN	A,(KEYBUF)
086C: CB 17         1463  	RL	A
086E: CB 19         1464  	RR	C	;SHIFT BIT INTO DATA REG
0870: 10 F2         1465  	DJNZ	RXDAT2
0872: 79            1466  	LD	A,C
0873: B7            1467  	OR	A	;CLEAR CARRY FLAG
0874: E1            1468      POP	HL
0875: C1            1469  	POP	BC
0876: C9            1470  	RET
                    1471  ;---------------
                    1472  ; BIT TIME DELAY
                    1473  ;---------------
                    1474  ;DELAY FOR ONE SERIAL BIT TIME
                    1475  ;ENTRY : HL = DELAY TIME
                    1476  ; NO REGISTERS MODIFIED
                    1477  ;
0877: E5            1478  BITIME	PUSH	HL
0878: D5            1479  	PUSH	DE
0879: 11 01 00      1480  	LD	DE,0001H
087C: ED 52         1481  BITIM1	SBC	HL,DE
087E: D2 7C 08      1482  	JP	NC,BITIM1
0881: D1            1483  	POP	DE
0882: E1            1484  	POP	HL
0883: C9            1485  	RET
                    1486  ;-----------------------------
                    1487  ; FUNCTION 2 - ENTER ADDRESS 1
                    1488  ;-----------------------------
0884: CD BD 05      1489  ADDRA	CALL	BEEP
0887: 2A DA 3F      1490  	LD	HL,(ADRESS)	;COPY CURRENT
088A: 22 C8 3F      1491  	LD	(BLKSRT),HL	;ADDRESS AS START
088D: 21 00 39      1492  	LD	HL,3900H	;ADDRESS
0890: CD F0 08      1493  	CALL	SDELAY
0893: C3 32 07      1494  	JP	CANCL1
                    1495  ;-----------------------------
                    1496  ; FUNCTION 3 - ENTER ADDRESS 2
                    1497  ;-----------------------------
0896: CD BD 05      1498  ADDRB	CALL	BEEP
0899: 2A DA 3F      1499  	LD	HL,(ADRESS)	;COPY CURRENT
089C: 22 CA 3F      1500  	LD	(BLKEND),HL	;ADDRESS AS END
089F: 21 0F 00      1501  	LD	HL,000FH	;ADDRESS
08A2: CD F0 08      1502  	CALL	SDELAY
08A5: C3 32 07      1503  	JP	CANCL1
                    1504  ;------------------------
                    1505  ; FUNCTION 4 - BLOCK MOVE
                    1506  ;------------------------
08A8: CD BD 05      1507  BLKMVE	CALL	BEEP
08AB: 2A DA 3F      1508  	LD	HL,(ADRESS)	;COPY CURRENT
08AE: 22 CC 3F      1509  	LD	(BLKDST),HL	;ADDRESS AS
08B1: 21 0F 39      1510  	LD	HL,390FH	;DESTINATION
08B4: CD F0 08      1511  	CALL	SDELAY
                    1512  ;
                    1513  ; CALCULATE NUMBER OF BYTES TO MOVE
                    1514  ;
08B7: 2A CA 3F      1515  	LD	HL,(BLKEND)
08BA: ED 5B C8 3F   1516  	LD	DE,(BLKSRT)
08BE: A7            1517  	AND	A
08BF: ED 52         1518  	SBC	HL,DE
08C1: 23            1519  	INC	HL	;MAKE MOVE INCLUSIVE
08C2: 22 C6 3F      1520  	LD	(COUNT),HL
08C5: 30 15         1521  	JR	NC,BLKMV3	;IF OK MOVE BLOCK
                    1522  ;
                    1523  ; SHOW ERROR
                    1524  ;
08C7: 21 79 00      1525  BLKMV1	LD	HL,0079H	;SHOW ERROR
08CA: CD BD 05      1526  BLKMV2	CALL	BEEP
08CD: 22 D0 3F      1527  	LD	(DISBUF),HL	;AND WAIT
08D0: CD 80 04      1528  	CALL	SKEYIN	;FOR KEYPRESS
08D3: CD BD 05      1529  	CALL	BEEP
08D6: CD 8D 04      1530  	CALL	SKEYRL
08D9: C3 32 07      1531  	JP	CANCL1
                    1532  ;
                    1533  ; MOVE BLOCK
                    1534  ;
08DC: CD E2 08      1535  BLKMV3	CALL	MOVE
08DF: C3 32 07      1536  	JP	CANCL1
                    1537  ;-----------
                    1538  ; BLOCK MOVE
                    1539  ;-----------
08E2: ED 4B C6 3F   1540  MOVE	LD	BC,(COUNT)
08E6: 2A C8 3F      1541  	LD	HL,(BLKSRT)	;START ADDR
08E9: ED 5B CC 3F   1542  	LD	DE,(BLKDST)	;DESTINATION ADDR
08ED: ED B0         1543  	LDIR
08EF: C9            1544  	RET
                    1545  ;-------------------------------
                    1546  ; SCAN DISPLAY UNTIL KEY RELEASE
                    1547  ;-------------------------------
08F0: 22 D0 3F      1548  SDELAY	LD	(DISBUF),HL	;SHOW HL
08F3: 06 FF         1549  	LD	B,255	;IN DATA DISPLAYS
08F5: CD FA 03      1550  SDELY1	CALL	SCAND	;UNTIL KEY
08F8: 10 FB         1551  	DJNZ SDELY1	;IS RELEASED
08FA: CD 8D 04      1552  	CALL	SKEYRL
08FD: C9            1553  	RET
                    1554  ;---------------------------
                    1555  ;FUNCTION 5 - BLOCK CHECKSUM
                    1556  ;---------------------------
08FE: CD BD 05      1557  BLKSUM	CALL	BEEP
0901: 21 6D 39      1558  	LD	HL,396DH
0904: CD F0 08      1559  	CALL	SDELAY	;SHOW PROMPT
0907: ED 5B C8 3F   1560  	LD	DE,(BLKSRT)
090B: 2A CA 3F      1561  	LD	HL,(BLKEND)
090E: A7            1562  	AND	A
090F: ED 52         1563  	SBC	HL,DE
0911: 23            1564  	INC	HL	;MAKE CHECKSUM INCLUSIVE
0912: 22 C6 3F      1565  	LD	(COUNT),HL
0915: 30 03         1566  	JR	NC,BLKSM1	;IF OK SUM BLOCK
                    1567  ;
                    1568  ; SHOW ERROR
                    1569  ;
0917: C3 C7 08      1570  	JP	BLKMV1
                    1571  ;
                    1572  ; CALCULATE CHECKSUM
                    1573  ;
091A: 2A C8 3F      1574  BLKSM1	LD	HL,(BLKSRT)
091D: ED 5B CA 3F   1575  	LD	DE,(BLKEND)
0921: CD D1 04      1576  	CALL	CHKSUM	;DO THE CHECKSUM,
0924: CD C1 03      1577  	CALL	DISBYT	;DISPLAY
0927: 2A C6 3F      1578  	LD	HL,(COUNT)	;NUMBER OF BYTES
092A: CD AC 03      1579  	CALL	DISADD	;SUMMED AND
092D: CD BD 05      1580  	CALL	BEEP
0930: CD 80 04      1581  	CALL	SKEYIN	;CHECKSUM UNTIL
0933: CD BD 05      1582  	CALL	BEEP	;A KEY IS PRESSED
0936: CD 8D 04      1583  	CALL	SKEYRL
0939: C3 32 07      1584  	JP	CANCL1
                    1585  ;----------------------------------------
                    1586  ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
                    1587  ;----------------------------------------
093C: CD BD 05      1588  BRANCH	CALL	BEEP
093F: 21 7C 50      1589  	LD	HL,507CH
0942: CD F0 08      1590  	CALL	SDELAY
0945: 2A DA 3F      1591  	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
0948: ED 5B C8 3F   1592  	LD	DE,(BLKSRT)
094C: 13            1593  	INC	DE	;POINT TO PC+2
094D: A7            1594  	AND	A
094E: ED 52         1595  	SBC	HL,DE	;SUBTRACT
                    1596  ;
                    1597  ;TEST HIGH BYTE OF RESULT TO
                    1598  ;DETERMINE IF BACKWARD BRANCH
                    1599  ;
0950: 7C            1600  	LD	A,H
0951: FE FF         1601  	CP	255	;BACKWARD BRANCH?
0953: C2 5E 09      1602  	JP	NZ,BRNCH1	;CHECK IF FORWARD
                    1603  ;
                    1604  ;CHECK IF WE HAVE BRANCHED BEYOND -128
                    1605  ;
0956: 7D            1606  	LD	A,L
0957: CB 7F         1607  	BIT	7,A
0959: 20 0E         1608  	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
095B: C3 C7 08      1609  	JP	BLKMV1	;TOO FAR BACK
                    1610  ;
                    1611  ;TEST HIGH BYTE OF RESULT TO
                    1612  ;DETERMINE IF FORWARD BRANCH
                    1613  ;
095E: FE 00         1614  BRNCH1	CP	0	;FORWARD BRANCH?
0960: C2 C7 08      1615  	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
                    1616  ;
                    1617  ; CHECK IF WE HAVE BRANCHED BEYOND +128
                    1618  ;
0963: 7D            1619  	LD	A,L
0964: CB 7F         1620  	BIT	7,A
0966: C2 C7 08      1621  	JP	NZ,BLKMV1	;TOO FAR FORWARD
                    1622  ;
                    1623  ; WITHIN LIMITS PUT IN RAM
                    1624  ; AND SHOW AS CURRENT ADDRESS
                    1625  ;
0969: 2A C8 3F      1626  BRNCH2	LD	HL,(BLKSRT)
096C: 22 DA 3F      1627  	LD	(ADRESS),HL
096F: 77            1628  	LD	(HL),A
0970: C3 32 07      1629  	JP	CANCL1
                    1630  ;-----------------------------------------
                    1631  ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
                    1632  ;-----------------------------------------
0973: CD BD 05      1633  TRACE	CALL	BEEP
0976: D3 87         1634  	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
0978: 21 70 00      1635  	LD	HL,0070H	;SHOW T
097B: CD F0 08      1636  	CALL	SDELAY
097E: C3 32 07      1637  	JP	CANCL1
                    1638  ;-------------------------
                    1639  ; FUNCTION 8 - PLAY TUNE 1
                    1640  ;-------------------------
0981: CD BD 05      1641  PLAY1	CALL	BEEP
0984: CD A4 04      1642  	CALL	KEYREL
0987: 21 BC 09      1643  	LD	HL,TUNE1
098A: CD 20 05      1644  	CALL	MUSIC
098D: C3 32 07      1645  	JP	CANCL1
                    1646  ;-------------------------
                    1647  ; FUNCTION 9 - PLAY TUNE 2
                    1648  ;-------------------------
0990: CD BD 05      1649  PLAY2	CALL	BEEP
0993: CD A4 04      1650  	CALL	KEYREL
0996: 21 FC 09      1651  	LD	HL,TUNE2
0999: CD 20 05      1652  	CALL	MUSIC
099C: C3 32 07      1653  	JP	CANCL1
                    1654  ;------------------------------
                    1655  ; FUNCTION A - PLAY TUNE IN RAM
                    1656  ;------------------------------
099F: CD BD 05      1657  PLAY3	CALL	BEEP
09A2: CD A4 04      1658  	CALL	KEYREL
09A5: 2A DA 3F      1659  	LD	HL,(ADRESS)
09A8: CD 20 05      1660  	CALL	MUSIC
09AB: C3 32 07      1661  	JP	CANCL1
                    1662  ;-----------------------------
                    1663  ; FUNCTION B - TOGGLE KEY BEEP
                    1664  ;-----------------------------
09AE: CD BD 05      1665  SWBEEP	CALL	BEEP
09B1: 3A D8 3F      1666  	LD	A,(MODE)
09B4: EE 40         1667  	XOR	40H
09B6: 32 D8 3F      1668  	LD	(MODE),A
09B9: C3 32 07      1669  	JP	CANCL1
                    1670  ;
                    1671  ; TUNE 1
                    1672  ;
09BC: 06 06 0A 0D   1673  TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
09C0: 06 0D 0A 0D   1673  
09C4: 12 16 14 12   1674  	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
09C8: 0F 11 12 0F   1674  
09CC: 0D 0D 0D 0A   1675  	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
09D0: 12 0F 0D 0A   1675  
09D4: 08 06 08 0A   1676  	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
09D8: 0F 0A 0D 0F   1676  
09DC: 06 06 0A 0D   1677  	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
09E0: 06 0D 0A 0D   1677  
09E4: 12 16 14 12   1678  	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
09E8: 0F 11 12 0F   1678  
09EC: 0D 0D 0D 0A   1679  	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
09F0: 12 0F 0D 0A   1679  
09F4: 08 06 08 0A   1680  	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
09F8: 06 12 00 1E   1680  
                    1681  ;
                    1682  ; TUNE 2
                    1683  ;
09FC: 0B 0A 08 0A   1684  TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
0A00: 0A 0A 06 06   1684  
0A04: 06 0B 0A 08   1685  	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
0A08: 0A 0A 0A 0A   1685  
0A0C: 0A 0A 0B 0A   1686  	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
0A10: 08 0A 0A 0A   1686  
0A14: 06 06 06 0A   1687  	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
0A18: 08 0A 0D 0D   1687  
0A1C: 0D 0D 0D 00   1688  	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
0A20: 0D 05 08 0B   1688  
0A24: 0B 0B 06 06   1689  	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
0A28: 06 0B 0A 08   1689  
0A2C: 0A 0A 0A 06   1690  	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
0A30: 06 06 0B 0A   1690  
0A34: 06 08 08 08   1691  	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
0A38: 08 08 0A 0B   1691  
0A3C: 0A 08 06 06   1692  	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
0A40: 06 06 06 06   1692  
0A44: 00 00 00 1E   1693  	.DB	00H,00H,00H,1EH
                    1694  ;---------------------------
                    1695  ; FUNCTION C - SECRET NUMBER
                    1696  ;---------------------------
0A48: CD BD 05      1697  SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
0A4B: CD A4 04      1698  	CALL	KEYREL	;AND CLEAR DISPLAY
0A4E: CD 25 04      1699  	CALL	CLRBUF	;BUFFER
0A51: DD 21 00 3E   1700  	LD	IX,SYSTEM	;USE IX FOR LOCAL VARIABLES
                    1701  ;
                    1702  ; SEPARATE NYBBLES IN RANDOM NUMBER
                    1703  ;
0A55: CD F1 04      1704  	CALL	RAND
0A58: DD 75 0B      1705  	LD	(IX+11),L
0A5B: DD 74 0C      1706  	LD	(IX+12),H	;RANDOM NUMBER
0A5E: DD 7E 0B      1707  	LD	A,(IX+11)	;SEPARATE THE RANDOM
0A61: CD B6 0B      1708  	CALL	SPLIT	;NUMBER INTO
0A64: DD 75 04      1709  	LD	(IX+4),L	;FOUR NYBBLES
0A67: DD 74 05      1710  	LD	(IX+5),H	;TO MAKE CHECKING
0A6A: DD 7E 0C      1711  	LD	A,(IX+12)	;AGAINST THE
0A6D: CD B6 0B      1712  	CALL	SPLIT	;GUESS EASIER
0A70: DD 75 06      1713  	LD	(IX+6),L
0A73: DD 74 07      1714  	LD	(IX+7),H
0A76: AF            1715  	XOR	A
0A77: ED 47         1716  	LD	I,A	;CLEAR NUMBER OF TRIES
0A79: 21 00 00      1717  	LD	HL,0
0A7C: DD 75 08      1718  	LD	(IX+8),L
0A7F: DD 74 09      1719  	LD	(IX+9),H
0A82: CD AC 03      1720  	CALL	DISADD	;AND DISPLAY GUESS
                    1721  ;
                    1722  ; SCAN THE KEYBOARD
                    1723  ;
0A85: CD 80 04      1724  SECRT1	CALL	SKEYIN	;WAIT FOR KEY
0A88: 21 94 0A      1725  	LD	HL,SECNUM
0A8B: CD AE 04      1726  	CALL	MENU	;EXECUTE KEY HANDLER
0A8E: CD 8D 04      1727  	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0A91: C3 85 0A      1728  	JP	SECRT1
                    1729  ;
                    1730  ; SECRET NUMBER KEY TABLE
                    1731  ;
0A94: 12            1732  SECNUM	.DB	12H
0A95: 00 01 02 03   1733  	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0A99: 04 05 06 07   1733  
0A9D: 08 09 0A 0B   1734  	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0AA1: 0C 0D 0E 0F   1734  
0AA5: 10 11         1735  	.DB	10H,11H
0AA7: CB 0A CB 0A   1736  	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
0AAB: CB 0A CB 0A   1736  
0AAF: CB 0A CB 0A   1737  	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
0AB3: CB 0A CB 0A   1737  
0AB7: CB 0A CB 0A   1738  	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
0ABB: CB 0A CB 0A   1738  
0ABF: CB 0A CB 0A   1739  	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
0AC3: CB 0A CB 0A   1739  
0AC7: F2 0A FB 0A   1740  	.DW	ENDKEY,CHKKEY
                    1741  ;---------------
                    1742  ; EDIT GUESS KEY
                    1743  ;---------------
0ACB: F5            1744  EDTKEY	PUSH	AF
0ACC: DD 6E 08      1745  	LD	L,(IX+8)
0ACF: DD 66 09      1746  	LD	H,(IX+9)	;GET CURRENT GUESS
0AD2: CB 25         1747  	SLA	L
0AD4: CB 14         1748  	RL	H	;AND DO A 16 BIT
0AD6: CB 25         1749  	SLA	L	;LEFT SHIFT 4 TIMES
0AD8: CB 14         1750  	RL	H	;TO MAKE  ROOM
0ADA: CB 25         1751  	SLA	L	;FOR THE NEW KEY
0ADC: CB 14         1752  	RL	H
0ADE: CB 25         1753  	SLA	L
0AE0: CB 14         1754  	RL	H
0AE2: F1            1755  	POP	AF
0AE3: B5            1756  	OR	L	;IT IN THE LEAST
0AE4: 6F            1757  	LD	L,A	;SIGNIFICANT NYBBLE
0AE5: DD 75 08      1758  	LD	(IX+8),L
0AE8: DD 74 09      1759  	LD	(IX+9),H	;SAVE GUESS
0AEB: CD AC 03      1760  	CALL	DISADD
0AEE: CD BD 05      1761  	CALL	BEEP
0AF1: C9            1762  	RET
                    1763  ;----------
                    1764  ; QUIT GAME
                    1765  ;----------
0AF2: CD BD 05      1766  ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
0AF5: CD A4 04      1767  	CALL	KEYREL	;AND RETURN TO
0AF8: C3 8E 02      1768  	JP	MAIN	;MONITOR
                    1769  ;---------------------------
                    1770  ; SEE IF ITS THE RIGHT GUESS
                    1771  ;---------------------------
0AFB: CD BD 05      1772  CHKKEY	CALL	BEEP
0AFE: ED 57         1773  	LD	A,I
0B00: 3C            1774  	INC	A
0B01: 27            1775  	DAA	;INC BCD NO. OF TRIES
                    1776  ;
                    1777  ; BRIEFLY SHOW GUESS NO.
                    1778  ;
0B02: ED 47         1779  	LD	I,A
0B04: CD C1 03      1780  	CALL	DISBYT
0B07: 06 FF         1781  	LD	B,255
0B09: CD FA 03      1782  CHKKY1	CALL	SCAND
0B0C: 10 FB         1783  	DJNZ	CHKKY1
                    1784  ;
                    1785  ; SEPARATE GUESS INTO NYBBLES
                    1786  ;
0B0E: DD 7E 08      1787  	LD	A,(IX+8)	;GET CURRENT GUESS
0B11: CD B6 0B      1788  	CALL	SPLIT	;NUMBER INTO
0B14: DD 75 00      1789  	LD	(IX+0),L	;FOUR NYBBLES
0B17: DD 74 01      1790  	LD	(IX+1),H	;TO MAKE CHECKING
0B1A: DD 7E 09      1791  	LD	A,(IX+9)	;AGAINST THE
0B1D: CD B6 0B      1792  	CALL	SPLIT	;GUESS EASIER
0B20: DD 75 02      1793  	LD	(IX+2),L
0B23: DD 74 03      1794  	LD	(IX+3),H
                    1795  ;
                    1796  ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
                    1797  ;
0B26: AF            1798  	XOR	A
0B27: DD 77 0A      1799  	LD	(IX+10),A	;CLEAR RESULT
0B2A: 21 04 3E      1800  	LD	HL,SYSTEM+4	;POINT TO RANDOM
0B2D: 11 00 3E      1801  	LD	DE,SYSTEM	;POINT TO GUESS
0B30: 06 04         1802  	LD	B,4	;NUMBER OF DIGITS
0B32: 7E            1803  CHKKY2	LD	A,(HL)	;GET RANDOM
0B33: EB            1804  	EX	DE,HL
0B34: BE            1805  	CP	(HL)	;SAME AS GUESS?
0B35: 20 10         1806  	JR	NZ,CHKKY4	;NOT SAME
0B37: DD 7E 0A      1807  	LD	A,(IX+10)
0B3A: C6 10         1808  	ADD	A,10H	;RIGHT POSITION
0B3C: DD 77 0A      1809  	LD	(IX+10),A
0B3F: 23            1810  CHKKY3	INC	HL	;POINT TO NEXT
0B40: EB            1811  	EX	DE,HL	;DIGIT POSITION
0B41: 23            1812  	INC	HL	;AND GO
0B42: 10 EE         1813  	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
0B44: C3 63 0B      1814  	JP	CHKKY8
                    1815  ;
                    1816  ; CHECK IF NUMBER IS THERE
                    1817  ;
0B47: C5            1818  CHKKY4	PUSH	BC
0B48: E5            1819  	PUSH	HL
0B49: 06 04         1820  	LD	B,4	;CHECK EACH DIGIT
0B4B: 21 00 3E      1821  	LD	HL,SYSTEM	;TO SEE IF THIS
0B4E: BE            1822  CHKKY5	CP	(HL)	;NUMBER IS IN
0B4F: 23            1823  	INC	HL	;THE WRONG
0B50: 20 0A         1824  	JR	NZ,CHKKY6	;POSITION
0B52: DD 7E 0A      1825  	LD	A,(IX+10)	;AND UPDATE
0B55: 3C            1826  	INC	A	;THE RESULT
0B56: DD 77 0A      1827  	LD	(IX+10),A
0B59: C3 5E 0B      1828  	JP	CHKKY7
0B5C: 10 F0         1829  CHKKY6	DJNZ	CHKKY5
0B5E: E1            1830  CHKKY7	POP	HL
0B5F: C1            1831  	POP	BC
0B60: C3 3F 0B      1832  	JP	CHKKY3	;CHECK NEXT DIGIT
                    1833  ;
                    1834  ; CHECK IF CORRECT
                    1835  ;
0B63: DD 7E 0A      1836  CHKKY8	LD	A,(IX+10)
0B66: FE 40         1837  	CP	40H	;IS IT CORRECT?
0B68: CA 88 0B      1838  	JP	Z,CHKKY9	;YES!
0B6B: DD 7E 0A      1839  	LD	A,(IX+10)	;NOT CORRECT
0B6E: CD C1 03      1840  	CALL	DISBYT	;IN DATA DISPLAYS
0B71: ED 57         1841  	LD	A,I	;WAS THAT THE
0B73: FE 20         1842  	CP	20H	;LAST GUESS?
0B75: C0            1843  	RET	NZ	;NO TRY AGAIN
                    1844  ;
                    1845  ; RAN OUT OF TRYS
                    1846  ;
0B76: CD 25 04      1847  	CALL	CLRBUF	;DISPLAY
0B79: DD 6E 0B      1848  	LD	L,(IX+11)
0B7C: DD 66 0C      1849  	LD	H,(IX+12)	;THE RANDOM NUMBER
0B7F: CD AC 03      1850  	CALL	DISADD	;AND PLAY
0B82: 21 AF 0B      1851  	LD	HL,LOSE	;THE LOSE
0B85: C3 96 0B      1852  	JP	CHKKYA	;MUSIC
                    1853  ;
                    1854  ; GOT THE RIGHT ANSWER
                    1855  ;
0B88: ED 57         1856  CHKKY9	LD	A,I	;DISPLAY HOW MANY
0B8A: CD C1 03      1857  	CALL	DISBYT	;AND PLAY THE WIN
0B8D: DD 6E 0B      1858  	LD	L,(IX+11)
0B90: DD 66 0C      1859  	LD	H,(IX+12)
0B93: 21 A6 0B      1860  	LD	HL,WIN	;MUSIC
                    1861  ;
                    1862  ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
                    1863  ;
0B96: CD 20 05      1864  CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
0B99: CD 80 04      1865  	CALL	SKEYIN	;WAIT FOR A KEY
0B9C: CD BD 05      1866  	CALL	BEEP
0B9F: CD 8D 04      1867  	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0BA2: E1            1868  	POP	HL	;AND RESTART THE GAME
0BA3: C3 48 0A      1869  	JP	SECRET
                    1870  ;
                    1871  ; WIN AND LOSE MUSIC
                    1872  ;
0BA6: 14 12 14 17   1873  WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
0BAA: 17 12 ...     1873  
0BAF: 01 11 01 11   1874  LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
0BB3: 01 11 1F      1874  
                    1875  ;-------------------------------
                    1876  ; SEPARATE BYTE INTO TWO NYBBLES
                    1877  ;-------------------------------
                    1878  ;SEPARATES A BYTE INTO TWO
                    1879  ;RIGHT JUSTIFIED NYBBLES
                    1880  ; ENTRY : A = BYTE TO BE SEPARATED
                    1881  ; EXIT  : H = MSN
                    1882  ;         L = LSN
                    1883  ;
0BB6: F5            1884  SPLIT	PUSH	AF
0BB7: C5            1885  	PUSH	BC
0BB8: 47            1886  	LD	B,A	;SAVE BYTE
0BB9: E6 0F         1887  	AND	0FH	;STRIP BITS LSN
0BBB: 6F            1888  	LD	L,A	;RETURN LSN IN L
0BBC: 78            1889  	LD	A,B
0BBD: CB 3F         1890  	SRL	A
0BBF: CB 3F         1891  	SRL	A
0BC1: CB 3F         1892  	SRL	A	;MOVE MSN
0BC3: CB 3F         1893  	SRL	A	;INTO LSN
0BC5: 67            1894  	LD	H,A	;RETURN MSN IN H
0BC6: C1            1895  	POP	BC
0BC7: F1            1896  	POP	AF
0BC8: C9            1897  	RET
                    1898  ;-----------------------------------
                    1899  ; FUNCTION D - RELAY BOARD SEQUENCER
                    1900  ;-----------------------------------
0BC9: CD BD 05      1901  RELSQR	CALL	BEEP
0BCC: CD A4 04      1902  	CALL	KEYREL
0BCF: 21 D8 0B      1903  	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
0BD2: CD DE 0B      1904  	CALL	RLSTEP
0BD5: C3 32 07      1905  	JP	CANCL1
                    1906  ;--------------
                    1907  ; TEST SEQUENCE
                    1908  ;--------------
                    1909  ;RLTEST	.DB	55H,01H,AAH,01H,00H,0FFH
0BD8: 55 01 AA 01   1910  RLTEST	.DB	0x55,0x01,0xAA,0x01,0x00,0xFF
0BDC: 00 FF         1910  
                    1911  ;----------------
                    1912  ; RELAY SEQUENCER
                    1913  ;----------------
                    1914  ; SEQUENCES RELAYS ON RELAY BOARD
                    1915  ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
                    1916  ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
                    1917  ; OR REPEAT.
                    1918  ;  TABLE:
                    1919  ;  <BYTE1>,<BYTE2>
                    1920  ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
                    1921  ;  BYTE2 = FF - REPEAT
                    1922  ;          00 - FINISHED
                    1923  ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
                    1924  ;  EXIT : NONE MODIFIED
                    1925  ;
0BDE: F5            1926  RLSTEP	PUSH	AF
0BDF: C5            1927  	PUSH	BC
0BE0: D5            1928  	PUSH	DE
0BE1: E5            1929  	PUSH	HL	;SAVE REGISTERS
0BE2: E5            1930  	PUSH	HL
0BE3: EB            1931  	EX	DE,HL	;GET ADDRESS OF DATA
0BE4: 1A            1932  RELSR1	LD	A,(DE)
0BE5: 4F            1933  	LD	C,A	;GET OUTPUT DATA
0BE6: 13            1934  	INC	DE
0BE7: 1A            1935  	LD	A,(DE)	;GET TIME DELAY
0BE8: FE 00         1936  	CP	0
0BEA: 28 16         1937  	JR	Z,RELSR4	;END OF SEQUENCE
0BEC: FE FF         1938  	CP	255
0BEE: 28 0D         1939  	JR	Z,RELSR3	;REPEAT SEQUENCE
0BF0: 47            1940  	LD	B,A
0BF1: 79            1941  	LD	A,C
0BF2: D3 81         1942  	OUT	(IO1),A
0BF4: 13            1943  	INC	DE
0BF5: CD 0C 0C      1944  RELSR2	CALL	DELONE	;1 SEC DELAY
0BF8: 10 FB         1945  	DJNZ	RELSR2	;MORE SECONDS TO GO
0BFA: C3 E4 0B      1946  	JP	RELSR1
                    1947  ;
                    1948  ; REPEAT
                    1949  ;
0BFD: D1            1950  RELSR3	POP	DE	;GET START ADDRESS
0BFE: D5            1951  	PUSH	DE	;SAVE FOR LATER
0BFF: C3 E4 0B      1952  	JP	RELSR1
                    1953  ;
                    1954  ; FINISHED
                    1955  ;
0C02: 3E 00         1956  RELSR4	LD	A,00H
0C04: D3 81         1957  	OUT	(IO1),A	;CLEAR OUTPUT REG
0C06: E1            1958  	POP	HL
0C07: E1            1959  	POP	HL
0C08: D1            1960  	POP	DE
0C09: C1            1961  	POP	BC
0C0A: F1            1962  	POP	AF
0C0B: C9            1963  	RET
                    1964  ;-----------------
                    1965  ; ONE SECOND DELAY
                    1966  ;-----------------
                    1967  ;
                    1968  ; ENTRY : NONE
                    1969  ; EXIT : FLAG REGISTER MODIFIED
                    1970  ;
0C0C: C5            1971  DELONE	PUSH	BC
0C0D: D5            1972  	PUSH	DE
0C0E: E5            1973  	PUSH	HL
0C0F: 11 01 00      1974  	LD	DE,0001H
0C12: 21 70 08      1975  	LD	HL,0870H
0C15: 06 92         1976  DELON1	LD	B,92H
0C17: 10 FE         1977  DELON2	DJNZ	DELON2	;INNER LOOP
0C19: ED 52         1978  	SBC	HL,DE
0C1B: D2 15 0C      1979  	JP	NC,DELON1	;OUTER LOOP
0C1E: E1            1980  	POP	HL
0C1F: D1            1981  	POP	DE
0C20: C1            1982  	POP	BC
0C21: C9            1983  	RET
                    1984  ;--------------------------
                    1985  ; FUNCTION E - KALEIDOSCOPE
                    1986  ;--------------------------
0C22: CD BD 05      1987  SCOPE	CALL	BEEP
0C25: CD A4 04      1988  	CALL	KEYREL
0C28: CD F1 04      1989  	CALL	RAND	;GENERATE RANDOM
0C2B: EB            1990  	EX	DE,HL
0C2C: 21 00 3E      1991  	LD	HL,SYSTEM	;NUMBER AND SET UP
0C2F: 7B            1992  	LD	A,E	;THE FIRST QUADRANT
0C30: CD A7 0C      1993  	CALL	SEED	;WITH A RANDOM BIT
0C33: 7A            1994  	LD	A,D	;PATTERN
0C34: CD A7 0C      1995  	CALL	SEED
                    1996  ;
                    1997  ; GENERATE MIRROR IMAGES
                    1998  ;
0C37: 06 04         1999  SCOPE2	LD	B,04H
0C39: 21 00 3E      2000  	LD	HL,SYSTEM
0C3C: 11 07 3E      2001  	LD	DE,SYSTEM+7
0C3F: 7E            2002  SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
0C40: 12            2003  	LD	(DE),A	;QUADRANT INTO
0C41: 23            2004  	INC	HL	;THE FOURTH
0C42: 1B            2005  	DEC	DE	;QUADRANT
0C43: 10 FA         2006  	DJNZ	SCOPE3
                    2007  ;
                    2008  ; MIRROR ACROSS CENTRE OF DISPLAY
                    2009  ;
0C45: 06 08         2010  	LD	B,8	;MIRROR THE FIRST
0C47: 21 00 3E      2011  	LD	HL,SYSTEM	;AND FOURTH QUADRANT
0C4A: 7E            2012  	LD	A,(HL)	;ACROSS THE CENTRE
0C4B: E6 0F         2013  	AND	0FH	;OF THE DISPLAY
0C4D: 77            2014  	LD	(HL),A	;INTO THE SECOND
0C4E: CB 46         2015  SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
0C50: CA 55 0C      2016  	JP	Z,SCOPE5	;CHECKING IF THE
0C53: CB FE         2017  	SET	7,(HL)	;BITS IN THE LSN ARE
0C55: CB 4E         2018  SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
0C57: CA 5C 0C      2019  	JP	Z,SCOPE6	;CORRESPONDING
0C5A: CB F6         2020  	SET	6,(HL)	;MIRROR IMAGE
0C5C: CB 56         2021  SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
0C5E: CA 63 0C      2022  	JP	Z,SCOPE7	;IF THEY ARE.
0C61: CB EE         2023  	SET	5,(HL)	;DO THIS FOR
0C63: CB 5E         2024  SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
0C65: CA 6A 0C      2025  	JP	Z,SCOPE8	;OF DATA BYTES
0C68: CB E6         2026  	SET	4,(HL)	;IN THE DISPLAY
0C6A: 23            2027  SCOPE8	INC	HL
0C6B: 10 E1         2028  	DJNZ	SCOPE4	;MORE ROWS TO DO
                    2029  ;
                    2030  ; DISPLAY RANDOM BIT PATTERN
                    2031  ;
0C6D: 11 01 00      2032  	LD	DE,0001H	;SCAN THE DISPLAY
0C70: CD F1 04      2033  	CALL	RAND	;A RANDOM
0C73: 7C            2034  	LD	A,H	;TIME
0C74: E6 07         2035  	AND	7	;NOT GREATER THAN
0C76: F6 01         2036  	OR	1	;NOT LESS THAN
0C78: 67            2037  	LD	H,A
0C79: E5            2038  SCOPE9	PUSH	HL
0C7A: 21 00 3E      2039  	LD	HL,SYSTEM
0C7D: CD B6 0C      2040  	CALL	SKATE	;SCAN 8X8
0C80: E1            2041  	POP	HL
0C81: ED 52         2042  	SBC	HL,DE
0C83: C2 79 0C      2043  	JP	NZ,SCOPE9
                    2044  ;
                    2045  ; MANIPULATE BITS FOR NEXT IMAGE
                    2046  ;
0C86: 21 00 3E      2047  SCOPEA	LD	HL,SYSTEM
0C89: 3E 05         2048  	LD	A,5
0C8B: 86            2049  	ADD	A,(HL)
0C8C: E6 0F         2050  	AND	0FH
0C8E: 77            2051  	LD	(HL),A	;ADD 5 TO FIRST LSN
0C8F: 23            2052  	INC	HL
0C90: 3E 03         2053  	LD	A,03H
0C92: 86            2054  	ADD	A,(HL)
0C93: E6 0F         2055  	AND	0FH
0C95: 77            2056  	LD	(HL),A	;ADD 3 TO SECOND LSN
0C96: 23            2057  	INC	HL
0C97: 3E 01         2058  	LD	A,01H
0C99: 86            2059  	ADD	A,(HL)
0C9A: E6 0F         2060  	AND	0FH
0C9C: 77            2061  	LD	(HL),A	;ADD 1 TO THIRD LSN
0C9D: 23            2062  	INC	HL
0C9E: 3E 07         2063  	LD	A,07H
0CA0: 86            2064  	ADD	A,(HL)
0CA1: E6 0F         2065  	AND	0FH
0CA3: 77            2066  	LD	(HL),A	;ADD 15 TO FOURTH LSN
0CA4: C3 37 0C      2067  	JP	SCOPE2	;MIRROR BIT PATTERN
                    2068  ;
                    2069  ; SEED THE FIRST QUADRANT WITH RANDOM BITS
                    2070  ;
0CA7: 47            2071  SEED	LD	B,A	;PUT THE
0CA8: E6 0F         2072  	AND	0FH	;RANDOM NUMBER
0CAA: 77            2073  	LD	(HL),A	;INTO THE
0CAB: 23            2074  	INC	HL	;FIRST QUADRANT
0CAC: 78            2075  	LD	A,B	;OF THE
0CAD: E6 F0         2076  	AND	240	;DISPLAY
0CAF: 1F            2077  	RRA
0CB0: 1F            2078  	RRA
0CB1: 1F            2079  	RRA
0CB2: 1F            2080  	RRA
0CB3: 77            2081  	LD	(HL),A
0CB4: 23            2082  	INC	HL
0CB5: C9            2083  	RET
                    2084  ;-----------------
                    2085  ; SCAN 8X8 DISPLAY
                    2086  ;-----------------
                    2087  ;PUT THE 8 RAM LOCATIONS POINTED TO
                    2088  ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
                    2089  ;ON TOP ROW.
                    2090  ;  ROUTINE PERIOD IS 500uS
                    2091  ;  PULSE WIDTH 15uS  GIVES 3% DUTY
                    2092  ;
                    2093  ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
                    2094  ;	EXIT : NO REGISTERS MODIFIED
                    2095  ;
0CB6: F5            2096  SKATE	PUSH	AF
0CB7: C5            2097  	PUSH	BC
0CB8: E5            2098  	PUSH	HL	;SAVE REGISTERS
0CB9: 0E 80         2099  	LD	C,80H
0CBB: 7E            2100  SKATE1	LD	A,(HL)
0CBC: D3 80         2101  	OUT	(IO0),A	;OUTPUT X
0CBE: 79            2102  	LD	A,C
0CBF: D3 82         2103  	OUT	(IO2),A	;OUTPUT Y
0CC1: 06 02         2104  	LD	B,02H
0CC3: 10 FE         2105  SKATE2	DJNZ	SKATE2	;ON TIME DELAY
0CC5: AF            2106  	XOR	A
0CC6: D3 80         2107  	OUT	(IO0),A
0CC8: D3 82         2108  	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
0CCA: 06 08         2109  	LD	B,08H
0CCC: 10 FE         2110  SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
0CCE: 23            2111  	INC	HL
0CCF: CB 09         2112  	RRC	C
0CD1: 30 E8         2113  	JR	NC,SKATE1	;MORE TO OUTPUT
0CD3: E1            2114  	POP	HL
0CD4: C1            2115  	POP	BC
0CD5: F1            2116  	POP	AF
0CD6: C9            2117  	RET
                    2118  ;----------------------------
                    2119  ; FUNCTION F - CLOCK CALENDAR
                    2120  ;----------------------------
0CD7: CD BD 05      2121  TIME	CALL	BEEP
0CDA: CD A4 04      2122  	CALL	KEYREL	;WAIT FOR KEY RELEASE
0CDD: DD 21 00 3E   2123  	LD	IX,SYSTEM	;USE IX FOR TEMP VARIABLES
0CE1: 3A D6 3F      2124  	LD	A,(ONTIM)
0CE4: DD 77 00      2125  	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
0CE7: 3E 60         2126  	LD	A,60H
0CE9: 32 D6 3F      2127  	LD	(ONTIM),A	;USE NEW DELAY
0CEC: DD 77 01      2128  	LD	(IX+1),A	;START IN TIME MODE
                    2129  ;
                    2130  ; DISPLAY TIME,CHECK FOR KEY
                    2131  ;
0CEF: CD 45 0E      2132  TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
0CF2: CD 2F 0D      2133  	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
0CF5: CD FA 03      2134  	CALL	SCAND
0CF8: CD 34 04      2135  	CALL	SCANKEY
0CFB: CB 6F         2136  	BIT	5,A
0CFD: 28 F0         2137  	JR	Z,TIME1	;NO KEY KEEP LOOKING
0CFF: E6 1F         2138  	AND	1FH
0D01: 21 09 0D      2139  	LD	HL,TIMKEY
0D04: CD AE 04      2140  	CALL	MENU
0D07: 18 E6         2141  	JR	TIME1
                    2142  
0D09: 04            2143  TIMKEY	.DB	4
0D0A: 10 11 12 13   2144  	.DB	10H,11H,12H,13H
0D0E: 16 0D A7 0D   2145  	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
0D12: 20 0D 20 0D   2145  
                    2146  ;--------------------
                    2147  ; EXIT CLOCK CALENDAR
                    2148  ;--------------------
0D16: E1            2149  CLKEXT	POP	HL	;REMOVE RETURN
0D17: DD 7E 00      2150  	LD	A,(IX+0)
0D1A: 32 D6 3F      2151  	LD	(ONTIM),A	;RESTORE DELAY TIME
0D1D: C3 2F 07      2152  	JP	CANCEL
                    2153  ;--------------------
                    2154  ; TOGGLE DISPLAY MODE
                    2155  ;--------------------
0D20: CD BD 05      2156  CALKEY	CALL	BEEP
0D23: CD A4 04      2157  	CALL	KEYREL
0D26: DD 7E 01      2158  	LD	A,(IX+1)
0D29: EE 80         2159  	XOR	80H	;TOGGLE DISPLAY
0D2B: DD 77 01      2160  	LD	(IX+1),A
0D2E: C9            2161  	RET
                    2162  ;----------------------
                    2163  ; UPDATE DISPLAY BUFFER
                    2164  ;----------------------
0D2F: DD CB 01 7E   2165  UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
0D33: 20 22         2166  	JR	NZ,UPDBF2	;CALENDAR DISPLAY
                    2167  ;
                    2168  ; TIME DISPLAY
                    2169  ;
0D35: 3A B9 3F      2170  UPDBF1	LD	A,(SWREG1)
0D38: CD CA 03      2171  	CALL	CONBYT
0D3B: CB FD         2172  	SET	7,L	;SET DECIMAL POINT
0D3D: 22 D0 3F      2173  	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
0D40: 3A BA 3F      2174  	LD	A,(SWREG2)
0D43: CD CA 03      2175  	CALL	CONBYT
0D46: CB FD         2176  	SET	7,L	;SET DECIMAL POINT
0D48: 22 D2 3F      2177  	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
0D4B: 3A BB 3F      2178  	LD	A,(SWREG3)
0D4E: CD CA 03      2179  	CALL	CONBYT
0D51: CB FD         2180  	SET	7,L	;SET DECIMAL POINT
0D53: 22 D4 3F      2181  	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
0D56: C9            2182  	RET
                    2183  ;
                    2184  ; CALENDAR DISPLAY
                    2185  ;
0D57: 3A BF 3F      2186  UPDBF2	LD	A,(SWREG7)
0D5A: CD CA 03      2187  	CALL	CONBYT
0D5D: 22 D0 3F      2188  	LD	(DISBUF),HL	;SHOW YEAR (0-99)
                    2189  ;
                    2190  ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
                    2191  ;
0D60: 21 B6 3F      2192  	LD	HL,CALMDE
0D63: CB 7E         2193  	BIT	7,(HL)
0D65: 20 14         2194  	JR	NZ,UPDBF3	;MM/DD/YY MODE
                    2195  ;
                    2196  ; DD/MM/YY MODE
                    2197  ;
0D67: 3A BE 3F      2198  	LD	A,(SWREG6)
0D6A: CD CA 03      2199  	CALL	CONBYT
0D6D: 22 D2 3F      2200  	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
0D70: 3A BD 3F      2201  	LD	A,(SWREG5)
0D73: CD CA 03      2202  	CALL	CONBYT
0D76: 22 D4 3F      2203  	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
0D79: 18 12         2204  	JR	UPDBF4
                    2205  ;
                    2206  ; MM/DD/YY MODE
                    2207  ;
0D7B: 3A BE 3F      2208  UPDBF3	LD	A,(SWREG6)
0D7E: CD CA 03      2209  	CALL	CONBYT
0D81: 22 D4 3F      2210  	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
0D84: 3A BD 3F      2211  	LD	A,(SWREG5)
0D87: CD CA 03      2212  	CALL	CONBYT
0D8A: 22 D2 3F      2213  	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
                    2214  ;
                    2215  ; SHOW DAY
                    2216  ;
0D8D: 3A BC 3F      2217  UPDBF4	LD	A,(SWREG4)	;GET DAY REG
0D90: E6 07         2218  	AND	07H
0D92: 28 12         2219  	JR	Z,UPDBF5	;ZERO IS ILLEGAL
0D94: FE 07         2220  	CP	07H
0D96: 28 0E         2221  	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
0D98: 2F            2222  	CPL	;WORK OUT
0D99: D6 01         2223  	SUB	01H	;WHICH DECIMAL POINT
0D9B: E6 07         2224  	AND	07H	;TO LIGHT
0D9D: 21 D0 3F      2225  	LD	HL,DISBUF	;ADDING THE DAY
0DA0: 06 00         2226  	LD	B,00H	;TO A DISPLAY
0DA2: 4F            2227  	LD	C,A	;BUFFER INDEX
0DA3: 09            2228  	ADD	HL,BC	;AND SETTING THE
0DA4: CB FE         2229  	SET	7,(HL)	;DECIMAL POINT
0DA6: C9            2230  UPDBF5	RET	;IN THAT DISPLAY
                    2231  ;--------------
                    2232  ; SET TIME/DATE
                    2233  ;--------------
0DA7: CD BD 05      2234  SETCLK	CALL	BEEP
0DAA: CD A4 04      2235  	CALL	KEYREL
                    2236  ;
                    2237  ; EDIT THE DISPLAY BUFFER
                    2238  ;
0DAD: CD 2F 0D      2239  SETCK1	CALL	UPDBUF  ;UPDATE DISPLAY BUFFER
0DB0: CD 80 04      2240  	CALL	SKEYIN
0DB3: CD A4 04      2241  	CALL	KEYREL
0DB6: FE 10         2242  	CP	10H	;FN KEY EXITS (NO CHANGE)
0DB8: C8            2243  	RET	Z
0DB9: FE 11         2244  	CP	11H	;AD KEY SETS CLOCK/CALENDAR
0DBB: 28 6E         2245  	JR	Z,SETCK8
0DBD: FE 12         2246  	CP	12H
0DBF: 28 3D         2247  	JR	Z,SETCK4	;PLUS KEY
0DC1: FE 13         2248  	CP	13H
0DC3: 28 4F         2249  	JR	Z,SETCK6	;MINUS KEY
0DC5: FE 0A         2250  	CP	0AH	;NO A-F KEYS
0DC7: 30 E4         2251  	JR	NC,SETCK1
                    2252  ;
                    2253  ; IS IT SET CLOCK OR SET CALENDAR?
                    2254  ;
0DC9: DD CB 01 7E   2255  	BIT	7,(IX+1)
0DCD: 20 0D         2256  	JR	NZ,SETCK2
                    2257  ;
                    2258  ; SET CLOCK DISPLAY
                    2259  ;
0DCF: 21 B9 3F      2260  	LD	HL,SWREG1
0DD2: ED 6F         2261  	RLD	;MOVE THE NEW KEY
0DD4: 23            2262  	INC	HL	;INTO THE CLOCK BUFFER
0DD5: ED 6F         2263  	RLD
0DD7: 23            2264  	INC	HL
0DD8: ED 6F         2265  	RLD
0DDA: 18 D1         2266  	JR	SETCK1
                    2267  ;
                    2268  ; SET CALENDAR DISPLAY
                    2269  ;
0DDC: 21 B6 3F      2270  SETCK2	LD	HL,CALMDE
0DDF: CB 7E         2271  	BIT	7,(HL)
0DE1: 20 0D         2272  	JR	NZ,SETCK3	;MM/DD/YY MODE
                    2273  ;
                    2274  ; SET CALENDAR AS DD/MM/YY
                    2275  ;
0DE3: 21 BF 3F      2276  	LD	HL,SWREG7
0DE6: ED 6F         2277  	RLD	;MOVE THE NEW KEY
0DE8: 2B            2278  	DEC	HL	;INTO THE CAL BUFFER
0DE9: ED 6F         2279  	RLD
0DEB: 2B            2280  	DEC	HL
0DEC: ED 6F         2281  	RLD
0DEE: 18 BD         2282  	JR	SETCK1
                    2283  ;
                    2284  ; SET CALENDAR AS MM/DD/YY
                    2285  ;
0DF0: 21 BF 3F      2286  SETCK3	LD	HL,SWREG7
0DF3: ED 6F         2287  	RLD	;MOVE THE NEW KEY
0DF5: 2B            2288  	DEC	HL	;INTO THE CAL BUFFER
0DF6: 2B            2289  	DEC	HL
0DF7: ED 6F         2290  	RLD
0DF9: 23            2291  	INC	HL
0DFA: ED 6F         2292  	RLD
0DFC: 18 AF         2293  	JR	SETCK1
                    2294  ;
                    2295  ; INC DAY
                    2296  ;
0DFE: DD CB 01 7E   2297  SETCK4	BIT	7,(IX+1)
0E02: 28 A9         2298  	JR	Z,SETCK1
0E04: 3A BC 3F      2299  	LD	A,(SWREG4)
0E07: FE 07         2300  	CP	07H	;IS THE DAY SUNDAY?
0E09: 20 02         2301  	JR	NZ,SETCK5
0E0B: 3E 00         2302  	LD	A,00H	;SET MONDAY
0E0D: 3C            2303  SETCK5	INC	A	;DAY=DAY+1
0E0E: 32 BC 3F      2304  	LD	(SWREG4),A
0E11: C3 AD 0D      2305  	JP	SETCK1
                    2306  ;
                    2307  ; DEC DAY
                    2308  ;
0E14: DD CB 01 7E   2309  SETCK6	BIT	7,(IX+1)
0E18: CA AD 0D      2310  	JP	Z,SETCK1
0E1B: 3A BC 3F      2311  	LD	A,(SWREG4)
0E1E: FE 01         2312  	CP	01H	;IS THE DAY MONDAY?
0E20: 20 02         2313  	JR	NZ,SETCK7
0E22: 3E 08         2314  	LD	A,08H	;SET SUNDAY
0E24: 3D            2315  SETCK7	DEC	A	;DAY=DAY-1
0E25: 32 BC 3F      2316  	LD	(SWREG4),A
0E28: C3 AD 0D      2317  	JP	SETCK1
                    2318  ;
                    2319  ; SET THE CLOCK/CALENDAR WITH NEW DATA
                    2320  ;
0E2B: CD BD 05      2321  SETCK8	CALL	BEEP
0E2E: CD A4 04      2322  	CALL	KEYREL
0E31: 3A BB 3F      2323  	LD	A,(SWREG3)
0E34: E6 3F         2324  	AND	3FH	;24 HOUR MODE
0E36: 32 BB 3F      2325  	LD	(SWREG3),A
0E39: 3A BC 3F      2326  	LD	A,(SWREG4)
0E3C: E6 07         2327  	AND	07H	;OSC ON,RST ENABLED
0E3E: 32 BC 3F      2328  	LD	(SWREG4),A
0E41: CD CF 0E      2329  	CALL	WWATCH	;WRITE CHANGES
0E44: C9            2330  	RET
                    2331  ;---------------------
                    2332  ; READ FROM SMARTWATCH
                    2333  ;---------------------
                    2334  ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
                    2335  ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
                    2336  ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
                    2337  ; OR WRITTEN TO WHILE WATCH IS ENABLED.
                    2338  ;
                    2339  ;  ENTRY : NONE
                    2340  ;  EXIT  : NO WORKING REGISTERS MODIFIED
                    2341  ;          (ALTERNATE SET MODIFIED)
                    2342  ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
                    2343  ;
                    2344  ;
                    2345  ; ENABLE SMARTWATCH
                    2346  ;
0E45: F5            2347  RWATCH	PUSH	AF
0E46: C5            2348  	PUSH	BC
0E47: D5            2349  	PUSH	DE
0E48: E5            2350  	PUSH	HL
0E49: 3A FF 3F      2351  	LD	A,(DALLAS)	;INITIATE PATTERN
0E4C: 21 8F 0E      2352  	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
0E4F: 06 40         2353  	LD	B,64	;IN THE TABLE TO THE RAM TO
0E51: 7E            2354  RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
0E52: 32 FF 3F      2355  	LD	(DALLAS),A
0E55: 23            2356  	INC	HL
0E56: 10 F9         2357  	DJNZ	RWACH1
                    2358  ;
                    2359  ; READ DATA FROM WATCH
                    2360  ;
0E58: 06 20         2361  	LD	B,32
0E5A: 3A FF 3F      2362  RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
0E5D: CB 3F         2363  	SRL	A	;INTO THE 16 BIT REGISTERS
0E5F: CB 1A         2364  	RR	D	;DE AND HL
0E61: CB 1B         2365  	RR	E	;THEN EXCHANGE THEM WITH
0E63: CB 1C         2366  	RR	H	;THE ALTERNATE PAIR
0E65: CB 1D         2367  	RR	L
0E67: 10 F1         2368  	DJNZ	RWACH2
0E69: D9            2369  	EXX
0E6A: 06 20         2370  	LD	B,32
0E6C: 3A FF 3F      2371  RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
0E6F: CB 3F         2372  	SRL	A	;INTO THE SAME 16 BIT REGISTERS
0E71: CB 1A         2373  	RR	D
0E73: CB 1B         2374  	RR	E
0E75: CB 1C         2375  	RR	H
0E77: CB 1D         2376  	RR	L
0E79: 10 F1         2377  	DJNZ	RWACH3
                    2378  ;
                    2379  ; SAVE IN WATCH REGISTERS
                    2380  ;
0E7B: 22 BC 3F      2381  	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
0E7E: ED 53 BE 3F   2382  	LD	(SWREG6),DE	;GET THE DATA
0E82: D9            2383  	EXX
0E83: 22 B8 3F      2384  	LD	(SWREG0),HL
0E86: ED 53 BA 3F   2385  	LD	(SWREG2),DE
0E8A: E1            2386  	POP	HL
0E8B: D1            2387  	POP	DE
0E8C: C1            2388  	POP	BC
0E8D: F1            2389  	POP	AF
0E8E: C9            2390  	RET
                    2391  ;
                    2392  ; SMARTWATCH ACCESS PATTERN
                    2393  ;
0E8F: C5 E2 71 B8   2394  PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
0E93: 5C 2E 17 8B   2394  
0E97: 3A 1D 8E 47   2395  	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
0E9B: A3 D1 E8 74   2395  
0E9F: A3 D1 E8 74   2396  	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
0EA3: 3A 1D 8E 47   2396  
0EA7: 5C 2E 17 8B   2397  	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
0EAB: C5 E2 71 B8   2397  
0EAF: C5 E2 71 B8   2398  	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
0EB3: 5C 2E 17 8B   2398  
0EB7: 3A 1D 8E 47   2399  	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
0EBB: A3 D1 E8 74   2399  
0EBF: A3 D1 E8 74   2400  	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
0EC3: 3A 1D 8E 47   2400  
0EC7: 5C 2E 17 8B   2401  	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
0ECB: C5 E2 71 B8   2401  
                    2402  ;--------------------
                    2403  ; WRITE TO SMARTWATCH
                    2404  ;--------------------
                    2405  ;
                    2406  ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
                    2407  ; IT USING BIT MANIPULATION.
                    2408  ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
                    2409  ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
                    2410  ; SMARTWATCH IS ENABLED.
                    2411  ;
                    2412  ; ENTRY : NONE
                    2413  ; THE DATA TO WRITE TO THE SMARTWATCH
                    2414  ; MUST BE IN SWREG0 - SWREG7
                    2415  ;  EXIT : NO WORKING REGISTERS MODIFIED
                    2416  ;  (ALTERNATE SET MODIFIED)
                    2417  ; GET DATA TO WRITE TO WATCH
                    2418  ;
0ECF: F5            2419  WWATCH	PUSH	AF
0ED0: C5            2420  	PUSH	BC
0ED1: D5            2421  	PUSH	DE
0ED2: E5            2422  	PUSH	HL
0ED3: 2A BC 3F      2423  	LD	HL,(SWREG4)	;SET UP THE
0ED6: ED 5B BE 3F   2424  	LD	DE,(SWREG6)	;16 BIT REGISTERS
0EDA: D9            2425  	EXX
0EDB: 2A B8 3F      2426  	LD	HL,(SWREG0)	;WITH THE DATA TO BE
0EDE: ED 5B BA 3F   2427  	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
                    2428  ;
                    2429  ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
                    2430  ;
0EE2: 3A FF 3F      2431  	LD	A,(DALLAS)	;INITIATE PATTERN
0EE5: 3E C5         2432  	LD	A,0C5H
0EE7: 0E 80         2433  	LD	C,80H	;NUMBER OF BYTES
0EE9: 06 80         2434  WWACH1	LD	B,80H	;NUMBER OF BITS
0EEB: 32 FF 3F      2435  WWACH2	LD	(DALLAS),A	;WRITE TO RAM
0EEE: CB 0F         2436  	RRC	A
0EF0: CB 38         2437  	SRL	B
0EF2: 30 F7         2438  	JR	NC,WWACH2	;MORE BITS
0EF4: CB 39         2439  	SRL	C
0EF6: 38 11         2440  	JR	C,WWACH4	;NO MORE BYTES
0EF8: CB 47         2441  	BIT	0,A
0EFA: 20 0A         2442  	JR	NZ,WWACH3
0EFC: CB 0F         2443  	RRC	A
0EFE: CB 0F         2444  	RRC	A
0F00: CB 0F         2445  	RRC	A
0F02: CB 0F         2446  	RRC	A
0F04: 18 E3         2447  	JR	WWACH1
0F06: 2F            2448  WWACH3	CPL
0F07: 18 E0         2449  	JR	WWACH1
                    2450  ;
                    2451  ; WRITE DATA TO WATCH
                    2452  ;
0F09: 06 20         2453  WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
0F0B: CB 3A         2454  WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
0F0D: CB 1B         2455  	RR	E	;ONTO D0 AND INTO
0F0F: CB 1C         2456  	RR	H	;THE SMARTWATCH
0F11: CB 1D         2457  	RR	L
0F13: 17            2458  	RLA
0F14: 32 FF 3F      2459  	LD	(DALLAS),A
0F17: 10 F2         2460  	DJNZ	WWACH5
0F19: D9            2461  	EXX	;RESTORE REGISTERS
0F1A: 06 20         2462  	LD	B,32	;GET THE OTHER 32 BITS FROM
0F1C: CB 3A         2463  WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
0F1E: CB 1B         2464  	RR	E	;AND SHIFT THEM ONTO D0
0F20: CB 1C         2465  	RR	H	;AND INTO THE SMARTWATCH
0F22: CB 1D         2466  	RR	L
0F24: 17            2467  	RLA
0F25: 32 FF 3F      2468  	LD	(DALLAS),A
0F28: 10 F2         2469  	DJNZ	WWACH6
0F2A: E1            2470  	POP	HL
0F2B: D1            2471  	POP	DE
0F2C: C1            2472  	POP	BC
0F2D: F1            2473  	POP	AF
0F2E: C9            2474  	RET
                    2475  ;-----------------
                    2476  ; ONE SECOND DELAY
                    2477  ;-----------------
                    2478  ; USES SMARTWATCH TO DELAY FOR 1 SECOND
                    2479  ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
                    2480  ;
                    2481  ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
                    2482  ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
                    2483  ; READS THE SAME AS THE REFERENCE VALUE,
                    2484  ; THEN THE ROUTINE RETURNS
                    2485  ;
                    2486  ; ENTRY : NONE
                    2487  ; EXIT : NONE MODIFIED
                    2488  ;
0F2F: F5            2489  ONESEC	PUSH	AF
0F30: C5            2490  	PUSH	BC
0F31: CD 45 0E      2491  	CALL	RWATCH	;READ WATCH
0F34: 3A B9 3F      2492  	LD	A,(SWREG1)
0F37: 47            2493  	LD	B,A	;SAVE REF COUNT
0F38: CD 45 0E      2494  ONESC1	CALL	RWATCH
0F3B: 3A B9 3F      2495  	LD	A,(SWREG1)
0F3E: B8            2496  	CP	B	;SAME AS REF?
0F3F: CA 38 0F      2497  	JP	Z,ONESC1	;YES SO WAIT AGAIN
0F42: C1            2498  	POP	BC
0F43: F1            2499  	POP	AF
0F44: C9            2500  	RET
                    2501      
                    2502  ;---------------
                    2503  ; SERIAL MONITOR
                    2504  ;---------------
                    2505  
                    2506  ;------------
                    2507  ; ASCII CODES
                    2508  ;------------
001B:               2509  ESC    EQU   0x1B 
000D:               2510  CR     EQU   0x0D
000A:               2511  LF     EQU   0x0A
                    2512  
                    2513             
0F45: 3E 40         2514  SCBUG  LD    A,0x40
0F47: D3 85         2515         OUT   (SCAN),A    ;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
                    2516  ;
                    2517  ; START UP THE MONITOR
                    2518  ;          
0F49: ED 73 AE 3F   2519  COLD   LD    (ISTACK),SP ;SAVE STACK POINTER
0F4D: 21 88 11      2520         LD    HL,SSSTEP
0F50: 22 FA 3F      2521         LD    (RST38),HL ;HIJACK THE SINGLE STEPPER
0F53: CD 0C 0C      2522         CALL  DELONE     ;WAIT A SEC SO THE HOST SEES TX HIGH  
0F56: 21 1F 08      2523         LD    HL,TXDATA
0F59: 22 AA 3F      2524         LD    (PUTCH),HL ;USE THE BITBANG SERIAL TRANSMIT
0F5C: 21 4A 08      2525         LD    HL,RXDATA
0F5F: 22 AC 3F      2526         LD    (GETCH),HL  ;USE THE BITBANG SERIAL RECEIVE
0F62: 21 C8 13      2527         LD    HL,INITSZ  ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
0F65: CD 7A 11      2528         CALL  SNDMSG     ;INITIALISE THE TERMINAL
0F68: 21 1A 12      2529         LD    HL,SIGNON
0F6B: CD 7A 11      2530         CALL  SNDMSG     ;SEND THE SIGNON
                    2531  ;
                    2532  ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
                    2533  ;
0F6E: 3E 3E         2534  START2 LD    A,'>'
0F70: CD E5 0F      2535         CALL  OUTCH       ;DISPLAY THE PROMPT
0F73: CD EB 0F      2536  START3 CALL  INCH        ;GET A CHARACTER FROM THE CONSOLE
                    2537  ;
                    2538  ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
                    2539  ;
0F76: 21 92 0F      2540         LD    HL,MONMENU 
0F79: 46            2541         LD    B,(HL) ;NUMBER OF COMMANDS
0F7A: 23            2542         INC   HL
0F7B: BE            2543  START4 CP    A,(HL)      ;IN THE LIST?
0F7C: 28 05         2544         JR    Z,START5    ;OK DO IT
0F7E: 23            2545         INC   HL
0F7F: 10 FA         2546         DJNZ  START4      ;KEEP LOOKING
0F81: 18 F0         2547         JR    START3
0F83: CD E5 0F      2548  START5 CALL  OUTCH       ;ECHO 
0F86: 21 92 0F      2549         LD    HL,MONMENU  ;USE THE MENU HANDLER 
0F89: CD AE 04      2550         CALL  MENU        ;KEY IN A, EXECUTE MENU
                    2551  ;      
                    2552  ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
                    2553  ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET.
                    2554  ;           
0F8C: CD DE 0F      2555  WARM   CALL  TXCRLF     ;START ON A NEW LINE
0F8F: C3 6E 0F      2556         JP    START2
                    2557  ;
                    2558  ; SCBUG MONITOR COMMANDS
                    2559  ;
0F92: 07            2560  MONMENU     .DB 7
0F93: 44 48 54 4D   2561              .DB 'D','H','T','M','G','I','X'
0F97: 47 49 58      2561  
                    2562  
0F9A: BA 10 14 10   2563              .DW DSPLAY,HELP,SSTOGL,MODIFY
0F9E: 21 10 2A 10   2563  
0FA2: F1 0F 7D 10   2564              .DW GOJUMP,INTHEX,EXIT
0FA6: 96 10         2564  
                    2565  ;-----------------------------
                    2566  ; GET A BYTE FROM THE TERMINAL
                    2567  ;-----------------------------
0FA8: CD EB 0F      2568  GETCHR CALL  INCH
0FAB: FE 1B         2569         CP    ESC
0FAD: 28 27         2570         JR    Z,GETOUT
0FAF: 47            2571         LD    B,A                ;SAVE TO ECHO      
0FB0: CD 9F 10      2572         CALL  ASC2HEX
0FB3: 30 F3         2573         JR    NC,GETCHR          ;REJECT NON HEX CHARS    
0FB5: 21 B2 3F      2574         LD    HL,DATA
0FB8: 77            2575         LD    (HL),A 
0FB9: 78            2576         LD    A,B         
0FBA: CD E5 0F      2577         CALL  OUTCH             ;ECHO VALID HEX
                    2578         
0FBD: CD EB 0F      2579  GETNYB CALL  INCH
0FC0: FE 1B         2580         CP    ESC
0FC2: 28 12         2581         JR    Z,GETOUT
0FC4: 47            2582         LD    B,A               ;SAVE TO ECHO
0FC5: CD 9F 10      2583         CALL  ASC2HEX
0FC8: 30 F3         2584         JR    NC,GETNYB         ;REJECT NON HEX CHARS
0FCA: ED 6F         2585         RLD
0FCC: 78            2586         LD    A,B
0FCD: CD E5 0F      2587         CALL  OUTCH             ;ECHO VALID HEX
0FD0: 7E            2588         LD    A,(HL)
0FD1: CD D6 0F      2589         CALL  GETOUT            ;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
0FD4: 3F            2590         CCF                    ;AND THEN COMPLEMENTING IT
0FD5: C9            2591         RET   
0FD6: 37            2592  GETOUT SCF                    ;SET THE CARRY FLAG TO EXIT BACK TO MENU
0FD7: C9            2593         RET
                    2594  ;---------------
                    2595  ; OUTPUT A SPACE
                    2596  ;---------------
0FD8: 3E 20         2597  OUTSP  LD    A,20H
0FDA: CD E5 0F      2598         CALL  OUTCH
0FDD: C9            2599         RET
                    2600  ;-------------      
                    2601  ; OUTPUT CRLF
                    2602  ;------------
0FDE: 3E 0D         2603  TXCRLF LD   A,CR
0FE0: CD E5 0F      2604         CALL OUTCH   
0FE3: 3E 0A         2605         LD   A,LF
                    2606  ;-----------------------------------
                    2607  ; OUTPUT A CHARACTER TO THE TERMINAL
                    2608  ;-----------------------------------       
0FE5: DD 2A AA 3F   2609  OUTCH  LD   IX,(PUTCH)
0FE9: DD E9         2610         JP   (IX)
                    2611  ;------------------------------------
                    2612  ; INPUT A CHARACTER FROM THE TERMINAL
                    2613  ;------------------------------------
0FEB: DD 2A AC 3F   2614  INCH  LD   IX,(GETCH)
0FEF: DD E9         2615        JP   (IX)
                    2616  ;------------------------------
                    2617  ; GO <ADDR>
                    2618  ; TRANSFERS EXECUTION TO <ADDR>
                    2619  ;------------------------------
0FF1: CD D8 0F      2620  GOJUMP CALL  OUTSP       
0FF4: CD A8 0F      2621         CALL  GETCHR      ;GET ADDRESS HIGH BYTE
0FF7: D8            2622         RET   C
0FF8: 32 B1 3F      2623         LD    (ADDR+1),A  ;SAVE ADDRESS HIGH
0FFB: CD A8 0F      2624         CALL  GETCHR      ;GET ADDRESS LOW BYTE
0FFE: D8            2625         RET   C
0FFF: 32 B0 3F      2626         LD    (ADDR),A    ;SAVE ADDRESS LOW 
                    2627  ;
                    2628  ; WAIT FOR A CR OR ESC
                    2629  ;       
1002: CD EB 0F      2630  GOJMP1 CALL  INCH
1005: FE 1B         2631         CP    ESC         ;ESC KEY?
1007: C8            2632         RET   Z
1008: FE 0D         2633         CP    CR
100A: 20 F6         2634         JR    NZ,GOJMP1
100C: CD DE 0F      2635         CALL  TXCRLF
100F: E1            2636         POP   HL          ;POP THE UNUSED MENU RETURN ADDRESS FROM THE STACK
1010: 2A B0 3F      2637         LD    HL,(ADDR)
1013: E9            2638         JP    (HL)        ;GOOD LUCK WITH THAT!
                    2639  ;---------------------
                    2640  ; DISPLAY COMMAND HELP
                    2641  ;---------------------
1014: 21 F9 12      2642  HELP   LD   HL,COMANDS
1017: CD 7A 11      2643         CALL SNDMSG
101A: 21 62 13      2644         LD   HL,COMANDS1
101D: CD 7A 11      2645         CALL SNDMSG
1020: C9            2646         RET
                    2647  ;-----------------------------------------------
                    2648  ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
                    2649  ;-----------------------------------------------
                    2650  ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
                    2651  ; SO WE WILL JUST TOGGLE THE FLIP FLOP.
                    2652  ;
1021: 21 96 12      2653  SSTOGL LD    HL,TOGGLE
1024: CD 7A 11      2654         CALL  SNDMSG  
1027: D3 87         2655         OUT   (IO7),A               ;TOGGLE
1029: C9            2656         RET
                    2657  ;----------------------------
                    2658  ; M DISPLAY AND MODIFY MEMORY
                    2659  ;----------------------------
102A: CD D8 0F      2660  MODIFY CALL  OUTSP
                    2661  ;
                    2662  ;GET THE ADDRESS        
                    2663  ;
102D: CD A8 0F      2664         CALL  GETCHR 
1030: D8            2665         RET   C        
1031: 32 B1 3F      2666         LD    (ADDR+1),A  ;SAVE ADDRESS HIGH
1034: CD A8 0F      2667         CALL  GETCHR
1037: D8            2668         RET   C
1038: 32 B0 3F      2669         LD    (ADDR),A    ;SAVE ADDRESS LOW 
                    2670  ;
                    2671  ; DISPLAY ON A NEW LINE
                    2672  ;       
103B: CD DE 0F      2673  MDIFY1 CALL  TXCRLF       
103E: ED 5B B0 3F   2674         LD    DE,(ADDR)    
1042: 21 00 3E      2675         LD    HL,MSGBUF   
1045: CD 4C 11      2676         CALL  WRDASC      ;CONVERT ADDRESS IN DE TO ASCII
1048: 21 00 3E      2677         LD    HL,MSGBUF
104B: CD 40 11      2678         CALL  WRDOUT      ;OUTPUT THE ADDRESS
104E: CD D8 0F      2679         CALL  OUTSP    
                    2680  ;      
                    2681  ;GET THE DATA AT THE ADDRESS        
                    2682  ;
1051: 2A B0 3F      2683          LD   HL,(ADDR)       
1054: 7E            2684          LD   A,(HL)
                    2685  ;
                    2686  ; DISPLAY THE DATA
                    2687  ;        
1055: 21 00 3E      2688         LD    HL,MSGBUF
1058: CD 51 11      2689         CALL  BYTASC     ;CONVERT THE DATA BYTE IN A TO ASCII
105B: 21 00 3E      2690         LD    HL,MSGBUF
105E: CD 43 11      2691         CALL  BYTOUT      ;OUTPUT THE BYTE
1061: CD D8 0F      2692         CALL  OUTSP
                    2693  ;
                    2694  ; GET NEW DATA,EXIT OR CONTINUE
                    2695  ;
1064: CD A8 0F      2696         CALL  GETCHR
1067: D8            2697         RET   C
1068: 47            2698         LD    B,A         ;SAVE IT FOR LATER
1069: 2A B0 3F      2699         LD    HL,(ADDR)
106C: 77            2700         LD    (HL),A      ;PUT THE BYTE AT THE CURRENT ADDRESS
106D: 78            2701         LD    A,B
106E: BE            2702         CP    (HL)
106F: 28 05         2703         JR    Z,MDIFY2
1071: 3E 3F         2704         LD    A,'?'
1073: CD E5 0F      2705         CALL  OUTCH       ;NOT THE SAME DATA, PROBABLY NO RAM THERE      
                    2706  ;
                    2707  ; INCREMENT THE ADDRESS
                    2708  ;
1076: 23            2709  MDIFY2 INC   HL
1077: 22 B0 3F      2710         LD    (ADDR),HL
107A: C3 3B 10      2711         JP    MDIFY1      
                    2712  ;-----------------------
                    2713  ; RECEIVE INTEL HEX FILE
                    2714  ;-----------------------       
107D: 21 AD 12      2715  INTHEX LD    HL,TXFILE
1080: CD 7A 11      2716         CALL  SNDMSG      ;SEND FILE
1083: CD 8E 07      2717         CALL  INTELH
1086: 20 07         2718         JR    NZ,ITHEX1      
1088: 21 C6 12      2719         LD    HL,FILEOK
108B: CD 7A 11      2720         CALL  SNDMSG      ;GOT FILE OK
108E: C9            2721         RET
108F: 21 DB 12      2722  ITHEX1 LD    HL,CSUMERR
1092: CD 7A 11      2723         CALL  SNDMSG      ;CHECKSUM ERROR
1095: C9            2724         RET    
                    2725  ;------------------------
                    2726  ; EXIT BACK TO SC MONITOR
                    2727  ;------------------------       
1096: 21 EE 12      2728  EXIT   LD    HL,BYE
1099: CD 7A 11      2729         CALL  SNDMSG       
109C: C3 8E 02      2730         JP    MAIN      ;STACK IS RESET TO TOP OF RAM IN MAIN             
                    2731  ;----------------------------------------
                    2732  ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
                    2733  ;----------------------------------------
                    2734  ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
                    2735  ; ENTRY OTHER THAN HEXADECIMAL KEYS
                    2736  ;
                    2737  ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
                    2738  ;ENTRY : A= ASCII 0-9,A-F
                    2739  ;EXIT  : CARRY =  1
                    2740  ;          A= HEX 0-F IN LSN    
                    2741  ;      : CARRY = 0
                    2742  ;          A= OUT OF RANGE CHARACTER & 0x7F
                    2743  ; A AND F REGISTERS MODIFIED
                    2744  ;
109F: E6 7F         2745  ASC2HEX AND   0x7F        ;STRIP OUT PARITY
10A1: FE 30         2746         CP    0x30
10A3: 38 12         2747         JR    C,AC2HEX3    ;LESS THAN 0
10A5: FE 3A         2748         CP    0x3A
10A7: 30 02         2749         JR    NC,AC2HEX2   ;MORE THAN 9
10A9: 37            2750  AC2HEX1 SCF               ;SET THE CARRY - IS HEX
10AA: C9            2751         RET
                    2752  ;     
10AB: FE 41         2753  AC2HEX2 CP    0x41
10AD: 38 08         2754         JR    C,AC2HEX3    ;LESS THAN A
10AF: FE 47         2755         CP    0x47
10B1: 30 04         2756         JR    NC,AC2HEX3   ;MORE THAN F
10B3: D6 07         2757         SUB   0x07        ;CONVERT TO NYBBLE
10B5: 18 F2         2758         JR    AC2HEX1  
10B7: E6 FF         2759  AC2HEX3 AND   0xFF        ;RESET THE CARRY - NOT HEX
10B9: C9            2760         RET
                    2761  ;--------------------------
                    2762  ; D DISPLAY MEMORY LOCATION
                    2763  ;--------------------------
10BA: CD D8 0F      2764  DSPLAY CALL  OUTSP       ;A SPACE
10BD: CD A8 0F      2765         CALL  GETCHR
10C0: D8            2766         RET   C         
10C1: 32 B1 3F      2767         LD    (ADDR+1),A  ;SAVE ADDRESS HIGH
10C4: CD A8 0F      2768         CALL  GETCHR
10C7: D8            2769         RET   C
10C8: 32 B0 3F      2770         LD    (ADDR),A    ;SAVE ADDRESS LOW 
                    2771  ;
                    2772  ; WAIT FOR CR OR ESC
                    2773  ;
10CB: CD EB 0F      2774  DPLAY1 CALL  INCH
10CE: FE 1B         2775         CP    ESC
10D0: C8            2776         RET   Z
10D1: FE 0D         2777         CP    CR
10D3: 20 F6         2778         JR    NZ,DPLAY1          
10D5: CD DE 0F      2779         CALL  TXCRLF      ;NEWLINE
                    2780  ;
                    2781  ; DISPLAY THE LINE
                    2782  ;
10D8: CD ED 10      2783  DPLAY2 CALL  DPLINE
10DB: ED 53 B0 3F   2784         LD    (ADDR),DE   ;SAVE THE NEW ADDRESS
                    2785  ;
                    2786  ; DISPLAY MORE LINES OR EXIT
                    2787  ;       
10DF: CD EB 0F      2788  DPLAY3 CALL  INCH
10E2: 38 FB         2789         JR    C,DPLAY3   
10E4: FE 20         2790         CP    0x20        ;SPACE DISPLAYS THE NEXT LINE
10E6: 28 F0         2791         JR    Z,DPLAY2
10E8: FE 1B         2792         CP    ESC         ;ESC EXITS
10EA: 20 F3         2793         JR    NZ,DPLAY3     
10EC: C9            2794         RET   
                    2795  ;-------------------------
                    2796  ; DISPLAY A LINE OF MEMORY
                    2797  ;-------------------------      
10ED: ED 5B B0 3F   2798  DPLINE LD    DE,(ADDR)   ;ADDRESS TO BE DISPLAYED
10F1: 21 00 3E      2799         LD    HL,MSGBUF   ;HL POINTS TO WHERE THE OUTPUT STRING GOES
                    2800  ;
                    2801  ; DISPLAY THE ADDRESS
                    2802  ;         
10F4: CD 4C 11      2803         CALL  WRDASC     ;CONVERT ADDRESS IN DE TO ASCII
10F7: CD 30 11      2804         CALL  SPCBUF        
                    2805  ;
                    2806  ; DISPLAY 16 BYTES
                    2807  ;
10FA: 06 10         2808         LD    B,16
10FC: 1A            2809  DLINE1 LD    A,(DE)
10FD: CD 51 11      2810         CALL  BYTASC
1100: CD 30 11      2811         CALL  SPCBUF
1103: 13            2812         INC   DE        
1104: 10 F6         2813         DJNZ  DLINE1
1106: CD 30 11      2814         CALL  SPCBUF
                    2815  ;
                    2816  ; NOW DISPLAY THE ASCII CHARACTER
                    2817  ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
                    2818  ; BE DIFFERENT BETWEEN THE TWO PASSES!
                    2819  ;
1109: ED 5B B0 3F   2820         LD    DE,(ADDR)    
110D: 06 10         2821         LD    B,16
110F: 1A            2822  DLINE2 LD    A,(DE)   
1110: FE 20         2823         CP    0x20
1112: 38 07         2824         JR    C,DOT
1114: FE 7F         2825         CP    0x7F
1116: 30 03         2826         JR    NC,DOT
1118: C3 1D 11      2827         JP    NDOT
111B: 3E 2E         2828  DOT    LD    A,'.'
111D: CD 32 11      2829  NDOT   CALL  INBUF
1120: 13            2830         INC   DE       
1121: 10 EC         2831         DJNZ  DLINE2
                    2832  ;         
                    2833  ;TERMINATE AND DISPLAY STRING
                    2834  ;       
1123: CD 35 11      2835         CALL  BCRLF
1126: 3E 00         2836         LD    A,0x00
1128: 77            2837         LD    (HL),A
1129: 21 00 3E      2838         LD    HL,MSGBUF
112C: CD 7A 11      2839         CALL  SNDMSG
112F: C9            2840         RET
                    2841  ;
                    2842  ; PUT A SPACE IN THE BUFFER
                    2843  ;
1130: 3E 20         2844  SPCBUF LD    A,0x20
1132: 77            2845  INBUF  LD    (HL),A
1133: 23            2846         INC   HL
1134: C9            2847         RET
                    2848  ;
                    2849  ; PUT A CR LF IN THE BUFFER
                    2850  ;        
1135: 3E 0D         2851  BCRLF  LD    A,CR  
1137: CD 32 11      2852         CALL  INBUF
113A: 3E 0A         2853         LD    A,LF
113C: CD 32 11      2854         CALL  INBUF
113F: C9            2855         RET
                    2856  ;----------------------     
                    2857  ; SEND ASCII HEX VALUES        
                    2858  ;----------------------
                    2859  ;
                    2860  ; OUTPUT THE 4 BYTE, WRDOUT
                    2861  ; THE 2 BYTE, BYTOUT
                    2862  ; OR THE SINGLE BYTE, NYBOUT
                    2863  ; ASCII STRING AT HL TO THE SERIAL PORT
                    2864  ;
1140: CD 43 11      2865  WRDOUT CALL  BYTOUT
1143: CD 46 11      2866  BYTOUT CALL  NYBOUT
1146: 7E            2867  NYBOUT LD    A,(HL)
1147: CD E5 0F      2868         CALL  OUTCH
114A: 23            2869         INC   HL
114B: C9            2870         RET       
                    2871  ;----------------
                    2872  ;CONVERT TO ASCII 
                    2873  ;----------------
                    2874  ;
                    2875  ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
                    2876  ;
                    2877  ;         ENTRY :  A = BINARY TO CONVERT
                    2878  ;                  HL = CHARACTER BUFFER ADDRESS   
                    2879  ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
                    2880  ;   
                    2881  ;        MODIFIES : DE
                    2882  
114C: 7A            2883  WRDASC LD    A,D         ;CONVERT AND
114D: CD 51 11      2884         CALL  BYTASC      ;OUTPUT D
1150: 7B            2885         LD    A,E         ;THEN E
                    2886  ;
                    2887  ;CONVERT A BYTE TO ASCII 
                    2888  ;
1151: F5            2889  BYTASC PUSH  AF          ;SAVE A FOR SECOND NYBBLE 
1152: 0F            2890         RRCA              ;SHIFT HIGH NYBBLE ACROSS
1153: 0F            2891         RRCA
1154: 0F            2892         RRCA
1155: 0F            2893         RRCA
1156: CD 5A 11      2894         CALL NYBASC       ;CALL NYBBLE CONVERTER 
1159: F1            2895         POP AF            ;RESTORE LOW NYBBLE
                    2896  ;           
                    2897  ; CONVERT A NYBBLE TO ASCII
                    2898  ;
115A: E6 0F         2899  NYBASC AND   0FH         ;MASK OFF HIGH NYBBLE 
115C: C6 90         2900         ADD   A,90H       ;CONVERT TO
115E: 27            2901         DAA               ;ASCII
115F: CE 40         2902         ADC   A,40H
1161: 27            2903         DAA
                    2904  ;            
                    2905  ; SAVE IN STRING
                    2906  ;
1162: 77            2907  INSBUF LD    (HL),A
1163: 23            2908         INC   HL 
1164: C9            2909         RET 
                    2910  ;------------------------------------------------------
                    2911  ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
                    2912  ;------------------------------------------------------
                    2913  ;       
                    2914  ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
                    2915  ;                      INTO A STRING OF ASCII
                    2916  ;                      ONES AND ZEROES.
                    2917  ;
                    2918  ;           ENTRY :  A = BINARY TO CONVERT
                    2919  ;                   HL = CHARACTER BUFFER ADDRESS   
                    2920  ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
                    2921  ;   
                    2922  ;        MODIFIES : NONE
                    2923  ;
                    2924  ;
1165: C5            2925  BITASC PUSH  BC
1166: 06 08         2926         LD    B,08H       ;LOOK AT ALL 8 BITS
1168: CB 7F         2927  BTASC1 BIT   7,A         ;A 1 OR A 0?
116A: 20 05         2928         JR    NZ,BTASC3
116C: 0E 30         2929         LD    C,30H       ;IT'S A ZERO
116E: 71            2930  BTASC2 LD    (HL),C
116F: 18 03         2931         JR    BTASC4
                    2932              
1171: 0E 31         2933  BTASC3 LD    C,31H       ;IT'S A ONE
1173: 71            2934         LD    (HL),C
                    2935              
1174: 23            2936  BTASC4 INC   HL
1175: 17            2937         RLA
1176: 10 F0         2938         DJNZ  BTASC1      ;NEXT BIT
1178: C1            2939         POP   BC
1179: C9            2940         RET
                    2941  ;-----------------------------------------
                    2942  ; SEND AN ASCII STRING OUT THE SERIAL PORT
                    2943  ;-----------------------------------------
                    2944  ; 
                    2945  ; SENDS A ZERO TERMINATED STRING OR 
                    2946  ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
                    2947  ;
                    2948  ;      ENTRY : HL = POINTER TO 0x00 TERMINATED STRING
                    2949  ;      EXIT  : NONE
                    2950  ;
                    2951  ;       MODIFIES : A,B,C
                    2952  ;          
117A: 06 80         2953  SNDMSG LD    B,128         ;128 CHARS MAX
117C: 7E            2954  SDMSG1 LD    A,(HL)        ;GET THE CHAR
117D: FE 00         2955         CP    0x00          ;ZERO TERMINATOR?
117F: 28 06         2956         JR    Z,SDMSG2      ;FOUND A ZERO TERMINATOR, EXIT  
1181: CD E5 0F      2957         CALL  OUTCH         ;TRANSMIT THE CHAR
1184: 23            2958         INC   HL
1185: 10 F5         2959         DJNZ  SDMSG1        ;128 CHARS MAX!    
1187: C9            2960  SDMSG2 RET
                    2961  ;----------------------
                    2962  ; SERIAL SINGLE STEPPER
                    2963  ;----------------------
1188: E1            2964  SSSTEP POP   HL          ;GET HL BACK
1189: F5            2965         PUSH  AF          ;SAVE AF FOR LATER  
118A: 22 E8 3F      2966         LD    (HL_REG),HL
118D: ED 53 E6 3F   2967         LD    (DE_REG),DE
1191: ED 43 E4 3F   2968         LD    (BC_REG),BC
1195: DD 22 EA 3F   2969         LD    (IX_REG),IX
1199: FD 22 EC 3F   2970         LD    (IY_REG),IY ;SAVE REGISTERS
119D: E1            2971         POP   HL          ;GET AF BACK
119E: 22 E2 3F      2972         LD    (AF_REG),HL ;SAVE AF
11A1: E1            2973         POP   HL          ;GET PC RETURN ADDRESS
11A2: 22 E0 3F      2974         LD    (PC_REG),HL ;SAVE PC
11A5: ED 73 EE 3F   2975         LD    (SP_REG),SP ;SAVE STACK POINTER
                    2976  ;            
                    2977  ;DISPLAY THE REGISTERS HEADING          
                    2978  ;          
11A9: 21 61 12      2979         LD    HL,REGS
11AC: CD 7A 11      2980         CALL  SNDMSG
                    2981  ;
                    2982  ; DISPLAY THE REGISTERS
                    2983  ;            
11AF: 06 08         2984         LD	 B,08H
11B1: 21 00 3E      2985         LD    HL,MSGBUF
11B4: DD 21 E0 3F   2986         LD    IX,PC_REG
11B8: DD 7E 01      2987  SSTEP1 LD    A,(IX+1)
11BB: CD 51 11      2988         CALL  BYTASC
11BE: DD 7E 00      2989         LD    A,(IX+0)
11C1: CD 51 11      2990         CALL  BYTASC
11C4: DD 23         2991         INC   IX
11C6: DD 23         2992         INC   IX
11C8: 3E 20         2993         LD    A,' '
11CA: 77            2994         LD    (HL),A
11CB: 23            2995         INC   HL
11CC: 10 EA         2996         DJNZ  SSTEP1       
                    2997  ;
                    2998  ; DISPLAY THE FLAGS 
                    2999  ;          
11CE: 3A E2 3F      3000         LD    A,(AF_REG)  ;GET THE FLAGS AND      
11D1: CD 65 11      3001         CALL  BITASC      ;SHOW THEM AS BITS 
                    3002  
11D4: CD 35 11      3003  SZCRLF CALL  BCRLF
11D7: 3E 00         3004         LD    A,0x00
11D9: 77            3005         LD    (HL),A      ;TERMINATE THE STRING
                    3006  ;        
                    3007  ; DISPLAY THE REGISTERS
                    3008  ;        
11DA: 21 00 3E      3009         LD    HL,MSGBUF
11DD: CD 7A 11      3010         CALL  SNDMSG
                    3011  ;
                    3012  ; SPACE KEY CONTINUES
                    3013  ;
11E0: CD EB 0F      3014  SSTEP3 CALL  INCH
11E3: 38 FB         3015         JR    C,SSTEP3      
11E5: FE 20         3016         CP    0x20        ;IS IT SPACE
11E7: 28 0C         3017         JR    Z,SSTEP4
11E9: FE 1B         3018         CP    ESC         ;ESC QUITS
11EB: 20 F3         3019         JR    NZ,SSTEP3
                    3020  ;       
                    3021  ; RETURN TO MONITOR
                    3022  ; 
11ED: ED 7B AE 3F   3023         LD    SP,(ISTACK) ;RESTORE THE STACK POINTER
11F1: FB            3024         EI                ;RE-ENABLE INTERRUPTS      
11F2: C3 8C 0F      3025         JP    WARM        ;EXIT THE INTERRUPT ROUTINE
                    3026  ;
                    3027  ; RETURN TO PROGRAM
                    3028  ;
11F5: ED 7B EE 3F   3029  SSTEP4 LD    SP,(SP_REG) ;PUT STACK POINTER BACK
11F9: 2A E0 3F      3030         LD    HL,(PC_REG) ;PUT RETURN
11FC: E5            3031         PUSH  HL          ;ADDRESS BACK ON STACK
11FD: 2A E2 3F      3032         LD    HL,(AF_REG)
1200: E5            3033         PUSH  HL          ;SAVE AF REG FOR LATER
1201: FD 2A EC 3F   3034         LD    IY,(IY_REG)
1205: DD 2A EA 3F   3035         LD    IX,(IX_REG)
1209: ED 4B E4 3F   3036         LD    BC,(BC_REG)
120D: ED 5B E6 3F   3037         LD    DE,(DE_REG) ;RESTORE REGISTERS
1211: F1            3038         POP   AF          ;RESTORE AF
1212: 2A E8 3F      3039         LD    HL,(HL_REG) ;RESTORE HL
1215: FB            3040         EI                ;RE-ENABLE INTERRUPTS
1216: C9            3041         RET               ;AND RETURN TO PROGRAM  
                    3042  ;
                    3043  ; STRING CONSTANTS
                    3044  ;
1217: 0D 0A 00      3045  CRLF        .DB     CR,LF,0x00
121A: 53 43 4D 20   3046  SIGNON      .DB     "SCM 1.5 SERIAL MONITOR",CR,LF,"ACCEPTS ONLY UPPER CASE - H FOR COMMAND LIST",CR,LF,0x00
121E: 31 2E ...     3046  
1261: 0D 0A 50 43   3047  REGS        .DB     CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0x00
1265: 20 20 ...     3047  
1296: 0D 0A 53 49   3048  TOGGLE      .DB     CR,LF,"SINGLE STEP TOGGLE",CR,LF,0x00
129A: 4E 47 ...     3048  
12AD: 0D 0A 53 45   3049  TXFILE      .DB     CR,LF,"SEND INTEL HEX FILE...",0x00
12B1: 4E 44 ...     3049  
12C6: 0D 0A 46 49   3050  FILEOK      .DB     CR,LF,"FILE RECEIVED OK",CR,LF,0x00
12CA: 4C 45 ...     3050  
12DB: 0D 0A 43 48   3051  CSUMERR     .DB     CR,LF,"CHECKSUM ERROR",CR,LF,0x00
12DF: 45 43 ...     3051  
12EE: 0D 0A 42 59   3052  BYE         .DB     CR,LF,"BYE...",CR,LF,0x00
12F2: 45 2E ...     3052  
                    3053  
12F9: 0D 0A 44 20   3054  COMANDS     .DB     CR,LF,"D AAAA    DISPLAY DATA AT ADDRESS AAAA"
12FD: 41 41 ...     3054  
1321: 0D 0A 54 20   3055              .DB     CR,LF,"T         TOGGLE SINGLE STEPPER"           
1325: 20 20 ...     3055  
1342: 0D 0A 4D 20   3056              .DB     CR,LF,"M AAAA    MODIFY ADDRESS AAAA",0x00
1346: 41 41 ...     3056  
                    3057              
1362: 0D 0A 47 20   3058  COMANDS1    .DB     CR,LF,"G AAAA    GO FROM AAAA"     
1366: 41 41 ...     3058  
137A: 0D 0A 49 20   3059              .DB     CR,LF,"I         DOWNLOAD INTEL HEX"
137E: 20 20 ...     3059  
1398: 0D 0A 58 20   3060              .DB     CR,LF,"X         EXIT"
139C: 20 20 ...     3060  
13A8: 0D 0A 48 20   3061              .DB     CR,LF,"H         THIS HELP MESSAGE",CR,LF,0x00
13AC: 20 20 ...     3061  
                    3062  ;
                    3063  ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
                    3064  ;
13C8: 1B 5B 48 1B   3065  INITSZ      .DB     27,"[H",27,"[2J",0x00
13CC: 5B 32 4A 00   3065  
                    3066  	   END
 
