0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ; 
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;     
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES  
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ;
0028   0000             ;THE TARGET IS THE TEC-1F ELSE SC
0029   0000             #DEFINE TEC-1F
0030   0000             ; USE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0031   0000             #DEFINE 74C923
0032   0000             ;
0033   0000             ; I/O PORT ADDRESSES
0034   0000             ;
0035   0000             #IFDEF TEC-1F
0036   0000             KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0037   0000             SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0038   0000             DISPLY	.EQU	02H	;DISPLAY LATCH
0039   0000             PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0040   0000             PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0041   0000             PORT5	.EQU	05H
0042   0000             PORT6	.EQU	06H
0043   0000             PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0044   0000~            #ELSE
0045   0000~            IO0	.EQU	80H	;IO PORT 0
0046   0000~            IO1	.EQU	81H	;IO PORT 1
0047   0000~            IO2	.EQU	82H	;IO PORT 2
0048   0000~            IO3	.EQU	83H	;IO PORT 3
0049   0000~            DISPLY	.EQU	84H	;DISPLAY LATCH
0050   0000~            SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0051   0000~            KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0052   0000~            IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0053   0000             #ENDIF
0054   0000             ;
0055   0000             ; BAUD RATE CONSTANTS
0056   0000             ;
0057   0000             B300	.EQU	0220H	;300 BAUD
0058   0000             B1200	.EQU	0080H	;1200 BAUD
0059   0000             B2400	.EQU	003FH	;2400 BAUD
0060   0000             B4800	.EQU	001BH	;4800 BAUD
0061   0000             B9600	.EQU	000BH	;9600 BAUD
0062   0000             ;
0063   0000             ;---------------
0064   0000             ; RAM MEMORY MAP
0065   0000             ;---------------
0066   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0067   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0068   0000             ;
0069   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0070   0000             BUFFER	.EQU	TOPRAM-01FFH	;GENERAL PURPOSE BUFFER AREA
0071   0000             ISTACK	.EQU	BUFFER	;INITIAL MONITOR STACK
0072   0000             
0073   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0074   0000             RAMEND	.EQU	TOPRAM-0400H	;END OF USER RAM
0075   0000             
0076   0000             ;-------------------------
0077   0000             ; MONITOR GLOBAL VARIABLES
0078   0000             ;-------------------------
0079   0000             ;
0080   3F00             	.ORG	VARBLS
0081   3F00             ;
0082   3F00             ;SERIAL MONITOR VARIABLES
0083   3F00             ;
0084   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0085   3F10             PUTCH	.BLOCK	2	;OUTPUT A CHARACTER TO SERIAL
0086   3F12             GETCH	.BLOCK	2	;WAIT FOR A CHARACTER FROM SERIAL
0087   3F14             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0088   3F16             ADDR	.BLOCK	2	;THE ADDRESS
0089   3F18             DATA	.BLOCK	1	;THE DATA
0090   3F19             ;
0091   3F19             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0092   3F1B             ;
0093   3F1B             ; DALLAS SMARTWATCH REGISTERS
0094   3F1B             ;
0095   3F1B             CALMDE	.BLOCK	2	;CALENDAR MODE
0096   3F1D             SWREG0	.BLOCK	1	;10THS, 100THS
0097   3F1E             SWREG1	.BLOCK	1	;SECONDS
0098   3F1F             SWREG2	.BLOCK	1	;MINUTES
0099   3F20             SWREG3	.BLOCK	1	;HOURS
0100   3F21             SWREG4	.BLOCK	1	;DAY
0101   3F22             SWREG5	.BLOCK	1	;DATE
0102   3F23             SWREG6	.BLOCK	1	;MONTH
0103   3F24             SWREG7	.BLOCK	1	;YEAR
0104   3F25             ;
0105   3F25             BAUD	.BLOCK	2	;BAUD RATE
0106   3F27             KEYTIM	.BLOCK	2	;BEEP DELAY
0107   3F29             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0108   3F2B             ;
0109   3F2B             ; BLOCK FUNCTIONS
0110   3F2B             ;
0111   3F2B             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0112   3F2D             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0113   3F2F             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0114   3F31             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0115   3F33             ;
0116   3F33             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0117   3F35             ;
0118   3F35             ; DISPLAY SCAN REGISTERS
0119   3F35             ;
0120   3F35             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0121   3F3B             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0122   3F3C             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0123   3F3D             ;
0124   3F3D             ; MONITOR VARIABLES
0125   3F3D             ;
0126   3F3D             MODE	.BLOCK	2	;DISPLAY MODE
0127   3F3F             ADRESS	.BLOCK	2	;USER ADDRESS
0128   3F41             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0129   3F43             ;
0130   3F43             ; TEMPORARY REGISTER STORAGE
0131   3F43             ;
0132   3F43             REGPNT	.BLOCK	2	;REGISTER POINTER
0133   3F45             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0134   3F47             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0135   3F49             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0136   3F4B             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0137   3F4D             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0138   3F4F             TMPIX	.BLOCK	2	;INDEX REGISTER X
0139   3F51             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0140   3F53             TMPSP	.BLOCK	2	;STACK POINTER
0141   3F55             ;
0142   3F55             ; RESTART JUMP TABLE AND HARWARE TEST
0143   3F55             ;
0144   3F55             RST08	.BLOCK	2	;RESTART 08H JUMP
0145   3F57             RST10	.BLOCK	2	;RESTART 10H JUMP
0146   3F59             RST18	.BLOCK	2	;RESTART 18H JUMP
0147   3F5B             RST20	.BLOCK	2	;RESTART 20H JUMP
0148   3F5D             RST28	.BLOCK	2	;RESTART 28H JUMP
0149   3F5F             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0150   3F61             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0151   3F63             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0152   3F64             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0153   3F65             ;----------------
0154   3F65             ; RESTART VECTORS
0155   3F65             ;----------------
0156   3F65             ;
0157   3F65             ;  RESTART 00H - RST 0
0158   3F65             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0159   3F65             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0160   3F65             ;
0161   0000             	.ORG	0000H
0162   0000 C3 00 02    RSTVEC	JP	RESET
0163   0003             ;
0164   0003             ; RESTART 08H - RST 1
0165   0003             ;
0166   0008             	.ORG	0008H
0167   0008 E5          	PUSH	HL
0168   0009 2A 55 3F    	LD	HL,(RST08)
0169   000C E9          	JP	(HL)
0170   000D             ;
0171   000D             ; RESTART 10H - RST 2
0172   000D             ;
0173   0010             	.ORG	0010H
0174   0010 E5          	PUSH	HL
0175   0011 2A 57 3F    	LD	HL,(RST10)
0176   0014 E9          	JP	(HL)
0177   0015             ;
0178   0015             ; RESTART 18H - RST 3
0179   0015             ;
0180   0018             	.ORG	0018H
0181   0018 E5          	PUSH	HL
0182   0019 2A 59 3F    	LD	HL,(RST18)
0183   001C E9          	JP	(HL)
0184   001D             ;
0185   001D             ; RESTART 20H - RST 4
0186   001D             ;
0187   0020             	.ORG	0020H
0188   0020 E5          	PUSH	HL
0189   0021 2A 5B 3F    	LD	HL,(RST20)
0190   0024 E9          	JP	(HL)
0191   0025             ;
0192   0025             ; RESTART 28H - RST 5
0193   0025             ;
0194   0028             	.ORG	0028H
0195   0028 E5          	PUSH	HL
0196   0029 2A 5D 3F    	LD	HL,(RST28)
0197   002C E9          	JP	(HL)
0198   002D             ;
0199   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0200   002D             ;
0201   0030             	.ORG	0030H
0202   0030 C3 68 00    RST30	JP	SYSCALL
0203   0033             ;
0204   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0205   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0206   0033             ;INT OCCURS- FURTHER INTERRUPTS
0207   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0208   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0209   0033             ;STARTS HERE
0210   0033             ;
0211   0038             	.ORG	0038H
0212   0038 E5          	PUSH	HL
0213   0039 2A 5F 3F    	LD	HL,(RST38)
0214   003C E9          	JP	(HL)
0215   003D             ;
0216   003D             ; RESTART 66H NMI VECTOR
0217   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0218   003D             ;
0219   0066             	.ORG	0066H
0220   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0221   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0222   0066             #IFDEF TEC-1F
0223   0066 ED 4D           RETI
0224   0068~            #ELSE
0225   0068~            	PUSH	HL
0226   0068~            	LD	HL,(RST66)
0227   0068~            	JP	(HL)
0228   0068             #ENDIF
0229   0068             ;--------------------
0230   0068             ; SYSTEM CALL HANDLER
0231   0068             ;--------------------
0232   0068             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0233   0068             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0234   0068             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0235   0068             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0236   0068             ;CHANGE IN SUBSEQUENT MONITORS
0237   0068             ;
0238   0068             ;ENTRY : C = CALL NUMBER
0239   0068             ;SEE ROUTINES FOR ENTRY AND EXIT
0240   0068             ;PARAMETERS
0241   0068             ;
0242   0068 3B          SYSCALL	DEC	SP
0243   0069 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0244   006A ED 73 29 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0245   006E F5          	PUSH	AF
0246   006F D5          	PUSH	DE
0247   0070 E5          	PUSH	HL	;SAVE REGISTERS
0248   0071 79          	LD	A,C	;GET CALL NUMBER
0249   0072 E6 7F       	AND	127	;ENSURE IN LIMITS
0250   0074 CB 27       	SLA	A	;MULTIPLY BY TWO
0251   0076 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0252   0078 6F          	LD	L,A	;LOAD INDEX
0253   0079 7E          	LD	A,(HL)
0254   007A 23          	INC	HL
0255   007B 56          	LD	D,(HL)	;GET JUMP ADDRESS
0256   007C 2A 29 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0257   007F 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0258   0080 23          	INC	HL
0259   0081 7A          	LD	A,D
0260   0082 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0261   0083 E1          	POP	HL
0262   0084 D1          	POP	DE
0263   0085 F1          	POP	AF	;RESTORE REGISTERS
0264   0086 C9          	RET		;JUMPS TO SYSTEM CALL
0265   0087             ;-----------------------
0266   0087             ; SYSTEM CALL JUMP TABLE
0267   0087             ;-----------------------
0268   0100             	.ORG	0100H
0269   0100 74 02 8E 03 SYSJMP	.DW	MAIN,VERS
0270   0104 A2 03 B7 03 	.DW	DISADD,DISBYT,CLRBUF,SCAND
0270   0108 1B 04 F0 03 
0271   010C C0 03 CD 03 	.DW	CONBYT,CONVHI,CONVLO
0271   0110 D1 03 
0272   0112 3F 04 4C 04 	.DW	SKEYIN,SKEYRL,KEYIN,KEYREL
0272   0116 59 04 63 04 
0273   011A 6D 04 90 04 	.DW	MENU,CHKSUM
0274   011E C8 04 B0 04 	.DW	MUL16,RAND
0275   0122 A0 04 A7 04 	.DW	INDEXB,INDEXW
0276   0126 DF 04 5C 05 	.DW	MUSIC,TONE,BEEP
0276   012A 7C 05 
0277   012C 6F 0C       	.DW	SKATE
0278   012E DE 07 09 08 	.DW	TXDATA,RXDATA,ASCHEX
0278   0132 D5 07 
0279   0134 88 0E FE 0D 	.DW	WWATCH,RWATCH,ONESEC
0279   0138 E8 0E 
0280   013A 9D 0B CB 0B 	.DW	RLSTEP,DELONE
0281   013E 2A 04 4D 07 	.DW	SCANKEY,INTELH
0282   0142 75 0B       	.DW	SPLIT
0283   0144 55 12 40 12 	.DW	SNDMSG,BITASC
0284   0148 27 12 2C 12 	.DW	WRDASC,BYTASC,NYBASC
0284   014C 35 12 
0285   014E 92 03 F6 12 	.DW	TYPE,PRNTSZ
0286   0152             ;------------------------------
0287   0152             ; POWER UP RESET / MANUAL RESET
0288   0152             ;------------------------------
0289   0200             	.ORG	0200H
0290   0200             ;
0291   0200             ; WAIT FOR SMART SOCKET
0292   0200             ; TO RECOVER FROM POWER DOWN
0293   0200             ;
0294   0200 3E 55       RESET	LD	A,55H
0295   0202 32 64 3F    	LD	(DALLAS),A	;WRITE TO RAM
0296   0205 AF          	XOR	A
0297   0206 D3 02       	OUT	(DISPLY),A	;WRITE NOTHING TO
0298   0208 D3 01       	OUT	(SCAN),A	;ON BOARD I/O
0299   020A DB 00       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0300   020C 3A 64 3F    	LD	A,(DALLAS)	;READ FROM RAM
0301   020F FE 55       	CP	55H	;IS IT READY?
0302   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0303   0214             ;
0304   0214             ; LOAD STACK POINTER
0305   0214             ;
0306   0214 31 00 3E    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0307   0217             ;
0308   0217             ; SET UP RESTART VECTORS
0309   0217             ;
0310   0217 21 14 02    	LD	HL,RESET1
0311   021A 22 55 3F    	LD	(RST08),HL
0312   021D 22 57 3F    	LD	(RST10),HL
0313   0220 22 59 3F    	LD	(RST18),HL
0314   0223 22 5B 3F    	LD	(RST20),HL
0315   0226 22 5D 3F    	LD	(RST28),HL
0316   0229 22 61 3F    	LD	(RST66),HL	;NMI INTERRUPT
0317   022C 21 A6 05    	LD	HL,SSTEP
0318   022F 22 5F 3F    	LD	(RST38),HL	;SINGLE STEPPER
0319   0232             ;
0320   0232             ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0321   0232             ;
0322   0232 ED 56       	IM	1
0323   0234 FB          	EI		;ENABLE INTERRUPTS
0324   0235             ;
0325   0235             ; PERFORM CHECKSUM ON USER RAM
0326   0235             ;
0327   0235 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0328   0238 11 FF 3B    	LD	DE,RAMEND	;END OF USER RAM
0329   023B CD 90 04    	CALL	CHKSUM
0330   023E 32 63 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0331   0241             ;
0332   0241             ; SET UP DEFAULT VARIABLES
0333   0241             ;
0334   0241 21 FB 06    	LD	HL,FUNLST
0335   0244 22 19 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0336   0247             ;
0337   0247             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0338   0247             ;
0339   0247 21 FE 0E    	LD	HL,SCBUG	;JUMP TO SERIAL MONITOR
0340   024A 22 33 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0341   024D 3E 00       	LD	A,00H
0342   024F 32 43 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0343   0252 21 1B 00    	LD	HL,B4800
0344   0255 22 25 3F    	LD	(BAUD),HL	;DEFAULT SERIAL=4800 BAUD
0345   0258 21 00 01    	LD	HL,0100H
0346   025B 22 41 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0347   025E 21 00 10    	LD	HL,1000H
0348   0261 22 27 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0349   0264             #IFDEF 74C923
0350   0264 3E 20       	LD	A,20H
0351   0266~            #ELSE
0352   0266~            	LD	A,08H
0353   0266             #ENDIF
0354   0266 32 3C 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0355   0269 CD 7C 05    	CALL	BEEP
0356   026C CD 7C 05    	CALL	BEEP
0357   026F             #IFDEF 74C923
0358   026F 3E 08       	LD	A,08H
0359   0271~            #ELSE
0360   0271~            	LD	A,10H
0361   0271             #ENDIF
0362   0271 32 3B 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0363   0274             ;-----------------
0364   0274             ; SET UP MAIN LOOP
0365   0274             ;-----------------
0366   0274 31 00 3E    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0367   0277 21 00 20    	LD	HL,RAMSRT
0368   027A 22 3F 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0369   027D 3A 3D 3F    	LD	A,(MODE)
0370   0280 F6 80       	OR	80H	;START OFF IN DATA MODE
0371   0282 32 3D 3F    	LD	(MODE),A
0372   0285             ;
0373   0285             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0374   0285             ;
0375   0285 CD 69 03    MAIN1	CALL	UPDATE
0376   0288 CD 3F 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0377   028B 21 9A 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0378   028E CD 6D 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0379   0291 CD 69 03    	CALL	UPDATE	;UPDATE BUFFER AND
0380   0294 CD 4C 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0381   0297 C3 88 02    	JP	MAIN2
0382   029A             ;
0383   029A             ; MAIN MENU KEY TABLE
0384   029A             ;
0385   029A 14          MENLST	.DB	20
0386   029B 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0386   029F 04 05 06 07 
0387   02A3 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0387   02A7 0C 0D 0E 0F 
0388   02AB 10 11 12 13 	.DB	10H,11H,12H,13H
0389   02AF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0389   02B3 D7 02 D7 02 
0390   02B7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0390   02BB D7 02 D7 02 
0391   02BF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0391   02C3 D7 02 D7 02 
0392   02C7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0392   02CB D7 02 D7 02 
0393   02CF             #IFDEF TEC-1F
0394   02CF 15 03 3F 03 	.DW	INCKEY,DECKEY,FUNKEY,ADDKEY	;TEC KEYS    +  -  GO  AD
0394   02D3 CF 06 09 03 
0395   02D7~            #ELSE
0396   02D7~            	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0397   02D7             #ENDIF
0398   02D7             ;---------------------------------------------------
0399   02D7             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0400   02D7             ;---------------------------------------------------
0401   02D7 CD 7C 05    HEXKEY	CALL	BEEP
0402   02DA 21 3D 3F    	LD	HL,MODE
0403   02DD CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0404   02DF CA F0 02    	JP	Z,HEXKY2	;IN ADDR MODE
0405   02E2             ;
0406   02E2             ; IN DATA MODE
0407   02E2             ;
0408   02E2 2A 3F 3F    HEXKY1	LD	HL,(ADRESS)
0409   02E5 CB 26       	SLA	(HL)	;FROM THE CURRENT
0410   02E7 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0411   02E9 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0412   02EB CB 26       	SLA	(HL)	;PUT THE KEY IN
0413   02ED B6          	OR	(HL)	;THE NEW DATA BACK AT
0414   02EE 77          	LD	(HL),A	;THE CURRENT ADDRESS
0415   02EF C9          	RET
0416   02F0             ;
0417   02F0             ; IN ADDRESS MODE
0418   02F0             ;
0419   02F0 2A 3F 3F    HEXKY2	LD	HL,(ADRESS)
0420   02F3 CB 25       	SLA	L	;CURRENT ADDRESS
0421   02F5 CB 14       	RL	H	;AND DO A 16 BIT
0422   02F7 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0423   02F9 CB 14       	RL	H	;TO MAKE  ROOM
0424   02FB CB 25       	SLA	L	;FOR THE NEW KEY
0425   02FD CB 14       	RL	H
0426   02FF CB 25       	SLA	L
0427   0301 CB 14       	RL	H
0428   0303 B5          	OR	L	;IT IN THE LEAST
0429   0304 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0430   0305 22 3F 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0431   0308 C9          	RET
0432   0309             ;-------------
0433   0309             ; CHANGE MODES
0434   0309             ;-------------
0435   0309 CD 7C 05    ADDKEY	CALL	BEEP
0436   030C 3A 3D 3F    	LD	A,(MODE)
0437   030F EE 80       	XOR	80H	;TOGGLE MODE
0438   0311 32 3D 3F    	LD	(MODE),A
0439   0314 C9          	RET
0440   0315             ;------------------
0441   0315             ; INCREMENT ADDRESS
0442   0315             ;------------------
0443   0315 CD 7C 05    INCKEY	CALL	BEEP
0444   0318 2A 3F 3F    INCKY1	LD	HL,(ADRESS)
0445   031B 23          	INC	HL	;INC ADDRESS
0446   031C 22 3F 3F    	LD	(ADRESS),HL
0447   031F CD 69 03    	CALL	UPDATE
0448   0322 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0449   0325 CD F0 03    INCKY2	CALL	SCAND
0450   0328 CD 2A 04    	CALL	SCANKEY
0451   032B CB 6F       	BIT	5,A	;RETURN IF
0452   032D 28 0F       	JR	Z,INCKY3	; KEY RELEASED
0453   032F             #IFDEF	TEC-1F
0454   032F FE 30       	CP	30H	;TEC-1F '+'
0455   0331~            #ELSE
0456   0331~            	CP	32H	;SC '+'
0457   0331             #ENDIF
0458   0331 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0459   0333 11 01 00    	LD	DE,0001H
0460   0336 ED 52       	SBC	HL,DE
0461   0338 D2 25 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0462   033B C3 18 03    	JP	INCKY1	;INC ADDRESS
0463   033E C9          INCKY3	RET
0464   033F             ;------------------
0465   033F             ; DECREMENT ADDRESS
0466   033F             ;------------------
0467   033F CD 7C 05    DECKEY	CALL	BEEP
0468   0342 2A 3F 3F    DECKY1	LD	HL,(ADRESS)
0469   0345 2B          	DEC	HL	;DEC ADDRESS
0470   0346 22 3F 3F    	LD	(ADRESS),HL
0471   0349 CD 69 03    	CALL	UPDATE
0472   034C 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0473   034F CD F0 03    DECKY2	CALL	SCAND
0474   0352 CD 2A 04    	CALL	SCANKEY
0475   0355 CB 6F       	BIT	5,A	;RETURN IF
0476   0357 28 0F       	JR	Z,DECKY3	;KEY RELEASED
0477   0359             #IFDEF  TEC-1F
0478   0359 FE 31       	CP	31H	;TEC-1F '-'
0479   035B~            #ELSE
0480   035B~            	CP	33H	;SC '-'
0481   035B             #ENDIF
0482   035B 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0483   035D 11 01 00    	LD	DE,0001H
0484   0360 ED 52       	SBC	HL,DE
0485   0362 D2 4F 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0486   0365 C3 42 03    	JP	DECKY1	;INC ADDRESS 
0487   0368 C9          DECKY3	RET
0488   0369             ;-----------------------------------------
0489   0369             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0490   0369             ;-----------------------------------------
0491   0369 2A 3F 3F    UPDATE	LD	HL,(ADRESS)
0492   036C CD A2 03    	CALL	DISADD	;AND DATA, PUT IN
0493   036F 7E          	LD	A,(HL)
0494   0370 CD B7 03    	CALL	DISBYT	;DISPLAY BUFFER
0495   0373             ;
0496   0373             ; IN ADDRESS OR DATA MODE?
0497   0373             ;
0498   0373 21 3D 3F    	LD	HL,MODE
0499   0376 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0500   0378 CA 83 03    	JP	Z,ADMODE	;ADDRESS MODE
0501   037B             ;
0502   037B             ; SHOW DATA MODE
0503   037B             ;
0504   037B 21 35 3F    	LD	HL,DISBUF	;SET THE DP'S
0505   037E 06 02       	LD	B,2	;IN THE DATA
0506   0380 C3 88 03    	JP	SETDP	;DISPLAY
0507   0383             ;
0508   0383             ; SHOW ADDRESS MODE
0509   0383             ;
0510   0383 21 37 3F    ADMODE	LD	HL,DISBUF+2
0511   0386 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0512   0388             ;
0513   0388             ; SET DECIMAL POINT
0514   0388             ;
0515   0388             ;SET DP IN THE BYTE POINTED TO BY HL
0516   0388             ;
0517   0388             #IFDEF TEC-1F
0518   0388 CB E6       SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0519   038A~            #ELSE
0520   038A~            SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0521   038A             #ENDIF
0522   038A 23          	INC	HL	;POINT TO NEXT BYTE
0523   038B 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0524   038D C9          	RET
0525   038E             ;---------------
0526   038E             ; VERSION NUMBER
0527   038E             ;---------------
0528   038E             ;RETURNS THE SOFTWARE VERSION NUMBER
0529   038E             ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
0530   038E             ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
0531   038E             ;
0532   038E             ;	ENTRY : NONE
0533   038E             ; EXIT : HL = VERSION NUMBER STRING
0534   038E             ;
0535   038E 21 9D 03    VERS	LD	HL,VERSSZ
0536   0391 C9          	RET
0537   0392             ;-----------
0538   0392             ; BOARD TYPE
0539   0392             ;-----------
0540   0392             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0541   0392             ; ENTRY = NONE
0542   0392             ; EXIT: HL= 'SC-1'
0543   0392             ;          'TEC-1F'
0544   0392 21 96 03    TYPE	LD	HL,TYPESZ
0545   0395 C9          	RET
0546   0396             
0547   0396             #IFDEF TEC-1F
0548   0396 54 45 43 2D TYPESZ	.DB	"TEC-1F",0
0548   039A 31 46 00 
0549   039D~            #ELSE
0550   039D~            TYPESZ	.DB	"SC-1",0
0551   039D             #ENDIF
0552   039D 20 31 2E 37 VERSSZ	.DB	" 1.7",0
0552   03A1 00 
0553   03A2             ;-------------------------
0554   03A2             ; ADDRESS > DISPLAY BUFFER
0555   03A2             ;-------------------------
0556   03A2             ;CONVERT HL TO SEVEN SEGMENT CODE
0557   03A2             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0558   03A2             ;
0559   03A2             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0560   03A2             ;
0561   03A2             ; EXIT  : NO REGISTERS MODIFIED
0562   03A2             ;
0563   03A2 F5          DISADD	PUSH	AF
0564   03A3 E5          	PUSH	HL
0565   03A4 E5          	PUSH	 HL
0566   03A5 7C          	LD	A,H
0567   03A6 CD C0 03    	CALL	CONBYT
0568   03A9 22 39 3F    	LD	(DISBUF+4),HL
0569   03AC E1          	POP	HL
0570   03AD 7D          	LD	A,L
0571   03AE CD C0 03    	CALL	CONBYT
0572   03B1 22 37 3F    	LD	(DISBUF+2),HL
0573   03B4 E1          	POP	HL
0574   03B5 F1          	POP	AF
0575   03B6 C9          	RET
0576   03B7             ;---------------------------
0577   03B7             ; DATA BYTE > DISPLAY BUFFER
0578   03B7             ;---------------------------
0579   03B7             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0580   03B7             ;AND PUT IN DATA DISPLAY BUFFER.
0581   03B7             ;
0582   03B7             ; ENTRY :  A = DATA DISPLAY BYTE
0583   03B7             ;
0584   03B7             ; EXIT  : NO REGISTERS MODIFIED
0585   03B7             ;
0586   03B7 E5          DISBYT	PUSH	HL
0587   03B8 CD C0 03    	CALL	CONBYT
0588   03BB 22 35 3F    	LD	(DISBUF),HL
0589   03BE E1          	POP	HL
0590   03BF C9          	RET
0591   03C0             ;---------------------------------------
0592   03C0             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0593   03C0             ;---------------------------------------
0594   03C0             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0595   03C0             ; FOR DISPLAY
0596   03C0             ; ENTRY : A = BYTE TO BE CONVERTED
0597   03C0             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0598   03C0             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0599   03C0             ;         A = NOT MODIFIED
0600   03C0 F5          CONBYT	PUSH	AF
0601   03C1 F5          	PUSH	AF
0602   03C2 CD CD 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0603   03C5 67          	LD	H,A
0604   03C6 F1          	POP	AF
0605   03C7 CD D1 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0606   03CA 6F          	LD	L,A
0607   03CB F1          	POP	AF
0608   03CC C9          	RET
0609   03CD             ;---------------------------------------------
0610   03CD             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0611   03CD             ;---------------------------------------------
0612   03CD             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0613   03CD             ; FOR SEVEN SEGMENT DISPLAYS
0614   03CD             ; CONVHI = CONVERTS HIGH NYBBLE
0615   03CD             ; CONVLO = CONVERTS LO NYBBLE
0616   03CD             ;
0617   03CD             ; ENTRY : A = NYBBLE TO BE CONVERTED
0618   03CD             ; EXIT  : A = SEVEN SEGMENT CODE
0619   03CD             ;
0620   03CD 07          CONVHI	RLCA
0621   03CE 07          	RLCA
0622   03CF 07          	RLCA	;MOVE TO LO NYBBLE
0623   03D0 07          	RLCA	;FOR CONVERSION
0624   03D1 C5          CONVLO	PUSH	BC
0625   03D2 E5          	PUSH	HL
0626   03D3 21 E0 03    	LD	HL,SEGMNT	;USE THE HEX VALUE
0627   03D6 E6 0F       	AND	0FH	;TO INDEX TO THE
0628   03D8 4F          	LD	C,A	;THE SEVEN SEGMENT
0629   03D9 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0630   03DB 09          	ADD	HL,BC	;AND RETURN WITH
0631   03DC 7E          	LD	A,(HL)	;CODE IN A
0632   03DD E1          	POP	HL
0633   03DE C1          	POP	BC
0634   03DF C9          	RET
0635   03E0             ;
0636   03E0             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0637   03E0             ;
0638   03E0             #IFDEF TEC-1F
0639   03E0 EB 28 CD AD SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0640   03E4 2E A7 E7 29 	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0641   03E8 EF 2F 6F E6 	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0642   03EC C3 EC C7 47 	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0643   03F0~            #ELSE
0644   03F0~            SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0645   03F0~            	.DB	66H,6DH,7DH,07H	;4,5,6,7
0646   03F0~            	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0647   03F0~            	.DB	39H,5EH,79H,71H	;C,D,E,F
0648   03F0             #ENDIF
0649   03F0             ;-------------
0650   03F0             ; SCAN DISPLAY
0651   03F0             ;-------------
0652   03F0             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0653   03F0             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0654   03F0             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0655   03F0             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0656   03F0             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0657   03F0             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0658   03F0             ;
0659   03F0             ; ENTRY : NONE
0660   03F0             ; EXIT  : NO REGISTERS MODIFIED
0661   03F0             ;
0662   03F0 F5          SCAND   PUSH    AF
0663   03F1 C5          	PUSH	BC
0664   03F2 E5          	PUSH	HL	;SAVE REGISTERS
0665   03F3 21 3A 3F    	LD	HL,DISBUF+5
0666   03F6 0E 20       	LD	C,20H
0667   03F8 7E          SCAND1	LD	A,(HL)
0668   03F9 D3 02       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0669   03FB 79          	LD	A,C
0670   03FC D3 01       	OUT	(SCAN),A	;TURN ON DISPLAY
0671   03FE 3A 3B 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0672   0401 47          	LD	B,A	;TO ADJUST ON TIME
0673   0402 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0674   0404 78          	LD	A,B	;B IS NOW CLEAR, USE
0675   0405 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0676   0407 3A 3C 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0677   040A 47          	LD	B,A	;TO ADJUST OFF TIME
0678   040B 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0679   040D 2B          	DEC	HL	;POINT TO NEXT
0680   040E CB 09       	RRC	C	;ELEMENT IN BUFFER
0681   0410 30 E6       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0682   0412 78          	LD	A,B	;B IS NOW CLEAR, USE
0683   0413 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0684   0415 D3 02       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0685   0417 E1          	POP	HL
0686   0418 C1          	POP	BC
0687   0419 F1          	POP	AF	;RESTORE REGISTERS
0688   041A C9          	RET
0689   041B             ;---------------------
0690   041B             ; CLEAR DISPLAY BUFFER
0691   041B             ;---------------------
0692   041B E5          CLRBUF	PUSH	HL
0693   041C C5          	PUSH	BC
0694   041D 21 35 3F    	LD	HL,DISBUF
0695   0420 06 06       	LD	B,6
0696   0422 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0697   0424 23          	INC	HL	;LOCATIONS POINTED
0698   0425 10 FB       	DJNZ	CLRBF1	;TO BY HL
0699   0427 C1          	POP	BC
0700   0428 E1          	POP	HL
0701   0429 C9          	RET
0702   042A             ;--------------
0703   042A             ; SCAN KEYBOARD
0704   042A             ;--------------
0705   042A             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0706   042A             ; AND KEYBOARD BUFFER AS ROWS.
0707   042A             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0708   042A             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0709   042A             ;
0710   042A             ; ENTRY : NONE
0711   042A             ; EXIT  : A = 00H IF NO KEY DETECTED
0712   042A             ;         A = DETECTED KEY WITH BIT 5 SET
0713   042A             ;             BIT 5 = KEY AVAILABLE
0714   042A C5          SCANKEY	PUSH	BC
0715   042B D5          	PUSH	DE	;SAVE REGISTERS
0716   042C E5          	PUSH	HL
0717   042D             ;USE THE KEYBOARD ENCODER
0718   042D             #IFDEF 74C923
0719   042D             #IFDEF TEC-1F
0720   042D DB 00       	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0721   042F E6 5F       	AND	5FH	;STRIP UNUSED BITS
0722   0431 CB 77       	BIT	6,A	;DA LOW?
0723   0433 28 04       	JR	Z,SCANKY1
0724   0435 3E 00       	LD	A,00H
0725   0437 18 02       	JR	SCANKY2
0726   0439 CB EF       SCANKY1	SET	5,A	;SET DATA AVAILABLE FLAG 
0727   043B E1          SCANKY2	POP	HL
0728   043C D1          	POP	DE
0729   043D C1          	POP	BC
0730   043E C9          	RET
0731   043F~            #ELSE
0732   043F~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0733   043F~            	AND	3FH	;STRIP UNUSED BITS
0734   043F~            	POP	HL
0735   043F~            	POP	DE
0736   043F~            	POP	BC
0737   043F~            	RET
0738   043F             #ENDIF
0739   043F             
0740   043F~            #ELSE
0741   043F~            ;
0742   043F~            ; SOFTWARE SCAN KEYBOARD
0743   043F~            ;
0744   043F~            SCANKY1	LD	A,00H
0745   043F~            	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0746   043F~            	LD	B,A		;KEY
0747   043F~            	LD	D,A		;COUNT
0748   043F~            	LD	E,01H	;MASK
0749   043F~            SCANKY2	LD	C,08H	;SCAN
0750   043F~            SCANKY3	LD	A,C
0751   043F~            	OUT	(SCAN),A	;OUTPUT SCAN
0752   043F~            	NOP
0753   043F~            	NOP
0754   043F~            	NOP
0755   043F~            	IN	A,(KEYBUF)	;READ KEY BUFFER
0756   043F~            	AND	E	;MASK
0757   043F~            	JR	Z,SCANKY4	;KEY NOT DETECTED
0758   043F~            	INC	D
0759   043F~            	LD	L,B		;SAVE KEY
0760   043F~            ;
0761   043F~            ; END OF ROWS?
0762   043F~            ;
0763   043F~            SCANKY4	INC	B	;NEXT KEY
0764   043F~            	SRA	C	;SHIFT SCAN RIGHT
0765   043F~            	JR	NC,SCANKY3	;NEXT ROW
0766   043F~            ;
0767   043F~            ; END OF COLUMNS?
0768   043F~            ;
0769   043F~            	SLA	E	;SHIFT MASK LEFT
0770   043F~            	BIT	5,E	;END OF KEYSCAN?
0771   043F~            	JR	Z,SCANKY2	;NEXT COLUMN
0772   043F~            ;
0773   043F~            ; END OF SCAN
0774   043F~            ;
0775   043F~            	LD	A,D
0776   043F~            	CP	00H
0777   043F~            	JR	Z,SCANKY6	;NO KEY PRESSED
0778   043F~            	CP	01H
0779   043F~            	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0780   043F~            ;
0781   043F~            ; ONE KEY DETECTED
0782   043F~            ;
0783   043F~            	LD	A,00H
0784   043F~            	OUT	(SCAN),A	;CLEAR SCAN REG
0785   043F~            	LD	A,L		;RETURN KEY IN A
0786   043F~            	SET	5,A		;SET DATA AVAILABLE FLAG
0787   043F~            	JR	SCANKY7
0788   043F~            ;
0789   043F~            ; NO KEY
0790   043F~            ;
0791   043F~            SCANKY6	LD	A,00H
0792   043F~            	OUT	(SCAN),A	;CLEAR SCAN REG
0793   043F~            SCANKY7	POP	HL
0794   043F~            	POP	DE
0795   043F~            	POP	BC
0796   043F~            	RET
0797   043F             #ENDIF
0798   043F             ;-----------------------------
0799   043F             ; SCAN DISPLAY UNTIL KEY PRESS
0800   043F             ;-----------------------------
0801   043F             ; ENTRY : NONE
0802   043F             ; EXIT  : A = KEY VALUE 00H TO 1FH
0803   043F             ;         FLAG REGISTER MODIFIED
0804   043F             ;
0805   043F CD F0 03    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0806   0442 CD 2A 04    	CALL	SCANKEY
0807   0445 CB 6F       	BIT	5,A
0808   0447 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0809   0449 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0810   044B C9          	RET
0811   044C             ;-------------------------------
0812   044C             ; SCAN DISPLAY UNTIL KEY RELEASE
0813   044C             ;-------------------------------
0814   044C             ; ENTRY : NONE
0815   044C             ; EXIT  : NONE
0816   044C             ;
0817   044C F5          SKEYRL	PUSH	AF
0818   044D CD F0 03    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0819   0450 CD 2A 04    	CALL	SCANKEY
0820   0453 CB 6F       	BIT	5,A
0821   0455 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0822   0457 F1          	POP	AF
0823   0458 C9          	RET
0824   0459             ;-------------------
0825   0459             ; WAIT FOR KEY PRESS
0826   0459             ;-------------------
0827   0459             ; ENTRY : NONE
0828   0459             ; EXIT  : A = KEY VALUE 00H TO 1FH
0829   0459             ;         FLAG REGISTER MODIFIED
0830   0459             ;
0831   0459 CD 2A 04    KEYIN	CALL	SCANKEY
0832   045C CB 6F       	BIT	5,A
0833   045E 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
0834   0460 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0835   0462 C9          	RET
0836   0463             ;---------------------
0837   0463             ; WAIT FOR KEY RELEASE
0838   0463             ;---------------------
0839   0463             ; ENTRY : NONE
0840   0463             ; EXIT  : NONE
0841   0463             ;
0842   0463 F5          KEYREL	PUSH	AF
0843   0464 CD 2A 04    KEYRL1	CALL	SCANKEY
0844   0467 CB 6F       	BIT	5,A
0845   0469 20 F9       	JR	NZ,KEYRL1
0846   046B F1          	POP	AF
0847   046C C9          	RET
0848   046D             ;-----------------
0849   046D             ; KEY MENU HANDLER
0850   046D             ;-----------------
0851   046D             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
0852   046D             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
0853   046D             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
0854   046D             ; ENTRY :  A = ELEMENT TO LOOK FOR
0855   046D             ;         HL = POINTS TO TABLE
0856   046D             ; EXIT  :  ELEMENT NOT FOUND
0857   046D             ;           HL HOLDS ADDRESS OF LAST ELEMENT
0858   046D             ;          ELEMENT FOUND
0859   046D             ;           CONTROL PASSES TO JUMP ADDRESS WITH
0860   046D             ;          RETURN ADDRESS OF MENU CALL ON STACK
0861   046D             ;
0862   046D F5          MENU	PUSH	AF
0863   046E C5          	PUSH	BC
0864   046F D5          	PUSH	DE	;SAVE REGISTERS
0865   0470 E5          	PUSH	HL	;CALCULATE ADDRESS
0866   0471 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
0867   0473 5E          	LD	E,(HL)	;ADDING THE INDEX TO
0868   0474 23          	INC	HL	;THE ELEMENTS
0869   0475 19          	ADD	HL,DE	;TO THE ADDR OF THE
0870   0476 54          	LD	D,H	;TABLE
0871   0477 5D          	LD	E,L
0872   0478 E1          	POP	HL
0873   0479 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
0874   047A 23          	INC	HL	;POINT TO LIST OF ENTRIES
0875   047B BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
0876   047C 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
0877   047E 23          	INC	HL	;NEXT ENTRY IN LIST
0878   047F 13          	INC	DE	;NEXT ENTRY IN
0879   0480 13          	INC	DE	;JUMP TABLE
0880   0481 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
0881   0483 D1          	POP	DE
0882   0484 C1          	POP	BC
0883   0485 F1          	POP	AF
0884   0486 C9          	RET	;NOT IN TABLE
0885   0487             ;
0886   0487             ; FOUND ELEMENT IN THE TABLE
0887   0487             ; PASS CONTROL TO THE JUMP HANDLER
0888   0487             ;
0889   0487 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
0890   0488 6F          	LD	L,A	;FROM THE TABLE
0891   0489 13          	INC	DE	;AND JUMP TO
0892   048A 1A          	LD	A,(DE)	;THE JUMP ADDRESS
0893   048B 67          	LD	H,A	;FOR THAT ENTRY
0894   048C D1          	POP	DE
0895   048D C1          	POP	BC
0896   048E F1          	POP	AF	;RESTORE REGISTERS
0897   048F E9          	JP	(HL)
0898   0490             ;-------------------
0899   0490             ; CALCULATE CHECKSUM
0900   0490             ;-------------------
0901   0490             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
0902   0490             ;
0903   0490             ; ENTRY : HL = START OF BLOCK TO SUM
0904   0490             ;         DE = END OF BLOCK TO SUM
0905   0490             ; EXIT  : A =  CHECKSUM
0906   0490             ;         FLAG REGISTER MODIFIED
0907   0490             ;
0908   0490 E5          CHKSUM	PUSH	HL
0909   0491 D5          	PUSH	DE
0910   0492 13          	INC	DE	;END OF BLOCK+1
0911   0493 AF          	XOR	A	;CLEAR CHECKSUM
0912   0494 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
0913   0495 23          	INC	HL	;POINT TO NEXT ELEMENT
0914   0496 A7          	AND	A	;SET CARRY
0915   0497 E5          	PUSH	HL
0916   0498 ED 52       	SBC	HL,DE	;SUBTRACT
0917   049A E1          	POP	HL
0918   049B 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
0919   049D D1          	POP	DE
0920   049E E1          	POP	HL
0921   049F C9          	RET
0922   04A0             ;--------------------------
0923   04A0             ; ACCESS BYTE LOOK UP TABLE
0924   04A0             ;--------------------------
0925   04A0             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
0926   04A0             ; UP TABLE
0927   04A0             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0928   04A0             ;         HL = ADDRESS OF LOOK UP TABLE
0929   04A0             ; EXIT : HL = ADDRESS OF ELEMENT A
0930   04A0             ;
0931   04A0 D5          INDEXB	PUSH	DE
0932   04A1 5F          	LD	E,A	;USE DE AS INDEX
0933   04A2 16 00       	LD	D,0	;TO ELEMENT IN TABLE
0934   04A4 19          	ADD	HL,DE	;BY ADDING TO HL
0935   04A5 D1          	POP	DE
0936   04A6 C9          	RET
0937   04A7             ;--------------------------
0938   04A7             ; ACCESS WORD LOOK UP TABLE
0939   04A7             ;--------------------------
0940   04A7             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
0941   04A7             ; UP TABLE
0942   04A7             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0943   04A7             ;         HL = ADDRESS OF LOOK UP TABLE
0944   04A7             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
0945   04A7             ;
0946   04A7 D5          INDEXW	PUSH	DE
0947   04A8 5F          	LD	E,A
0948   04A9 CB 23       	SLA	E	;MULTIPLY BY TWO
0949   04AB 16 00       	LD	D,0
0950   04AD 19          	ADD	HL,DE
0951   04AE D1          	POP	DE
0952   04AF C9          	RET
0953   04B0             ;-------------------------------
0954   04B0             ; GENERATE A QUASI-RANDOM NUMBER
0955   04B0             ;-------------------------------
0956   04B0             ; GENERATE AN 16 BIT RANDOM NUMBER
0957   04B0             ; USING LINEAR CONGRUENTIAL METHOD.
0958   04B0             ;     Rn+1 = (aRn+c) MOD m
0959   04B0             ; REFRESH REGISTER USED FOR Rn AND c
0960   04B0             ;	ENTRY : NONE
0961   04B0             ;	EXIT  : HL = RANDOM WORD
0962   04B0             ;	NO REGISTERS MODIFIED
0963   04B0             ;
0964   04B0 F5          RAND	PUSH	AF
0965   04B1 C5          	PUSH	BC
0966   04B2 D5          	PUSH	DE	;SAVE REGISTERS
0967   04B3             ;
0968   04B3             ; CALCULATE aRn
0969   04B3             ;
0970   04B3 ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
0971   04B5 5F          	LD	E,A	;(Rn) BY
0972   04B6 16 00       	LD	D,0
0973   04B8 21 48 05    	LD	HL,0548H	;CONSTANT (a)
0974   04BB CD C8 04    	CALL	MUL16
0975   04BE             ;
0976   04BE             ; CALCULATE aRn+c
0977   04BE             ;
0978   04BE ED 5F       	LD	A,R	;ADD IT TO ANOTHER
0979   04C0 06 00       	LD	B,0	;READ OF THE
0980   04C2 4F          	LD	C,A	;THE REFRESH
0981   04C3 09          	ADD	HL,BC	;REGISTER (c)
0982   04C4 D1          	POP	DE
0983   04C5 C1          	POP	BC
0984   04C6 F1          	POP	AF	;RESTORE REGISTERS
0985   04C7 C9          	RET
0986   04C8             ;----------------------
0987   04C8             ; 16 BIT MULTIPLICATION
0988   04C8             ;----------------------
0989   04C8             ;16 BIT MULTIPLY
0990   04C8             ; ENTRY : HL = MULTIPLICAND (MPD)
0991   04C8             ;         DE = MULTIPLIER (MPR)
0992   04C8             ; EXIT : HL = RESULT
0993   04C8             ;FROM ZAKS 'PROGRAMMING THE Z80'
0994   04C8             ;
0995   04C8 F5          MUL16	PUSH	AF
0996   04C9 C5          	PUSH	BC
0997   04CA 4C          	LD	C,H	;MPR(H)
0998   04CB 7D          	LD	A,L	;MPR(L)
0999   04CC 06 10       	LD	B,16	;BIT COUNTER
1000   04CE 21 00 00    	LD	HL,0	;CLEAR RESULT
1001   04D1 CB 39       MULT	SRL	C	;MPR (H)
1002   04D3 1F          	RRA	;MPR (L)
1003   04D4 30 01       	JR	NC,MULT1	;TEST CARRY
1004   04D6 19          	ADD	HL,DE	;ADD MPD TO RESULT
1005   04D7 EB          MULT1	EX	DE,HL
1006   04D8 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1007   04D9 EB          	EX	DE,HL
1008   04DA 10 F5       	DJNZ	MULT	;DONE?
1009   04DC C1          	POP	BC
1010   04DD F1          	POP	AF
1011   04DE C9          	RET
1012   04DF             ; MUSIC ROUTINE
1013   04DF             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1014   04DF             ; MONITOR MON-1
1015   04DF             ; BY JOHN HARDY AND KEN STONE
1016   04DF             ;
1017   04DF             ;----------------
1018   04DF             ; MUSIC SEQUENCER
1019   04DF             ;----------------
1020   04DF             ; SEQUENCES THROUGH A TABLE OF NOTES
1021   04DF             ; 1EH = REPEAT TUNE UNTIL RESET
1022   04DF             ; 1FH = PLAY ONCE AND RETURN
1023   04DF             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1024   04DF             ; EXIT : NO REGISTERS MODIFIED
1025   04DF F5          MUSIC	PUSH	AF
1026   04E0 C5          	PUSH	BC
1027   04E1 D5          	PUSH	DE
1028   04E2 E5          	PUSH	HL	;SAVE REGISTERS
1029   04E3 E5          	PUSH	HL
1030   04E4 EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1031   04E5             ;
1032   04E5             ; PLAY EACH NOTE IN TURN
1033   04E5             ;
1034   04E5 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1035   04E6 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1036   04E8             ;
1037   04E8             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1038   04E8             ;
1039   04E8 FE 00       	CP	00H
1040   04EA C2 FA 04    	JP	NZ,STEP1
1041   04ED 01 00 10    	LD	BC,1000H
1042   04F0 0B          PAUSE	DEC	BC
1043   04F1 78          	LD	A,B
1044   04F2 B1          	OR	C
1045   04F3 C2 F0 04    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1046   04F6 13          	INC	DE	;POINT TO NEXT ELEMENT
1047   04F7 C3 E5 04    	JP	STEP
1048   04FA             ;
1049   04FA             ; IF ELEMENT IS 1EH REPEAT TUNE
1050   04FA             ;
1051   04FA FE 1E       STEP1	CP	1EH
1052   04FC C2 04 05    	JP	NZ,STEP2
1053   04FF D1          	POP	DE	;GET TABLE ADDRESS BACK
1054   0500 D5          	PUSH	DE	;SAVE IT FOR LATER
1055   0501 C3 E5 04    	JP	STEP
1056   0504             ;
1057   0504             ; IF ELEMENT IS 1FH RETURN
1058   0504             ;
1059   0504 FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1060   0506 C2 0F 05    	JP	NZ,STEP3
1061   0509 E1          	POP	HL
1062   050A E1          	POP	HL
1063   050B D1          	POP	DE
1064   050C C1          	POP	BC
1065   050D F1          	POP	AF
1066   050E C9          	RET
1067   050F             ;
1068   050F             ;NOW PLAY THE NOTE
1069   050F             ;
1070   050F 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1071   0510 21 2B 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1072   0513 CD A0 04    	CALL	INDEXB	;GET PERIOD/2
1073   0516 7E          	LD	A,(HL)	;GET ELEMENT
1074   0517 F5          	PUSH	AF	;SAVE FOR LATER
1075   0518 78          	LD	A,B	;GET ELEMENT BACK IN A
1076   0519 21 43 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1077   051C CD A0 04    	CALL	INDEXB	;GET DURATION/2
1078   051F 7E          	LD	A,(HL)	;GET ELEMENT
1079   0520 6F          	LD	L,A
1080   0521 26 00       	LD	H,0	;HL = DURATION/2
1081   0523 F1          	POP	AF
1082   0524 CD 5C 05    	CALL	TONE	;DO NOTE ROUTINE
1083   0527 13          	INC	DE
1084   0528 C3 E5 04    	JP	STEP	;STEP TO NEXT ELEMENT
1085   052B             ;
1086   052B             ; PERIOD/2 OF NOTE
1087   052B             ;
1088   052B 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1088   052F 70 67 62 5C 
1089   0533 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1089   0537 45 41 3C 39 
1090   053B 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1090   053F 2A 27 25 23 
1091   0543             ;
1092   0543             ; NOTE DURATION/2
1093   0543             ;
1094   0543 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1094   0547 1E 20 23 25 
1095   054B 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1095   054F 31 33 37 3A 
1096   0553 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1096   0557 4D 52 57 5C 
1097   055B 10          	.DB	10H
1098   055C             ; TONE ROUTINE
1099   055C             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1100   055C             ; MONITOR MON-1
1101   055C             ; BY JOHN HARDY AND KEN STONE
1102   055C             ;
1103   055C             ;--------------
1104   055C             ; OUTPUT A TONE
1105   055C             ;--------------
1106   055C             ;
1107   055C             ; ENTRY : A = PERIOD/2 OF NOTE
1108   055C             ;         HL = DURATION/2 OF NOTE
1109   055C             ; EXIT NO REGISTERS MODIFIED
1110   055C F5          TONE	PUSH	AF
1111   055D C5          	PUSH	BC
1112   055E D5          	PUSH	DE
1113   055F E5          	PUSH	HL
1114   0560 11 01 00    	LD	DE,0001H
1115   0563 4F          	LD	C,A
1116   0564 29          	ADD	HL,HL	;DOUBLE DURATION
1117   0565 AF          	XOR	A
1118   0566 EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1119   0568 D3 01       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1120   056A 41          	LD	B,C
1121   056B C5          TONE2	PUSH	BC
1122   056C 06 02       	LD	B,02H
1123   056E 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1124   0570 C1          	POP	BC
1125   0571 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1126   0573 ED 52       	SBC	HL,DE	;END OF NOTE?
1127   0575 20 EF       	JR	NZ,TONE1	;DO AGAIN
1128   0577 E1          	POP	HL
1129   0578 D1          	POP	DE
1130   0579 C1          	POP	BC
1131   057A F1          	POP	AF
1132   057B C9          	RET
1133   057C             ;---------------
1134   057C             ; KEY ENTRY BEEP
1135   057C             ;---------------
1136   057C E5          BEEP	PUSH	HL
1137   057D F5          	PUSH	AF
1138   057E 21 3D 3F    	LD	HL,MODE
1139   0581 CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1140   0583 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1141   0585             ;
1142   0585             ; DO KEYPRESS DELAY
1143   0585             ;
1144   0585 D5          	PUSH	DE	;DO A SHORT
1145   0586 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1146   0589 2A 27 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1147   058C ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1148   058E 30 FC       	JR	NC,BEEP1	;KEY STROKES
1149   0590 D1          	POP	DE
1150   0591 18 10       	JR	BEEP3
1151   0593             ;
1152   0593             ; OUTPUT KEYPRESS TONES
1153   0593             ;
1154   0593 3E 24       BEEP2	LD	A,24H
1155   0595 21 30 00    	LD	HL,0030H
1156   0598 CD 5C 05    	CALL	TONE	;DO FIRST TONE
1157   059B 3E 0E       	LD	A,0EH
1158   059D 21 50 00    	LD	HL,0050H
1159   05A0 CD 5C 05    	CALL	TONE	;DO SECOND TONE
1160   05A3 F1          BEEP3	POP	AF
1161   05A4 E1          	POP	HL
1162   05A5 C9          	RET
1163   05A6             ;----------------------------------------
1164   05A6             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1165   05A6             ;----------------------------------------
1166   05A6             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1167   05A6             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1168   05A6             ; ATTACHED).
1169   05A6             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1170   05A6             ; AND MODIFY REGISTERS.
1171   05A6             ;
1172   05A6 E1          SSTEP	POP	HL	;GET HL BACK
1173   05A7 F5          	PUSH	AF	;SAVE AF FOR LATER
1174   05A8 22 4D 3F    	LD	(TMPHL),HL
1175   05AB ED 53 4B 3F 	LD	(TMPDE),DE
1176   05AF ED 43 49 3F 	LD	(TMPBC),BC
1177   05B3 DD 22 4F 3F 	LD	(TMPIX),IX
1178   05B7 FD 22 51 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1179   05BB E1          	POP	HL	;GET AF BACK
1180   05BC 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
1181   05BF E1          	POP	HL	;GET PC RETURN ADDRESS
1182   05C0 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
1183   05C3 ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1184   05C7             ;
1185   05C7             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1186   05C7             ;
1187   05C7 CD 7C 05    	CALL	BEEP
1188   05CA 3A 43 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1189   05CD E6 07       	AND	7	;MAKE SURE IN LIMITS
1190   05CF 32 43 3F    	LD	(REGPNT),A	;SAVE IT
1191   05D2 CD AF 06    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1192   05D5 CD 4C 04    	CALL	SKEYRL	;WAIT FOR A KEY
1193   05D8 CD 3F 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1194   05DB 21 E4 05    	LD	HL,REGTBL	;HANDLE THE KEY
1195   05DE CD 6D 04    	CALL	MENU	;AND UPDATE DISPLAY
1196   05E1 C3 D2 05    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1197   05E4             ;
1198   05E4             ; REGISTER DISPLAY KEY TABLE
1199   05E4             ;
1200   05E4 14          REGTBL	.DB	14H
1201   05E5 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1201   05E9 04 05 06 07 
1202   05ED 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1202   05F1 0C 0D 0E 0F 
1203   05F5 10 11 12 13 	.DB	10H,11H,12H,13H
1204   05F9 31 06 31 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1204   05FD 31 06 31 06 
1205   0601 31 06 31 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1205   0605 31 06 31 06 
1206   0609 31 06 31 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1206   060D 31 06 31 06 
1207   0611 31 06 31 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1207   0615 31 06 31 06 
1208   0619             #IFDEF TEC-1F
1209   0619 84 06 99 06 	.DW	INCSTP,DECSTP,RETPGM,RETMON
1209   061D 62 06 58 06 
1210   0621~            #ELSE
1211   0621~            	.DW	RETMON,RETPGM,INCSTP,DECSTP
1212   0621             #ENDIF
1213   0621             ;
1214   0621             ; REGISTER NAME CHARACTERS
1215   0621             ;
1216   0621             #IFDEF TEC-1F
1217   0621 C3 4F       REGNAM	.DW	4FC3H
1218   0623 47 6F C3 E6 	.DW	6F47H,0E6C3H,0ECC7H
1218   0627 C7 EC 
1219   0629 C2 66 6E 28 	.DW	66C2H,286EH,28AEH
1219   062D AE 28 
1220   062F 4F A7       	.DW	0A74FH
1221   0631~            #ELSE
1222   0631~            REGNAM	.DW	7339H
1223   0631~            	.DW	7771H,7C39H,5E79H
1224   0631~            	.DW	7438H,0676H,066EH
1225   0631~            	.DW	6D73H
1226   0631             #ENDIF
1227   0631             ;--------------
1228   0631             ; EDIT REGISTER
1229   0631             ;--------------
1230   0631 CD 7C 05    REGKEY	CALL	BEEP
1231   0634 F5          	PUSH	AF	;SAVE KEY FOR LATER
1232   0635 3A 43 3F    	LD	A,(REGPNT)
1233   0638             ;
1234   0638             ; EDIT REGISTER
1235   0638             ;
1236   0638 21 45 3F    	LD	HL,TMPPC
1237   063B CD A7 04    	CALL	INDEXW
1238   063E 4E          	LD	C,(HL)
1239   063F 23          	INC	HL
1240   0640 46          	LD	B,(HL)	;GET REG CONTENTS
1241   0641 CB 21       	SLA	C
1242   0643 CB 10       	RL	B
1243   0645 CB 21       	SLA	C
1244   0647 CB 10       	RL	B
1245   0649 CB 21       	SLA	C
1246   064B CB 10       	RL	B	;SHIFT REGISTER
1247   064D CB 21       	SLA	C	;FOUR BITS
1248   064F CB 10       	RL	B	;LEFT AND
1249   0651 F1          	POP	AF	;PUT THE KEY
1250   0652 B1          	OR	C	;INTO THE LSN
1251   0653 4F          	LD	C,A	;AND PUT THE
1252   0654 70          	LD	(HL),B	;REGISTER BACK
1253   0655 2B          	DEC	HL	;WHERE IT BELONGS
1254   0656 71          	LD	(HL),C
1255   0657 C9          	RET
1256   0658             ;------------------
1257   0658             ; RETURN TO MONITOR
1258   0658             ;------------------
1259   0658 CD 7C 05    RETMON	CALL	BEEP
1260   065B CD 4C 04    	CALL	SKEYRL
1261   065E FB          	EI	;ENABLE INTERRUPTS AGAIN
1262   065F C3 74 02    	JP	MAIN
1263   0662             ;------------------
1264   0662             ; RETURN TO PROGRAM
1265   0662             ;------------------
1266   0662 ED 7B 53 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1267   0666 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
1268   0669 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1269   066A 2A 47 3F    	LD	HL,(TMPAF)
1270   066D E5          	PUSH	HL	;SAVE AF REG FOR LATER
1271   066E FD 2A 51 3F 	LD	IY,(TMPIY)
1272   0672 DD 2A 4F 3F 	LD	IX,(TMPIX)
1273   0676 ED 4B 49 3F 	LD	BC,(TMPBC)
1274   067A ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1275   067E F1          	POP	AF	;RESTORE AF
1276   067F 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
1277   0682 FB          	EI	;ENABLE INTERRUPTS
1278   0683 C9          	RET	;AND RETURN TO PROGRAM
1279   0684             ;----------------------
1280   0684             ; DISPLAY NEXT REGISTER
1281   0684             ;----------------------
1282   0684 CD 7C 05    INCSTP	CALL	BEEP
1283   0687 3A 43 3F    	LD	A,(REGPNT)
1284   068A FE 07       	CP	7	;END OF REG TABLE?
1285   068C CA 94 06    	JP	Z,INCSP1
1286   068F 3C          	INC	A
1287   0690 32 43 3F    	LD	(REGPNT),A
1288   0693 C9          	RET
1289   0694 AF          INCSP1	XOR	A
1290   0695 32 43 3F    	LD	(REGPNT),A
1291   0698 C9          	RET
1292   0699             ;--------------------------
1293   0699             ; DISPLAY PREVIOUS REGISTER
1294   0699             ;--------------------------
1295   0699 CD 7C 05    DECSTP	CALL	BEEP
1296   069C 3A 43 3F    	LD	A,(REGPNT)
1297   069F FE 00       	CP	0	;START OF REG TABLE?
1298   06A1 CA A9 06    	JP	Z,DECSP1
1299   06A4 3D          	DEC	A
1300   06A5 32 43 3F    	LD	(REGPNT),A
1301   06A8 C9          	RET
1302   06A9 3E 07       DECSP1	LD	A,7
1303   06AB 32 43 3F    	LD	(REGPNT),A
1304   06AE C9          	RET
1305   06AF             ;-----------------
1306   06AF             ; DISPLAY REGISTER
1307   06AF             ;-----------------
1308   06AF 3A 43 3F    SETREG	LD	A,(REGPNT)
1309   06B2 21 45 3F    	LD	HL,TMPPC	;START OF TABLE
1310   06B5 CD A7 04    	CALL	INDEXW	;GET ELEMENT ADDRESS
1311   06B8 5E          	LD	E,(HL)
1312   06B9 23          	INC	HL
1313   06BA 56          	LD	D,(HL)
1314   06BB EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1315   06BC CD A2 03    	CALL	DISADD
1316   06BF             ;
1317   06BF             ; DISPLAY REGISTER NAME
1318   06BF             ;
1319   06BF 21 21 06    	LD	HL,REGNAM
1320   06C2 CD A7 04    	CALL	INDEXW
1321   06C5 7E          	LD	A,(HL)
1322   06C6 32 35 3F    	LD	(DISBUF+0),A
1323   06C9 23          	INC	HL
1324   06CA 7E          	LD	A,(HL)
1325   06CB 32 36 3F    	LD	(DISBUF+1),A
1326   06CE C9          	RET
1327   06CF             ;------------------
1328   06CF             ; FUNCTION KEY MENU
1329   06CF             ;------------------
1330   06CF             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1331   06CF             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1332   06CF             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1333   06CF             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1334   06CF             ;
1335   06CF E1          FUNKEY	POP	HL	;REMOVE RETURN ADDRESS
1336   06D0 CD 7C 05    	CALL	BEEP
1337   06D3 2A 3F 3F    FUNKY1	LD	HL,(ADRESS)
1338   06D6 CD A2 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1339   06D9             #IFDEF TEC-1F
1340   06D9             
1341   06D9 21 0F AF    	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1342   06DC~            #ELSE
1343   06DC~            	LD	HL,7154H	;FN
1344   06DC             #ENDIF
1345   06DC 22 35 3F    	LD	(DISBUF),HL	;DISPLAY FN
1346   06DF CD 4C 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1347   06E2 CD 3F 04    FUNKY2	CALL	SKEYIN
1348   06E5 2A 19 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1349   06E8 CD 6D 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1350   06EB C3 E2 06    	JP	FUNKY2	;TRY AGAIN
1351   06EE             ;
1352   06EE             ; RETURN TO MAIN
1353   06EE             ;
1354   06EE CD 7C 05    CANCEL	CALL	BEEP
1355   06F1 CD 69 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1356   06F4 CD 4C 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1357   06F7 E1          	POP	HL	;REMOVE MENU RETURN
1358   06F8 C3 88 02    	JP	MAIN2
1359   06FB             ;
1360   06FB             ; FUNCTION MENU KEY TABLE
1361   06FB             ;
1362   06FB 11          FUNLST	.DB	11H
1363   06FC 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1363   0700 04 05 06 07 
1364   0704 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1364   0708 0C 0D 0E 0F 
1365   070C             #IFDEF TEC-1F
1366   070C 12          	.DB	12H	;GO KEY
1367   070D~            #ELSE
1368   070D~            	.DB	10H	;FN KEY
1369   070D             #ENDIF
1370   070D 33 07 3E 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1370   0711 43 08 55 08 
1371   0715 67 08 BD 08 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1371   0719 FB 08 32 09 
1372   071D 40 09 4F 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1372   0721 5E 09 6D 09 
1373   0725 07 0A 88 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1373   0729 E1 0B 90 0C 
1374   072D 2F 07       	.DW	FUNFUN
1375   072F             ;--------------------------
1376   072F             ; JUMP TO FUNCTION FUNCTION
1377   072F             ;--------------------------
1378   072F 2A 33 3F    FUNFUN	LD	HL,(FUNJMP)
1379   0732 E9          	JP	(HL)
1380   0733             ;------------------------------------------
1381   0733             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1382   0733             ;------------------------------------------
1383   0733 CD 7C 05    GOEXEC	CALL	BEEP
1384   0736 CD 63 04    	CALL	KEYREL
1385   0739 E1          	POP	HL	;REMOVE EXEC RETURN
1386   073A 2A 3F 3F    	LD	HL,(ADRESS)
1387   073D E9          	JP	(HL)	;START EXECUCTION
1388   073E             ;------------------------------------
1389   073E             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1390   073E             ;------------------------------------
1391   073E CD 7C 05    INTELFN	CALL	BEEP
1392   0741 CD 63 04    	CALL	KEYREL
1393   0744 CD 4D 07    	CALL	INTELH
1394   0747 C2 86 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1395   074A C3 EE 06    	JP	CANCEL	;JUST RETURN IF ALL OK
1396   074D             ;-----------------------
1397   074D             ; RECEIVE INTEL HEX FILE
1398   074D             ;-----------------------
1399   074D DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1400   0751             ;
1401   0751             ; WAIT FOR RECORD MARK
1402   0751             ;
1403   0751 AF          INTEL1	XOR	A
1404   0752 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1405   0755 CD 09 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1406   0758 FE 3A       	CP	':'	;TO BE TRANSMITTED
1407   075A 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1408   075C             ;
1409   075C             ; GET RECORD LENGTH
1410   075C             ;
1411   075C CD A9 07    	CALL	GETBYT
1412   075F DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1413   0762             ;
1414   0762             ; GET ADDRESS FIELD
1415   0762             ;
1416   0762 CD A9 07    	CALL	GETBYT
1417   0765 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1418   0768 CD A9 07    	CALL	GETBYT
1419   076B DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1420   076E             ;
1421   076E             ; GET RECORD TYPE
1422   076E             ;
1423   076E CD A9 07    	CALL	GETBYT
1424   0771 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1425   0773             ;
1426   0773             ; READ IN THE DATA
1427   0773             ;
1428   0773 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1429   0776 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1430   0779 DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1431   077C             
1432   077C CD A9 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1433   077F 77          	LD	(HL),A	;STORE DATA BYTE
1434   0780 23          	INC	HL
1435   0781 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1436   0783             ;
1437   0783             ; GET CHECKSUM AND COMPARE
1438   0783             ;
1439   0783 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1440   0786 ED 44       	NEG		;TWO'S COMPLEMENT
1441   0788 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1442   078B CD A9 07    	CALL	GETBYT
1443   078E DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1444   0791 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1445   0794 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1446   0796 C9          	RET	;NZ=CHECKSUM ERROR
1447   0797             ;
1448   0797             ; END OF FILE RECORD
1449   0797             ;
1450   0797 DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1451   079A ED 44       	NEG		;TWO'S COMPLEMENT
1452   079C DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1453   079F CD A9 07    	CALL	GETBYT
1454   07A2 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1455   07A5 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1456   07A8 C9          	RET	;NZ=CHECKSUM ERROR
1457   07A9             ;--------------------------
1458   07A9             ; GET BYTE FROM SERIAL PORT
1459   07A9             ;--------------------------
1460   07A9 C5          GETBYT	PUSH	BC
1461   07AA CD 09 08    	CALL	RXDATA
1462   07AD CB 77       	BIT	6,A
1463   07AF 28 02       	JR	Z,GETBT1
1464   07B1 C6 09       	ADD	A,09H
1465   07B3 E6 0F       GETBT1	AND	0FH
1466   07B5 CB 27       	SLA 	A
1467   07B7 CB 27       	SLA	A
1468   07B9 CB 27       	SLA	A
1469   07BB CB 27       	SLA	A
1470   07BD 4F          	LD	C,A
1471   07BE             ;
1472   07BE             ; GET LOW NYBBLE
1473   07BE             ;
1474   07BE CD 09 08    	CALL	RXDATA
1475   07C1 CB 77       	BIT	6,A
1476   07C3 28 02       	JR	Z,GETBT2
1477   07C5 C6 09       	ADD	A,09H
1478   07C7 E6 0F       GETBT2	AND	0FH
1479   07C9 B1          	OR	C
1480   07CA 47          	LD	B,A
1481   07CB DD 86 03    	ADD	A,(IX+3)
1482   07CE DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1483   07D1 78          	LD	A,B
1484   07D2 A7          	AND	A	;CLEAR CARRY
1485   07D3 C1          	POP	BC
1486   07D4 C9          	RET
1487   07D5             ;-------------------------------
1488   07D5             ; CONVERT ASCII CHARACTER TO HEX
1489   07D5             ;-------------------------------
1490   07D5             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1491   07D5             ;ENTRY : A= ASCII 0-9,A-F
1492   07D5             ;EXIT  : A= HEX 0-F IN LSN
1493   07D5             ; A AND F REGISTERS MODIFIED
1494   07D5             ;
1495   07D5 CB 77       ASCHEX	BIT	6,A
1496   07D7 28 02       	JR	Z,ASCHX1
1497   07D9 C6 09       	ADD	A,09H
1498   07DB E6 0F       ASCHX1	AND	0FH
1499   07DD C9          	RET
1500   07DE             ;------------------------
1501   07DE             ; SERIAL TRANSMIT ROUTINE
1502   07DE             ;------------------------
1503   07DE             ;TRANSMIT BYTE SERIALLY ON DOUT
1504   07DE             ;
1505   07DE             ; ENTRY : A = BYTE TO TRANSMIT
1506   07DE             ;  EXIT : NO REGISTERS MODIFIED
1507   07DE             ;
1508   07DE F5          TXDATA	PUSH	AF
1509   07DF C5          	PUSH	BC
1510   07E0 E5          	PUSH	HL
1511   07E1 2A 25 3F    	LD	HL,(BAUD)
1512   07E4 4F          	LD	C,A
1513   07E5             ;
1514   07E5             ; TRANSMIT START BIT
1515   07E5             ;
1516   07E5 AF          	XOR	A
1517   07E6 D3 01       	OUT	(SCAN),A
1518   07E8 CD 36 08    	CALL	BITIME
1519   07EB             ;
1520   07EB             ; TRANSMIT DATA
1521   07EB             ;
1522   07EB 06 08       	LD	B,08H
1523   07ED CB 09       	RRC	C
1524   07EF CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1525   07F1 79          	LD	A,C	;LSB FIRST AND OUTPUT
1526   07F2 E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1527   07F4 D3 01       	OUT	(SCAN),A
1528   07F6 CD 36 08    	CALL	BITIME
1529   07F9 10 F4       	DJNZ	NXTBIT
1530   07FB             ;
1531   07FB             ; SEND STOP BITS
1532   07FB             ;
1533   07FB 3E 40       	LD	A,40H
1534   07FD D3 01       	OUT	(SCAN),A
1535   07FF CD 36 08    	CALL	BITIME
1536   0802 CD 36 08    	CALL	BITIME
1537   0805 E1          	POP	HL
1538   0806 C1          	POP	BC
1539   0807 F1          	POP	AF
1540   0808 C9          	RET
1541   0809             ;-----------------------
1542   0809             ; SERIAL RECEIVE ROUTINE
1543   0809             ;-----------------------
1544   0809             ;RECEIVE SERIAL BYTE FROM DIN
1545   0809             ;
1546   0809             ; ENTRY : NONE
1547   0809             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1548   0809             ;
1549   0809             ; REGISTERS MODIFIED A AND F
1550   0809             ;
1551   0809 C5          RXDATA	PUSH	BC
1552   080A E5          	PUSH	HL
1553   080B             ;
1554   080B             ; WAIT FOR START BIT
1555   080B             ;
1556   080B DB 00       RXDAT1	IN	A,(KEYBUF)
1557   080D CB 7F       	BIT	7,A
1558   080F 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1559   0811             ;
1560   0811             ; DETECTED START BIT
1561   0811             ;
1562   0811 2A 25 3F    	LD	HL,(BAUD)
1563   0814 CB 3C       	SRL	H
1564   0816 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1565   0818 CD 36 08    	CALL	BITIME
1566   081B DB 00       	IN	A,(KEYBUF)
1567   081D CB 7F       	BIT	7,A
1568   081F 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1569   0821             ;
1570   0821             ; DETECTED VALID START BIT,READ IN DATA
1571   0821             ;
1572   0821 06 08       	LD	B,08H
1573   0823 2A 25 3F    RXDAT2	LD	HL,(BAUD)
1574   0826 CD 36 08    	CALL	BITIME	;DELAY ONE BIT TIME
1575   0829 DB 00       	IN	A,(KEYBUF)
1576   082B CB 17       	RL	A
1577   082D CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1578   082F 10 F2       	DJNZ	RXDAT2
1579   0831 79          	LD	A,C
1580   0832 B7          	OR	A	;CLEAR CARRY FLAG
1581   0833 E1          	POP	HL
1582   0834 C1          	POP	BC
1583   0835 C9          	RET
1584   0836             ;---------------
1585   0836             ; BIT TIME DELAY
1586   0836             ;---------------
1587   0836             ;DELAY FOR ONE SERIAL BIT TIME
1588   0836             ;ENTRY : HL = DELAY TIME
1589   0836             ; NO REGISTERS MODIFIED
1590   0836             ;
1591   0836 E5          BITIME	PUSH	HL
1592   0837 D5          	PUSH	DE
1593   0838 11 01 00    	LD	DE,0001H
1594   083B ED 52       BITIM1	SBC	HL,DE
1595   083D D2 3B 08    	JP	NC,BITIM1
1596   0840 D1          	POP	DE
1597   0841 E1          	POP	HL
1598   0842 C9          	RET
1599   0843             ;-----------------------------
1600   0843             ; FUNCTION 2 - ENTER ADDRESS 1
1601   0843             ;-----------------------------
1602   0843 CD 7C 05    ADDRA	CALL	BEEP
1603   0846 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1604   0849 22 2D 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1605   084C             #IFDEF TEC-1F
1606   084C 21 00 C3    	LD	HL,0C300H	;ADDRESS [
1607   084F~            #ELSE
1608   084F~            	LD	HL,3900H	;ADDRESS [
1609   084F             #ENDIF
1610   084F CD AF 08    	CALL	SDELAY
1611   0852 C3 F1 06    	JP	CANCL1
1612   0855             ;-----------------------------
1613   0855             ; FUNCTION 3 - ENTER ADDRESS 2
1614   0855             ;-----------------------------
1615   0855 CD 7C 05    ADDRB	CALL	BEEP
1616   0858 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1617   085B 22 2F 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1618   085E             #IFDEF TEC-1F
1619   085E 21 A9 00    	LD	HL,00A9H	;ADDRESS ]
1620   0861~            #ELSE
1621   0861~            	LD	HL,000FH	;ADDRESS ]
1622   0861             #ENDIF
1623   0861 CD AF 08    	CALL	SDELAY
1624   0864 C3 F1 06    	JP	CANCL1
1625   0867             ;------------------------
1626   0867             ; FUNCTION 4 - BLOCK MOVE
1627   0867             ;------------------------
1628   0867 CD 7C 05    BLKMVE	CALL	BEEP
1629   086A 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1630   086D 22 31 3F    	LD	(BLKDST),HL	;ADDRESS AS
1631   0870             #IFDEF TEC-1F
1632   0870 21 A9 C3    	LD	HL,0C3A9H	;DESTINATION
1633   0873~            #ELSE
1634   0873~            	LD	HL,390FH	;DESTINATION
1635   0873             #ENDIF
1636   0873 CD AF 08    	CALL	SDELAY
1637   0876             ;
1638   0876             ; CALCULATE NUMBER OF BYTES TO MOVE
1639   0876             ;
1640   0876 2A 2F 3F    	LD	HL,(BLKEND)
1641   0879 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1642   087D A7          	AND	A
1643   087E ED 52       	SBC	HL,DE
1644   0880 23          	INC	HL	;MAKE MOVE INCLUSIVE
1645   0881 22 2B 3F    	LD	(COUNT),HL
1646   0884 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1647   0886             ;
1648   0886             ; SHOW ERROR
1649   0886             ;
1650   0886             #IFDEF TEC-1F
1651   0886 21 C7 00    BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1652   0889~            #ELSE
1653   0889~            BLKMV1	LD	HL,0079H	;SHOW ERROR E
1654   0889             #ENDIF
1655   0889 CD 7C 05    BLKMV2	CALL	BEEP
1656   088C 22 35 3F    	LD	(DISBUF),HL	;AND WAIT
1657   088F CD 3F 04    	CALL	SKEYIN	;FOR KEYPRESS
1658   0892 CD 7C 05    	CALL	BEEP
1659   0895 CD 4C 04    	CALL	SKEYRL
1660   0898 C3 F1 06    	JP	CANCL1
1661   089B             ;
1662   089B             ; MOVE BLOCK
1663   089B             ;
1664   089B CD A1 08    BLKMV3	CALL	MOVE
1665   089E C3 F1 06    	JP	CANCL1
1666   08A1             ;-----------
1667   08A1             ; BLOCK MOVE
1668   08A1             ;-----------
1669   08A1 ED 4B 2B 3F MOVE	LD	BC,(COUNT)
1670   08A5 2A 2D 3F    	LD	HL,(BLKSRT)	;START ADDR
1671   08A8 ED 5B 31 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1672   08AC ED B0       	LDIR
1673   08AE C9          	RET
1674   08AF             ;-------------------------------
1675   08AF             ; SCAN DISPLAY UNTIL KEY RELEASE
1676   08AF             ;-------------------------------
1677   08AF 22 35 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1678   08B2 06 FF       	LD	B,255	;IN DATA DISPLAYS
1679   08B4 CD F0 03    SDELY1	CALL	SCAND	;UNTIL KEY
1680   08B7 10 FB       	DJNZ SDELY1	;IS RELEASED
1681   08B9 CD 4C 04    	CALL	SKEYRL
1682   08BC C9          	RET
1683   08BD             ;---------------------------
1684   08BD             ;FUNCTION 5 - BLOCK CHECKSUM
1685   08BD             ;---------------------------
1686   08BD CD 7C 05    BLKSUM	CALL	BEEP
1687   08C0             #IFDEF TEC-1F
1688   08C0 21 A7 C3    	LD	HL,0C3A7H	;CS
1689   08C3~            #ELSE
1690   08C3~            	LD	HL,396DH	;CS
1691   08C3             #ENDIF
1692   08C3 CD AF 08    	CALL	SDELAY	;SHOW PROMPT
1693   08C6 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1694   08CA 2A 2F 3F    	LD	HL,(BLKEND)
1695   08CD A7          	AND	A
1696   08CE ED 52       	SBC	HL,DE
1697   08D0 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1698   08D1 22 2B 3F    	LD	(COUNT),HL
1699   08D4 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1700   08D6             ;
1701   08D6             ; SHOW ERROR
1702   08D6             ;
1703   08D6 C3 86 08    	JP	BLKMV1
1704   08D9             ;
1705   08D9             ; CALCULATE CHECKSUM
1706   08D9             ;
1707   08D9 2A 2D 3F    BLKSM1	LD	HL,(BLKSRT)
1708   08DC ED 5B 2F 3F 	LD	DE,(BLKEND)
1709   08E0 CD 90 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1710   08E3 CD B7 03    	CALL	DISBYT	;DISPLAY
1711   08E6 2A 2B 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1712   08E9 CD A2 03    	CALL	DISADD	;SUMMED AND
1713   08EC CD 7C 05    	CALL	BEEP
1714   08EF CD 3F 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1715   08F2 CD 7C 05    	CALL	BEEP	;A KEY IS PRESSED
1716   08F5 CD 4C 04    	CALL	SKEYRL
1717   08F8 C3 F1 06    	JP	CANCL1
1718   08FB             ;----------------------------------------
1719   08FB             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1720   08FB             ;----------------------------------------
1721   08FB CD 7C 05    BRANCH	CALL	BEEP
1722   08FE             #IFDEF TEC-1F
1723   08FE 21 E6 44    	LD	HL,44E6H	;RB
1724   0901~            #ELSE
1725   0901~            	LD	HL,507CH	;RB
1726   0901             #ENDIF
1727   0901 CD AF 08    	CALL	SDELAY
1728   0904 2A 3F 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1729   0907 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1730   090B 13          	INC	DE	;POINT TO PC+2
1731   090C A7          	AND	A
1732   090D ED 52       	SBC	HL,DE	;SUBTRACT
1733   090F             ;
1734   090F             ;TEST HIGH BYTE OF RESULT TO
1735   090F             ;DETERMINE IF BACKWARD BRANCH
1736   090F             ;
1737   090F 7C          	LD	A,H
1738   0910 FE FF       	CP	255	;BACKWARD BRANCH?
1739   0912 C2 1D 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1740   0915             ;
1741   0915             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1742   0915             ;
1743   0915 7D          	LD	A,L
1744   0916 CB 7F       	BIT	7,A
1745   0918 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1746   091A C3 86 08    	JP	BLKMV1	;TOO FAR BACK
1747   091D             ;
1748   091D             ;TEST HIGH BYTE OF RESULT TO
1749   091D             ;DETERMINE IF FORWARD BRANCH
1750   091D             ;
1751   091D FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1752   091F C2 86 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1753   0922             ;
1754   0922             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1755   0922             ;
1756   0922 7D          	LD	A,L
1757   0923 CB 7F       	BIT	7,A
1758   0925 C2 86 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1759   0928             ;
1760   0928             ; WITHIN LIMITS PUT IN RAM
1761   0928             ; AND SHOW AS CURRENT ADDRESS
1762   0928             ;
1763   0928 2A 2D 3F    BRNCH2	LD	HL,(BLKSRT)
1764   092B 22 3F 3F    	LD	(ADRESS),HL
1765   092E 77          	LD	(HL),A
1766   092F C3 F1 06    	JP	CANCL1
1767   0932             ;-----------------------------------------
1768   0932             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1769   0932             ;-----------------------------------------
1770   0932 CD 7C 05    TRACE	CALL	BEEP
1771   0935             #IFDEF TEC-1F
1772   0935 D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1773   0937 21 46 00    	LD	HL,0046H	;SHOW T
1774   093A~            #ELSE
1775   093A~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1776   093A~            	LD	HL,0070H	;SHOW T
1777   093A             #ENDIF
1778   093A CD AF 08    	CALL	SDELAY
1779   093D C3 F1 06    	JP	CANCL1
1780   0940             ;-------------------------
1781   0940             ; FUNCTION 8 - PLAY TUNE 1
1782   0940             ;-------------------------
1783   0940 CD 7C 05    PLAY1	CALL	BEEP
1784   0943 CD 63 04    	CALL	KEYREL
1785   0946 21 7B 09    	LD	HL,TUNE1
1786   0949 CD DF 04    	CALL	MUSIC
1787   094C C3 F1 06    	JP	CANCL1
1788   094F             ;-------------------------
1789   094F             ; FUNCTION 9 - PLAY TUNE 2
1790   094F             ;-------------------------
1791   094F CD 7C 05    PLAY2	CALL	BEEP
1792   0952 CD 63 04    	CALL	KEYREL
1793   0955 21 BB 09    	LD	HL,TUNE2
1794   0958 CD DF 04    	CALL	MUSIC
1795   095B C3 F1 06    	JP	CANCL1
1796   095E             ;------------------------------
1797   095E             ; FUNCTION A - PLAY TUNE IN RAM
1798   095E             ;------------------------------
1799   095E CD 7C 05    PLAY3	CALL	BEEP
1800   0961 CD 63 04    	CALL	KEYREL
1801   0964 2A 3F 3F    	LD	HL,(ADRESS)
1802   0967 CD DF 04    	CALL	MUSIC
1803   096A C3 F1 06    	JP	CANCL1
1804   096D             ;-----------------------------
1805   096D             ; FUNCTION B - TOGGLE KEY BEEP
1806   096D             ;-----------------------------
1807   096D CD 7C 05    SWBEEP	CALL	BEEP
1808   0970 3A 3D 3F    	LD	A,(MODE)
1809   0973 EE 40       	XOR	40H
1810   0975 32 3D 3F    	LD	(MODE),A
1811   0978 C3 F1 06    	JP	CANCL1
1812   097B             ;
1813   097B             ; TUNE 1
1814   097B             ; FROM TALKING ELECTRONICS TEC-1
1815   097B             ; MONITOR MON-1
1816   097B             ; BY JOHN HARDY AND KEN STONE
1817   097B             ;
1818   097B 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1818   097F 06 0D 0A 0D 
1819   0983 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1819   0987 0F 11 12 0F 
1820   098B 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1820   098F 12 0F 0D 0A 
1821   0993 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
1821   0997 0F 0A 0D 0F 
1822   099B 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1822   099F 06 0D 0A 0D 
1823   09A3 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1823   09A7 0F 11 12 0F 
1824   09AB 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1824   09AF 12 0F 0D 0A 
1825   09B3 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
1825   09B7 06 12 00 1E 
1826   09BB             ;
1827   09BB             ; TUNE 2
1828   09BB             ; FROM TALKING ELECTRONICS TEC-1
1829   09BB             ; MONITOR MON-1
1830   09BB             ; BY JOHN HARDY AND KEN STONE
1831   09BB             ;
1832   09BB 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
1832   09BF 0A 0A 06 06 
1833   09C3 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
1833   09C7 0A 0A 0A 0A 
1834   09CB 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
1834   09CF 08 0A 0A 0A 
1835   09D3 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
1835   09D7 08 0A 0D 0D 
1836   09DB 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
1836   09DF 0D 05 08 0B 
1837   09E3 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
1837   09E7 06 0B 0A 08 
1838   09EB 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
1838   09EF 06 06 0B 0A 
1839   09F3 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
1839   09F7 08 08 0A 0B 
1840   09FB 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
1840   09FF 06 06 06 06 
1841   0A03 00 00 00 1E 	.DB	00H,00H,00H,1EH
1842   0A07             ;---------------------------
1843   0A07             ; FUNCTION C - SECRET NUMBER
1844   0A07             ;---------------------------
1845   0A07 CD 7C 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
1846   0A0A CD 63 04    	CALL	KEYREL	;AND CLEAR DISPLAY
1847   0A0D CD 1B 04    	CALL	CLRBUF	;BUFFER
1848   0A10 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
1849   0A14             ;
1850   0A14             ; SEPARATE NYBBLES IN RANDOM NUMBER
1851   0A14             ;
1852   0A14 CD B0 04    	CALL	RAND
1853   0A17 DD 75 0B    	LD	(IX+11),L
1854   0A1A DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
1855   0A1D DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
1856   0A20 CD 75 0B    	CALL	SPLIT	;NUMBER INTO
1857   0A23 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
1858   0A26 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
1859   0A29 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
1860   0A2C CD 75 0B    	CALL	SPLIT	;GUESS EASIER
1861   0A2F DD 75 06    	LD	(IX+6),L
1862   0A32 DD 74 07    	LD	(IX+7),H
1863   0A35 AF          	XOR	A
1864   0A36 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
1865   0A38 21 00 00    	LD	HL,0
1866   0A3B DD 75 08    	LD	(IX+8),L
1867   0A3E DD 74 09    	LD	(IX+9),H
1868   0A41 CD A2 03    	CALL	DISADD	;AND DISPLAY GUESS
1869   0A44             ;
1870   0A44             ; SCAN THE KEYBOARD
1871   0A44             ;
1872   0A44 CD 3F 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
1873   0A47 21 53 0A    	LD	HL,SECNUM
1874   0A4A CD 6D 04    	CALL	MENU	;EXECUTE KEY HANDLER
1875   0A4D CD 4C 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1876   0A50 C3 44 0A    	JP	SECRT1
1877   0A53             ;
1878   0A53             ; SECRET NUMBER KEY TABLE
1879   0A53             ;
1880   0A53 12          SECNUM	.DB	12H
1881   0A54 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1881   0A58 04 05 06 07 
1882   0A5C 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1882   0A60 0C 0D 0E 0F 
1883   0A64 10 11       	.DB	10H,11H
1884   0A66 8A 0A 8A 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1884   0A6A 8A 0A 8A 0A 
1885   0A6E 8A 0A 8A 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1885   0A72 8A 0A 8A 0A 
1886   0A76 8A 0A 8A 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1886   0A7A 8A 0A 8A 0A 
1887   0A7E 8A 0A 8A 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1887   0A82 8A 0A 8A 0A 
1888   0A86 B1 0A BA 0A 	.DW	ENDKEY,CHKKEY
1889   0A8A             ;---------------
1890   0A8A             ; EDIT GUESS KEY
1891   0A8A             ;---------------
1892   0A8A F5          EDTKEY	PUSH	AF
1893   0A8B DD 6E 08    	LD	L,(IX+8)
1894   0A8E DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
1895   0A91 CB 25       	SLA	L
1896   0A93 CB 14       	RL	H	;AND DO A 16 BIT
1897   0A95 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
1898   0A97 CB 14       	RL	H	;TO MAKE  ROOM
1899   0A99 CB 25       	SLA	L	;FOR THE NEW KEY
1900   0A9B CB 14       	RL	H
1901   0A9D CB 25       	SLA	L
1902   0A9F CB 14       	RL	H
1903   0AA1 F1          	POP	AF
1904   0AA2 B5          	OR	L	;IT IN THE LEAST
1905   0AA3 6F          	LD	L,A	;SIGNIFICANT NYBBLE
1906   0AA4 DD 75 08    	LD	(IX+8),L
1907   0AA7 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
1908   0AAA CD A2 03    	CALL	DISADD
1909   0AAD CD 7C 05    	CALL	BEEP
1910   0AB0 C9          	RET
1911   0AB1             ;----------
1912   0AB1             ; QUIT GAME
1913   0AB1             ;----------
1914   0AB1 CD 7C 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
1915   0AB4 CD 63 04    	CALL	KEYREL	;AND RETURN TO
1916   0AB7 C3 74 02    	JP	MAIN	;MONITOR
1917   0ABA             ;---------------------------
1918   0ABA             ; SEE IF ITS THE RIGHT GUESS
1919   0ABA             ;---------------------------
1920   0ABA CD 7C 05    CHKKEY	CALL	BEEP
1921   0ABD ED 57       	LD	A,I
1922   0ABF 3C          	INC	A
1923   0AC0 27          	DAA	;INC BCD NO. OF TRIES
1924   0AC1             ;
1925   0AC1             ; BRIEFLY SHOW GUESS NO.
1926   0AC1             ;
1927   0AC1 ED 47       	LD	I,A
1928   0AC3 CD B7 03    	CALL	DISBYT
1929   0AC6 06 FF       	LD	B,255
1930   0AC8 CD F0 03    CHKKY1	CALL	SCAND
1931   0ACB 10 FB       	DJNZ	CHKKY1
1932   0ACD             ;
1933   0ACD             ; SEPARATE GUESS INTO NYBBLES
1934   0ACD             ;
1935   0ACD DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
1936   0AD0 CD 75 0B    	CALL	SPLIT	;NUMBER INTO
1937   0AD3 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
1938   0AD6 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
1939   0AD9 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
1940   0ADC CD 75 0B    	CALL	SPLIT	;GUESS EASIER
1941   0ADF DD 75 02    	LD	(IX+2),L
1942   0AE2 DD 74 03    	LD	(IX+3),H
1943   0AE5             ;
1944   0AE5             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
1945   0AE5             ;
1946   0AE5 AF          	XOR	A
1947   0AE6 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
1948   0AE9 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
1949   0AEC 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
1950   0AEF 06 04       	LD	B,4	;NUMBER OF DIGITS
1951   0AF1 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
1952   0AF2 EB          	EX	DE,HL
1953   0AF3 BE          	CP	(HL)	;SAME AS GUESS?
1954   0AF4 20 10       	JR	NZ,CHKKY4	;NOT SAME
1955   0AF6 DD 7E 0A    	LD	A,(IX+10)
1956   0AF9 C6 10       	ADD	A,10H	;RIGHT POSITION
1957   0AFB DD 77 0A    	LD	(IX+10),A
1958   0AFE 23          CHKKY3	INC	HL	;POINT TO NEXT
1959   0AFF EB          	EX	DE,HL	;DIGIT POSITION
1960   0B00 23          	INC	HL	;AND GO
1961   0B01 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
1962   0B03 C3 22 0B    	JP	CHKKY8
1963   0B06             ;
1964   0B06             ; CHECK IF NUMBER IS THERE
1965   0B06             ;
1966   0B06 C5          CHKKY4	PUSH	BC
1967   0B07 E5          	PUSH	HL
1968   0B08 06 04       	LD	B,4	;CHECK EACH DIGIT
1969   0B0A 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
1970   0B0D BE          CHKKY5	CP	(HL)	;NUMBER IS IN
1971   0B0E 23          	INC	HL	;THE WRONG
1972   0B0F 20 0A       	JR	NZ,CHKKY6	;POSITION
1973   0B11 DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
1974   0B14 3C          	INC	A	;THE RESULT
1975   0B15 DD 77 0A    	LD	(IX+10),A
1976   0B18 C3 1D 0B    	JP	CHKKY7
1977   0B1B 10 F0       CHKKY6	DJNZ	CHKKY5
1978   0B1D E1          CHKKY7	POP	HL
1979   0B1E C1          	POP	BC
1980   0B1F C3 FE 0A    	JP	CHKKY3	;CHECK NEXT DIGIT
1981   0B22             ;
1982   0B22             ; CHECK IF CORRECT
1983   0B22             ;
1984   0B22 DD 7E 0A    CHKKY8	LD	A,(IX+10)
1985   0B25 FE 40       	CP	40H	;IS IT CORRECT?
1986   0B27 CA 47 0B    	JP	Z,CHKKY9	;YES!
1987   0B2A DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
1988   0B2D CD B7 03    	CALL	DISBYT	;IN DATA DISPLAYS
1989   0B30 ED 57       	LD	A,I	;WAS THAT THE
1990   0B32 FE 20       	CP	20H	;LAST GUESS?
1991   0B34 C0          	RET	NZ	;NO TRY AGAIN
1992   0B35             ;
1993   0B35             ; RAN OUT OF TRYS
1994   0B35             ;
1995   0B35 CD 1B 04    	CALL	CLRBUF	;DISPLAY
1996   0B38 DD 6E 0B    	LD	L,(IX+11)
1997   0B3B DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
1998   0B3E CD A2 03    	CALL	DISADD	;AND PLAY
1999   0B41 21 6E 0B    	LD	HL,LOSE	;THE LOSE
2000   0B44 C3 55 0B    	JP	CHKKYA	;MUSIC
2001   0B47             ;
2002   0B47             ; GOT THE RIGHT ANSWER
2003   0B47             ;
2004   0B47 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2005   0B49 CD B7 03    	CALL	DISBYT	;AND PLAY THE WIN
2006   0B4C DD 6E 0B    	LD	L,(IX+11)
2007   0B4F DD 66 0C    	LD	H,(IX+12)
2008   0B52 21 65 0B    	LD	HL,WIN	;MUSIC
2009   0B55             ;
2010   0B55             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2011   0B55             ;
2012   0B55 CD DF 04    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2013   0B58 CD 3F 04    	CALL	SKEYIN	;WAIT FOR A KEY
2014   0B5B CD 7C 05    	CALL	BEEP
2015   0B5E CD 4C 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2016   0B61 E1          	POP	HL	;AND RESTART THE GAME
2017   0B62 C3 07 0A    	JP	SECRET
2018   0B65             ;
2019   0B65             ; WIN AND LOSE MUSIC
2020   0B65             ; FROM TALKING ELECTRONICS TEC-1
2021   0B65             ; MONITOR MON-1
2022   0B65             ; BY JOHN HARDY AND KEN STONE
2023   0B65             ;
2024   0B65 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2024   0B69 17 12 14 10 
2024   0B6D 1F 
2025   0B6E 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2025   0B72 01 11 1F 
2026   0B75             ;-------------------------------
2027   0B75             ; SEPARATE BYTE INTO TWO NYBBLES
2028   0B75             ;-------------------------------
2029   0B75             ;SEPARATES A BYTE INTO TWO
2030   0B75             ;RIGHT JUSTIFIED NYBBLES
2031   0B75             ; ENTRY : A = BYTE TO BE SEPARATED
2032   0B75             ; EXIT  : H = MSN
2033   0B75             ;         L = LSN
2034   0B75             ;
2035   0B75 F5          SPLIT	PUSH	AF
2036   0B76 C5          	PUSH	BC
2037   0B77 47          	LD	B,A	;SAVE BYTE
2038   0B78 E6 0F       	AND	0FH	;STRIP BITS LSN
2039   0B7A 6F          	LD	L,A	;RETURN LSN IN L
2040   0B7B 78          	LD	A,B
2041   0B7C CB 3F       	SRL	A
2042   0B7E CB 3F       	SRL	A
2043   0B80 CB 3F       	SRL	A	;MOVE MSN
2044   0B82 CB 3F       	SRL	A	;INTO LSN
2045   0B84 67          	LD	H,A	;RETURN MSN IN H
2046   0B85 C1          	POP	BC
2047   0B86 F1          	POP	AF
2048   0B87 C9          	RET
2049   0B88             ;-----------------------------------
2050   0B88             ; FUNCTION D - RELAY BOARD SEQUENCER
2051   0B88             ;-----------------------------------
2052   0B88 CD 7C 05    RELSQR	CALL	BEEP
2053   0B8B CD 63 04    	CALL	KEYREL
2054   0B8E 21 97 0B    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2055   0B91 CD 9D 0B    	CALL	RLSTEP
2056   0B94 C3 F1 06    	JP	CANCL1
2057   0B97             ;--------------
2058   0B97             ; TEST SEQUENCE
2059   0B97             ;--------------
2060   0B97 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2060   0B9B 00 FF 
2061   0B9D             ;----------------
2062   0B9D             ; RELAY SEQUENCER
2063   0B9D             ;----------------
2064   0B9D             ; SEQUENCES RELAYS ON RELAY BOARD
2065   0B9D             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2066   0B9D             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2067   0B9D             ; OR REPEAT.
2068   0B9D             ;  TABLE:
2069   0B9D             ;  <BYTE1>,<BYTE2>
2070   0B9D             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2071   0B9D             ;  BYTE2 = FF - REPEAT
2072   0B9D             ;          00 - FINISHED
2073   0B9D             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2074   0B9D             ;  EXIT : NONE MODIFIED
2075   0B9D             ;
2076   0B9D F5          RLSTEP	PUSH	AF
2077   0B9E C5          	PUSH	BC
2078   0B9F D5          	PUSH	DE
2079   0BA0 E5          	PUSH	HL	;SAVE REGISTERS
2080   0BA1 E5          	PUSH	HL
2081   0BA2 EB          	EX	DE,HL	;GET ADDRESS OF DATA
2082   0BA3 1A          RELSR1	LD	A,(DE)
2083   0BA4 4F          	LD	C,A	;GET OUTPUT DATA
2084   0BA5 13          	INC	DE
2085   0BA6 1A          	LD	A,(DE)	;GET TIME DELAY
2086   0BA7 FE 00       	CP	0
2087   0BA9 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2088   0BAB FE FF       	CP	255
2089   0BAD 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2090   0BAF 47          	LD	B,A
2091   0BB0 79          	LD	A,C
2092   0BB1             #IFDEF TEC-1F
2093   0BB1 D3 03       	OUT	(PORT3),A	;STROBE
2094   0BB3~            #ELSE
2095   0BB3~            	OUT	(IO1),A
2096   0BB3             #ENDIF
2097   0BB3 13          	INC	DE
2098   0BB4 CD CB 0B    RELSR2	CALL	DELONE	;1 SEC DELAY
2099   0BB7 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2100   0BB9 C3 A3 0B    	JP	RELSR1
2101   0BBC             ;
2102   0BBC             ; REPEAT
2103   0BBC             ;
2104   0BBC D1          RELSR3	POP	DE	;GET START ADDRESS
2105   0BBD D5          	PUSH	DE	;SAVE FOR LATER
2106   0BBE C3 A3 0B    	JP	RELSR1
2107   0BC1             ;
2108   0BC1             ; FINISHED
2109   0BC1             ;
2110   0BC1 3E 00       RELSR4	LD	A,00H
2111   0BC3             #IFDEF TEC-1F
2112   0BC3 D3 03       	OUT	(PORT3),A	;STROBE
2113   0BC5~            #ELSE
2114   0BC5~            	OUT	(IO1),A	;CLEAR OUTPUT REG
2115   0BC5             #ENDIF
2116   0BC5 E1          	POP	HL
2117   0BC6 E1          	POP	HL
2118   0BC7 D1          	POP	DE
2119   0BC8 C1          	POP	BC
2120   0BC9 F1          	POP	AF
2121   0BCA C9          	RET
2122   0BCB             ;-----------------
2123   0BCB             ; ONE SECOND DELAY
2124   0BCB             ;-----------------
2125   0BCB             ;
2126   0BCB             ; ENTRY : NONE
2127   0BCB             ; EXIT : FLAG REGISTER MODIFIED
2128   0BCB             ;
2129   0BCB C5          DELONE	PUSH	BC
2130   0BCC D5          	PUSH	DE
2131   0BCD E5          	PUSH	HL
2132   0BCE 11 01 00    	LD	DE,0001H
2133   0BD1 21 70 08    	LD	HL,0870H
2134   0BD4 06 92       DELON1	LD	B,92H
2135   0BD6 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2136   0BD8 ED 52       	SBC	HL,DE
2137   0BDA D2 D4 0B    	JP	NC,DELON1	;OUTER LOOP
2138   0BDD E1          	POP	HL
2139   0BDE D1          	POP	DE
2140   0BDF C1          	POP	BC
2141   0BE0 C9          	RET
2142   0BE1             ;--------------------------
2143   0BE1             ; FUNCTION E - KALEIDOSCOPE
2144   0BE1             ;--------------------------
2145   0BE1 CD 7C 05    SCOPE	CALL	BEEP
2146   0BE4 CD 63 04    	CALL	KEYREL
2147   0BE7 CD B0 04    	CALL	RAND	;GENERATE RANDOM
2148   0BEA EB          	EX	DE,HL
2149   0BEB 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2150   0BEE 7B          	LD	A,E	;THE FIRST QUADRANT
2151   0BEF CD 60 0C    	CALL	SEED	;WITH A RANDOM BIT
2152   0BF2 7A          	LD	A,D	;PATTERN
2153   0BF3 CD 60 0C    	CALL	SEED
2154   0BF6             ;
2155   0BF6             ; GENERATE MIRROR IMAGES
2156   0BF6             ;
2157   0BF6 06 04       SCOPE2	LD	B,04H
2158   0BF8 21 00 3E    	LD	HL,BUFFER
2159   0BFB 11 07 3E    	LD	DE,BUFFER+7
2160   0BFE 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2161   0BFF 12          	LD	(DE),A	;QUADRANT INTO
2162   0C00 23          	INC	HL	;THE FOURTH
2163   0C01 1B          	DEC	DE	;QUADRANT
2164   0C02 10 FA       	DJNZ	SCOPE3
2165   0C04             ;
2166   0C04             ; MIRROR ACROSS CENTRE OF DISPLAY
2167   0C04             ;
2168   0C04 06 08       	LD	B,8	;MIRROR THE FIRST
2169   0C06 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2170   0C09 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2171   0C0A E6 0F       	AND	0FH	;OF THE DISPLAY
2172   0C0C 77          	LD	(HL),A	;INTO THE SECOND
2173   0C0D CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2174   0C0F CA 14 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2175   0C12 CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2176   0C14 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2177   0C16 CA 1B 0C    	JP	Z,SCOPE6	;CORRESPONDING
2178   0C19 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2179   0C1B CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2180   0C1D CA 22 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2181   0C20 CB EE       	SET	5,(HL)	;DO THIS FOR
2182   0C22 CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2183   0C24 CA 29 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2184   0C27 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2185   0C29 23          SCOPE8	INC	HL
2186   0C2A 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2187   0C2C             ;
2188   0C2C             ; DISPLAY RANDOM BIT PATTERN
2189   0C2C             ;
2190   0C2C 11 01 00    	LD	DE,0001H	;SET UP DELAY
2191   0C2F 21 00 02    	LD	HL,0200H
2192   0C32 E5          SCOPE9	PUSH	HL
2193   0C33 21 00 3E    	LD	HL,BUFFER
2194   0C36 CD 6F 0C    	CALL	SKATE	;SCAN 8X8
2195   0C39 E1          	POP	HL
2196   0C3A ED 52       	SBC	HL,DE
2197   0C3C C2 32 0C    	JP	NZ,SCOPE9
2198   0C3F             ;
2199   0C3F             ; MANIPULATE BITS FOR NEXT IMAGE
2200   0C3F             ;
2201   0C3F 21 00 3E    SCOPEA	LD	HL,BUFFER
2202   0C42 3E 05       	LD	A,5
2203   0C44 86          	ADD	A,(HL)
2204   0C45 E6 0F       	AND	0FH
2205   0C47 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2206   0C48 23          	INC	HL
2207   0C49 3E 03       	LD	A,03H
2208   0C4B 86          	ADD	A,(HL)
2209   0C4C E6 0F       	AND	0FH
2210   0C4E 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2211   0C4F 23          	INC	HL
2212   0C50 3E 01       	LD	A,01H
2213   0C52 86          	ADD	A,(HL)
2214   0C53 E6 0F       	AND	0FH
2215   0C55 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2216   0C56 23          	INC	HL
2217   0C57 3E 07       	LD	A,07H
2218   0C59 86          	ADD	A,(HL)
2219   0C5A E6 0F       	AND	0FH
2220   0C5C 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2221   0C5D C3 F6 0B    	JP	SCOPE2	;MIRROR BIT PATTERN
2222   0C60             ;
2223   0C60             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2224   0C60             ;
2225   0C60 47          SEED	LD	B,A	;PUT THE
2226   0C61 E6 0F       	AND	0FH	;RANDOM NUMBER
2227   0C63 77          	LD	(HL),A	;INTO THE
2228   0C64 23          	INC	HL	;FIRST QUADRANT
2229   0C65 78          	LD	A,B	;OF THE
2230   0C66 E6 F0       	AND	240	;DISPLAY
2231   0C68 1F          	RRA
2232   0C69 1F          	RRA
2233   0C6A 1F          	RRA
2234   0C6B 1F          	RRA
2235   0C6C 77          	LD	(HL),A
2236   0C6D 23          	INC	HL
2237   0C6E C9          	RET
2238   0C6F             ;-----------------
2239   0C6F             ; SCAN 8X8 DISPLAY
2240   0C6F             ;-----------------
2241   0C6F             ;PUT THE 8 RAM LOCATIONS POINTED TO
2242   0C6F             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2243   0C6F             ;ON TOP ROW.
2244   0C6F             ;  ROUTINE PERIOD IS 500uS
2245   0C6F             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2246   0C6F             ;
2247   0C6F             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2248   0C6F             ;	EXIT : NO REGISTERS MODIFIED
2249   0C6F             ;
2250   0C6F F5          SKATE	PUSH	AF
2251   0C70 C5          	PUSH	BC
2252   0C71 E5          	PUSH	HL	;SAVE REGISTERS
2253   0C72 0E 80       	LD	C,80H
2254   0C74 7E          SKATE1	LD	A,(HL)
2255   0C75             #IFDEF TEC-1F
2256   0C75 D3 03       	OUT	(PORT3),A	;OUTPUT X
2257   0C77~            #ELSE
2258   0C77~            	OUT	(IO0),A	;OUTPUT X
2259   0C77             #ENDIF
2260   0C77 79          	LD	A,C
2261   0C78             #IFDEF TEC-1F
2262   0C78 D3 04       	OUT	(PORT4),A	;OUTPUT Y
2263   0C7A~            #ELSE
2264   0C7A~            	OUT	(IO2),A	;OUTPUT Y
2265   0C7A             #ENDIF
2266   0C7A 06 02       	LD	B,02H
2267   0C7C 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2268   0C7E AF          	XOR	A
2269   0C7F             #IFDEF TEC-1F
2270   0C7F D3 03       	OUT	(PORT3),A
2271   0C81 D3 04       	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2272   0C83~            #ELSE
2273   0C83~            	OUT	(IO0),A
2274   0C83~            	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2275   0C83             #ENDIF
2276   0C83 06 08       	LD	B,08H
2277   0C85 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2278   0C87 23          	INC	HL
2279   0C88 CB 09       	RRC	C
2280   0C8A 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2281   0C8C E1          	POP	HL
2282   0C8D C1          	POP	BC
2283   0C8E F1          	POP	AF
2284   0C8F C9          	RET
2285   0C90             ;----------------------------
2286   0C90             ; FUNCTION F - CLOCK CALENDAR
2287   0C90             ;----------------------------
2288   0C90 CD 7C 05    TIME	CALL	BEEP
2289   0C93 CD 63 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2290   0C96 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2291   0C9A 3A 3B 3F    	LD	A,(ONTIM)
2292   0C9D DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2293   0CA0 3E 60       	LD	A,60H
2294   0CA2 32 3B 3F    	LD	(ONTIM),A	;USE NEW DELAY
2295   0CA5 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2296   0CA8             ;
2297   0CA8             ; DISPLAY TIME,CHECK FOR KEY
2298   0CA8             ;
2299   0CA8 CD FE 0D    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2300   0CAB CD E8 0C    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2301   0CAE CD F0 03    	CALL	SCAND
2302   0CB1 CD 2A 04    	CALL	SCANKEY
2303   0CB4 CB 6F       	BIT	5,A
2304   0CB6 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2305   0CB8 E6 1F       	AND	1FH
2306   0CBA 21 C2 0C    	LD	HL,TIMKEY
2307   0CBD CD 6D 04    	CALL	MENU
2308   0CC0 18 E6       	JR	TIME1
2309   0CC2             
2310   0CC2 04          TIMKEY	.DB	4
2311   0CC3 10 11 12 13 	.DB	10H,11H,12H,13H
2312   0CC7 CF 0C 60 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2312   0CCB D9 0C D9 0C 
2313   0CCF             ;--------------------
2314   0CCF             ; EXIT CLOCK CALENDAR
2315   0CCF             ;--------------------
2316   0CCF E1          CLKEXT	POP	HL	;REMOVE RETURN
2317   0CD0 DD 7E 00    	LD	A,(IX+0)
2318   0CD3 32 3B 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2319   0CD6 C3 EE 06    	JP	CANCEL
2320   0CD9             ;--------------------
2321   0CD9             ; TOGGLE DISPLAY MODE
2322   0CD9             ;--------------------
2323   0CD9 CD 7C 05    CALKEY	CALL	BEEP
2324   0CDC CD 63 04    	CALL	KEYREL
2325   0CDF DD 7E 01    	LD	A,(IX+1)
2326   0CE2 EE 80       	XOR	80H	;TOGGLE DISPLAY
2327   0CE4 DD 77 01    	LD	(IX+1),A
2328   0CE7 C9          	RET
2329   0CE8             ;----------------------
2330   0CE8             ; UPDATE DISPLAY BUFFER
2331   0CE8             ;----------------------
2332   0CE8 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2333   0CEC 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2334   0CEE             ;
2335   0CEE             ; TIME DISPLAY
2336   0CEE             ;
2337   0CEE 3A 1E 3F    UPDBF1	LD	A,(SWREG1)
2338   0CF1 CD C0 03    	CALL	CONBYT
2339   0CF4 CB FD       	SET	7,L	;SET DECIMAL POINT
2340   0CF6 22 35 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2341   0CF9 3A 1F 3F    	LD	A,(SWREG2)
2342   0CFC CD C0 03    	CALL	CONBYT
2343   0CFF CB FD       	SET	7,L	;SET DECIMAL POINT
2344   0D01 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2345   0D04 3A 20 3F    	LD	A,(SWREG3)
2346   0D07 CD C0 03    	CALL	CONBYT
2347   0D0A CB FD       	SET	7,L	;SET DECIMAL POINT
2348   0D0C 22 39 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2349   0D0F C9          	RET
2350   0D10             ;
2351   0D10             ; CALENDAR DISPLAY
2352   0D10             ;
2353   0D10 3A 24 3F    UPDBF2	LD	A,(SWREG7)
2354   0D13 CD C0 03    	CALL	CONBYT
2355   0D16 22 35 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2356   0D19             ;
2357   0D19             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2358   0D19             ;
2359   0D19 21 1B 3F    	LD	HL,CALMDE
2360   0D1C CB 7E       	BIT	7,(HL)
2361   0D1E 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2362   0D20             ;
2363   0D20             ; DD/MM/YY MODE
2364   0D20             ;
2365   0D20 3A 23 3F    	LD	A,(SWREG6)
2366   0D23 CD C0 03    	CALL	CONBYT
2367   0D26 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2368   0D29 3A 22 3F    	LD	A,(SWREG5)
2369   0D2C CD C0 03    	CALL	CONBYT
2370   0D2F 22 39 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2371   0D32 18 12       	JR	UPDBF4
2372   0D34             ;
2373   0D34             ; MM/DD/YY MODE
2374   0D34             ;
2375   0D34 3A 23 3F    UPDBF3	LD	A,(SWREG6)
2376   0D37 CD C0 03    	CALL	CONBYT
2377   0D3A 22 39 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2378   0D3D 3A 22 3F    	LD	A,(SWREG5)
2379   0D40 CD C0 03    	CALL	CONBYT
2380   0D43 22 37 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2381   0D46             ;
2382   0D46             ; SHOW DAY
2383   0D46             ;
2384   0D46 3A 21 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2385   0D49 E6 07       	AND	07H
2386   0D4B 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2387   0D4D FE 07       	CP	07H
2388   0D4F 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2389   0D51 2F          	CPL	;WORK OUT
2390   0D52 D6 01       	SUB	01H	;WHICH DECIMAL POINT
2391   0D54 E6 07       	AND	07H	;TO LIGHT
2392   0D56 21 35 3F    	LD	HL,DISBUF	;ADDING THE DAY
2393   0D59 06 00       	LD	B,00H	;TO A DISPLAY
2394   0D5B 4F          	LD	C,A	;BUFFER INDEX
2395   0D5C 09          	ADD	HL,BC	;AND SETTING THE
2396   0D5D CB FE       	SET	7,(HL)	;DECIMAL POINT
2397   0D5F C9          UPDBF5	RET	;IN THAT DISPLAY
2398   0D60             ;--------------
2399   0D60             ; SET TIME/DATE
2400   0D60             ;--------------
2401   0D60 CD 7C 05    SETCLK	CALL	BEEP
2402   0D63 CD 63 04    	CALL	KEYREL
2403   0D66             ;
2404   0D66             ; EDIT THE DISPLAY BUFFER
2405   0D66             ;
2406   0D66 CD E8 0C    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2407   0D69 CD 3F 04    	CALL	SKEYIN
2408   0D6C CD 63 04    	CALL	KEYREL
2409   0D6F FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2410   0D71 C8          	RET	Z
2411   0D72 FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2412   0D74 28 6E       	JR	Z,SETCK8
2413   0D76 FE 12       	CP	12H
2414   0D78 28 3D       	JR	Z,SETCK4	;PLUS KEY
2415   0D7A FE 13       	CP	13H
2416   0D7C 28 4F       	JR	Z,SETCK6	;MINUS KEY
2417   0D7E FE 0A       	CP	0AH	;NO A-F KEYS
2418   0D80 30 E4       	JR	NC,SETCK1
2419   0D82             ;
2420   0D82             ; IS IT SET CLOCK OR SET CALENDAR?
2421   0D82             ;
2422   0D82 DD CB 01 7E 	BIT	7,(IX+1)
2423   0D86 20 0D       	JR	NZ,SETCK2
2424   0D88             ;
2425   0D88             ; SET CLOCK DISPLAY
2426   0D88             ;
2427   0D88 21 1E 3F    	LD	HL,SWREG1
2428   0D8B ED 6F       	RLD	;MOVE THE NEW KEY
2429   0D8D 23          	INC	HL	;INTO THE CLOCK BUFFER
2430   0D8E ED 6F       	RLD
2431   0D90 23          	INC	HL
2432   0D91 ED 6F       	RLD
2433   0D93 18 D1       	JR	SETCK1
2434   0D95             ;
2435   0D95             ; SET CALENDAR DISPLAY
2436   0D95             ;
2437   0D95 21 1B 3F    SETCK2	LD	HL,CALMDE
2438   0D98 CB 7E       	BIT	7,(HL)
2439   0D9A 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2440   0D9C             ;
2441   0D9C             ; SET CALENDAR AS DD/MM/YY
2442   0D9C             ;
2443   0D9C 21 24 3F    	LD	HL,SWREG7
2444   0D9F ED 6F       	RLD	;MOVE THE NEW KEY
2445   0DA1 2B          	DEC	HL	;INTO THE CAL BUFFER
2446   0DA2 ED 6F       	RLD
2447   0DA4 2B          	DEC	HL
2448   0DA5 ED 6F       	RLD
2449   0DA7 18 BD       	JR	SETCK1
2450   0DA9             ;
2451   0DA9             ; SET CALENDAR AS MM/DD/YY
2452   0DA9             ;
2453   0DA9 21 24 3F    SETCK3	LD	HL,SWREG7
2454   0DAC ED 6F       	RLD	;MOVE THE NEW KEY
2455   0DAE 2B          	DEC	HL	;INTO THE CAL BUFFER
2456   0DAF 2B          	DEC	HL
2457   0DB0 ED 6F       	RLD
2458   0DB2 23          	INC	HL
2459   0DB3 ED 6F       	RLD
2460   0DB5 18 AF       	JR	SETCK1
2461   0DB7             ;
2462   0DB7             ; INC DAY
2463   0DB7             ;
2464   0DB7 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2465   0DBB 28 A9       	JR	Z,SETCK1
2466   0DBD 3A 21 3F    	LD	A,(SWREG4)
2467   0DC0 FE 07       	CP	07H	;IS THE DAY SUNDAY?
2468   0DC2 20 02       	JR	NZ,SETCK5
2469   0DC4 3E 00       	LD	A,00H	;SET MONDAY
2470   0DC6 3C          SETCK5	INC	A	;DAY=DAY+1
2471   0DC7 32 21 3F    	LD	(SWREG4),A
2472   0DCA C3 66 0D    	JP	SETCK1
2473   0DCD             ;
2474   0DCD             ; DEC DAY
2475   0DCD             ;
2476   0DCD DD CB 01 7E SETCK6	BIT	7,(IX+1)
2477   0DD1 CA 66 0D    	JP	Z,SETCK1
2478   0DD4 3A 21 3F    	LD	A,(SWREG4)
2479   0DD7 FE 01       	CP	01H	;IS THE DAY MONDAY?
2480   0DD9 20 02       	JR	NZ,SETCK7
2481   0DDB 3E 08       	LD	A,08H	;SET SUNDAY
2482   0DDD 3D          SETCK7	DEC	A	;DAY=DAY-1
2483   0DDE 32 21 3F    	LD	(SWREG4),A
2484   0DE1 C3 66 0D    	JP	SETCK1
2485   0DE4             ;
2486   0DE4             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2487   0DE4             ;
2488   0DE4 CD 7C 05    SETCK8	CALL	BEEP
2489   0DE7 CD 63 04    	CALL	KEYREL
2490   0DEA 3A 20 3F    	LD	A,(SWREG3)
2491   0DED E6 3F       	AND	3FH	;24 HOUR MODE
2492   0DEF 32 20 3F    	LD	(SWREG3),A
2493   0DF2 3A 21 3F    	LD	A,(SWREG4)
2494   0DF5 E6 07       	AND	07H	;OSC ON,RST ENABLED
2495   0DF7 32 21 3F    	LD	(SWREG4),A
2496   0DFA CD 88 0E    	CALL	WWATCH	;WRITE CHANGES
2497   0DFD C9          	RET
2498   0DFE             ;---------------------
2499   0DFE             ; READ FROM SMARTWATCH
2500   0DFE             ;---------------------
2501   0DFE             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2502   0DFE             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2503   0DFE             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2504   0DFE             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2505   0DFE             ;
2506   0DFE             ;  ENTRY : NONE
2507   0DFE             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2508   0DFE             ;          (ALTERNATE SET MODIFIED)
2509   0DFE             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2510   0DFE             ;
2511   0DFE             ;
2512   0DFE             ; ENABLE SMARTWATCH
2513   0DFE             ;
2514   0DFE F5          RWATCH	PUSH	AF
2515   0DFF C5          	PUSH	BC
2516   0E00 D5          	PUSH	DE
2517   0E01 E5          	PUSH	HL
2518   0E02 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2519   0E05 21 48 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2520   0E08 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2521   0E0A 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2522   0E0B 32 64 3F    	LD	(DALLAS),A
2523   0E0E 23          	INC	HL
2524   0E0F 10 F9       	DJNZ	RWACH1
2525   0E11             ;
2526   0E11             ; READ DATA FROM WATCH
2527   0E11             ;
2528   0E11 06 20       	LD	B,32
2529   0E13 3A 64 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2530   0E16 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2531   0E18 CB 1A       	RR	D	;DE AND HL
2532   0E1A CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2533   0E1C CB 1C       	RR	H	;THE ALTERNATE PAIR
2534   0E1E CB 1D       	RR	L
2535   0E20 10 F1       	DJNZ	RWACH2
2536   0E22 D9          	EXX
2537   0E23 06 20       	LD	B,32
2538   0E25 3A 64 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2539   0E28 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2540   0E2A CB 1A       	RR	D
2541   0E2C CB 1B       	RR	E
2542   0E2E CB 1C       	RR	H
2543   0E30 CB 1D       	RR	L
2544   0E32 10 F1       	DJNZ	RWACH3
2545   0E34             ;
2546   0E34             ; SAVE IN WATCH REGISTERS
2547   0E34             ;
2548   0E34 22 21 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2549   0E37 ED 53 23 3F 	LD	(SWREG6),DE	;GET THE DATA
2550   0E3B D9          	EXX
2551   0E3C 22 1D 3F    	LD	(SWREG0),HL
2552   0E3F ED 53 1F 3F 	LD	(SWREG2),DE
2553   0E43 E1          	POP	HL
2554   0E44 D1          	POP	DE
2555   0E45 C1          	POP	BC
2556   0E46 F1          	POP	AF
2557   0E47 C9          	RET
2558   0E48             ;
2559   0E48             ; SMARTWATCH ACCESS PATTERN
2560   0E48             ;
2561   0E48 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2561   0E4C 5C 2E 17 8B 
2562   0E50 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2562   0E54 A3 D1 E8 74 
2563   0E58 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2563   0E5C 3A 1D 8E 47 
2564   0E60 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2564   0E64 C5 E2 71 B8 
2565   0E68 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2565   0E6C 5C 2E 17 8B 
2566   0E70 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2566   0E74 A3 D1 E8 74 
2567   0E78 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2567   0E7C 3A 1D 8E 47 
2568   0E80 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2568   0E84 C5 E2 71 B8 
2569   0E88             ;--------------------
2570   0E88             ; WRITE TO SMARTWATCH
2571   0E88             ;--------------------
2572   0E88             ;
2573   0E88             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2574   0E88             ; IT USING BIT MANIPULATION.
2575   0E88             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2576   0E88             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2577   0E88             ; SMARTWATCH IS ENABLED.
2578   0E88             ;
2579   0E88             ; ENTRY : NONE
2580   0E88             ; THE DATA TO WRITE TO THE SMARTWATCH
2581   0E88             ; MUST BE IN SWREG0 - SWREG7
2582   0E88             ;  EXIT : NO WORKING REGISTERS MODIFIED
2583   0E88             ;  (ALTERNATE SET MODIFIED)
2584   0E88             ; GET DATA TO WRITE TO WATCH
2585   0E88             ;
2586   0E88 F5          WWATCH	PUSH	AF
2587   0E89 C5          	PUSH	BC
2588   0E8A D5          	PUSH	DE
2589   0E8B E5          	PUSH	HL
2590   0E8C 2A 21 3F    	LD	HL,(SWREG4)	;SET UP THE
2591   0E8F ED 5B 23 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2592   0E93 D9          	EXX
2593   0E94 2A 1D 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2594   0E97 ED 5B 1F 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2595   0E9B             ;
2596   0E9B             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2597   0E9B             ;
2598   0E9B 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2599   0E9E 3E C5       	LD	A,0C5H
2600   0EA0 0E 80       	LD	C,80H	;NUMBER OF BYTES
2601   0EA2 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2602   0EA4 32 64 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2603   0EA7 CB 0F       	RRC	A
2604   0EA9 CB 38       	SRL	B
2605   0EAB 30 F7       	JR	NC,WWACH2	;MORE BITS
2606   0EAD CB 39       	SRL	C
2607   0EAF 38 11       	JR	C,WWACH4	;NO MORE BYTES
2608   0EB1 CB 47       	BIT	0,A
2609   0EB3 20 0A       	JR	NZ,WWACH3
2610   0EB5 CB 0F       	RRC	A
2611   0EB7 CB 0F       	RRC	A
2612   0EB9 CB 0F       	RRC	A
2613   0EBB CB 0F       	RRC	A
2614   0EBD 18 E3       	JR	WWACH1
2615   0EBF 2F          WWACH3	CPL
2616   0EC0 18 E0       	JR	WWACH1
2617   0EC2             ;
2618   0EC2             ; WRITE DATA TO WATCH
2619   0EC2             ;
2620   0EC2 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2621   0EC4 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2622   0EC6 CB 1B       	RR	E	;ONTO D0 AND INTO
2623   0EC8 CB 1C       	RR	H	;THE SMARTWATCH
2624   0ECA CB 1D       	RR	L
2625   0ECC 17          	RLA
2626   0ECD 32 64 3F    	LD	(DALLAS),A
2627   0ED0 10 F2       	DJNZ	WWACH5
2628   0ED2 D9          	EXX	;RESTORE REGISTERS
2629   0ED3 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2630   0ED5 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2631   0ED7 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2632   0ED9 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2633   0EDB CB 1D       	RR	L
2634   0EDD 17          	RLA
2635   0EDE 32 64 3F    	LD	(DALLAS),A
2636   0EE1 10 F2       	DJNZ	WWACH6
2637   0EE3 E1          	POP	HL
2638   0EE4 D1          	POP	DE
2639   0EE5 C1          	POP	BC
2640   0EE6 F1          	POP	AF
2641   0EE7 C9          	RET
2642   0EE8             ;-----------------
2643   0EE8             ; ONE SECOND DELAY
2644   0EE8             ;-----------------
2645   0EE8             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2646   0EE8             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2647   0EE8             ;
2648   0EE8             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2649   0EE8             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2650   0EE8             ; READS THE SAME AS THE REFERENCE VALUE,
2651   0EE8             ; THEN THE ROUTINE RETURNS
2652   0EE8             ;
2653   0EE8             ; ENTRY : NONE
2654   0EE8             ; EXIT : NONE MODIFIED
2655   0EE8             ;
2656   0EE8 F5          ONESEC	PUSH	AF
2657   0EE9 C5          	PUSH	BC
2658   0EEA CD FE 0D    	CALL	RWATCH	;READ WATCH
2659   0EED 3A 1E 3F    	LD	A,(SWREG1)
2660   0EF0 47          	LD	B,A	;SAVE REF COUNT
2661   0EF1 CD FE 0D    ONESC1	CALL	RWATCH
2662   0EF4 3A 1E 3F    	LD	A,(SWREG1)
2663   0EF7 B8          	CP	B	;SAME AS REF?
2664   0EF8 CA F1 0E    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2665   0EFB C1          	POP	BC
2666   0EFC F1          	POP	AF
2667   0EFD C9          	RET
2668   0EFE             ;---------------
2669   0EFE             ; SERIAL MONITOR
2670   0EFE             ;---------------
2671   0EFE             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2672   0EFE             ; COMMS PARAMETERS ARE 4800,n,8,2
2673   0EFE             ;
2674   0EFE             ;------------
2675   0EFE             ; ASCII CODES
2676   0EFE             ;------------
2677   0EFE             ESC	.EQU	1BH
2678   0EFE             CR	.EQU	0DH
2679   0EFE             LF	.EQU	0AH
2680   0EFE             
2681   0EFE 3E 40       SCBUG	LD	A,40H
2682   0F00 D3 01       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
2683   0F02             ;
2684   0F02             ; START UP THE MONITOR
2685   0F02             ;
2686   0F02 ED 73 14 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2687   0F06 21 63 12    	LD	HL,SSSTEP
2688   0F09 22 5F 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2689   0F0C CD CB 0B    	CALL	DELONE	;WAIT A SEC SO THE HOST SEES TX HIGH
2690   0F0F 21 DE 07    	LD	HL,TXDATA
2691   0F12 22 10 3F    	LD	(PUTCH),HL	;USE THE BITBANG SERIAL TRANSMIT
2692   0F15 21 09 08    	LD	HL,RXDATA
2693   0F18 22 12 3F    	LD	(GETCH),HL	;USE THE BITBANG SERIAL RECEIVE
2694   0F1B 21 D2 13    	LD	HL,INITSZ	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2695   0F1E CD 55 12    	CALL	SNDMSG	;INITIALISE THE TERMINAL
2696   0F21 CD 92 03    	CALL	TYPE
2697   0F24 CD 55 12    	CALL	SNDMSG	;BOARD TYPE
2698   0F27 21 03 13    	LD	HL,SIGNON
2699   0F2A CD 55 12    	CALL	SNDMSG	;SEND THE SIGNON
2700   0F2D CD 8E 03    	CALL	VERS
2701   0F30 CD 55 12    	CALL	SNDMSG	;MONITOR VERSION
2702   0F33 21 23 13    	LD	HL,CMDLST
2703   0F36 CD 55 12    	CALL	SNDMSG
2704   0F39             ;
2705   0F39             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2706   0F39             ;
2707   0F39 3E 3E       START2	LD	A,'>'
2708   0F3B CD B6 0F    	CALL	OUTCH	;DISPLAY THE PROMPT
2709   0F3E CD BC 0F    START3	CALL	INCH	;GET A CHARACTER FROM THE CONSOLE
2710   0F41 4F          	LD	C,A	;SAVE FOR LATER
2711   0F42 E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2712   0F44             ;
2713   0F44             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2714   0F44             ;
2715   0F44 21 63 0F    	LD	HL,MONMENU
2716   0F47 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2717   0F48 23          	INC	HL
2718   0F49 BE          START4	CP	(HL)	;IN THE LIST?
2719   0F4A 28 05       	JR	Z,START5	;OK DO IT
2720   0F4C 23          	INC	HL
2721   0F4D 10 FA       	DJNZ	START4	;KEEP LOOKING
2722   0F4F 18 ED       	JR	START3
2723   0F51 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2724   0F52 CD B6 0F    	CALL	OUTCH	;TO ECHO IT
2725   0F55 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2726   0F57 21 63 0F    	LD	HL,MONMENU	;USE THE MENU HANDLER
2727   0F5A CD 6D 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2728   0F5D             ;
2729   0F5D             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2730   0F5D             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2731   0F5D             ;
2732   0F5D CD AF 0F    WARM	CALL	TXCRLF	;START ON A NEW LINE
2733   0F60 C3 39 0F    	JP	START2
2734   0F63             ;
2735   0F63             ; SCBUG MONITOR COMMANDS
2736   0F63             ;
2737   0F63 07          MONMENU	.DB 7
2738   0F64 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2738   0F68 47 49 58 
2739   0F6B 95 11 E5 0F 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2739   0F6F E1 10 EA 10 
2740   0F73 C2 0F 3D 11 	.DW	GOJUMP,INTHEX,EXIT
2740   0F77 56 11 
2741   0F79             ;-----------------------------
2742   0F79             ; GET A BYTE FROM THE TERMINAL
2743   0F79             ;-----------------------------
2744   0F79 CD BC 0F    GETCHR	CALL	INCH
2745   0F7C FE 1B       	CP	ESC
2746   0F7E 28 27       	JR	Z,GETOUT
2747   0F80 47          	LD	B,A	;SAVE TO ECHO
2748   0F81 CD 69 11    	CALL	ASC2HEX
2749   0F84 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2750   0F86 21 18 3F    	LD	HL,DATA
2751   0F89 77          	LD	(HL),A
2752   0F8A 78          	LD	A,B
2753   0F8B CD B6 0F    	CALL	OUTCH	;ECHO VALID HEX
2754   0F8E CD BC 0F    GETNYB	CALL	INCH
2755   0F91 FE 1B       	CP	ESC
2756   0F93 28 12       	JR	Z,GETOUT
2757   0F95 47          	LD	B,A	;SAVE TO ECHO
2758   0F96 CD 69 11    	CALL	ASC2HEX
2759   0F99 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2760   0F9B ED 6F       	RLD
2761   0F9D 78          	LD	A,B
2762   0F9E CD B6 0F    	CALL	OUTCH	;ECHO VALID HEX
2763   0FA1 7E          	LD	A,(HL)
2764   0FA2 CD A7 0F    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2765   0FA5 3F          	CCF	;AND THEN COMPLEMENTING IT
2766   0FA6 C9          	RET
2767   0FA7 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
2768   0FA8 C9          	RET
2769   0FA9             ;---------------
2770   0FA9             ; OUTPUT A SPACE
2771   0FA9             ;---------------
2772   0FA9 3E 20       OUTSP	LD	A,' '
2773   0FAB CD B6 0F    	CALL	OUTCH
2774   0FAE C9          	RET
2775   0FAF             ;-------------
2776   0FAF             ; OUTPUT CRLF
2777   0FAF             ;------------
2778   0FAF 3E 0D       TXCRLF	LD	A,CR
2779   0FB1 CD B6 0F    	CALL	OUTCH
2780   0FB4 3E 0A       	LD	A,LF
2781   0FB6             ;-----------------------------------
2782   0FB6             ; OUTPUT A CHARACTER TO THE TERMINAL
2783   0FB6             ;-----------------------------------
2784   0FB6 DD 2A 10 3F OUTCH	LD	IX,(PUTCH)
2785   0FBA DD E9       	JP	(IX)
2786   0FBC             ;------------------------------------
2787   0FBC             ; INPUT A CHARACTER FROM THE TERMINAL
2788   0FBC             ;------------------------------------
2789   0FBC DD 2A 12 3F INCH	LD	IX,(GETCH)
2790   0FC0 DD E9       	JP	(IX)
2791   0FC2             ;------------------------------
2792   0FC2             ; GO <ADDR>
2793   0FC2             ; TRANSFERS EXECUTION TO <ADDR>
2794   0FC2             ;------------------------------
2795   0FC2 CD A9 0F    GOJUMP	CALL	OUTSP
2796   0FC5 CD 79 0F    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
2797   0FC8 D8          	RET	C
2798   0FC9 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2799   0FCC CD 79 0F    	CALL	GETCHR	;GET ADDRESS LOW BYTE
2800   0FCF D8          	RET	C
2801   0FD0 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2802   0FD3             ;
2803   0FD3             ; WAIT FOR A CR OR ESC
2804   0FD3             ;
2805   0FD3 CD BC 0F    GOJMP1	CALL	INCH
2806   0FD6 FE 1B       	CP	ESC	;ESC KEY?
2807   0FD8 C8          	RET	Z
2808   0FD9 FE 0D       	CP	CR
2809   0FDB 20 F6       	JR	NZ,GOJMP1
2810   0FDD CD AF 0F    	CALL	TXCRLF
2811   0FE0 E1          	POP	HL	;POP THE UNUSED MENU RETURN ADDRESS FROM THE STACK
2812   0FE1 2A 16 3F    	LD	HL,(ADDR)
2813   0FE4 E9          	JP	(HL)	;GOOD LUCK WITH THAT!
2814   0FE5             ;---------------------
2815   0FE5             ; DISPLAY COMMAND HELP
2816   0FE5             ;---------------------
2817   0FE5 CD F6 12    HELP	CALL	PRNTSZ
2818   0FE8 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
2818   0FEC 41 41 41 41 
2818   0FF0 20 20 20 20 
2818   0FF4 44 69 73 70 
2818   0FF8 6C 61 79 20 
2818   0FFC 44 61 74 61 
2818   1000 20 61 74 20 
2818   1004 41 64 64 72 
2818   1008 65 73 73 20 
2818   100C 41 41 41 41 
2819   1010 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
2819   1014 20 20 20 20 
2819   1018 20 20 20 20 
2819   101C 53 50 41 43 
2819   1020 45 20 74 6F 
2819   1024 20 43 4F 4E 
2819   1028 54 49 4E 55 
2819   102C 45 2C 20 45 
2819   1030 53 43 20 74 
2819   1034 6F 20 51 55 
2819   1038 49 54 
2820   103A 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
2820   103E 20 20 20 20 
2820   1042 20 20 20 20 
2820   1046 54 6F 67 67 
2820   104A 6C 65 20 53 
2820   104E 69 6E 67 6C 
2820   1052 65 20 53 74 
2820   1056 65 70 70 65 
2820   105A 72 
2821   105B 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
2821   105F 41 41 41 41 
2821   1063 20 20 20 20 
2821   1067 4D 6F 64 69 
2821   106B 66 79 20 41 
2821   106F 64 64 72 65 
2821   1073 73 73 20 41 
2821   1077 41 41 41 
2822   107A 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
2822   107E 41 41 41 41 
2822   1082 20 20 20 20 
2822   1086 47 4F 20 66 
2822   108A 72 6F 6D 20 
2822   108E 41 41 41 41 
2823   1092 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
2823   1096 20 20 20 20 
2823   109A 20 20 20 20 
2823   109E 44 6F 77 6E 
2823   10A2 6C 6F 61 64 
2823   10A6 20 49 4E 54 
2823   10AA 45 4C 20 48 
2823   10AE 65 78 
2824   10B0 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
2824   10B4 20 20 20 20 
2824   10B8 20 20 20 20 
2824   10BC 45 78 69 74 
2825   10C0 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
2825   10C4 20 20 20 20 
2825   10C8 20 20 20 20 
2825   10CC 54 68 69 73 
2825   10D0 20 48 65 6C 
2825   10D4 70 20 4D 65 
2825   10D8 73 73 61 67 
2825   10DC 65 0D 0A 00 
2826   10E0 C9          	RET
2827   10E1             ;-----------------------------------------------
2828   10E1             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
2829   10E1             ;-----------------------------------------------
2830   10E1             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
2831   10E1             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
2832   10E1             ;
2833   10E1 21 6F 13    SSTOGL	LD	HL,TOGGLE
2834   10E4 CD 55 12    	CALL	SNDMSG
2835   10E7             #IFDEF TEC-1F
2836   10E7 D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
2837   10E9~            #ELSE
2838   10E9~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
2839   10E9             #ENDIF
2840   10E9 C9          	RET
2841   10EA             ;----------------------------
2842   10EA             ; M DISPLAY AND MODIFY MEMORY
2843   10EA             ;----------------------------
2844   10EA CD A9 0F    MODIFY	CALL	OUTSP
2845   10ED             ;
2846   10ED             ;GET THE ADDRESS
2847   10ED             ;
2848   10ED CD 79 0F    	CALL	GETCHR
2849   10F0 D8          	RET	C
2850   10F1 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2851   10F4 CD 79 0F    	CALL	GETCHR
2852   10F7 D8          	RET	C
2853   10F8 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2854   10FB             ;
2855   10FB             ; DISPLAY ON A NEW LINE
2856   10FB             ;
2857   10FB CD AF 0F    MDIFY1	CALL	TXCRLF
2858   10FE ED 5B 16 3F 	LD	DE,(ADDR)
2859   1102 21 00 3E    	LD	HL,BUFFER
2860   1105 CD 27 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
2861   1108 21 00 3E    	LD	HL,BUFFER
2862   110B CD 1B 12    	CALL	WRDOUT	;OUTPUT THE ADDRESS
2863   110E CD A9 0F    	CALL	OUTSP
2864   1111             ;
2865   1111             ;GET THE DATA AT THE ADDRESS
2866   1111             ;
2867   1111 2A 16 3F    	LD	HL,(ADDR)
2868   1114 7E          	LD	A,(HL)
2869   1115             ;
2870   1115             ; DISPLAY THE DATA
2871   1115             ;
2872   1115 21 00 3E    	LD	HL,BUFFER
2873   1118 CD 2C 12    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
2874   111B 21 00 3E    	LD	HL,BUFFER
2875   111E CD 1E 12    	CALL	BYTOUT	;OUTPUT THE BYTE
2876   1121 CD A9 0F    	CALL	OUTSP
2877   1124             ;
2878   1124             ; GET NEW DATA,EXIT OR CONTINUE
2879   1124             ;
2880   1124 CD 79 0F    	CALL	GETCHR
2881   1127 D8          	RET	C
2882   1128 47          	LD	B,A	;SAVE IT FOR LATER
2883   1129 2A 16 3F    	LD	HL,(ADDR)
2884   112C 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
2885   112D 78          	LD	A,B
2886   112E BE          	CP	(HL)
2887   112F 28 05       	JR	Z,MDIFY2
2888   1131 3E 3F       	LD	A,'?'
2889   1133 CD B6 0F    	CALL	OUTCH	;NOT THE SAME DATA, PROBABLY NO RAM THERE
2890   1136             ;
2891   1136             ; INCREMENT THE ADDRESS
2892   1136             ;
2893   1136 23          MDIFY2	INC	HL
2894   1137 22 16 3F    	LD	(ADDR),HL
2895   113A C3 FB 10    	JP	MDIFY1
2896   113D             ;-----------------------
2897   113D             ; RECEIVE INTEL HEX FILE
2898   113D             ;-----------------------
2899   113D 21 86 13    INTHEX	LD	HL,TXFILE
2900   1140 CD 55 12    	CALL	SNDMSG	;SEND FILE
2901   1143 CD 4D 07    	CALL	INTELH
2902   1146 20 07       	JR	NZ,ITHEX1
2903   1148 21 9F 13    	LD	HL,FILEOK
2904   114B CD 55 12    	CALL	SNDMSG	;GOT FILE OK
2905   114E C9          	RET
2906   114F 21 B4 13    ITHEX1	LD	HL,CSUMERR
2907   1152 CD 55 12    	CALL	SNDMSG	;CHECKSUM ERROR
2908   1155 C9          	RET
2909   1156             ;------------------------
2910   1156             ; EXIT BACK TO SC MONITOR
2911   1156             ;------------------------
2912   1156 21 C7 13    EXIT	LD	HL,BYE
2913   1159 CD 55 12    	CALL	SNDMSG
2914   115C C3 74 02    	JP	MAIN	;STACK IS RESET TO TOP OF RAM IN MAIN
2915   115F             ;------------------
2916   115F             ; DISPLAY REGISTERS
2917   115F             ;------------------
2918   115F CD C4 12    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
2919   1162 21 00 3E    	LD	HL,BUFFER
2920   1165 CD 55 12    	CALL	SNDMSG
2921   1168 C9          	RET
2922   1169             ;----------------------------------------
2923   1169             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
2924   1169             ;----------------------------------------
2925   1169             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
2926   1169             ; ENTRY OTHER THAN HEXADECIMAL KEYS
2927   1169             ;
2928   1169             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
2929   1169             ;ENTRY : A= ASCII 0-9,A-F
2930   1169             ;EXIT  : CARRY =  1
2931   1169             ;          A= HEX 0-F IN LSN
2932   1169             ;      : CARRY = 0
2933   1169             ;          A= OUT OF RANGE CHARACTER & 7FH
2934   1169             ; A AND F REGISTERS MODIFIED
2935   1169             ;
2936   1169 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
2937   116B FE 30       	CP	'0'
2938   116D 38 23       	JR	C,AC2HEX4	;LESS THAN 0
2939   116F FE 3A       	CP	3AH
2940   1171 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
2941   1173 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
2942   1175 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
2943   1176 C9          	RET
2944   1177             ;
2945   1177 FE 41       AC2HEX2	CP	'A'
2946   1179 38 17       	JR	C,AC2HEX4	;LESS THAN A
2947   117B FE 47       	CP	47H
2948   117D 30 04       	JR	NC,AC2HEX3	;MORE THAN F
2949   117F D6 07       	SUB	07H	;CONVERT TO NYBBLE
2950   1181 18 F2       	JR	AC2HEX1
2951   1183             	
2952   1183 FE 61       AC2HEX3	CP	'a'
2953   1185 DA 92 11    	JP	C,AC2HEX4	;LESS THAN a
2954   1188 FE 67       	CP	67H
2955   118A 30 06       	JR	NC,AC2HEX4	;MORE THAN f
2956   118C E6 DF       	AND 0DFH
2957   118E D6 07       	SUB 07H	;CONVERT TO NYBBLE
2958   1190 18 E3       	JR	AC2HEX1
2959   1192 E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
2960   1194 C9          	RET
2961   1195             ;--------------------------
2962   1195             ; D DISPLAY MEMORY LOCATION
2963   1195             ;--------------------------
2964   1195 CD A9 0F    DSPLAY	CALL	OUTSP	;A SPACE
2965   1198 CD 79 0F    	CALL	GETCHR
2966   119B D8          	RET	C
2967   119C 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2968   119F CD 79 0F    	CALL	GETCHR
2969   11A2 D8          	RET	C
2970   11A3 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2971   11A6             ;
2972   11A6             ; WAIT FOR CR OR ESC
2973   11A6             ;
2974   11A6 CD BC 0F    DPLAY1	CALL	INCH
2975   11A9 FE 1B       	CP	ESC
2976   11AB C8          	RET	Z
2977   11AC FE 0D       	CP	CR
2978   11AE 20 F6       	JR	NZ,DPLAY1
2979   11B0 CD AF 0F    	CALL	TXCRLF	;NEWLINE
2980   11B3             ;
2981   11B3             ; DISPLAY THE LINE
2982   11B3             ;
2983   11B3 CD C8 11    DPLAY2 CALL  DPLINE
2984   11B6 ED 53 16 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
2985   11BA             ;
2986   11BA             ; DISPLAY MORE LINES OR EXIT
2987   11BA             ;
2988   11BA CD BC 0F    DPLAY3	CALL	INCH
2989   11BD 38 FB       	JR	C,DPLAY3
2990   11BF FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
2991   11C1 28 F0       	JR	Z,DPLAY2
2992   11C3 FE 1B       	CP	ESC	;ESC EXITS
2993   11C5 20 F3       	JR	NZ,DPLAY3
2994   11C7 C9          	RET
2995   11C8             ;-------------------------
2996   11C8             ; DISPLAY A LINE OF MEMORY
2997   11C8             ;-------------------------
2998   11C8 ED 5B 16 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
2999   11CC 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3000   11CF             ;
3001   11CF             ; DISPLAY THE ADDRESS
3002   11CF             ;
3003   11CF CD 27 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3004   11D2 CD 0B 12    	CALL	SPCBUF
3005   11D5             ;
3006   11D5             ; DISPLAY 16 BYTES
3007   11D5             ;
3008   11D5 06 10       	LD	B,16
3009   11D7 1A          DLINE1	LD	A,(DE)
3010   11D8 CD 2C 12    	CALL	BYTASC
3011   11DB CD 0B 12    	CALL	SPCBUF
3012   11DE 13          	INC	DE
3013   11DF 10 F6       	DJNZ	DLINE1
3014   11E1 CD 0B 12    	CALL	SPCBUF
3015   11E4             ;
3016   11E4             ; NOW DISPLAY THE ASCII CHARACTER
3017   11E4             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3018   11E4             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3019   11E4             ;
3020   11E4 ED 5B 16 3F 	LD	DE,(ADDR)
3021   11E8 06 10       	LD	B,16
3022   11EA 1A          DLINE2	LD	A,(DE)
3023   11EB FE 20       	CP	20H
3024   11ED 38 07       	JR	C,DOT
3025   11EF FE 7F       	CP	7FH
3026   11F1 30 03       	JR	NC,DOT
3027   11F3 C3 F8 11    	JP	NDOT
3028   11F6 3E 2E       DOT	LD	A,'.'
3029   11F8 CD 0D 12    NDOT	CALL	INBUF
3030   11FB 13          	INC	DE
3031   11FC 10 EC       	DJNZ	DLINE2
3032   11FE             ;
3033   11FE             ;TERMINATE AND DISPLAY STRING
3034   11FE             ;
3035   11FE CD 10 12    	CALL	BCRLF
3036   1201 3E 00       	LD	A,00H
3037   1203 77          	LD	(HL),A
3038   1204 21 00 3E    	LD	HL,BUFFER
3039   1207 CD 55 12    	CALL	SNDMSG
3040   120A C9          	RET
3041   120B             ;
3042   120B             ; PUT A SPACE IN THE BUFFER
3043   120B             ;
3044   120B 3E 20       SPCBUF	LD	A,' '
3045   120D 77          INBUF	LD	(HL),A
3046   120E 23          	INC	HL
3047   120F C9          	RET
3048   1210             ;
3049   1210             ; PUT A CR LF IN THE BUFFER
3050   1210             ;
3051   1210 3E 0D       BCRLF	LD	A,CR
3052   1212 CD 0D 12    	CALL	INBUF
3053   1215 3E 0A       	LD	A,LF
3054   1217 CD 0D 12    	CALL	INBUF
3055   121A C9          	RET
3056   121B             ;----------------------
3057   121B             ; SEND ASCII HEX VALUES
3058   121B             ;----------------------
3059   121B             ;
3060   121B             ; OUTPUT THE 4 BYTE, WRDOUT
3061   121B             ; THE 2 BYTE, BYTOUT
3062   121B             ; OR THE SINGLE BYTE, NYBOUT
3063   121B             ; ASCII STRING AT HL TO THE SERIAL PORT
3064   121B             ;
3065   121B CD 1E 12    WRDOUT	CALL	BYTOUT
3066   121E CD 21 12    BYTOUT	CALL	NYBOUT
3067   1221 7E          NYBOUT	LD	A,(HL)
3068   1222 CD B6 0F    	CALL	OUTCH
3069   1225 23          	INC	HL
3070   1226 C9          	RET
3071   1227             ;----------------
3072   1227             ;CONVERT TO ASCII
3073   1227             ;----------------
3074   1227             ;
3075   1227             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3076   1227             ;
3077   1227             ;        ENTRY :  A = BINARY TO CONVERT
3078   1227             ;                  HL = CHARACTER BUFFER ADDRESS
3079   1227             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3080   1227             ;
3081   1227             ;        MODIFIES : DE
3082   1227             ;
3083   1227 7A          WRDASC	LD	A,D	;CONVERT AND
3084   1228 CD 2C 12    	CALL	BYTASC	;OUTPUT D
3085   122B 7B          	LD	A,E	;THEN E
3086   122C             ;
3087   122C             ;CONVERT A BYTE TO ASCII 
3088   122C             ;
3089   122C F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3090   122D 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3091   122E 0F          	RRCA
3092   122F 0F          	RRCA
3093   1230 0F          	RRCA
3094   1231 CD 35 12    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3095   1234 F1          	POP	AF	;RESTORE LOW NYBBLE
3096   1235             ;
3097   1235             ; CONVERT A NYBBLE TO ASCII
3098   1235             ;
3099   1235 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3100   1237 C6 90       	ADD	A,90H	;CONVERT TO
3101   1239 27          	DAA	;ASCII
3102   123A CE 40       	ADC	A,40H
3103   123C 27          	DAA
3104   123D             ;
3105   123D             ; SAVE IN STRING
3106   123D             ;
3107   123D 77          INSBUF	LD	(HL),A
3108   123E 23          	INC	HL
3109   123F C9          	RET
3110   1240             ;------------------------------------------------------
3111   1240             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3112   1240             ;------------------------------------------------------
3113   1240             ;
3114   1240             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3115   1240             ;                      INTO A STRING OF ASCII
3116   1240             ;                      ONES AND ZEROES.
3117   1240             ;
3118   1240             ;           ENTRY :  A = BINARY TO CONVERT
3119   1240             ;                   HL = CHARACTER BUFFER ADDRESS
3120   1240             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3121   1240             ;
3122   1240             ;        MODIFIES : NONE
3123   1240             ;
3124   1240 C5          BITASC PUSH  BC
3125   1241 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3126   1243 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3127   1245 20 05       	JR	NZ,BTASC3
3128   1247 0E 30       	LD	C,30H	;IT'S A ZERO
3129   1249 71          BTASC2	LD	(HL),C
3130   124A 18 03       	JR	BTASC4
3131   124C 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3132   124E 71          	LD	(HL),C
3133   124F 23          BTASC4	INC	HL
3134   1250 17          	RLA
3135   1251 10 F0       	DJNZ	BTASC1	;NEXT BIT
3136   1253 C1          	POP	BC
3137   1254 C9          	RET
3138   1255             ;-----------------------------------------
3139   1255             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3140   1255             ;-----------------------------------------
3141   1255             ;
3142   1255             ; SENDS A ZERO TERMINATED STRING OR 
3143   1255             ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
3144   1255             ;
3145   1255             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3146   1255             ;      EXIT  : NONE
3147   1255             ;
3148   1255             ;       MODIFIES : A,B,C
3149   1255             ;
3150   1255 06 80       SNDMSG	LD	B,128	;128 CHARS MAX
3151   1257 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3152   1258 FE 00       	CP	00H	;ZERO TERMINATOR?
3153   125A 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3154   125C CD B6 0F    	CALL	OUTCH	;TRANSMIT THE CHAR
3155   125F 23          	INC	HL
3156   1260 10 F5       	DJNZ	SDMSG1	;128 CHARS MAX!
3157   1262 C9          SDMSG2	RET
3158   1263             ;----------------------
3159   1263             ; SERIAL SINGLE STEPPER
3160   1263             ;----------------------
3161   1263 E1          SSSTEP	POP	HL	;GET HL BACK
3162   1264 F5          	PUSH	AF	;SAVE AF FOR LATER
3163   1265 22 4D 3F    	LD	(TMPHL),HL
3164   1268 ED 53 4B 3F 	LD	(TMPDE),DE
3165   126C ED 43 49 3F 	LD	(TMPBC),BC
3166   1270 DD 22 4F 3F 	LD	(TMPIX),IX
3167   1274 FD 22 51 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3168   1278 E1          	POP	HL	;GET AF BACK
3169   1279 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
3170   127C E1          	POP	HL	;GET PC RETURN ADDRESS
3171   127D 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
3172   1280 ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3173   1284             ;
3174   1284 CD C4 12    	CALL	DISREG	;DISPLAY REGISTERS
3175   1287 21 00 3E    	LD	HL,BUFFER
3176   128A CD 55 12    	CALL	SNDMSG
3177   128D             ;
3178   128D             ; SPACE KEY CONTINUES
3179   128D             ;
3180   128D CD BC 0F    SSTEP3	CALL	INCH
3181   1290 38 FB       	JR	C,SSTEP3
3182   1292 FE 20       	CP	' '	;IS IT SPACE
3183   1294 28 0C       	JR	Z,SSTEP4
3184   1296 FE 1B       	CP	ESC	;ESC QUITS
3185   1298 20 F3       	JR	NZ,SSTEP3
3186   129A             ;
3187   129A             ; RETURN TO MONITOR
3188   129A             ;
3189   129A ED 7B 14 3F 	LD	SP,(SPSAVE)	;RESTORE THE STACK POINTER
3190   129E FB          	EI	;RE-ENABLE INTERRUPTS
3191   129F C3 5D 0F    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3192   12A2             ;
3193   12A2             ; RETURN TO PROGRAM
3194   12A2             ;
3195   12A2 ED 7B 53 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3196   12A6 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
3197   12A9 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3198   12AA 2A 47 3F    	LD	HL,(TMPAF)
3199   12AD E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3200   12AE FD 2A 51 3F 	LD	IY,(TMPIY)
3201   12B2 DD 2A 4F 3F 	LD	IX,(TMPIX)
3202   12B6 ED 4B 49 3F 	LD	BC,(TMPBC)
3203   12BA ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3204   12BE F1          	POP	AF	;RESTORE AF
3205   12BF 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
3206   12C2 FB          	EI		;RE-ENABLE INTERRUPTS
3207   12C3 C9          	RET		;AND RETURN TO PROGRAM
3208   12C4             ;----------------------------
3209   12C4             ; DISPLAY THE SAVED REGISTERS
3210   12C4             ;----------------------------
3211   12C4 21 3A 13    DISREG	LD	HL,REGS
3212   12C7 CD 55 12    	CALL	SNDMSG
3213   12CA             ;
3214   12CA             ; DISPLAY THE REGISTERS
3215   12CA             ;
3216   12CA 06 08       	LD	B,08H
3217   12CC 21 00 3E    	LD	HL,BUFFER
3218   12CF DD 21 45 3F 	LD	IX,TMPPC
3219   12D3 DD 7E 01    DSREG1	LD	A,(IX+1)
3220   12D6 CD 2C 12    	CALL	BYTASC
3221   12D9 DD 7E 00    	LD	A,(IX+0)
3222   12DC CD 2C 12    	CALL	BYTASC
3223   12DF DD 23       	INC	IX
3224   12E1 DD 23       	INC	IX
3225   12E3 3E 20       	LD	A,' '
3226   12E5 77          	LD	(HL),A
3227   12E6 23          	INC	HL
3228   12E7 10 EA       	DJNZ	DSREG1
3229   12E9             ;
3230   12E9             ; DISPLAY THE FLAGS
3231   12E9             ;
3232   12E9 3A 47 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3233   12EC CD 40 12    	CALL	BITASC	;SHOW THEM AS BITS
3234   12EF             
3235   12EF CD 10 12    SZCRLF CALL  BCRLF
3236   12F2 3E 00       	LD	A,0
3237   12F4 77          	LD	(HL),A	;TERMINATE THE STRING
3238   12F5 C9          	RET
3239   12F6             ;-----------------------------------------
3240   12F6             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3241   12F6             ;-----------------------------------------
3242   12F6             ;
3243   12F6             ;      CALL PRINTSZ
3244   12F6             ;      .DB  "STRING TO PRINT",0
3245   12F6             ;
3246   12F6 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3247   12F7 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3248   12F8 CD B6 0F    	CALL	OUTCH	;AND SEND IT
3249   12FB 23          	INC	HL	;POINT TO THE NEXT
3250   12FC B7          	OR	A	;CHARACTER AND
3251   12FD 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3252   12FF E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3253   1300             ;
3254   1300             ; STRING CONSTANTS
3255   1300             ;
3256   1300 0D 0A 00    CRLF	.DB	CR,LF,0
3257   1303 20 53 6F 75 SIGNON	.DB	" Southern Cross Serial Monitor ",0
3257   1307 74 68 65 72 
3257   130B 6E 20 43 72 
3257   130F 6F 73 73 20 
3257   1313 53 65 72 69 
3257   1317 61 6C 20 4D 
3257   131B 6F 6E 69 74 
3257   131F 6F 72 20 00 
3258   1323 0D 0A 48 20 CMDLST	.DB	CR,LF,"H for command list",CR,LF,0
3258   1327 66 6F 72 20 
3258   132B 63 6F 6D 6D 
3258   132F 61 6E 64 20 
3258   1333 6C 69 73 74 
3258   1337 0D 0A 00 
3259   133A 0D 0A 50 43 REGS 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3259   133E 20 20 20 41 
3259   1342 46 20 20 20 
3259   1346 42 43 20 20 
3259   134A 20 44 45 20 
3259   134E 20 20 48 4C 
3259   1352 20 20 20 49 
3259   1356 58 20 20 20 
3259   135A 49 59 20 20 
3259   135E 20 53 50 20 
3259   1362 20 20 53 5A 
3259   1366 2D 48 2D 56 
3259   136A 4E 43 0D 0A 
3259   136E 00 
3260   136F 0D 0A 53 69 TOGGLE	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3260   1373 6E 67 6C 65 
3260   1377 20 53 74 65 
3260   137B 70 20 54 6F 
3260   137F 67 67 6C 65 
3260   1383 0D 0A 00 
3261   1386 0D 0A 53 65 TXFILE	.DB	CR,LF,"Send INTEL Hex File...",0
3261   138A 6E 64 20 49 
3261   138E 4E 54 45 4C 
3261   1392 20 48 65 78 
3261   1396 20 46 69 6C 
3261   139A 65 2E 2E 2E 
3261   139E 00 
3262   139F 0D 0A 46 69 FILEOK	.DB	CR,LF,"File Received OK",CR,LF,0
3262   13A3 6C 65 20 52 
3262   13A7 65 63 65 69 
3262   13AB 76 65 64 20 
3262   13AF 4F 4B 0D 0A 
3262   13B3 00 
3263   13B4 0D 0A 43 68 CSUMERR	.DB	CR,LF,"Checksum Error",CR,LF,0
3263   13B8 65 63 6B 73 
3263   13BC 75 6D 20 45 
3263   13C0 72 72 6F 72 
3263   13C4 0D 0A 00 
3264   13C7 0D 0A 42 79 BYE	.DB	CR,LF,"Bye...",CR,LF,0
3264   13CB 65 2E 2E 2E 
3264   13CF 0D 0A 00 
3265   13D2             ;
3266   13D2             ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
3267   13D2             ;
3268   13D2 1B 5B 48 1B INITSZ	.DB	27,"[H",27,"[2J",0
3268   13D6 5B 32 4A 00 
3269   13DA             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F16      ADRESS        3F3F      ADDKEY        0309      
ADMODE        0383      ASCHEX        07D5      ASCHX1        07DB      
ADDRA         0843      ADDRB         0855      ASC2HEX       1169      
AC2HEX1       1175      AC2HEX2       1177      AC2HEX3       1183      
AC2HEX4       1192      B300          0220      B1200         0080      
B2400         003F      B4800         001B      B9600         000B      
BOTRAM        2000      BUFFER        3E00      BAUD          3F25      
BLKSRT        3F2D      BLKEND        3F2F      BLKDST        3F31      
BEEP          057C      BEEP1         058C      BEEP2         0593      
BEEP3         05A3      BITIME        0836      BITIM1        083B      
BLKMVE        0867      BLKMV1        0886      BLKMV2        0889      
BLKMV3        089B      BLKSUM        08BD      BLKSM1        08D9      
BRANCH        08FB      BRNCH1        091D      BRNCH2        0928      
BCRLF         1210      BYTOUT        121E      BYTASC        122C      
BITASC        1240      BTASC1        1243      BTASC2        1249      
BTASC3        124C      BTASC4        124F      BYE           13C7      
CALMDE        3F1B      COUNT         3F2B      CONBYT        03C0      
CONVHI        03CD      CONVLO        03D1      CLRBUF        041B      
CLRBF1        0422      CHKSUM        0490      CHKSM1        0494      
CANCEL        06EE      CANCL1        06F1      CHKKEY        0ABA      
CHKKY1        0AC8      CHKKY2        0AF1      CHKKY3        0AFE      
CHKKY4        0B06      CHKKY5        0B0D      CHKKY6        0B1B      
CHKKY7        0B1D      CHKKY8        0B22      CHKKY9        0B47      
CHKKYA        0B55      CLKEXT        0CCF      CALKEY        0CD9      
CR            000D      COLD          0F02      CRLF          1300      
CMDLST        1323      CSUMERR       13B4      DISPLY        0002      
DATA          3F18      DISBUF        3F35      DALLAS        3F64      
DECKEY        033F      DECKY1        0342      DECKY2        034F      
DECKY3        0368      DISADD        03A2      DISBYT        03B7      
DECSTP        0699      DECSP1        06A9      DELONE        0BCB      
DELON1        0BD4      DELON2        0BD6      DSPLAY        1195      
DPLAY1        11A6      DPLAY2        11B3      DPLAY3        11BA      
DPLINE        11C8      DLINE1        11D7      DLINE2        11EA      
DOT           11F6      DISREG        12C4      DSREG1        12D3      
EDTKEY        0A8A      ENDKEY        0AB1      ESC           001B      
EXIT          1156      FUNTBL        3F19      FUNJMP        3F33      
FUNKEY        06CF      FUNKY1        06D3      FUNKY2        06E2      
FUNLST        06FB      FUNFUN        072F      FILEOK        139F      
GETCH         3F12      GOEXEC        0733      GETBYT        07A9      
GETBT1        07B3      GETBT2        07C7      GETCHR        0F79      
GETNYB        0F8E      GETOUT        0FA7      GOJUMP        0FC2      
GOJMP1        0FD3      HEXKEY        02D7      HEXKY1        02E2      
HEXKY2        02F0      HELP          0FE5      ISTACK        3E00      
INCKEY        0315      INCKY1        0318      INCKY2        0325      
INCKY3        033E      INDEXB        04A0      INDEXW        04A7      
INCSTP        0684      INCSP1        0694      INTELFN       073E      
INTELH        074D      INTEL1        0751      INTEL2        077C      
INTEL4        0797      INCH          0FBC      INTHEX        113D      
ITHEX1        114F      INBUF         120D      INSBUF        123D      
INITSZ        13D2      KEYBUF        0000      KEYTIM        3F27      
KEYDEL        3F41      KEYIN         0459      KEYREL        0463      
KEYRL1        0464      LENGTH        0543      LOSE          0B6E      
LF            000A      LOOPSZ        12F7      MODE          3F3D      
MAIN          0274      MAIN1         0285      MAIN2         0288      
MENLST        029A      MENU          046D      MENU1         047B      
MENU2         0487      MUL16         04C8      MULT          04D1      
MULT1         04D7      MUSIC         04DF      MOVE          08A1      
MONMENU       0F63      MODIFY        10EA      MDIFY1        10FB      
MDIFY2        1136      NXTBIT        07EF      NDOT          11F8      
NYBOUT        1221      NYBASC        1235      ONTIM         3F3B      
OFTIM         3F3C      ONESEC        0EE8      ONESC1        0EF1      
OUTSP         0FA9      OUTCH         0FB6      PORT3         0003      
PORT4         0004      PORT5         0005      PORT6         0006      
PORT7         0007      PUTCH         3F10      PAUSE         04F0      
PERIOD        052B      PLAY1         0940      PLAY2         094F      
PLAY3         095E      PATERN        0E48      PRNTSZ        12F6      
RAMSRT        2000      RAMEND        3BFF      REGPNT        3F43      
RST08         3F55      RST10         3F57      RST18         3F59      
RST20         3F5B      RST28         3F5D      RST38         3F5F      
RST66         3F61      RAMSUM        3F63      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          04B0      REGTBL        05E4      REGNAM        0621      
REGKEY        0631      RETMON        0658      RETPGM        0662      
RXDATA        0809      RXDAT1        080B      RXDAT2        0823      
RELSQR        0B88      RLTEST        0B97      RLSTEP        0B9D      
RELSR1        0BA3      RELSR2        0BB4      RELSR3        0BBC      
RELSR4        0BC1      RWATCH        0DFE      RWACH1        0E0A      
RWACH2        0E13      RWACH3        0E25      REGSTR        115F      
REGS          133A      SCAN          0001      SPSAVE        3F14      
SWREG0        3F1D      SWREG1        3F1E      SWREG2        3F1F      
SWREG3        3F20      SWREG4        3F21      SWREG5        3F22      
SWREG6        3F23      SWREG7        3F24      SPTEMP        3F29      
SYSCALL       0068      SYSJMP        0100      SETDP         0388      
SEGMNT        03E0      SCAND         03F0      SCAND1        03F8      
SCAND2        0402      SCAND3        040B      SCANKEY       042A      
SCANKY1       0439      SCANKY2       043B      SKEYIN        043F      
SKEYRL        044C      SKEYL1        044D      STEP          04E5      
STEP1         04FA      STEP2         0504      STEP3         050F      
SSTEP         05A6      SSTEP1        05D2      SETREG        06AF      
SDELAY        08AF      SDELY1        08B4      SWBEEP        096D      
SECRET        0A07      SECRT1        0A44      SECNUM        0A53      
SPLIT         0B75      SCOPE         0BE1      SCOPE2        0BF6      
SCOPE3        0BFE      SCOPE4        0C0D      SCOPE5        0C14      
SCOPE6        0C1B      SCOPE7        0C22      SCOPE8        0C29      
SCOPE9        0C32      SCOPEA        0C3F      SEED          0C60      
SKATE         0C6F      SKATE1        0C74      SKATE2        0C7C      
SKATE3        0C85      SETCLK        0D60      SETCK1        0D66      
SETCK2        0D95      SETCK3        0DA9      SETCK4        0DB7      
SETCK5        0DC6      SETCK6        0DCD      SETCK7        0DDD      
SETCK8        0DE4      SCBUG         0EFE      START2        0F39      
START3        0F3E      START4        0F49      START5        0F51      
SSTOGL        10E1      SPCBUF        120B      SNDMSG        1255      
SDMSG1        1257      SDMSG2        1262      SSSTEP        1263      
SSTEP3        128D      SSTEP4        12A2      SZCRLF        12EF      
SIGNON        1303      TOPRAM        3FFF      TMPPC         3F45      
TMPAF         3F47      TMPBC         3F49      TMPDE         3F4B      
TMPHL         3F4D      TMPIX         3F4F      TMPIY         3F51      
TMPSP         3F53      TYPE          0392      TYPESZ        0396      
TONE          055C      TONE1         0566      TONE2         056B      
TONE3         056E      TXDATA        07DE      TRACE         0932      
TUNE1         097B      TUNE2         09BB      TIME          0C90      
TIME1         0CA8      TIMKEY        0CC2      TXCRLF        0FAF      
TOGGLE        136F      TXFILE        1386      UPDATE        0369      
UPDBUF        0CE8      UPDBF1        0CEE      UPDBF2        0D10      
UPDBF3        0D34      UPDBF4        0D46      UPDBF5        0D5F      
VARBLS        3F00      VARIDX        3F00      VERS          038E      
VERSSZ        039D      WIN           0B65      WWATCH        0E88      
WWACH1        0EA2      WWACH2        0EA4      WWACH3        0EBF      
WWACH4        0EC2      WWACH5        0EC4      WWACH6        0ED5      
WARM          0F5D      WRDOUT        121B      WRDASC        1227      

tasm: Number of errors = 0
