0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ; 
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;     
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES  
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ;
0028   0000             ;THE TARGET IS THE TEC-1F ELSE SC
0029   0000             ;#DEFINE TEC-1F
0030   0000             ; USE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0031   0000             #DEFINE 74C923
0032   0000             ;
0033   0000             ; I/O PORT ADDRESSES
0034   0000             ;
0035   0000~            #IFDEF TEC-1F
0036   0000~            KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0037   0000~            SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0038   0000~            DISPLY	.EQU	02H	;DISPLAY LATCH
0039   0000~            PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0040   0000~            PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0041   0000~            PORT5	.EQU	05H
0042   0000~            PORT6	.EQU	06H
0043   0000~            PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0044   0000             #ELSE
0045   0000             IO0	.EQU	80H	;IO PORT 0
0046   0000             IO1	.EQU	81H	;IO PORT 1
0047   0000             IO2	.EQU	82H	;IO PORT 2
0048   0000             IO3	.EQU	83H	;IO PORT 3
0049   0000             DISPLY	.EQU	84H	;DISPLAY LATCH
0050   0000             SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0051   0000             KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0052   0000             IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0053   0000             #ENDIF
0054   0000             ;
0055   0000             ; BAUD RATE CONSTANTS
0056   0000             ;
0057   0000             B300	.EQU	0220H	;300 BAUD
0058   0000             B1200	.EQU	0080H	;1200 BAUD
0059   0000             B2400	.EQU	003FH	;2400 BAUD
0060   0000             B4800	.EQU	001BH	;4800 BAUD
0061   0000             B9600	.EQU	000BH	;9600 BAUD
0062   0000             ;
0063   0000             ;---------------
0064   0000             ; RAM MEMORY MAP
0065   0000             ;---------------
0066   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0067   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0068   0000             ;
0069   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0070   0000             BUFFER	.EQU	TOPRAM-01FFH	;GENERAL PURPOSE BUFFER AREA
0071   0000             ISTACK	.EQU	BUFFER	;INITIAL MONITOR STACK
0072   0000             
0073   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0074   0000             RAMEND	.EQU	TOPRAM-0400H	;END OF USER RAM
0075   0000             
0076   0000             ;-------------------------
0077   0000             ; MONITOR GLOBAL VARIABLES
0078   0000             ;-------------------------
0079   0000             ;
0080   3F00             	.ORG	VARBLS
0081   3F00             ;
0082   3F00             ;SERIAL MONITOR VARIABLES
0083   3F00             ;
0084   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0085   3F10             PUTCH	.BLOCK	2	;OUTPUT A CHARACTER TO SERIAL
0086   3F12             GETCH	.BLOCK	2	;WAIT FOR A CHARACTER FROM SERIAL
0087   3F14             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0088   3F16             ADDR	.BLOCK	2	;THE ADDRESS
0089   3F18             DATA	.BLOCK	1	;THE DATA
0090   3F19             ;
0091   3F19             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0092   3F1B             ;
0093   3F1B             ; DALLAS SMARTWATCH REGISTERS
0094   3F1B             ;
0095   3F1B             CALMDE	.BLOCK	2	;CALENDAR MODE
0096   3F1D             SWREG0	.BLOCK	1	;10THS, 100THS
0097   3F1E             SWREG1	.BLOCK	1	;SECONDS
0098   3F1F             SWREG2	.BLOCK	1	;MINUTES
0099   3F20             SWREG3	.BLOCK	1	;HOURS
0100   3F21             SWREG4	.BLOCK	1	;DAY
0101   3F22             SWREG5	.BLOCK	1	;DATE
0102   3F23             SWREG6	.BLOCK	1	;MONTH
0103   3F24             SWREG7	.BLOCK	1	;YEAR
0104   3F25             ;
0105   3F25             BAUD	.BLOCK	2	;BAUD RATE
0106   3F27             KEYTIM	.BLOCK	2	;BEEP DELAY
0107   3F29             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0108   3F2B             ;
0109   3F2B             ; BLOCK FUNCTIONS
0110   3F2B             ;
0111   3F2B             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0112   3F2D             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0113   3F2F             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0114   3F31             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0115   3F33             ;
0116   3F33             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0117   3F35             ;
0118   3F35             ; DISPLAY SCAN REGISTERS
0119   3F35             ;
0120   3F35             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0121   3F3B             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0122   3F3C             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0123   3F3D             ;
0124   3F3D             ; MONITOR VARIABLES
0125   3F3D             ;
0126   3F3D             MODE	.BLOCK	2	;DISPLAY MODE
0127   3F3F             ADRESS	.BLOCK	2	;USER ADDRESS
0128   3F41             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0129   3F43             ;
0130   3F43             ; TEMPORARY REGISTER STORAGE
0131   3F43             ;
0132   3F43             REGPNT	.BLOCK	2	;REGISTER POINTER
0133   3F45             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0134   3F47             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0135   3F49             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0136   3F4B             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0137   3F4D             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0138   3F4F             TMPIX	.BLOCK	2	;INDEX REGISTER X
0139   3F51             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0140   3F53             TMPSP	.BLOCK	2	;STACK POINTER
0141   3F55             ;
0142   3F55             ; RESTART JUMP TABLE AND HARWARE TEST
0143   3F55             ;
0144   3F55             RST08	.BLOCK	2	;RESTART 08H JUMP
0145   3F57             RST10	.BLOCK	2	;RESTART 10H JUMP
0146   3F59             RST18	.BLOCK	2	;RESTART 18H JUMP
0147   3F5B             RST20	.BLOCK	2	;RESTART 20H JUMP
0148   3F5D             RST28	.BLOCK	2	;RESTART 28H JUMP
0149   3F5F             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0150   3F61             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0151   3F63             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0152   3F64             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0153   3F65             ;----------------
0154   3F65             ; RESTART VECTORS
0155   3F65             ;----------------
0156   3F65             ;
0157   3F65             ;  RESTART 00H - RST 0
0158   3F65             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0159   3F65             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0160   3F65             ;
0161   0000             	.ORG	0000H
0162   0000 C3 00 02    RSTVEC	JP	RESET
0163   0003             ;
0164   0003             ; RESTART 08H - RST 1
0165   0003             ;
0166   0008             	.ORG	0008H
0167   0008 E5          	PUSH	HL
0168   0009 2A 55 3F    	LD	HL,(RST08)
0169   000C E9          	JP	(HL)
0170   000D             ;
0171   000D             ; RESTART 10H - RST 2
0172   000D             ;
0173   0010             	.ORG	0010H
0174   0010 E5          	PUSH	HL
0175   0011 2A 57 3F    	LD	HL,(RST10)
0176   0014 E9          	JP	(HL)
0177   0015             ;
0178   0015             ; RESTART 18H - RST 3
0179   0015             ;
0180   0018             	.ORG	0018H
0181   0018 E5          	PUSH	HL
0182   0019 2A 59 3F    	LD	HL,(RST18)
0183   001C E9          	JP	(HL)
0184   001D             ;
0185   001D             ; RESTART 20H - RST 4
0186   001D             ;
0187   0020             	.ORG	0020H
0188   0020 E5          	PUSH	HL
0189   0021 2A 5B 3F    	LD	HL,(RST20)
0190   0024 E9          	JP	(HL)
0191   0025             ;
0192   0025             ; RESTART 28H - RST 5
0193   0025             ;
0194   0028             	.ORG	0028H
0195   0028 E5          	PUSH	HL
0196   0029 2A 5D 3F    	LD	HL,(RST28)
0197   002C E9          	JP	(HL)
0198   002D             ;
0199   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0200   002D             ;
0201   0030             	.ORG	0030H
0202   0030 C3 6B 00    RST30	JP	SYSCALL
0203   0033             ;
0204   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0205   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0206   0033             ;INT OCCURS- FURTHER INTERRUPTS
0207   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0208   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0209   0033             ;STARTS HERE
0210   0033             ;
0211   0038             	.ORG	0038H
0212   0038 E5          	PUSH	HL
0213   0039 2A 5F 3F    	LD	HL,(RST38)
0214   003C E9          	JP	(HL)
0215   003D             ;
0216   003D             ; RESTART 66H NMI VECTOR
0217   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0218   003D             ;
0219   0066             	.ORG	0066H
0220   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0221   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0222   0066~            #IFDEF TEC-1F
0223   0066~                RETI
0224   0066             #ELSE
0225   0066 E5          	PUSH	HL
0226   0067 2A 61 3F    	LD	HL,(RST66)
0227   006A E9          	JP	(HL)
0228   006B             #ENDIF
0229   006B             ;--------------------
0230   006B             ; SYSTEM CALL HANDLER
0231   006B             ;--------------------
0232   006B             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0233   006B             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0234   006B             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0235   006B             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0236   006B             ;CHANGE IN SUBSEQUENT MONITORS
0237   006B             ;
0238   006B             ;ENTRY : C = CALL NUMBER
0239   006B             ;SEE ROUTINES FOR ENTRY AND EXIT
0240   006B             ;PARAMETERS
0241   006B             ;
0242   006B 3B          SYSCALL	DEC	SP
0243   006C 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0244   006D ED 73 29 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0245   0071 F5          	PUSH	AF
0246   0072 D5          	PUSH	DE
0247   0073 E5          	PUSH	HL	;SAVE REGISTERS
0248   0074 79          	LD	A,C	;GET CALL NUMBER
0249   0075 E6 7F       	AND	127	;ENSURE IN LIMITS
0250   0077 CB 27       	SLA	A	;MULTIPLY BY TWO
0251   0079 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0252   007B 6F          	LD	L,A	;LOAD INDEX
0253   007C 7E          	LD	A,(HL)
0254   007D 23          	INC	HL
0255   007E 56          	LD	D,(HL)	;GET JUMP ADDRESS
0256   007F 2A 29 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0257   0082 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0258   0083 23          	INC	HL
0259   0084 7A          	LD	A,D
0260   0085 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0261   0086 E1          	POP	HL
0262   0087 D1          	POP	DE
0263   0088 F1          	POP	AF	;RESTORE REGISTERS
0264   0089 C9          	RET		;JUMPS TO SYSTEM CALL
0265   008A             ;-----------------------
0266   008A             ; SYSTEM CALL JUMP TABLE
0267   008A             ;-----------------------
0268   0100             	.ORG	0100H
0269   0100 74 02 8E 03 SYSJMP	.DW	MAIN,VERS
0270   0104 A0 03 B5 03 	.DW	DISADD,DISBYT,CLRBUF,SCAND
0270   0108 19 04 EE 03 
0271   010C BE 03 CB 03 	.DW	CONBYT,CONVHI,CONVLO
0271   0110 CF 03 
0272   0112 33 04 40 04 	.DW	SKEYIN,SKEYRL,KEYIN,KEYREL
0272   0116 4D 04 57 04 
0273   011A 61 04 84 04 	.DW	MENU,CHKSUM
0274   011E BC 04 A4 04 	.DW	MUL16,RAND
0275   0122 94 04 9B 04 	.DW	INDEXB,INDEXW
0276   0126 D3 04 50 05 	.DW	MUSIC,TONE,BEEP
0276   012A 70 05 
0277   012C 63 0C       	.DW	SKATE
0278   012E D2 07 FD 07 	.DW	TXDATA,RXDATA,ASCHEX
0278   0132 C9 07 
0279   0134 7C 0E F2 0D 	.DW	WWATCH,RWATCH,ONESEC
0279   0138 DC 0E 
0280   013A 91 0B BF 0B 	.DW	RLSTEP,DELONE
0281   013E 28 04 41 07 	.DW	SCANKEY,INTELH
0282   0142 69 0B       	.DW	SPLIT
0283   0144 49 12 34 12 	.DW	SNDMSG,BITASC
0284   0148 1B 12 20 12 	.DW	WRDASC,BYTASC,NYBASC
0284   014C 29 12 
0285   014E 92 03 EA 12 	.DW	TYPE,PRNTSZ
0286   0152             ;------------------------------
0287   0152             ; POWER UP RESET / MANUAL RESET
0288   0152             ;------------------------------
0289   0200             	.ORG	0200H
0290   0200             ;
0291   0200             ; WAIT FOR SMART SOCKET
0292   0200             ; TO RECOVER FROM POWER DOWN
0293   0200             ;
0294   0200 3E 55       RESET	LD	A,55H
0295   0202 32 64 3F    	LD	(DALLAS),A	;WRITE TO RAM
0296   0205 AF          	XOR	A
0297   0206 D3 84       	OUT	(DISPLY),A	;WRITE NOTHING TO
0298   0208 D3 85       	OUT	(SCAN),A	;ON BOARD I/O
0299   020A DB 86       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0300   020C 3A 64 3F    	LD	A,(DALLAS)	;READ FROM RAM
0301   020F FE 55       	CP	55H	;IS IT READY?
0302   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0303   0214             ;
0304   0214             ; LOAD STACK POINTER
0305   0214             ;
0306   0214 31 00 3E    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0307   0217             ;
0308   0217             ; SET UP RESTART VECTORS
0309   0217             ;
0310   0217 21 14 02    	LD	HL,RESET1
0311   021A 22 55 3F    	LD	(RST08),HL
0312   021D 22 57 3F    	LD	(RST10),HL
0313   0220 22 59 3F    	LD	(RST18),HL
0314   0223 22 5B 3F    	LD	(RST20),HL
0315   0226 22 5D 3F    	LD	(RST28),HL
0316   0229 22 61 3F    	LD	(RST66),HL	;NMI INTERRUPT
0317   022C 21 9A 05    	LD	HL,SSTEP
0318   022F 22 5F 3F    	LD	(RST38),HL	;SINGLE STEPPER
0319   0232             ;
0320   0232             ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0321   0232             ;
0322   0232 ED 56       	IM	1
0323   0234 FB          	EI		;ENABLE INTERRUPTS
0324   0235             ;
0325   0235             ; PERFORM CHECKSUM ON USER RAM
0326   0235             ;
0327   0235 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0328   0238 11 FF 3B    	LD	DE,RAMEND	;END OF USER RAM
0329   023B CD 84 04    	CALL	CHKSUM
0330   023E 32 63 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0331   0241             ;
0332   0241             ; SET UP DEFAULT VARIABLES
0333   0241             ;
0334   0241 21 EF 06    	LD	HL,FUNLST
0335   0244 22 19 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0336   0247             ;
0337   0247             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0338   0247             ;
0339   0247 21 F2 0E    	LD	HL,SCBUG	;JUMP TO SERIAL MONITOR
0340   024A 22 33 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0341   024D 3E 00       	LD	A,00H
0342   024F 32 43 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0343   0252 21 1B 00    	LD	HL,B4800
0344   0255 22 25 3F    	LD	(BAUD),HL	;DEFAULT SERIAL=4800 BAUD
0345   0258 21 00 01    	LD	HL,0100H
0346   025B 22 41 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0347   025E 21 00 10    	LD	HL,1000H
0348   0261 22 27 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0349   0264             #IFDEF 74C923
0350   0264 3E 20       	LD	A,20H
0351   0266~            #ELSE
0352   0266~            	LD	A,08H
0353   0266             #ENDIF
0354   0266 32 3C 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0355   0269 CD 70 05    	CALL	BEEP
0356   026C CD 70 05    	CALL	BEEP
0357   026F             #IFDEF 74C923
0358   026F 3E 08       	LD	A,08H
0359   0271~            #ELSE
0360   0271~            	LD	A,10H
0361   0271             #ENDIF
0362   0271 32 3B 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0363   0274             ;-----------------
0364   0274             ; SET UP MAIN LOOP
0365   0274             ;-----------------
0366   0274 31 00 3E    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0367   0277 21 00 20    	LD	HL,RAMSRT
0368   027A 22 3F 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0369   027D 3A 3D 3F    	LD	A,(MODE)
0370   0280 F6 80       	OR	80H	;START OFF IN DATA MODE
0371   0282 32 3D 3F    	LD	(MODE),A
0372   0285             ;
0373   0285             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0374   0285             ;
0375   0285 CD 69 03    MAIN1	CALL	UPDATE
0376   0288 CD 33 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0377   028B 21 9A 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0378   028E CD 61 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0379   0291 CD 69 03    	CALL	UPDATE	;UPDATE BUFFER AND
0380   0294 CD 40 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0381   0297 C3 88 02    	JP	MAIN2
0382   029A             ;
0383   029A             ; MAIN MENU KEY TABLE
0384   029A             ;
0385   029A 14          MENLST	.DB	20
0386   029B 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0386   029F 04 05 06 07 
0387   02A3 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0387   02A7 0C 0D 0E 0F 
0388   02AB 10 11 12 13 	.DB	10H,11H,12H,13H
0389   02AF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0389   02B3 D7 02 D7 02 
0390   02B7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0390   02BB D7 02 D7 02 
0391   02BF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0391   02C3 D7 02 D7 02 
0392   02C7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0392   02CB D7 02 D7 02 
0393   02CF~            #IFDEF TEC-1F
0394   02CF~            	.DW	INCKEY,DECKEY,FUNKEY,ADDKEY	;TEC KEYS    +  -  GO  AD
0395   02CF             #ELSE
0396   02CF C3 06 09 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0396   02D3 15 03 3F 03 
0397   02D7             #ENDIF
0398   02D7             ;---------------------------------------------------
0399   02D7             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0400   02D7             ;---------------------------------------------------
0401   02D7 CD 70 05    HEXKEY	CALL	BEEP
0402   02DA 21 3D 3F    	LD	HL,MODE
0403   02DD CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0404   02DF CA F0 02    	JP	Z,HEXKY2	;IN ADDR MODE
0405   02E2             ;
0406   02E2             ; IN DATA MODE
0407   02E2             ;
0408   02E2 2A 3F 3F    HEXKY1	LD	HL,(ADRESS)
0409   02E5 CB 26       	SLA	(HL)	;FROM THE CURRENT
0410   02E7 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0411   02E9 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0412   02EB CB 26       	SLA	(HL)	;PUT THE KEY IN
0413   02ED B6          	OR	(HL)	;THE NEW DATA BACK AT
0414   02EE 77          	LD	(HL),A	;THE CURRENT ADDRESS
0415   02EF C9          	RET
0416   02F0             ;
0417   02F0             ; IN ADDRESS MODE
0418   02F0             ;
0419   02F0 2A 3F 3F    HEXKY2	LD	HL,(ADRESS)
0420   02F3 CB 25       	SLA	L	;CURRENT ADDRESS
0421   02F5 CB 14       	RL	H	;AND DO A 16 BIT
0422   02F7 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0423   02F9 CB 14       	RL	H	;TO MAKE  ROOM
0424   02FB CB 25       	SLA	L	;FOR THE NEW KEY
0425   02FD CB 14       	RL	H
0426   02FF CB 25       	SLA	L
0427   0301 CB 14       	RL	H
0428   0303 B5          	OR	L	;IT IN THE LEAST
0429   0304 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0430   0305 22 3F 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0431   0308 C9          	RET
0432   0309             ;-------------
0433   0309             ; CHANGE MODES
0434   0309             ;-------------
0435   0309 CD 70 05    ADDKEY	CALL	BEEP
0436   030C 3A 3D 3F    	LD	A,(MODE)
0437   030F EE 80       	XOR	80H	;TOGGLE MODE
0438   0311 32 3D 3F    	LD	(MODE),A
0439   0314 C9          	RET
0440   0315             ;------------------
0441   0315             ; INCREMENT ADDRESS
0442   0315             ;------------------
0443   0315 CD 70 05    INCKEY	CALL	BEEP
0444   0318 2A 3F 3F    INCKY1	LD	HL,(ADRESS)
0445   031B 23          	INC	HL	;INC ADDRESS
0446   031C 22 3F 3F    	LD	(ADRESS),HL
0447   031F CD 69 03    	CALL	UPDATE
0448   0322 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0449   0325 CD EE 03    INCKY2	CALL	SCAND
0450   0328 CD 28 04    	CALL	SCANKEY
0451   032B CB 6F       	BIT	5,A	;RETURN IF
0452   032D 28 0F       	JR	Z,INCKY3	; KEY RELEASED
0453   032F~            #IFDEF	TEC-1F
0454   032F~            	CP	30H	;TEC-1F '+'
0455   032F             #ELSE
0456   032F FE 32       	CP	32H	;SC '+'
0457   0331             #ENDIF
0458   0331 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0459   0333 11 01 00    	LD	DE,0001H
0460   0336 ED 52       	SBC	HL,DE
0461   0338 D2 25 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0462   033B C3 18 03    	JP	INCKY1	;INC ADDRESS
0463   033E C9          INCKY3	RET
0464   033F             ;------------------
0465   033F             ; DECREMENT ADDRESS
0466   033F             ;------------------
0467   033F CD 70 05    DECKEY	CALL	BEEP
0468   0342 2A 3F 3F    DECKY1	LD	HL,(ADRESS)
0469   0345 2B          	DEC	HL	;DEC ADDRESS
0470   0346 22 3F 3F    	LD	(ADRESS),HL
0471   0349 CD 69 03    	CALL	UPDATE
0472   034C 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0473   034F CD EE 03    DECKY2	CALL	SCAND
0474   0352 CD 28 04    	CALL	SCANKEY
0475   0355 CB 6F       	BIT	5,A	;RETURN IF
0476   0357 28 0F       	JR	Z,DECKY3	;KEY RELEASED
0477   0359~            #IFDEF  TEC-1F
0478   0359~            	CP	31H	;TEC-1F '-'
0479   0359             #ELSE
0480   0359 FE 33       	CP	33H	;SC '-'
0481   035B             #ENDIF
0482   035B 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0483   035D 11 01 00    	LD	DE,0001H
0484   0360 ED 52       	SBC	HL,DE
0485   0362 D2 4F 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0486   0365 C3 42 03    	JP	DECKY1	;INC ADDRESS 
0487   0368 C9          DECKY3	RET
0488   0369             ;-----------------------------------------
0489   0369             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0490   0369             ;-----------------------------------------
0491   0369 2A 3F 3F    UPDATE	LD	HL,(ADRESS)
0492   036C CD A0 03    	CALL	DISADD	;AND DATA, PUT IN
0493   036F 7E          	LD	A,(HL)
0494   0370 CD B5 03    	CALL	DISBYT	;DISPLAY BUFFER
0495   0373             ;
0496   0373             ; IN ADDRESS OR DATA MODE?
0497   0373             ;
0498   0373 21 3D 3F    	LD	HL,MODE
0499   0376 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0500   0378 CA 83 03    	JP	Z,ADMODE	;ADDRESS MODE
0501   037B             ;
0502   037B             ; SHOW DATA MODE
0503   037B             ;
0504   037B 21 35 3F    	LD	HL,DISBUF	;SET THE DP'S
0505   037E 06 02       	LD	B,2	;IN THE DATA
0506   0380 C3 88 03    	JP	SETDP	;DISPLAY
0507   0383             ;
0508   0383             ; SHOW ADDRESS MODE
0509   0383             ;
0510   0383 21 37 3F    ADMODE	LD	HL,DISBUF+2
0511   0386 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0512   0388             ;
0513   0388             ; SET DECIMAL POINT
0514   0388             ;
0515   0388             ;SET DP IN THE BYTE POINTED TO BY HL
0516   0388             ;
0517   0388~            #IFDEF TEC-1F
0518   0388~            SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0519   0388             #ELSE
0520   0388 CB FE       SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0521   038A             #ENDIF
0522   038A 23          	INC	HL	;POINT TO NEXT BYTE
0523   038B 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0524   038D C9          	RET
0525   038E             ;---------------
0526   038E             ; VERSION NUMBER
0527   038E             ;---------------
0528   038E             ;RETURNS THE SOFTWARE VERSION NUMBER
0529   038E             ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
0530   038E             ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
0531   038E             ;
0532   038E             ;	ENTRY : NONE
0533   038E             ; EXIT : HL = VERSION NUMBER STRING
0534   038E             ;
0535   038E 21 9B 03    VERS	LD	HL,VERSSZ
0536   0391 C9          	RET
0537   0392             ;-----------
0538   0392             ; BOARD TYPE
0539   0392             ;-----------
0540   0392             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0541   0392             ; ENTRY = NONE
0542   0392             ; EXIT: HL= 'SC-1'
0543   0392             ;          'TEC-1F'
0544   0392 21 96 03    TYPE	LD	HL,TYPESZ
0545   0395 C9          	RET
0546   0396             
0547   0396~            #IFDEF TEC-1F
0548   0396~            TYPESZ	.DB	"TEC-1F",0
0549   0396             #ELSE
0550   0396 53 43 2D 31 TYPESZ	.DB	"SC-1",0
0550   039A 00 
0551   039B             #ENDIF
0552   039B 20 31 2E 37 VERSSZ	.DB	" 1.7",0
0552   039F 00 
0553   03A0             ;-------------------------
0554   03A0             ; ADDRESS > DISPLAY BUFFER
0555   03A0             ;-------------------------
0556   03A0             ;CONVERT HL TO SEVEN SEGMENT CODE
0557   03A0             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0558   03A0             ;
0559   03A0             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0560   03A0             ;
0561   03A0             ; EXIT  : NO REGISTERS MODIFIED
0562   03A0             ;
0563   03A0 F5          DISADD	PUSH	AF
0564   03A1 E5          	PUSH	HL
0565   03A2 E5          	PUSH	 HL
0566   03A3 7C          	LD	A,H
0567   03A4 CD BE 03    	CALL	CONBYT
0568   03A7 22 39 3F    	LD	(DISBUF+4),HL
0569   03AA E1          	POP	HL
0570   03AB 7D          	LD	A,L
0571   03AC CD BE 03    	CALL	CONBYT
0572   03AF 22 37 3F    	LD	(DISBUF+2),HL
0573   03B2 E1          	POP	HL
0574   03B3 F1          	POP	AF
0575   03B4 C9          	RET
0576   03B5             ;---------------------------
0577   03B5             ; DATA BYTE > DISPLAY BUFFER
0578   03B5             ;---------------------------
0579   03B5             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0580   03B5             ;AND PUT IN DATA DISPLAY BUFFER.
0581   03B5             ;
0582   03B5             ; ENTRY :  A = DATA DISPLAY BYTE
0583   03B5             ;
0584   03B5             ; EXIT  : NO REGISTERS MODIFIED
0585   03B5             ;
0586   03B5 E5          DISBYT	PUSH	HL
0587   03B6 CD BE 03    	CALL	CONBYT
0588   03B9 22 35 3F    	LD	(DISBUF),HL
0589   03BC E1          	POP	HL
0590   03BD C9          	RET
0591   03BE             ;---------------------------------------
0592   03BE             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0593   03BE             ;---------------------------------------
0594   03BE             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0595   03BE             ; FOR DISPLAY
0596   03BE             ; ENTRY : A = BYTE TO BE CONVERTED
0597   03BE             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0598   03BE             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0599   03BE             ;         A = NOT MODIFIED
0600   03BE F5          CONBYT	PUSH	AF
0601   03BF F5          	PUSH	AF
0602   03C0 CD CB 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0603   03C3 67          	LD	H,A
0604   03C4 F1          	POP	AF
0605   03C5 CD CF 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0606   03C8 6F          	LD	L,A
0607   03C9 F1          	POP	AF
0608   03CA C9          	RET
0609   03CB             ;---------------------------------------------
0610   03CB             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0611   03CB             ;---------------------------------------------
0612   03CB             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0613   03CB             ; FOR SEVEN SEGMENT DISPLAYS
0614   03CB             ; CONVHI = CONVERTS HIGH NYBBLE
0615   03CB             ; CONVLO = CONVERTS LO NYBBLE
0616   03CB             ;
0617   03CB             ; ENTRY : A = NYBBLE TO BE CONVERTED
0618   03CB             ; EXIT  : A = SEVEN SEGMENT CODE
0619   03CB             ;
0620   03CB 07          CONVHI	RLCA
0621   03CC 07          	RLCA
0622   03CD 07          	RLCA	;MOVE TO LO NYBBLE
0623   03CE 07          	RLCA	;FOR CONVERSION
0624   03CF C5          CONVLO	PUSH	BC
0625   03D0 E5          	PUSH	HL
0626   03D1 21 DE 03    	LD	HL,SEGMNT	;USE THE HEX VALUE
0627   03D4 E6 0F       	AND	0FH	;TO INDEX TO THE
0628   03D6 4F          	LD	C,A	;THE SEVEN SEGMENT
0629   03D7 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0630   03D9 09          	ADD	HL,BC	;AND RETURN WITH
0631   03DA 7E          	LD	A,(HL)	;CODE IN A
0632   03DB E1          	POP	HL
0633   03DC C1          	POP	BC
0634   03DD C9          	RET
0635   03DE             ;
0636   03DE             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0637   03DE             ;
0638   03DE~            #IFDEF TEC-1F
0639   03DE~            SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0640   03DE~            	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0641   03DE~            	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0642   03DE~            	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0643   03DE             #ELSE
0644   03DE 3F 06 5B 4F SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0645   03E2 66 6D 7D 07 	.DB	66H,6DH,7DH,07H	;4,5,6,7
0646   03E6 7F 6F 77 7C 	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0647   03EA 39 5E 79 71 	.DB	39H,5EH,79H,71H	;C,D,E,F
0648   03EE             #ENDIF
0649   03EE             ;-------------
0650   03EE             ; SCAN DISPLAY
0651   03EE             ;-------------
0652   03EE             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0653   03EE             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0654   03EE             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0655   03EE             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0656   03EE             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0657   03EE             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0658   03EE             ;
0659   03EE             ; ENTRY : NONE
0660   03EE             ; EXIT  : NO REGISTERS MODIFIED
0661   03EE             ;
0662   03EE F5          SCAND   PUSH    AF
0663   03EF C5          	PUSH	BC
0664   03F0 E5          	PUSH	HL	;SAVE REGISTERS
0665   03F1 21 3A 3F    	LD	HL,DISBUF+5
0666   03F4 0E 20       	LD	C,20H
0667   03F6 7E          SCAND1	LD	A,(HL)
0668   03F7 D3 84       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0669   03F9 79          	LD	A,C
0670   03FA D3 85       	OUT	(SCAN),A	;TURN ON DISPLAY
0671   03FC 3A 3B 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0672   03FF 47          	LD	B,A	;TO ADJUST ON TIME
0673   0400 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0674   0402 78          	LD	A,B	;B IS NOW CLEAR, USE
0675   0403 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0676   0405 3A 3C 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0677   0408 47          	LD	B,A	;TO ADJUST OFF TIME
0678   0409 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0679   040B 2B          	DEC	HL	;POINT TO NEXT
0680   040C CB 09       	RRC	C	;ELEMENT IN BUFFER
0681   040E 30 E6       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0682   0410 78          	LD	A,B	;B IS NOW CLEAR, USE
0683   0411 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0684   0413 D3 84       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0685   0415 E1          	POP	HL
0686   0416 C1          	POP	BC
0687   0417 F1          	POP	AF	;RESTORE REGISTERS
0688   0418 C9          	RET
0689   0419             ;---------------------
0690   0419             ; CLEAR DISPLAY BUFFER
0691   0419             ;---------------------
0692   0419 E5          CLRBUF	PUSH	HL
0693   041A C5          	PUSH	BC
0694   041B 21 35 3F    	LD	HL,DISBUF
0695   041E 06 06       	LD	B,6
0696   0420 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0697   0422 23          	INC	HL	;LOCATIONS POINTED
0698   0423 10 FB       	DJNZ	CLRBF1	;TO BY HL
0699   0425 C1          	POP	BC
0700   0426 E1          	POP	HL
0701   0427 C9          	RET
0702   0428             ;--------------
0703   0428             ; SCAN KEYBOARD
0704   0428             ;--------------
0705   0428             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0706   0428             ; AND KEYBOARD BUFFER AS ROWS.
0707   0428             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0708   0428             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0709   0428             ;
0710   0428             ; ENTRY : NONE
0711   0428             ; EXIT  : A = 00H IF NO KEY DETECTED
0712   0428             ;         A = DETECTED KEY WITH BIT 5 SET
0713   0428             ;             BIT 5 = KEY AVAILABLE
0714   0428 C5          SCANKEY	PUSH	BC
0715   0429 D5          	PUSH	DE	;SAVE REGISTERS
0716   042A E5          	PUSH	HL
0717   042B             ;USE THE KEYBOARD ENCODER
0718   042B             #IFDEF 74C923
0719   042B~            #IFDEF TEC-1F
0720   042B~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0721   042B~            	AND	5FH	;STRIP UNUSED BITS
0722   042B~            	BIT	6,A	;DA LOW?
0723   042B~            	JR	Z,SCANKY1
0724   042B~            	LD	A,00H
0725   042B~            	JR	SCANKY2
0726   042B~            SCANKY1	SET	5,A	;SET DATA AVAILABLE FLAG 
0727   042B~            SCANKY2	POP	HL
0728   042B~            	POP	DE
0729   042B~            	POP	BC
0730   042B~            	RET
0731   042B             #ELSE
0732   042B DB 86       	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0733   042D E6 3F       	AND	3FH	;STRIP UNUSED BITS
0734   042F E1          	POP	HL
0735   0430 D1          	POP	DE
0736   0431 C1          	POP	BC
0737   0432 C9          	RET
0738   0433             #ENDIF
0739   0433             
0740   0433~            #ELSE
0741   0433~            ;
0742   0433~            ; SOFTWARE SCAN KEYBOARD
0743   0433~            ;
0744   0433~            SCANKY1	LD	A,00H
0745   0433~            	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0746   0433~            	LD	B,A		;KEY
0747   0433~            	LD	D,A		;COUNT
0748   0433~            	LD	E,01H	;MASK
0749   0433~            SCANKY2	LD	C,08H	;SCAN
0750   0433~            SCANKY3	LD	A,C
0751   0433~            	OUT	(SCAN),A	;OUTPUT SCAN
0752   0433~            	NOP
0753   0433~            	NOP
0754   0433~            	NOP
0755   0433~            	IN	A,(KEYBUF)	;READ KEY BUFFER
0756   0433~            	AND	E	;MASK
0757   0433~            	JR	Z,SCANKY4	;KEY NOT DETECTED
0758   0433~            	INC	D
0759   0433~            	LD	L,B		;SAVE KEY
0760   0433~            ;
0761   0433~            ; END OF ROWS?
0762   0433~            ;
0763   0433~            SCANKY4	INC	B	;NEXT KEY
0764   0433~            	SRA	C	;SHIFT SCAN RIGHT
0765   0433~            	JR	NC,SCANKY3	;NEXT ROW
0766   0433~            ;
0767   0433~            ; END OF COLUMNS?
0768   0433~            ;
0769   0433~            	SLA	E	;SHIFT MASK LEFT
0770   0433~            	BIT	5,E	;END OF KEYSCAN?
0771   0433~            	JR	Z,SCANKY2	;NEXT COLUMN
0772   0433~            ;
0773   0433~            ; END OF SCAN
0774   0433~            ;
0775   0433~            	LD	A,D
0776   0433~            	CP	00H
0777   0433~            	JR	Z,SCANKY6	;NO KEY PRESSED
0778   0433~            	CP	01H
0779   0433~            	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0780   0433~            ;
0781   0433~            ; ONE KEY DETECTED
0782   0433~            ;
0783   0433~            	LD	A,00H
0784   0433~            	OUT	(SCAN),A	;CLEAR SCAN REG
0785   0433~            	LD	A,L		;RETURN KEY IN A
0786   0433~            	SET	5,A		;SET DATA AVAILABLE FLAG
0787   0433~            	JR	SCANKY7
0788   0433~            ;
0789   0433~            ; NO KEY
0790   0433~            ;
0791   0433~            SCANKY6	LD	A,00H
0792   0433~            	OUT	(SCAN),A	;CLEAR SCAN REG
0793   0433~            SCANKY7	POP	HL
0794   0433~            	POP	DE
0795   0433~            	POP	BC
0796   0433~            	RET
0797   0433             #ENDIF
0798   0433             ;-----------------------------
0799   0433             ; SCAN DISPLAY UNTIL KEY PRESS
0800   0433             ;-----------------------------
0801   0433             ; ENTRY : NONE
0802   0433             ; EXIT  : A = KEY VALUE 00H TO 1FH
0803   0433             ;         FLAG REGISTER MODIFIED
0804   0433             ;
0805   0433 CD EE 03    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0806   0436 CD 28 04    	CALL	SCANKEY
0807   0439 CB 6F       	BIT	5,A
0808   043B 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0809   043D E6 1F       	AND	1FH	;STRIP UNUSED BITS
0810   043F C9          	RET
0811   0440             ;-------------------------------
0812   0440             ; SCAN DISPLAY UNTIL KEY RELEASE
0813   0440             ;-------------------------------
0814   0440             ; ENTRY : NONE
0815   0440             ; EXIT  : NONE
0816   0440             ;
0817   0440 F5          SKEYRL	PUSH	AF
0818   0441 CD EE 03    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0819   0444 CD 28 04    	CALL	SCANKEY
0820   0447 CB 6F       	BIT	5,A
0821   0449 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0822   044B F1          	POP	AF
0823   044C C9          	RET
0824   044D             ;-------------------
0825   044D             ; WAIT FOR KEY PRESS
0826   044D             ;-------------------
0827   044D             ; ENTRY : NONE
0828   044D             ; EXIT  : A = KEY VALUE 00H TO 1FH
0829   044D             ;         FLAG REGISTER MODIFIED
0830   044D             ;
0831   044D CD 28 04    KEYIN	CALL	SCANKEY
0832   0450 CB 6F       	BIT	5,A
0833   0452 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
0834   0454 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0835   0456 C9          	RET
0836   0457             ;---------------------
0837   0457             ; WAIT FOR KEY RELEASE
0838   0457             ;---------------------
0839   0457             ; ENTRY : NONE
0840   0457             ; EXIT  : NONE
0841   0457             ;
0842   0457 F5          KEYREL	PUSH	AF
0843   0458 CD 28 04    KEYRL1	CALL	SCANKEY
0844   045B CB 6F       	BIT	5,A
0845   045D 20 F9       	JR	NZ,KEYRL1
0846   045F F1          	POP	AF
0847   0460 C9          	RET
0848   0461             ;-----------------
0849   0461             ; KEY MENU HANDLER
0850   0461             ;-----------------
0851   0461             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
0852   0461             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
0853   0461             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
0854   0461             ; ENTRY :  A = ELEMENT TO LOOK FOR
0855   0461             ;         HL = POINTS TO TABLE
0856   0461             ; EXIT  :  ELEMENT NOT FOUND
0857   0461             ;           HL HOLDS ADDRESS OF LAST ELEMENT
0858   0461             ;          ELEMENT FOUND
0859   0461             ;           CONTROL PASSES TO JUMP ADDRESS WITH
0860   0461             ;          RETURN ADDRESS OF MENU CALL ON STACK
0861   0461             ;
0862   0461 F5          MENU	PUSH	AF
0863   0462 C5          	PUSH	BC
0864   0463 D5          	PUSH	DE	;SAVE REGISTERS
0865   0464 E5          	PUSH	HL	;CALCULATE ADDRESS
0866   0465 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
0867   0467 5E          	LD	E,(HL)	;ADDING THE INDEX TO
0868   0468 23          	INC	HL	;THE ELEMENTS
0869   0469 19          	ADD	HL,DE	;TO THE ADDR OF THE
0870   046A 54          	LD	D,H	;TABLE
0871   046B 5D          	LD	E,L
0872   046C E1          	POP	HL
0873   046D 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
0874   046E 23          	INC	HL	;POINT TO LIST OF ENTRIES
0875   046F BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
0876   0470 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
0877   0472 23          	INC	HL	;NEXT ENTRY IN LIST
0878   0473 13          	INC	DE	;NEXT ENTRY IN
0879   0474 13          	INC	DE	;JUMP TABLE
0880   0475 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
0881   0477 D1          	POP	DE
0882   0478 C1          	POP	BC
0883   0479 F1          	POP	AF
0884   047A C9          	RET	;NOT IN TABLE
0885   047B             ;
0886   047B             ; FOUND ELEMENT IN THE TABLE
0887   047B             ; PASS CONTROL TO THE JUMP HANDLER
0888   047B             ;
0889   047B 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
0890   047C 6F          	LD	L,A	;FROM THE TABLE
0891   047D 13          	INC	DE	;AND JUMP TO
0892   047E 1A          	LD	A,(DE)	;THE JUMP ADDRESS
0893   047F 67          	LD	H,A	;FOR THAT ENTRY
0894   0480 D1          	POP	DE
0895   0481 C1          	POP	BC
0896   0482 F1          	POP	AF	;RESTORE REGISTERS
0897   0483 E9          	JP	(HL)
0898   0484             ;-------------------
0899   0484             ; CALCULATE CHECKSUM
0900   0484             ;-------------------
0901   0484             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
0902   0484             ;
0903   0484             ; ENTRY : HL = START OF BLOCK TO SUM
0904   0484             ;         DE = END OF BLOCK TO SUM
0905   0484             ; EXIT  : A =  CHECKSUM
0906   0484             ;         FLAG REGISTER MODIFIED
0907   0484             ;
0908   0484 E5          CHKSUM	PUSH	HL
0909   0485 D5          	PUSH	DE
0910   0486 13          	INC	DE	;END OF BLOCK+1
0911   0487 AF          	XOR	A	;CLEAR CHECKSUM
0912   0488 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
0913   0489 23          	INC	HL	;POINT TO NEXT ELEMENT
0914   048A A7          	AND	A	;SET CARRY
0915   048B E5          	PUSH	HL
0916   048C ED 52       	SBC	HL,DE	;SUBTRACT
0917   048E E1          	POP	HL
0918   048F 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
0919   0491 D1          	POP	DE
0920   0492 E1          	POP	HL
0921   0493 C9          	RET
0922   0494             ;--------------------------
0923   0494             ; ACCESS BYTE LOOK UP TABLE
0924   0494             ;--------------------------
0925   0494             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
0926   0494             ; UP TABLE
0927   0494             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0928   0494             ;         HL = ADDRESS OF LOOK UP TABLE
0929   0494             ; EXIT : HL = ADDRESS OF ELEMENT A
0930   0494             ;
0931   0494 D5          INDEXB	PUSH	DE
0932   0495 5F          	LD	E,A	;USE DE AS INDEX
0933   0496 16 00       	LD	D,0	;TO ELEMENT IN TABLE
0934   0498 19          	ADD	HL,DE	;BY ADDING TO HL
0935   0499 D1          	POP	DE
0936   049A C9          	RET
0937   049B             ;--------------------------
0938   049B             ; ACCESS WORD LOOK UP TABLE
0939   049B             ;--------------------------
0940   049B             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
0941   049B             ; UP TABLE
0942   049B             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0943   049B             ;         HL = ADDRESS OF LOOK UP TABLE
0944   049B             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
0945   049B             ;
0946   049B D5          INDEXW	PUSH	DE
0947   049C 5F          	LD	E,A
0948   049D CB 23       	SLA	E	;MULTIPLY BY TWO
0949   049F 16 00       	LD	D,0
0950   04A1 19          	ADD	HL,DE
0951   04A2 D1          	POP	DE
0952   04A3 C9          	RET
0953   04A4             ;-------------------------------
0954   04A4             ; GENERATE A QUASI-RANDOM NUMBER
0955   04A4             ;-------------------------------
0956   04A4             ; GENERATE AN 16 BIT RANDOM NUMBER
0957   04A4             ; USING LINEAR CONGRUENTIAL METHOD.
0958   04A4             ;     Rn+1 = (aRn+c) MOD m
0959   04A4             ; REFRESH REGISTER USED FOR Rn AND c
0960   04A4             ;	ENTRY : NONE
0961   04A4             ;	EXIT  : HL = RANDOM WORD
0962   04A4             ;	NO REGISTERS MODIFIED
0963   04A4             ;
0964   04A4 F5          RAND	PUSH	AF
0965   04A5 C5          	PUSH	BC
0966   04A6 D5          	PUSH	DE	;SAVE REGISTERS
0967   04A7             ;
0968   04A7             ; CALCULATE aRn
0969   04A7             ;
0970   04A7 ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
0971   04A9 5F          	LD	E,A	;(Rn) BY
0972   04AA 16 00       	LD	D,0
0973   04AC 21 48 05    	LD	HL,0548H	;CONSTANT (a)
0974   04AF CD BC 04    	CALL	MUL16
0975   04B2             ;
0976   04B2             ; CALCULATE aRn+c
0977   04B2             ;
0978   04B2 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
0979   04B4 06 00       	LD	B,0	;READ OF THE
0980   04B6 4F          	LD	C,A	;THE REFRESH
0981   04B7 09          	ADD	HL,BC	;REGISTER (c)
0982   04B8 D1          	POP	DE
0983   04B9 C1          	POP	BC
0984   04BA F1          	POP	AF	;RESTORE REGISTERS
0985   04BB C9          	RET
0986   04BC             ;----------------------
0987   04BC             ; 16 BIT MULTIPLICATION
0988   04BC             ;----------------------
0989   04BC             ;16 BIT MULTIPLY
0990   04BC             ; ENTRY : HL = MULTIPLICAND (MPD)
0991   04BC             ;         DE = MULTIPLIER (MPR)
0992   04BC             ; EXIT : HL = RESULT
0993   04BC             ;FROM ZAKS 'PROGRAMMING THE Z80'
0994   04BC             ;
0995   04BC F5          MUL16	PUSH	AF
0996   04BD C5          	PUSH	BC
0997   04BE 4C          	LD	C,H	;MPR(H)
0998   04BF 7D          	LD	A,L	;MPR(L)
0999   04C0 06 10       	LD	B,16	;BIT COUNTER
1000   04C2 21 00 00    	LD	HL,0	;CLEAR RESULT
1001   04C5 CB 39       MULT	SRL	C	;MPR (H)
1002   04C7 1F          	RRA	;MPR (L)
1003   04C8 30 01       	JR	NC,MULT1	;TEST CARRY
1004   04CA 19          	ADD	HL,DE	;ADD MPD TO RESULT
1005   04CB EB          MULT1	EX	DE,HL
1006   04CC 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1007   04CD EB          	EX	DE,HL
1008   04CE 10 F5       	DJNZ	MULT	;DONE?
1009   04D0 C1          	POP	BC
1010   04D1 F1          	POP	AF
1011   04D2 C9          	RET
1012   04D3             ; MUSIC ROUTINE
1013   04D3             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1014   04D3             ; MONITOR MON-1
1015   04D3             ; BY JOHN HARDY AND KEN STONE
1016   04D3             ;
1017   04D3             ;----------------
1018   04D3             ; MUSIC SEQUENCER
1019   04D3             ;----------------
1020   04D3             ; SEQUENCES THROUGH A TABLE OF NOTES
1021   04D3             ; 1EH = REPEAT TUNE UNTIL RESET
1022   04D3             ; 1FH = PLAY ONCE AND RETURN
1023   04D3             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1024   04D3             ; EXIT : NO REGISTERS MODIFIED
1025   04D3 F5          MUSIC	PUSH	AF
1026   04D4 C5          	PUSH	BC
1027   04D5 D5          	PUSH	DE
1028   04D6 E5          	PUSH	HL	;SAVE REGISTERS
1029   04D7 E5          	PUSH	HL
1030   04D8 EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1031   04D9             ;
1032   04D9             ; PLAY EACH NOTE IN TURN
1033   04D9             ;
1034   04D9 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1035   04DA E6 1F       	AND	1FH	;STRIP UNUSED BITS
1036   04DC             ;
1037   04DC             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1038   04DC             ;
1039   04DC FE 00       	CP	00H
1040   04DE C2 EE 04    	JP	NZ,STEP1
1041   04E1 01 00 10    	LD	BC,1000H
1042   04E4 0B          PAUSE	DEC	BC
1043   04E5 78          	LD	A,B
1044   04E6 B1          	OR	C
1045   04E7 C2 E4 04    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1046   04EA 13          	INC	DE	;POINT TO NEXT ELEMENT
1047   04EB C3 D9 04    	JP	STEP
1048   04EE             ;
1049   04EE             ; IF ELEMENT IS 1EH REPEAT TUNE
1050   04EE             ;
1051   04EE FE 1E       STEP1	CP	1EH
1052   04F0 C2 F8 04    	JP	NZ,STEP2
1053   04F3 D1          	POP	DE	;GET TABLE ADDRESS BACK
1054   04F4 D5          	PUSH	DE	;SAVE IT FOR LATER
1055   04F5 C3 D9 04    	JP	STEP
1056   04F8             ;
1057   04F8             ; IF ELEMENT IS 1FH RETURN
1058   04F8             ;
1059   04F8 FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1060   04FA C2 03 05    	JP	NZ,STEP3
1061   04FD E1          	POP	HL
1062   04FE E1          	POP	HL
1063   04FF D1          	POP	DE
1064   0500 C1          	POP	BC
1065   0501 F1          	POP	AF
1066   0502 C9          	RET
1067   0503             ;
1068   0503             ;NOW PLAY THE NOTE
1069   0503             ;
1070   0503 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1071   0504 21 1F 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1072   0507 CD 94 04    	CALL	INDEXB	;GET PERIOD/2
1073   050A 7E          	LD	A,(HL)	;GET ELEMENT
1074   050B F5          	PUSH	AF	;SAVE FOR LATER
1075   050C 78          	LD	A,B	;GET ELEMENT BACK IN A
1076   050D 21 37 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1077   0510 CD 94 04    	CALL	INDEXB	;GET DURATION/2
1078   0513 7E          	LD	A,(HL)	;GET ELEMENT
1079   0514 6F          	LD	L,A
1080   0515 26 00       	LD	H,0	;HL = DURATION/2
1081   0517 F1          	POP	AF
1082   0518 CD 50 05    	CALL	TONE	;DO NOTE ROUTINE
1083   051B 13          	INC	DE
1084   051C C3 D9 04    	JP	STEP	;STEP TO NEXT ELEMENT
1085   051F             ;
1086   051F             ; PERIOD/2 OF NOTE
1087   051F             ;
1088   051F 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1088   0523 70 67 62 5C 
1089   0527 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1089   052B 45 41 3C 39 
1090   052F 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1090   0533 2A 27 25 23 
1091   0537             ;
1092   0537             ; NOTE DURATION/2
1093   0537             ;
1094   0537 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1094   053B 1E 20 23 25 
1095   053F 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1095   0543 31 33 37 3A 
1096   0547 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1096   054B 4D 52 57 5C 
1097   054F 10          	.DB	10H
1098   0550             ; TONE ROUTINE
1099   0550             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1100   0550             ; MONITOR MON-1
1101   0550             ; BY JOHN HARDY AND KEN STONE
1102   0550             ;
1103   0550             ;--------------
1104   0550             ; OUTPUT A TONE
1105   0550             ;--------------
1106   0550             ;
1107   0550             ; ENTRY : A = PERIOD/2 OF NOTE
1108   0550             ;         HL = DURATION/2 OF NOTE
1109   0550             ; EXIT NO REGISTERS MODIFIED
1110   0550 F5          TONE	PUSH	AF
1111   0551 C5          	PUSH	BC
1112   0552 D5          	PUSH	DE
1113   0553 E5          	PUSH	HL
1114   0554 11 01 00    	LD	DE,0001H
1115   0557 4F          	LD	C,A
1116   0558 29          	ADD	HL,HL	;DOUBLE DURATION
1117   0559 AF          	XOR	A
1118   055A EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1119   055C D3 85       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1120   055E 41          	LD	B,C
1121   055F C5          TONE2	PUSH	BC
1122   0560 06 02       	LD	B,02H
1123   0562 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1124   0564 C1          	POP	BC
1125   0565 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1126   0567 ED 52       	SBC	HL,DE	;END OF NOTE?
1127   0569 20 EF       	JR	NZ,TONE1	;DO AGAIN
1128   056B E1          	POP	HL
1129   056C D1          	POP	DE
1130   056D C1          	POP	BC
1131   056E F1          	POP	AF
1132   056F C9          	RET
1133   0570             ;---------------
1134   0570             ; KEY ENTRY BEEP
1135   0570             ;---------------
1136   0570 E5          BEEP	PUSH	HL
1137   0571 F5          	PUSH	AF
1138   0572 21 3D 3F    	LD	HL,MODE
1139   0575 CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1140   0577 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1141   0579             ;
1142   0579             ; DO KEYPRESS DELAY
1143   0579             ;
1144   0579 D5          	PUSH	DE	;DO A SHORT
1145   057A 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1146   057D 2A 27 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1147   0580 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1148   0582 30 FC       	JR	NC,BEEP1	;KEY STROKES
1149   0584 D1          	POP	DE
1150   0585 18 10       	JR	BEEP3
1151   0587             ;
1152   0587             ; OUTPUT KEYPRESS TONES
1153   0587             ;
1154   0587 3E 24       BEEP2	LD	A,24H
1155   0589 21 30 00    	LD	HL,0030H
1156   058C CD 50 05    	CALL	TONE	;DO FIRST TONE
1157   058F 3E 0E       	LD	A,0EH
1158   0591 21 50 00    	LD	HL,0050H
1159   0594 CD 50 05    	CALL	TONE	;DO SECOND TONE
1160   0597 F1          BEEP3	POP	AF
1161   0598 E1          	POP	HL
1162   0599 C9          	RET
1163   059A             ;----------------------------------------
1164   059A             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1165   059A             ;----------------------------------------
1166   059A             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1167   059A             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1168   059A             ; ATTACHED).
1169   059A             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1170   059A             ; AND MODIFY REGISTERS.
1171   059A             ;
1172   059A E1          SSTEP	POP	HL	;GET HL BACK
1173   059B F5          	PUSH	AF	;SAVE AF FOR LATER
1174   059C 22 4D 3F    	LD	(TMPHL),HL
1175   059F ED 53 4B 3F 	LD	(TMPDE),DE
1176   05A3 ED 43 49 3F 	LD	(TMPBC),BC
1177   05A7 DD 22 4F 3F 	LD	(TMPIX),IX
1178   05AB FD 22 51 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1179   05AF E1          	POP	HL	;GET AF BACK
1180   05B0 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
1181   05B3 E1          	POP	HL	;GET PC RETURN ADDRESS
1182   05B4 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
1183   05B7 ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1184   05BB             ;
1185   05BB             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1186   05BB             ;
1187   05BB CD 70 05    	CALL	BEEP
1188   05BE 3A 43 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1189   05C1 E6 07       	AND	7	;MAKE SURE IN LIMITS
1190   05C3 32 43 3F    	LD	(REGPNT),A	;SAVE IT
1191   05C6 CD A3 06    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1192   05C9 CD 40 04    	CALL	SKEYRL	;WAIT FOR A KEY
1193   05CC CD 33 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1194   05CF 21 D8 05    	LD	HL,REGTBL	;HANDLE THE KEY
1195   05D2 CD 61 04    	CALL	MENU	;AND UPDATE DISPLAY
1196   05D5 C3 C6 05    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1197   05D8             ;
1198   05D8             ; REGISTER DISPLAY KEY TABLE
1199   05D8             ;
1200   05D8 14          REGTBL	.DB	14H
1201   05D9 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1201   05DD 04 05 06 07 
1202   05E1 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1202   05E5 0C 0D 0E 0F 
1203   05E9 10 11 12 13 	.DB	10H,11H,12H,13H
1204   05ED 25 06 25 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1204   05F1 25 06 25 06 
1205   05F5 25 06 25 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1205   05F9 25 06 25 06 
1206   05FD 25 06 25 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1206   0601 25 06 25 06 
1207   0605 25 06 25 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1207   0609 25 06 25 06 
1208   060D~            #IFDEF TEC-1F
1209   060D~            	.DW	INCSTP,DECSTP,RETPGM,RETMON
1210   060D             #ELSE
1211   060D 4C 06 56 06 	.DW	RETMON,RETPGM,INCSTP,DECSTP
1211   0611 78 06 8D 06 
1212   0615             #ENDIF
1213   0615             ;
1214   0615             ; REGISTER NAME CHARACTERS
1215   0615             ;
1216   0615~            #IFDEF TEC-1F
1217   0615~            REGNAM	.DW	4FC3H
1218   0615~            	.DW	6F47H,0E6C3H,0ECC7H
1219   0615~            	.DW	66C2H,286EH,28AEH
1220   0615~            	.DW	0A74FH
1221   0615             #ELSE
1222   0615 39 73       REGNAM	.DW	7339H
1223   0617 71 77 39 7C 	.DW	7771H,7C39H,5E79H
1223   061B 79 5E 
1224   061D 38 74 76 06 	.DW	7438H,0676H,066EH
1224   0621 6E 06 
1225   0623 73 6D       	.DW	6D73H
1226   0625             #ENDIF
1227   0625             ;--------------
1228   0625             ; EDIT REGISTER
1229   0625             ;--------------
1230   0625 CD 70 05    REGKEY	CALL	BEEP
1231   0628 F5          	PUSH	AF	;SAVE KEY FOR LATER
1232   0629 3A 43 3F    	LD	A,(REGPNT)
1233   062C             ;
1234   062C             ; EDIT REGISTER
1235   062C             ;
1236   062C 21 45 3F    	LD	HL,TMPPC
1237   062F CD 9B 04    	CALL	INDEXW
1238   0632 4E          	LD	C,(HL)
1239   0633 23          	INC	HL
1240   0634 46          	LD	B,(HL)	;GET REG CONTENTS
1241   0635 CB 21       	SLA	C
1242   0637 CB 10       	RL	B
1243   0639 CB 21       	SLA	C
1244   063B CB 10       	RL	B
1245   063D CB 21       	SLA	C
1246   063F CB 10       	RL	B	;SHIFT REGISTER
1247   0641 CB 21       	SLA	C	;FOUR BITS
1248   0643 CB 10       	RL	B	;LEFT AND
1249   0645 F1          	POP	AF	;PUT THE KEY
1250   0646 B1          	OR	C	;INTO THE LSN
1251   0647 4F          	LD	C,A	;AND PUT THE
1252   0648 70          	LD	(HL),B	;REGISTER BACK
1253   0649 2B          	DEC	HL	;WHERE IT BELONGS
1254   064A 71          	LD	(HL),C
1255   064B C9          	RET
1256   064C             ;------------------
1257   064C             ; RETURN TO MONITOR
1258   064C             ;------------------
1259   064C CD 70 05    RETMON	CALL	BEEP
1260   064F CD 40 04    	CALL	SKEYRL
1261   0652 FB          	EI	;ENABLE INTERRUPTS AGAIN
1262   0653 C3 74 02    	JP	MAIN
1263   0656             ;------------------
1264   0656             ; RETURN TO PROGRAM
1265   0656             ;------------------
1266   0656 ED 7B 53 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1267   065A 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
1268   065D E5          	PUSH	HL	;ADDRESS BACK ON STACK
1269   065E 2A 47 3F    	LD	HL,(TMPAF)
1270   0661 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1271   0662 FD 2A 51 3F 	LD	IY,(TMPIY)
1272   0666 DD 2A 4F 3F 	LD	IX,(TMPIX)
1273   066A ED 4B 49 3F 	LD	BC,(TMPBC)
1274   066E ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1275   0672 F1          	POP	AF	;RESTORE AF
1276   0673 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
1277   0676 FB          	EI	;ENABLE INTERRUPTS
1278   0677 C9          	RET	;AND RETURN TO PROGRAM
1279   0678             ;----------------------
1280   0678             ; DISPLAY NEXT REGISTER
1281   0678             ;----------------------
1282   0678 CD 70 05    INCSTP	CALL	BEEP
1283   067B 3A 43 3F    	LD	A,(REGPNT)
1284   067E FE 07       	CP	7	;END OF REG TABLE?
1285   0680 CA 88 06    	JP	Z,INCSP1
1286   0683 3C          	INC	A
1287   0684 32 43 3F    	LD	(REGPNT),A
1288   0687 C9          	RET
1289   0688 AF          INCSP1	XOR	A
1290   0689 32 43 3F    	LD	(REGPNT),A
1291   068C C9          	RET
1292   068D             ;--------------------------
1293   068D             ; DISPLAY PREVIOUS REGISTER
1294   068D             ;--------------------------
1295   068D CD 70 05    DECSTP	CALL	BEEP
1296   0690 3A 43 3F    	LD	A,(REGPNT)
1297   0693 FE 00       	CP	0	;START OF REG TABLE?
1298   0695 CA 9D 06    	JP	Z,DECSP1
1299   0698 3D          	DEC	A
1300   0699 32 43 3F    	LD	(REGPNT),A
1301   069C C9          	RET
1302   069D 3E 07       DECSP1	LD	A,7
1303   069F 32 43 3F    	LD	(REGPNT),A
1304   06A2 C9          	RET
1305   06A3             ;-----------------
1306   06A3             ; DISPLAY REGISTER
1307   06A3             ;-----------------
1308   06A3 3A 43 3F    SETREG	LD	A,(REGPNT)
1309   06A6 21 45 3F    	LD	HL,TMPPC	;START OF TABLE
1310   06A9 CD 9B 04    	CALL	INDEXW	;GET ELEMENT ADDRESS
1311   06AC 5E          	LD	E,(HL)
1312   06AD 23          	INC	HL
1313   06AE 56          	LD	D,(HL)
1314   06AF EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1315   06B0 CD A0 03    	CALL	DISADD
1316   06B3             ;
1317   06B3             ; DISPLAY REGISTER NAME
1318   06B3             ;
1319   06B3 21 15 06    	LD	HL,REGNAM
1320   06B6 CD 9B 04    	CALL	INDEXW
1321   06B9 7E          	LD	A,(HL)
1322   06BA 32 35 3F    	LD	(DISBUF+0),A
1323   06BD 23          	INC	HL
1324   06BE 7E          	LD	A,(HL)
1325   06BF 32 36 3F    	LD	(DISBUF+1),A
1326   06C2 C9          	RET
1327   06C3             ;------------------
1328   06C3             ; FUNCTION KEY MENU
1329   06C3             ;------------------
1330   06C3             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1331   06C3             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1332   06C3             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1333   06C3             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1334   06C3             ;
1335   06C3 E1          FUNKEY	POP	HL	;REMOVE RETURN ADDRESS
1336   06C4 CD 70 05    	CALL	BEEP
1337   06C7 2A 3F 3F    FUNKY1	LD	HL,(ADRESS)
1338   06CA CD A0 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1339   06CD~            #IFDEF TEC-1F
1340   06CD~            
1341   06CD~            	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1342   06CD             #ELSE
1343   06CD 21 54 71    	LD	HL,7154H	;FN
1344   06D0             #ENDIF
1345   06D0 22 35 3F    	LD	(DISBUF),HL	;DISPLAY FN
1346   06D3 CD 40 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1347   06D6 CD 33 04    FUNKY2	CALL	SKEYIN
1348   06D9 2A 19 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1349   06DC CD 61 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1350   06DF C3 D6 06    	JP	FUNKY2	;TRY AGAIN
1351   06E2             ;
1352   06E2             ; RETURN TO MAIN
1353   06E2             ;
1354   06E2 CD 70 05    CANCEL	CALL	BEEP
1355   06E5 CD 69 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1356   06E8 CD 40 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1357   06EB E1          	POP	HL	;REMOVE MENU RETURN
1358   06EC C3 88 02    	JP	MAIN2
1359   06EF             ;
1360   06EF             ; FUNCTION MENU KEY TABLE
1361   06EF             ;
1362   06EF 11          FUNLST	.DB	11H
1363   06F0 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1363   06F4 04 05 06 07 
1364   06F8 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1364   06FC 0C 0D 0E 0F 
1365   0700~            #IFDEF TEC-1F
1366   0700~            	.DB	12H	;GO KEY
1367   0700             #ELSE
1368   0700 10          	.DB	10H	;FN KEY
1369   0701             #ENDIF
1370   0701 27 07 32 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1370   0705 37 08 49 08 
1371   0709 5B 08 B1 08 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1371   070D EF 08 26 09 
1372   0711 34 09 43 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1372   0715 52 09 61 09 
1373   0719 FB 09 7C 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1373   071D D5 0B 84 0C 
1374   0721 23 07       	.DW	FUNFUN
1375   0723             ;--------------------------
1376   0723             ; JUMP TO FUNCTION FUNCTION
1377   0723             ;--------------------------
1378   0723 2A 33 3F    FUNFUN	LD	HL,(FUNJMP)
1379   0726 E9          	JP	(HL)
1380   0727             ;------------------------------------------
1381   0727             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1382   0727             ;------------------------------------------
1383   0727 CD 70 05    GOEXEC	CALL	BEEP
1384   072A CD 57 04    	CALL	KEYREL
1385   072D E1          	POP	HL	;REMOVE EXEC RETURN
1386   072E 2A 3F 3F    	LD	HL,(ADRESS)
1387   0731 E9          	JP	(HL)	;START EXECUCTION
1388   0732             ;------------------------------------
1389   0732             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1390   0732             ;------------------------------------
1391   0732 CD 70 05    INTELFN	CALL	BEEP
1392   0735 CD 57 04    	CALL	KEYREL
1393   0738 CD 41 07    	CALL	INTELH
1394   073B C2 7A 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1395   073E C3 E2 06    	JP	CANCEL	;JUST RETURN IF ALL OK
1396   0741             ;-----------------------
1397   0741             ; RECEIVE INTEL HEX FILE
1398   0741             ;-----------------------
1399   0741 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1400   0745             ;
1401   0745             ; WAIT FOR RECORD MARK
1402   0745             ;
1403   0745 AF          INTEL1	XOR	A
1404   0746 DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1405   0749 CD FD 07    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1406   074C FE 3A       	CP	':'	;TO BE TRANSMITTED
1407   074E 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1408   0750             ;
1409   0750             ; GET RECORD LENGTH
1410   0750             ;
1411   0750 CD 9D 07    	CALL	GETBYT
1412   0753 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1413   0756             ;
1414   0756             ; GET ADDRESS FIELD
1415   0756             ;
1416   0756 CD 9D 07    	CALL	GETBYT
1417   0759 DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1418   075C CD 9D 07    	CALL	GETBYT
1419   075F DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1420   0762             ;
1421   0762             ; GET RECORD TYPE
1422   0762             ;
1423   0762 CD 9D 07    	CALL	GETBYT
1424   0765 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1425   0767             ;
1426   0767             ; READ IN THE DATA
1427   0767             ;
1428   0767 DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1429   076A DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1430   076D DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1431   0770             
1432   0770 CD 9D 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1433   0773 77          	LD	(HL),A	;STORE DATA BYTE
1434   0774 23          	INC	HL
1435   0775 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1436   0777             ;
1437   0777             ; GET CHECKSUM AND COMPARE
1438   0777             ;
1439   0777 DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1440   077A ED 44       	NEG		;TWO'S COMPLEMENT
1441   077C DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1442   077F CD 9D 07    	CALL	GETBYT
1443   0782 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1444   0785 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1445   0788 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1446   078A C9          	RET	;NZ=CHECKSUM ERROR
1447   078B             ;
1448   078B             ; END OF FILE RECORD
1449   078B             ;
1450   078B DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1451   078E ED 44       	NEG		;TWO'S COMPLEMENT
1452   0790 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1453   0793 CD 9D 07    	CALL	GETBYT
1454   0796 DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1455   0799 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1456   079C C9          	RET	;NZ=CHECKSUM ERROR
1457   079D             ;--------------------------
1458   079D             ; GET BYTE FROM SERIAL PORT
1459   079D             ;--------------------------
1460   079D C5          GETBYT	PUSH	BC
1461   079E CD FD 07    	CALL	RXDATA
1462   07A1 CB 77       	BIT	6,A
1463   07A3 28 02       	JR	Z,GETBT1
1464   07A5 C6 09       	ADD	A,09H
1465   07A7 E6 0F       GETBT1	AND	0FH
1466   07A9 CB 27       	SLA 	A
1467   07AB CB 27       	SLA	A
1468   07AD CB 27       	SLA	A
1469   07AF CB 27       	SLA	A
1470   07B1 4F          	LD	C,A
1471   07B2             ;
1472   07B2             ; GET LOW NYBBLE
1473   07B2             ;
1474   07B2 CD FD 07    	CALL	RXDATA
1475   07B5 CB 77       	BIT	6,A
1476   07B7 28 02       	JR	Z,GETBT2
1477   07B9 C6 09       	ADD	A,09H
1478   07BB E6 0F       GETBT2	AND	0FH
1479   07BD B1          	OR	C
1480   07BE 47          	LD	B,A
1481   07BF DD 86 03    	ADD	A,(IX+3)
1482   07C2 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1483   07C5 78          	LD	A,B
1484   07C6 A7          	AND	A	;CLEAR CARRY
1485   07C7 C1          	POP	BC
1486   07C8 C9          	RET
1487   07C9             ;-------------------------------
1488   07C9             ; CONVERT ASCII CHARACTER TO HEX
1489   07C9             ;-------------------------------
1490   07C9             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1491   07C9             ;ENTRY : A= ASCII 0-9,A-F
1492   07C9             ;EXIT  : A= HEX 0-F IN LSN
1493   07C9             ; A AND F REGISTERS MODIFIED
1494   07C9             ;
1495   07C9 CB 77       ASCHEX	BIT	6,A
1496   07CB 28 02       	JR	Z,ASCHX1
1497   07CD C6 09       	ADD	A,09H
1498   07CF E6 0F       ASCHX1	AND	0FH
1499   07D1 C9          	RET
1500   07D2             ;------------------------
1501   07D2             ; SERIAL TRANSMIT ROUTINE
1502   07D2             ;------------------------
1503   07D2             ;TRANSMIT BYTE SERIALLY ON DOUT
1504   07D2             ;
1505   07D2             ; ENTRY : A = BYTE TO TRANSMIT
1506   07D2             ;  EXIT : NO REGISTERS MODIFIED
1507   07D2             ;
1508   07D2 F5          TXDATA	PUSH	AF
1509   07D3 C5          	PUSH	BC
1510   07D4 E5          	PUSH	HL
1511   07D5 2A 25 3F    	LD	HL,(BAUD)
1512   07D8 4F          	LD	C,A
1513   07D9             ;
1514   07D9             ; TRANSMIT START BIT
1515   07D9             ;
1516   07D9 AF          	XOR	A
1517   07DA D3 85       	OUT	(SCAN),A
1518   07DC CD 2A 08    	CALL	BITIME
1519   07DF             ;
1520   07DF             ; TRANSMIT DATA
1521   07DF             ;
1522   07DF 06 08       	LD	B,08H
1523   07E1 CB 09       	RRC	C
1524   07E3 CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1525   07E5 79          	LD	A,C	;LSB FIRST AND OUTPUT
1526   07E6 E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1527   07E8 D3 85       	OUT	(SCAN),A
1528   07EA CD 2A 08    	CALL	BITIME
1529   07ED 10 F4       	DJNZ	NXTBIT
1530   07EF             ;
1531   07EF             ; SEND STOP BITS
1532   07EF             ;
1533   07EF 3E 40       	LD	A,40H
1534   07F1 D3 85       	OUT	(SCAN),A
1535   07F3 CD 2A 08    	CALL	BITIME
1536   07F6 CD 2A 08    	CALL	BITIME
1537   07F9 E1          	POP	HL
1538   07FA C1          	POP	BC
1539   07FB F1          	POP	AF
1540   07FC C9          	RET
1541   07FD             ;-----------------------
1542   07FD             ; SERIAL RECEIVE ROUTINE
1543   07FD             ;-----------------------
1544   07FD             ;RECEIVE SERIAL BYTE FROM DIN
1545   07FD             ;
1546   07FD             ; ENTRY : NONE
1547   07FD             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1548   07FD             ;
1549   07FD             ; REGISTERS MODIFIED A AND F
1550   07FD             ;
1551   07FD C5          RXDATA	PUSH	BC
1552   07FE E5          	PUSH	HL
1553   07FF             ;
1554   07FF             ; WAIT FOR START BIT
1555   07FF             ;
1556   07FF DB 86       RXDAT1	IN	A,(KEYBUF)
1557   0801 CB 7F       	BIT	7,A
1558   0803 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1559   0805             ;
1560   0805             ; DETECTED START BIT
1561   0805             ;
1562   0805 2A 25 3F    	LD	HL,(BAUD)
1563   0808 CB 3C       	SRL	H
1564   080A CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1565   080C CD 2A 08    	CALL	BITIME
1566   080F DB 86       	IN	A,(KEYBUF)
1567   0811 CB 7F       	BIT	7,A
1568   0813 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1569   0815             ;
1570   0815             ; DETECTED VALID START BIT,READ IN DATA
1571   0815             ;
1572   0815 06 08       	LD	B,08H
1573   0817 2A 25 3F    RXDAT2	LD	HL,(BAUD)
1574   081A CD 2A 08    	CALL	BITIME	;DELAY ONE BIT TIME
1575   081D DB 86       	IN	A,(KEYBUF)
1576   081F CB 17       	RL	A
1577   0821 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1578   0823 10 F2       	DJNZ	RXDAT2
1579   0825 79          	LD	A,C
1580   0826 B7          	OR	A	;CLEAR CARRY FLAG
1581   0827 E1          	POP	HL
1582   0828 C1          	POP	BC
1583   0829 C9          	RET
1584   082A             ;---------------
1585   082A             ; BIT TIME DELAY
1586   082A             ;---------------
1587   082A             ;DELAY FOR ONE SERIAL BIT TIME
1588   082A             ;ENTRY : HL = DELAY TIME
1589   082A             ; NO REGISTERS MODIFIED
1590   082A             ;
1591   082A E5          BITIME	PUSH	HL
1592   082B D5          	PUSH	DE
1593   082C 11 01 00    	LD	DE,0001H
1594   082F ED 52       BITIM1	SBC	HL,DE
1595   0831 D2 2F 08    	JP	NC,BITIM1
1596   0834 D1          	POP	DE
1597   0835 E1          	POP	HL
1598   0836 C9          	RET
1599   0837             ;-----------------------------
1600   0837             ; FUNCTION 2 - ENTER ADDRESS 1
1601   0837             ;-----------------------------
1602   0837 CD 70 05    ADDRA	CALL	BEEP
1603   083A 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1604   083D 22 2D 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1605   0840~            #IFDEF TEC-1F
1606   0840~            	LD	HL,0C300H	;ADDRESS [
1607   0840             #ELSE
1608   0840 21 00 39    	LD	HL,3900H	;ADDRESS [
1609   0843             #ENDIF
1610   0843 CD A3 08    	CALL	SDELAY
1611   0846 C3 E5 06    	JP	CANCL1
1612   0849             ;-----------------------------
1613   0849             ; FUNCTION 3 - ENTER ADDRESS 2
1614   0849             ;-----------------------------
1615   0849 CD 70 05    ADDRB	CALL	BEEP
1616   084C 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1617   084F 22 2F 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1618   0852~            #IFDEF TEC-1F
1619   0852~            	LD	HL,00A9H	;ADDRESS ]
1620   0852             #ELSE
1621   0852 21 0F 00    	LD	HL,000FH	;ADDRESS ]
1622   0855             #ENDIF
1623   0855 CD A3 08    	CALL	SDELAY
1624   0858 C3 E5 06    	JP	CANCL1
1625   085B             ;------------------------
1626   085B             ; FUNCTION 4 - BLOCK MOVE
1627   085B             ;------------------------
1628   085B CD 70 05    BLKMVE	CALL	BEEP
1629   085E 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1630   0861 22 31 3F    	LD	(BLKDST),HL	;ADDRESS AS
1631   0864~            #IFDEF TEC-1F
1632   0864~            	LD	HL,0C3A9H	;DESTINATION
1633   0864             #ELSE
1634   0864 21 0F 39    	LD	HL,390FH	;DESTINATION
1635   0867             #ENDIF
1636   0867 CD A3 08    	CALL	SDELAY
1637   086A             ;
1638   086A             ; CALCULATE NUMBER OF BYTES TO MOVE
1639   086A             ;
1640   086A 2A 2F 3F    	LD	HL,(BLKEND)
1641   086D ED 5B 2D 3F 	LD	DE,(BLKSRT)
1642   0871 A7          	AND	A
1643   0872 ED 52       	SBC	HL,DE
1644   0874 23          	INC	HL	;MAKE MOVE INCLUSIVE
1645   0875 22 2B 3F    	LD	(COUNT),HL
1646   0878 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1647   087A             ;
1648   087A             ; SHOW ERROR
1649   087A             ;
1650   087A~            #IFDEF TEC-1F
1651   087A~            BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1652   087A             #ELSE
1653   087A 21 79 00    BLKMV1	LD	HL,0079H	;SHOW ERROR E
1654   087D             #ENDIF
1655   087D CD 70 05    BLKMV2	CALL	BEEP
1656   0880 22 35 3F    	LD	(DISBUF),HL	;AND WAIT
1657   0883 CD 33 04    	CALL	SKEYIN	;FOR KEYPRESS
1658   0886 CD 70 05    	CALL	BEEP
1659   0889 CD 40 04    	CALL	SKEYRL
1660   088C C3 E5 06    	JP	CANCL1
1661   088F             ;
1662   088F             ; MOVE BLOCK
1663   088F             ;
1664   088F CD 95 08    BLKMV3	CALL	MOVE
1665   0892 C3 E5 06    	JP	CANCL1
1666   0895             ;-----------
1667   0895             ; BLOCK MOVE
1668   0895             ;-----------
1669   0895 ED 4B 2B 3F MOVE	LD	BC,(COUNT)
1670   0899 2A 2D 3F    	LD	HL,(BLKSRT)	;START ADDR
1671   089C ED 5B 31 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1672   08A0 ED B0       	LDIR
1673   08A2 C9          	RET
1674   08A3             ;-------------------------------
1675   08A3             ; SCAN DISPLAY UNTIL KEY RELEASE
1676   08A3             ;-------------------------------
1677   08A3 22 35 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1678   08A6 06 FF       	LD	B,255	;IN DATA DISPLAYS
1679   08A8 CD EE 03    SDELY1	CALL	SCAND	;UNTIL KEY
1680   08AB 10 FB       	DJNZ SDELY1	;IS RELEASED
1681   08AD CD 40 04    	CALL	SKEYRL
1682   08B0 C9          	RET
1683   08B1             ;---------------------------
1684   08B1             ;FUNCTION 5 - BLOCK CHECKSUM
1685   08B1             ;---------------------------
1686   08B1 CD 70 05    BLKSUM	CALL	BEEP
1687   08B4~            #IFDEF TEC-1F
1688   08B4~            	LD	HL,0C3A7H	;CS
1689   08B4             #ELSE
1690   08B4 21 6D 39    	LD	HL,396DH	;CS
1691   08B7             #ENDIF
1692   08B7 CD A3 08    	CALL	SDELAY	;SHOW PROMPT
1693   08BA ED 5B 2D 3F 	LD	DE,(BLKSRT)
1694   08BE 2A 2F 3F    	LD	HL,(BLKEND)
1695   08C1 A7          	AND	A
1696   08C2 ED 52       	SBC	HL,DE
1697   08C4 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1698   08C5 22 2B 3F    	LD	(COUNT),HL
1699   08C8 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1700   08CA             ;
1701   08CA             ; SHOW ERROR
1702   08CA             ;
1703   08CA C3 7A 08    	JP	BLKMV1
1704   08CD             ;
1705   08CD             ; CALCULATE CHECKSUM
1706   08CD             ;
1707   08CD 2A 2D 3F    BLKSM1	LD	HL,(BLKSRT)
1708   08D0 ED 5B 2F 3F 	LD	DE,(BLKEND)
1709   08D4 CD 84 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1710   08D7 CD B5 03    	CALL	DISBYT	;DISPLAY
1711   08DA 2A 2B 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1712   08DD CD A0 03    	CALL	DISADD	;SUMMED AND
1713   08E0 CD 70 05    	CALL	BEEP
1714   08E3 CD 33 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1715   08E6 CD 70 05    	CALL	BEEP	;A KEY IS PRESSED
1716   08E9 CD 40 04    	CALL	SKEYRL
1717   08EC C3 E5 06    	JP	CANCL1
1718   08EF             ;----------------------------------------
1719   08EF             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1720   08EF             ;----------------------------------------
1721   08EF CD 70 05    BRANCH	CALL	BEEP
1722   08F2~            #IFDEF TEC-1F
1723   08F2~            	LD	HL,44E6H	;RB
1724   08F2             #ELSE
1725   08F2 21 7C 50    	LD	HL,507CH	;RB
1726   08F5             #ENDIF
1727   08F5 CD A3 08    	CALL	SDELAY
1728   08F8 2A 3F 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1729   08FB ED 5B 2D 3F 	LD	DE,(BLKSRT)
1730   08FF 13          	INC	DE	;POINT TO PC+2
1731   0900 A7          	AND	A
1732   0901 ED 52       	SBC	HL,DE	;SUBTRACT
1733   0903             ;
1734   0903             ;TEST HIGH BYTE OF RESULT TO
1735   0903             ;DETERMINE IF BACKWARD BRANCH
1736   0903             ;
1737   0903 7C          	LD	A,H
1738   0904 FE FF       	CP	255	;BACKWARD BRANCH?
1739   0906 C2 11 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1740   0909             ;
1741   0909             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1742   0909             ;
1743   0909 7D          	LD	A,L
1744   090A CB 7F       	BIT	7,A
1745   090C 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1746   090E C3 7A 08    	JP	BLKMV1	;TOO FAR BACK
1747   0911             ;
1748   0911             ;TEST HIGH BYTE OF RESULT TO
1749   0911             ;DETERMINE IF FORWARD BRANCH
1750   0911             ;
1751   0911 FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1752   0913 C2 7A 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1753   0916             ;
1754   0916             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1755   0916             ;
1756   0916 7D          	LD	A,L
1757   0917 CB 7F       	BIT	7,A
1758   0919 C2 7A 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1759   091C             ;
1760   091C             ; WITHIN LIMITS PUT IN RAM
1761   091C             ; AND SHOW AS CURRENT ADDRESS
1762   091C             ;
1763   091C 2A 2D 3F    BRNCH2	LD	HL,(BLKSRT)
1764   091F 22 3F 3F    	LD	(ADRESS),HL
1765   0922 77          	LD	(HL),A
1766   0923 C3 E5 06    	JP	CANCL1
1767   0926             ;-----------------------------------------
1768   0926             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1769   0926             ;-----------------------------------------
1770   0926 CD 70 05    TRACE	CALL	BEEP
1771   0929~            #IFDEF TEC-1F
1772   0929~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1773   0929~            	LD	HL,0046H	;SHOW T
1774   0929             #ELSE
1775   0929 D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1776   092B 21 70 00    	LD	HL,0070H	;SHOW T
1777   092E             #ENDIF
1778   092E CD A3 08    	CALL	SDELAY
1779   0931 C3 E5 06    	JP	CANCL1
1780   0934             ;-------------------------
1781   0934             ; FUNCTION 8 - PLAY TUNE 1
1782   0934             ;-------------------------
1783   0934 CD 70 05    PLAY1	CALL	BEEP
1784   0937 CD 57 04    	CALL	KEYREL
1785   093A 21 6F 09    	LD	HL,TUNE1
1786   093D CD D3 04    	CALL	MUSIC
1787   0940 C3 E5 06    	JP	CANCL1
1788   0943             ;-------------------------
1789   0943             ; FUNCTION 9 - PLAY TUNE 2
1790   0943             ;-------------------------
1791   0943 CD 70 05    PLAY2	CALL	BEEP
1792   0946 CD 57 04    	CALL	KEYREL
1793   0949 21 AF 09    	LD	HL,TUNE2
1794   094C CD D3 04    	CALL	MUSIC
1795   094F C3 E5 06    	JP	CANCL1
1796   0952             ;------------------------------
1797   0952             ; FUNCTION A - PLAY TUNE IN RAM
1798   0952             ;------------------------------
1799   0952 CD 70 05    PLAY3	CALL	BEEP
1800   0955 CD 57 04    	CALL	KEYREL
1801   0958 2A 3F 3F    	LD	HL,(ADRESS)
1802   095B CD D3 04    	CALL	MUSIC
1803   095E C3 E5 06    	JP	CANCL1
1804   0961             ;-----------------------------
1805   0961             ; FUNCTION B - TOGGLE KEY BEEP
1806   0961             ;-----------------------------
1807   0961 CD 70 05    SWBEEP	CALL	BEEP
1808   0964 3A 3D 3F    	LD	A,(MODE)
1809   0967 EE 40       	XOR	40H
1810   0969 32 3D 3F    	LD	(MODE),A
1811   096C C3 E5 06    	JP	CANCL1
1812   096F             ;
1813   096F             ; TUNE 1
1814   096F             ; FROM TALKING ELECTRONICS TEC-1
1815   096F             ; MONITOR MON-1
1816   096F             ; BY JOHN HARDY AND KEN STONE
1817   096F             ;
1818   096F 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1818   0973 06 0D 0A 0D 
1819   0977 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1819   097B 0F 11 12 0F 
1820   097F 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1820   0983 12 0F 0D 0A 
1821   0987 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
1821   098B 0F 0A 0D 0F 
1822   098F 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1822   0993 06 0D 0A 0D 
1823   0997 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1823   099B 0F 11 12 0F 
1824   099F 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1824   09A3 12 0F 0D 0A 
1825   09A7 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
1825   09AB 06 12 00 1E 
1826   09AF             ;
1827   09AF             ; TUNE 2
1828   09AF             ; FROM TALKING ELECTRONICS TEC-1
1829   09AF             ; MONITOR MON-1
1830   09AF             ; BY JOHN HARDY AND KEN STONE
1831   09AF             ;
1832   09AF 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
1832   09B3 0A 0A 06 06 
1833   09B7 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
1833   09BB 0A 0A 0A 0A 
1834   09BF 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
1834   09C3 08 0A 0A 0A 
1835   09C7 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
1835   09CB 08 0A 0D 0D 
1836   09CF 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
1836   09D3 0D 05 08 0B 
1837   09D7 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
1837   09DB 06 0B 0A 08 
1838   09DF 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
1838   09E3 06 06 0B 0A 
1839   09E7 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
1839   09EB 08 08 0A 0B 
1840   09EF 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
1840   09F3 06 06 06 06 
1841   09F7 00 00 00 1E 	.DB	00H,00H,00H,1EH
1842   09FB             ;---------------------------
1843   09FB             ; FUNCTION C - SECRET NUMBER
1844   09FB             ;---------------------------
1845   09FB CD 70 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
1846   09FE CD 57 04    	CALL	KEYREL	;AND CLEAR DISPLAY
1847   0A01 CD 19 04    	CALL	CLRBUF	;BUFFER
1848   0A04 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
1849   0A08             ;
1850   0A08             ; SEPARATE NYBBLES IN RANDOM NUMBER
1851   0A08             ;
1852   0A08 CD A4 04    	CALL	RAND
1853   0A0B DD 75 0B    	LD	(IX+11),L
1854   0A0E DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
1855   0A11 DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
1856   0A14 CD 69 0B    	CALL	SPLIT	;NUMBER INTO
1857   0A17 DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
1858   0A1A DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
1859   0A1D DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
1860   0A20 CD 69 0B    	CALL	SPLIT	;GUESS EASIER
1861   0A23 DD 75 06    	LD	(IX+6),L
1862   0A26 DD 74 07    	LD	(IX+7),H
1863   0A29 AF          	XOR	A
1864   0A2A ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
1865   0A2C 21 00 00    	LD	HL,0
1866   0A2F DD 75 08    	LD	(IX+8),L
1867   0A32 DD 74 09    	LD	(IX+9),H
1868   0A35 CD A0 03    	CALL	DISADD	;AND DISPLAY GUESS
1869   0A38             ;
1870   0A38             ; SCAN THE KEYBOARD
1871   0A38             ;
1872   0A38 CD 33 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
1873   0A3B 21 47 0A    	LD	HL,SECNUM
1874   0A3E CD 61 04    	CALL	MENU	;EXECUTE KEY HANDLER
1875   0A41 CD 40 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1876   0A44 C3 38 0A    	JP	SECRT1
1877   0A47             ;
1878   0A47             ; SECRET NUMBER KEY TABLE
1879   0A47             ;
1880   0A47 12          SECNUM	.DB	12H
1881   0A48 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1881   0A4C 04 05 06 07 
1882   0A50 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1882   0A54 0C 0D 0E 0F 
1883   0A58 10 11       	.DB	10H,11H
1884   0A5A 7E 0A 7E 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1884   0A5E 7E 0A 7E 0A 
1885   0A62 7E 0A 7E 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1885   0A66 7E 0A 7E 0A 
1886   0A6A 7E 0A 7E 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1886   0A6E 7E 0A 7E 0A 
1887   0A72 7E 0A 7E 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1887   0A76 7E 0A 7E 0A 
1888   0A7A A5 0A AE 0A 	.DW	ENDKEY,CHKKEY
1889   0A7E             ;---------------
1890   0A7E             ; EDIT GUESS KEY
1891   0A7E             ;---------------
1892   0A7E F5          EDTKEY	PUSH	AF
1893   0A7F DD 6E 08    	LD	L,(IX+8)
1894   0A82 DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
1895   0A85 CB 25       	SLA	L
1896   0A87 CB 14       	RL	H	;AND DO A 16 BIT
1897   0A89 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
1898   0A8B CB 14       	RL	H	;TO MAKE  ROOM
1899   0A8D CB 25       	SLA	L	;FOR THE NEW KEY
1900   0A8F CB 14       	RL	H
1901   0A91 CB 25       	SLA	L
1902   0A93 CB 14       	RL	H
1903   0A95 F1          	POP	AF
1904   0A96 B5          	OR	L	;IT IN THE LEAST
1905   0A97 6F          	LD	L,A	;SIGNIFICANT NYBBLE
1906   0A98 DD 75 08    	LD	(IX+8),L
1907   0A9B DD 74 09    	LD	(IX+9),H	;SAVE GUESS
1908   0A9E CD A0 03    	CALL	DISADD
1909   0AA1 CD 70 05    	CALL	BEEP
1910   0AA4 C9          	RET
1911   0AA5             ;----------
1912   0AA5             ; QUIT GAME
1913   0AA5             ;----------
1914   0AA5 CD 70 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
1915   0AA8 CD 57 04    	CALL	KEYREL	;AND RETURN TO
1916   0AAB C3 74 02    	JP	MAIN	;MONITOR
1917   0AAE             ;---------------------------
1918   0AAE             ; SEE IF ITS THE RIGHT GUESS
1919   0AAE             ;---------------------------
1920   0AAE CD 70 05    CHKKEY	CALL	BEEP
1921   0AB1 ED 57       	LD	A,I
1922   0AB3 3C          	INC	A
1923   0AB4 27          	DAA	;INC BCD NO. OF TRIES
1924   0AB5             ;
1925   0AB5             ; BRIEFLY SHOW GUESS NO.
1926   0AB5             ;
1927   0AB5 ED 47       	LD	I,A
1928   0AB7 CD B5 03    	CALL	DISBYT
1929   0ABA 06 FF       	LD	B,255
1930   0ABC CD EE 03    CHKKY1	CALL	SCAND
1931   0ABF 10 FB       	DJNZ	CHKKY1
1932   0AC1             ;
1933   0AC1             ; SEPARATE GUESS INTO NYBBLES
1934   0AC1             ;
1935   0AC1 DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
1936   0AC4 CD 69 0B    	CALL	SPLIT	;NUMBER INTO
1937   0AC7 DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
1938   0ACA DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
1939   0ACD DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
1940   0AD0 CD 69 0B    	CALL	SPLIT	;GUESS EASIER
1941   0AD3 DD 75 02    	LD	(IX+2),L
1942   0AD6 DD 74 03    	LD	(IX+3),H
1943   0AD9             ;
1944   0AD9             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
1945   0AD9             ;
1946   0AD9 AF          	XOR	A
1947   0ADA DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
1948   0ADD 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
1949   0AE0 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
1950   0AE3 06 04       	LD	B,4	;NUMBER OF DIGITS
1951   0AE5 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
1952   0AE6 EB          	EX	DE,HL
1953   0AE7 BE          	CP	(HL)	;SAME AS GUESS?
1954   0AE8 20 10       	JR	NZ,CHKKY4	;NOT SAME
1955   0AEA DD 7E 0A    	LD	A,(IX+10)
1956   0AED C6 10       	ADD	A,10H	;RIGHT POSITION
1957   0AEF DD 77 0A    	LD	(IX+10),A
1958   0AF2 23          CHKKY3	INC	HL	;POINT TO NEXT
1959   0AF3 EB          	EX	DE,HL	;DIGIT POSITION
1960   0AF4 23          	INC	HL	;AND GO
1961   0AF5 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
1962   0AF7 C3 16 0B    	JP	CHKKY8
1963   0AFA             ;
1964   0AFA             ; CHECK IF NUMBER IS THERE
1965   0AFA             ;
1966   0AFA C5          CHKKY4	PUSH	BC
1967   0AFB E5          	PUSH	HL
1968   0AFC 06 04       	LD	B,4	;CHECK EACH DIGIT
1969   0AFE 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
1970   0B01 BE          CHKKY5	CP	(HL)	;NUMBER IS IN
1971   0B02 23          	INC	HL	;THE WRONG
1972   0B03 20 0A       	JR	NZ,CHKKY6	;POSITION
1973   0B05 DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
1974   0B08 3C          	INC	A	;THE RESULT
1975   0B09 DD 77 0A    	LD	(IX+10),A
1976   0B0C C3 11 0B    	JP	CHKKY7
1977   0B0F 10 F0       CHKKY6	DJNZ	CHKKY5
1978   0B11 E1          CHKKY7	POP	HL
1979   0B12 C1          	POP	BC
1980   0B13 C3 F2 0A    	JP	CHKKY3	;CHECK NEXT DIGIT
1981   0B16             ;
1982   0B16             ; CHECK IF CORRECT
1983   0B16             ;
1984   0B16 DD 7E 0A    CHKKY8	LD	A,(IX+10)
1985   0B19 FE 40       	CP	40H	;IS IT CORRECT?
1986   0B1B CA 3B 0B    	JP	Z,CHKKY9	;YES!
1987   0B1E DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
1988   0B21 CD B5 03    	CALL	DISBYT	;IN DATA DISPLAYS
1989   0B24 ED 57       	LD	A,I	;WAS THAT THE
1990   0B26 FE 20       	CP	20H	;LAST GUESS?
1991   0B28 C0          	RET	NZ	;NO TRY AGAIN
1992   0B29             ;
1993   0B29             ; RAN OUT OF TRYS
1994   0B29             ;
1995   0B29 CD 19 04    	CALL	CLRBUF	;DISPLAY
1996   0B2C DD 6E 0B    	LD	L,(IX+11)
1997   0B2F DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
1998   0B32 CD A0 03    	CALL	DISADD	;AND PLAY
1999   0B35 21 62 0B    	LD	HL,LOSE	;THE LOSE
2000   0B38 C3 49 0B    	JP	CHKKYA	;MUSIC
2001   0B3B             ;
2002   0B3B             ; GOT THE RIGHT ANSWER
2003   0B3B             ;
2004   0B3B ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2005   0B3D CD B5 03    	CALL	DISBYT	;AND PLAY THE WIN
2006   0B40 DD 6E 0B    	LD	L,(IX+11)
2007   0B43 DD 66 0C    	LD	H,(IX+12)
2008   0B46 21 59 0B    	LD	HL,WIN	;MUSIC
2009   0B49             ;
2010   0B49             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2011   0B49             ;
2012   0B49 CD D3 04    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2013   0B4C CD 33 04    	CALL	SKEYIN	;WAIT FOR A KEY
2014   0B4F CD 70 05    	CALL	BEEP
2015   0B52 CD 40 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2016   0B55 E1          	POP	HL	;AND RESTART THE GAME
2017   0B56 C3 FB 09    	JP	SECRET
2018   0B59             ;
2019   0B59             ; WIN AND LOSE MUSIC
2020   0B59             ; FROM TALKING ELECTRONICS TEC-1
2021   0B59             ; MONITOR MON-1
2022   0B59             ; BY JOHN HARDY AND KEN STONE
2023   0B59             ;
2024   0B59 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2024   0B5D 17 12 14 10 
2024   0B61 1F 
2025   0B62 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2025   0B66 01 11 1F 
2026   0B69             ;-------------------------------
2027   0B69             ; SEPARATE BYTE INTO TWO NYBBLES
2028   0B69             ;-------------------------------
2029   0B69             ;SEPARATES A BYTE INTO TWO
2030   0B69             ;RIGHT JUSTIFIED NYBBLES
2031   0B69             ; ENTRY : A = BYTE TO BE SEPARATED
2032   0B69             ; EXIT  : H = MSN
2033   0B69             ;         L = LSN
2034   0B69             ;
2035   0B69 F5          SPLIT	PUSH	AF
2036   0B6A C5          	PUSH	BC
2037   0B6B 47          	LD	B,A	;SAVE BYTE
2038   0B6C E6 0F       	AND	0FH	;STRIP BITS LSN
2039   0B6E 6F          	LD	L,A	;RETURN LSN IN L
2040   0B6F 78          	LD	A,B
2041   0B70 CB 3F       	SRL	A
2042   0B72 CB 3F       	SRL	A
2043   0B74 CB 3F       	SRL	A	;MOVE MSN
2044   0B76 CB 3F       	SRL	A	;INTO LSN
2045   0B78 67          	LD	H,A	;RETURN MSN IN H
2046   0B79 C1          	POP	BC
2047   0B7A F1          	POP	AF
2048   0B7B C9          	RET
2049   0B7C             ;-----------------------------------
2050   0B7C             ; FUNCTION D - RELAY BOARD SEQUENCER
2051   0B7C             ;-----------------------------------
2052   0B7C CD 70 05    RELSQR	CALL	BEEP
2053   0B7F CD 57 04    	CALL	KEYREL
2054   0B82 21 8B 0B    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2055   0B85 CD 91 0B    	CALL	RLSTEP
2056   0B88 C3 E5 06    	JP	CANCL1
2057   0B8B             ;--------------
2058   0B8B             ; TEST SEQUENCE
2059   0B8B             ;--------------
2060   0B8B 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2060   0B8F 00 FF 
2061   0B91             ;----------------
2062   0B91             ; RELAY SEQUENCER
2063   0B91             ;----------------
2064   0B91             ; SEQUENCES RELAYS ON RELAY BOARD
2065   0B91             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2066   0B91             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2067   0B91             ; OR REPEAT.
2068   0B91             ;  TABLE:
2069   0B91             ;  <BYTE1>,<BYTE2>
2070   0B91             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2071   0B91             ;  BYTE2 = FF - REPEAT
2072   0B91             ;          00 - FINISHED
2073   0B91             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2074   0B91             ;  EXIT : NONE MODIFIED
2075   0B91             ;
2076   0B91 F5          RLSTEP	PUSH	AF
2077   0B92 C5          	PUSH	BC
2078   0B93 D5          	PUSH	DE
2079   0B94 E5          	PUSH	HL	;SAVE REGISTERS
2080   0B95 E5          	PUSH	HL
2081   0B96 EB          	EX	DE,HL	;GET ADDRESS OF DATA
2082   0B97 1A          RELSR1	LD	A,(DE)
2083   0B98 4F          	LD	C,A	;GET OUTPUT DATA
2084   0B99 13          	INC	DE
2085   0B9A 1A          	LD	A,(DE)	;GET TIME DELAY
2086   0B9B FE 00       	CP	0
2087   0B9D 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2088   0B9F FE FF       	CP	255
2089   0BA1 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2090   0BA3 47          	LD	B,A
2091   0BA4 79          	LD	A,C
2092   0BA5~            #IFDEF TEC-1F
2093   0BA5~            	OUT	(PORT3),A	;STROBE
2094   0BA5             #ELSE
2095   0BA5 D3 81       	OUT	(IO1),A
2096   0BA7             #ENDIF
2097   0BA7 13          	INC	DE
2098   0BA8 CD BF 0B    RELSR2	CALL	DELONE	;1 SEC DELAY
2099   0BAB 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2100   0BAD C3 97 0B    	JP	RELSR1
2101   0BB0             ;
2102   0BB0             ; REPEAT
2103   0BB0             ;
2104   0BB0 D1          RELSR3	POP	DE	;GET START ADDRESS
2105   0BB1 D5          	PUSH	DE	;SAVE FOR LATER
2106   0BB2 C3 97 0B    	JP	RELSR1
2107   0BB5             ;
2108   0BB5             ; FINISHED
2109   0BB5             ;
2110   0BB5 3E 00       RELSR4	LD	A,00H
2111   0BB7~            #IFDEF TEC-1F
2112   0BB7~            	OUT	(PORT3),A	;STROBE
2113   0BB7             #ELSE
2114   0BB7 D3 81       	OUT	(IO1),A	;CLEAR OUTPUT REG
2115   0BB9             #ENDIF
2116   0BB9 E1          	POP	HL
2117   0BBA E1          	POP	HL
2118   0BBB D1          	POP	DE
2119   0BBC C1          	POP	BC
2120   0BBD F1          	POP	AF
2121   0BBE C9          	RET
2122   0BBF             ;-----------------
2123   0BBF             ; ONE SECOND DELAY
2124   0BBF             ;-----------------
2125   0BBF             ;
2126   0BBF             ; ENTRY : NONE
2127   0BBF             ; EXIT : FLAG REGISTER MODIFIED
2128   0BBF             ;
2129   0BBF C5          DELONE	PUSH	BC
2130   0BC0 D5          	PUSH	DE
2131   0BC1 E5          	PUSH	HL
2132   0BC2 11 01 00    	LD	DE,0001H
2133   0BC5 21 70 08    	LD	HL,0870H
2134   0BC8 06 92       DELON1	LD	B,92H
2135   0BCA 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2136   0BCC ED 52       	SBC	HL,DE
2137   0BCE D2 C8 0B    	JP	NC,DELON1	;OUTER LOOP
2138   0BD1 E1          	POP	HL
2139   0BD2 D1          	POP	DE
2140   0BD3 C1          	POP	BC
2141   0BD4 C9          	RET
2142   0BD5             ;--------------------------
2143   0BD5             ; FUNCTION E - KALEIDOSCOPE
2144   0BD5             ;--------------------------
2145   0BD5 CD 70 05    SCOPE	CALL	BEEP
2146   0BD8 CD 57 04    	CALL	KEYREL
2147   0BDB CD A4 04    	CALL	RAND	;GENERATE RANDOM
2148   0BDE EB          	EX	DE,HL
2149   0BDF 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2150   0BE2 7B          	LD	A,E	;THE FIRST QUADRANT
2151   0BE3 CD 54 0C    	CALL	SEED	;WITH A RANDOM BIT
2152   0BE6 7A          	LD	A,D	;PATTERN
2153   0BE7 CD 54 0C    	CALL	SEED
2154   0BEA             ;
2155   0BEA             ; GENERATE MIRROR IMAGES
2156   0BEA             ;
2157   0BEA 06 04       SCOPE2	LD	B,04H
2158   0BEC 21 00 3E    	LD	HL,BUFFER
2159   0BEF 11 07 3E    	LD	DE,BUFFER+7
2160   0BF2 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2161   0BF3 12          	LD	(DE),A	;QUADRANT INTO
2162   0BF4 23          	INC	HL	;THE FOURTH
2163   0BF5 1B          	DEC	DE	;QUADRANT
2164   0BF6 10 FA       	DJNZ	SCOPE3
2165   0BF8             ;
2166   0BF8             ; MIRROR ACROSS CENTRE OF DISPLAY
2167   0BF8             ;
2168   0BF8 06 08       	LD	B,8	;MIRROR THE FIRST
2169   0BFA 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2170   0BFD 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2171   0BFE E6 0F       	AND	0FH	;OF THE DISPLAY
2172   0C00 77          	LD	(HL),A	;INTO THE SECOND
2173   0C01 CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2174   0C03 CA 08 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2175   0C06 CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2176   0C08 CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2177   0C0A CA 0F 0C    	JP	Z,SCOPE6	;CORRESPONDING
2178   0C0D CB F6       	SET	6,(HL)	;MIRROR IMAGE
2179   0C0F CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2180   0C11 CA 16 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2181   0C14 CB EE       	SET	5,(HL)	;DO THIS FOR
2182   0C16 CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2183   0C18 CA 1D 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2184   0C1B CB E6       	SET	4,(HL)	;IN THE DISPLAY
2185   0C1D 23          SCOPE8	INC	HL
2186   0C1E 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2187   0C20             ;
2188   0C20             ; DISPLAY RANDOM BIT PATTERN
2189   0C20             ;
2190   0C20 11 01 00    	LD	DE,0001H	;SET UP DELAY
2191   0C23 21 00 02    	LD	HL,0200H
2192   0C26 E5          SCOPE9	PUSH	HL
2193   0C27 21 00 3E    	LD	HL,BUFFER
2194   0C2A CD 63 0C    	CALL	SKATE	;SCAN 8X8
2195   0C2D E1          	POP	HL
2196   0C2E ED 52       	SBC	HL,DE
2197   0C30 C2 26 0C    	JP	NZ,SCOPE9
2198   0C33             ;
2199   0C33             ; MANIPULATE BITS FOR NEXT IMAGE
2200   0C33             ;
2201   0C33 21 00 3E    SCOPEA	LD	HL,BUFFER
2202   0C36 3E 05       	LD	A,5
2203   0C38 86          	ADD	A,(HL)
2204   0C39 E6 0F       	AND	0FH
2205   0C3B 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2206   0C3C 23          	INC	HL
2207   0C3D 3E 03       	LD	A,03H
2208   0C3F 86          	ADD	A,(HL)
2209   0C40 E6 0F       	AND	0FH
2210   0C42 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2211   0C43 23          	INC	HL
2212   0C44 3E 01       	LD	A,01H
2213   0C46 86          	ADD	A,(HL)
2214   0C47 E6 0F       	AND	0FH
2215   0C49 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2216   0C4A 23          	INC	HL
2217   0C4B 3E 07       	LD	A,07H
2218   0C4D 86          	ADD	A,(HL)
2219   0C4E E6 0F       	AND	0FH
2220   0C50 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2221   0C51 C3 EA 0B    	JP	SCOPE2	;MIRROR BIT PATTERN
2222   0C54             ;
2223   0C54             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2224   0C54             ;
2225   0C54 47          SEED	LD	B,A	;PUT THE
2226   0C55 E6 0F       	AND	0FH	;RANDOM NUMBER
2227   0C57 77          	LD	(HL),A	;INTO THE
2228   0C58 23          	INC	HL	;FIRST QUADRANT
2229   0C59 78          	LD	A,B	;OF THE
2230   0C5A E6 F0       	AND	240	;DISPLAY
2231   0C5C 1F          	RRA
2232   0C5D 1F          	RRA
2233   0C5E 1F          	RRA
2234   0C5F 1F          	RRA
2235   0C60 77          	LD	(HL),A
2236   0C61 23          	INC	HL
2237   0C62 C9          	RET
2238   0C63             ;-----------------
2239   0C63             ; SCAN 8X8 DISPLAY
2240   0C63             ;-----------------
2241   0C63             ;PUT THE 8 RAM LOCATIONS POINTED TO
2242   0C63             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2243   0C63             ;ON TOP ROW.
2244   0C63             ;  ROUTINE PERIOD IS 500uS
2245   0C63             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2246   0C63             ;
2247   0C63             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2248   0C63             ;	EXIT : NO REGISTERS MODIFIED
2249   0C63             ;
2250   0C63 F5          SKATE	PUSH	AF
2251   0C64 C5          	PUSH	BC
2252   0C65 E5          	PUSH	HL	;SAVE REGISTERS
2253   0C66 0E 80       	LD	C,80H
2254   0C68 7E          SKATE1	LD	A,(HL)
2255   0C69~            #IFDEF TEC-1F
2256   0C69~            	OUT	(PORT3),A	;OUTPUT X
2257   0C69             #ELSE
2258   0C69 D3 80       	OUT	(IO0),A	;OUTPUT X
2259   0C6B             #ENDIF
2260   0C6B 79          	LD	A,C
2261   0C6C~            #IFDEF TEC-1F
2262   0C6C~            	OUT	(PORT4),A	;OUTPUT Y
2263   0C6C             #ELSE
2264   0C6C D3 82       	OUT	(IO2),A	;OUTPUT Y
2265   0C6E             #ENDIF
2266   0C6E 06 02       	LD	B,02H
2267   0C70 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2268   0C72 AF          	XOR	A
2269   0C73~            #IFDEF TEC-1F
2270   0C73~            	OUT	(PORT3),A
2271   0C73~            	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2272   0C73             #ELSE
2273   0C73 D3 80       	OUT	(IO0),A
2274   0C75 D3 82       	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2275   0C77             #ENDIF
2276   0C77 06 08       	LD	B,08H
2277   0C79 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2278   0C7B 23          	INC	HL
2279   0C7C CB 09       	RRC	C
2280   0C7E 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2281   0C80 E1          	POP	HL
2282   0C81 C1          	POP	BC
2283   0C82 F1          	POP	AF
2284   0C83 C9          	RET
2285   0C84             ;----------------------------
2286   0C84             ; FUNCTION F - CLOCK CALENDAR
2287   0C84             ;----------------------------
2288   0C84 CD 70 05    TIME	CALL	BEEP
2289   0C87 CD 57 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2290   0C8A DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2291   0C8E 3A 3B 3F    	LD	A,(ONTIM)
2292   0C91 DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2293   0C94 3E 60       	LD	A,60H
2294   0C96 32 3B 3F    	LD	(ONTIM),A	;USE NEW DELAY
2295   0C99 DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2296   0C9C             ;
2297   0C9C             ; DISPLAY TIME,CHECK FOR KEY
2298   0C9C             ;
2299   0C9C CD F2 0D    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2300   0C9F CD DC 0C    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2301   0CA2 CD EE 03    	CALL	SCAND
2302   0CA5 CD 28 04    	CALL	SCANKEY
2303   0CA8 CB 6F       	BIT	5,A
2304   0CAA 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2305   0CAC E6 1F       	AND	1FH
2306   0CAE 21 B6 0C    	LD	HL,TIMKEY
2307   0CB1 CD 61 04    	CALL	MENU
2308   0CB4 18 E6       	JR	TIME1
2309   0CB6             
2310   0CB6 04          TIMKEY	.DB	4
2311   0CB7 10 11 12 13 	.DB	10H,11H,12H,13H
2312   0CBB C3 0C 54 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2312   0CBF CD 0C CD 0C 
2313   0CC3             ;--------------------
2314   0CC3             ; EXIT CLOCK CALENDAR
2315   0CC3             ;--------------------
2316   0CC3 E1          CLKEXT	POP	HL	;REMOVE RETURN
2317   0CC4 DD 7E 00    	LD	A,(IX+0)
2318   0CC7 32 3B 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2319   0CCA C3 E2 06    	JP	CANCEL
2320   0CCD             ;--------------------
2321   0CCD             ; TOGGLE DISPLAY MODE
2322   0CCD             ;--------------------
2323   0CCD CD 70 05    CALKEY	CALL	BEEP
2324   0CD0 CD 57 04    	CALL	KEYREL
2325   0CD3 DD 7E 01    	LD	A,(IX+1)
2326   0CD6 EE 80       	XOR	80H	;TOGGLE DISPLAY
2327   0CD8 DD 77 01    	LD	(IX+1),A
2328   0CDB C9          	RET
2329   0CDC             ;----------------------
2330   0CDC             ; UPDATE DISPLAY BUFFER
2331   0CDC             ;----------------------
2332   0CDC DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2333   0CE0 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2334   0CE2             ;
2335   0CE2             ; TIME DISPLAY
2336   0CE2             ;
2337   0CE2 3A 1E 3F    UPDBF1	LD	A,(SWREG1)
2338   0CE5 CD BE 03    	CALL	CONBYT
2339   0CE8 CB FD       	SET	7,L	;SET DECIMAL POINT
2340   0CEA 22 35 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2341   0CED 3A 1F 3F    	LD	A,(SWREG2)
2342   0CF0 CD BE 03    	CALL	CONBYT
2343   0CF3 CB FD       	SET	7,L	;SET DECIMAL POINT
2344   0CF5 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2345   0CF8 3A 20 3F    	LD	A,(SWREG3)
2346   0CFB CD BE 03    	CALL	CONBYT
2347   0CFE CB FD       	SET	7,L	;SET DECIMAL POINT
2348   0D00 22 39 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2349   0D03 C9          	RET
2350   0D04             ;
2351   0D04             ; CALENDAR DISPLAY
2352   0D04             ;
2353   0D04 3A 24 3F    UPDBF2	LD	A,(SWREG7)
2354   0D07 CD BE 03    	CALL	CONBYT
2355   0D0A 22 35 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2356   0D0D             ;
2357   0D0D             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2358   0D0D             ;
2359   0D0D 21 1B 3F    	LD	HL,CALMDE
2360   0D10 CB 7E       	BIT	7,(HL)
2361   0D12 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2362   0D14             ;
2363   0D14             ; DD/MM/YY MODE
2364   0D14             ;
2365   0D14 3A 23 3F    	LD	A,(SWREG6)
2366   0D17 CD BE 03    	CALL	CONBYT
2367   0D1A 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2368   0D1D 3A 22 3F    	LD	A,(SWREG5)
2369   0D20 CD BE 03    	CALL	CONBYT
2370   0D23 22 39 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2371   0D26 18 12       	JR	UPDBF4
2372   0D28             ;
2373   0D28             ; MM/DD/YY MODE
2374   0D28             ;
2375   0D28 3A 23 3F    UPDBF3	LD	A,(SWREG6)
2376   0D2B CD BE 03    	CALL	CONBYT
2377   0D2E 22 39 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2378   0D31 3A 22 3F    	LD	A,(SWREG5)
2379   0D34 CD BE 03    	CALL	CONBYT
2380   0D37 22 37 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2381   0D3A             ;
2382   0D3A             ; SHOW DAY
2383   0D3A             ;
2384   0D3A 3A 21 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2385   0D3D E6 07       	AND	07H
2386   0D3F 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2387   0D41 FE 07       	CP	07H
2388   0D43 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2389   0D45 2F          	CPL	;WORK OUT
2390   0D46 D6 01       	SUB	01H	;WHICH DECIMAL POINT
2391   0D48 E6 07       	AND	07H	;TO LIGHT
2392   0D4A 21 35 3F    	LD	HL,DISBUF	;ADDING THE DAY
2393   0D4D 06 00       	LD	B,00H	;TO A DISPLAY
2394   0D4F 4F          	LD	C,A	;BUFFER INDEX
2395   0D50 09          	ADD	HL,BC	;AND SETTING THE
2396   0D51 CB FE       	SET	7,(HL)	;DECIMAL POINT
2397   0D53 C9          UPDBF5	RET	;IN THAT DISPLAY
2398   0D54             ;--------------
2399   0D54             ; SET TIME/DATE
2400   0D54             ;--------------
2401   0D54 CD 70 05    SETCLK	CALL	BEEP
2402   0D57 CD 57 04    	CALL	KEYREL
2403   0D5A             ;
2404   0D5A             ; EDIT THE DISPLAY BUFFER
2405   0D5A             ;
2406   0D5A CD DC 0C    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2407   0D5D CD 33 04    	CALL	SKEYIN
2408   0D60 CD 57 04    	CALL	KEYREL
2409   0D63 FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2410   0D65 C8          	RET	Z
2411   0D66 FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2412   0D68 28 6E       	JR	Z,SETCK8
2413   0D6A FE 12       	CP	12H
2414   0D6C 28 3D       	JR	Z,SETCK4	;PLUS KEY
2415   0D6E FE 13       	CP	13H
2416   0D70 28 4F       	JR	Z,SETCK6	;MINUS KEY
2417   0D72 FE 0A       	CP	0AH	;NO A-F KEYS
2418   0D74 30 E4       	JR	NC,SETCK1
2419   0D76             ;
2420   0D76             ; IS IT SET CLOCK OR SET CALENDAR?
2421   0D76             ;
2422   0D76 DD CB 01 7E 	BIT	7,(IX+1)
2423   0D7A 20 0D       	JR	NZ,SETCK2
2424   0D7C             ;
2425   0D7C             ; SET CLOCK DISPLAY
2426   0D7C             ;
2427   0D7C 21 1E 3F    	LD	HL,SWREG1
2428   0D7F ED 6F       	RLD	;MOVE THE NEW KEY
2429   0D81 23          	INC	HL	;INTO THE CLOCK BUFFER
2430   0D82 ED 6F       	RLD
2431   0D84 23          	INC	HL
2432   0D85 ED 6F       	RLD
2433   0D87 18 D1       	JR	SETCK1
2434   0D89             ;
2435   0D89             ; SET CALENDAR DISPLAY
2436   0D89             ;
2437   0D89 21 1B 3F    SETCK2	LD	HL,CALMDE
2438   0D8C CB 7E       	BIT	7,(HL)
2439   0D8E 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2440   0D90             ;
2441   0D90             ; SET CALENDAR AS DD/MM/YY
2442   0D90             ;
2443   0D90 21 24 3F    	LD	HL,SWREG7
2444   0D93 ED 6F       	RLD	;MOVE THE NEW KEY
2445   0D95 2B          	DEC	HL	;INTO THE CAL BUFFER
2446   0D96 ED 6F       	RLD
2447   0D98 2B          	DEC	HL
2448   0D99 ED 6F       	RLD
2449   0D9B 18 BD       	JR	SETCK1
2450   0D9D             ;
2451   0D9D             ; SET CALENDAR AS MM/DD/YY
2452   0D9D             ;
2453   0D9D 21 24 3F    SETCK3	LD	HL,SWREG7
2454   0DA0 ED 6F       	RLD	;MOVE THE NEW KEY
2455   0DA2 2B          	DEC	HL	;INTO THE CAL BUFFER
2456   0DA3 2B          	DEC	HL
2457   0DA4 ED 6F       	RLD
2458   0DA6 23          	INC	HL
2459   0DA7 ED 6F       	RLD
2460   0DA9 18 AF       	JR	SETCK1
2461   0DAB             ;
2462   0DAB             ; INC DAY
2463   0DAB             ;
2464   0DAB DD CB 01 7E SETCK4	BIT	7,(IX+1)
2465   0DAF 28 A9       	JR	Z,SETCK1
2466   0DB1 3A 21 3F    	LD	A,(SWREG4)
2467   0DB4 FE 07       	CP	07H	;IS THE DAY SUNDAY?
2468   0DB6 20 02       	JR	NZ,SETCK5
2469   0DB8 3E 00       	LD	A,00H	;SET MONDAY
2470   0DBA 3C          SETCK5	INC	A	;DAY=DAY+1
2471   0DBB 32 21 3F    	LD	(SWREG4),A
2472   0DBE C3 5A 0D    	JP	SETCK1
2473   0DC1             ;
2474   0DC1             ; DEC DAY
2475   0DC1             ;
2476   0DC1 DD CB 01 7E SETCK6	BIT	7,(IX+1)
2477   0DC5 CA 5A 0D    	JP	Z,SETCK1
2478   0DC8 3A 21 3F    	LD	A,(SWREG4)
2479   0DCB FE 01       	CP	01H	;IS THE DAY MONDAY?
2480   0DCD 20 02       	JR	NZ,SETCK7
2481   0DCF 3E 08       	LD	A,08H	;SET SUNDAY
2482   0DD1 3D          SETCK7	DEC	A	;DAY=DAY-1
2483   0DD2 32 21 3F    	LD	(SWREG4),A
2484   0DD5 C3 5A 0D    	JP	SETCK1
2485   0DD8             ;
2486   0DD8             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2487   0DD8             ;
2488   0DD8 CD 70 05    SETCK8	CALL	BEEP
2489   0DDB CD 57 04    	CALL	KEYREL
2490   0DDE 3A 20 3F    	LD	A,(SWREG3)
2491   0DE1 E6 3F       	AND	3FH	;24 HOUR MODE
2492   0DE3 32 20 3F    	LD	(SWREG3),A
2493   0DE6 3A 21 3F    	LD	A,(SWREG4)
2494   0DE9 E6 07       	AND	07H	;OSC ON,RST ENABLED
2495   0DEB 32 21 3F    	LD	(SWREG4),A
2496   0DEE CD 7C 0E    	CALL	WWATCH	;WRITE CHANGES
2497   0DF1 C9          	RET
2498   0DF2             ;---------------------
2499   0DF2             ; READ FROM SMARTWATCH
2500   0DF2             ;---------------------
2501   0DF2             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2502   0DF2             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2503   0DF2             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2504   0DF2             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2505   0DF2             ;
2506   0DF2             ;  ENTRY : NONE
2507   0DF2             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2508   0DF2             ;          (ALTERNATE SET MODIFIED)
2509   0DF2             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2510   0DF2             ;
2511   0DF2             ;
2512   0DF2             ; ENABLE SMARTWATCH
2513   0DF2             ;
2514   0DF2 F5          RWATCH	PUSH	AF
2515   0DF3 C5          	PUSH	BC
2516   0DF4 D5          	PUSH	DE
2517   0DF5 E5          	PUSH	HL
2518   0DF6 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2519   0DF9 21 3C 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2520   0DFC 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2521   0DFE 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2522   0DFF 32 64 3F    	LD	(DALLAS),A
2523   0E02 23          	INC	HL
2524   0E03 10 F9       	DJNZ	RWACH1
2525   0E05             ;
2526   0E05             ; READ DATA FROM WATCH
2527   0E05             ;
2528   0E05 06 20       	LD	B,32
2529   0E07 3A 64 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2530   0E0A CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2531   0E0C CB 1A       	RR	D	;DE AND HL
2532   0E0E CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2533   0E10 CB 1C       	RR	H	;THE ALTERNATE PAIR
2534   0E12 CB 1D       	RR	L
2535   0E14 10 F1       	DJNZ	RWACH2
2536   0E16 D9          	EXX
2537   0E17 06 20       	LD	B,32
2538   0E19 3A 64 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2539   0E1C CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2540   0E1E CB 1A       	RR	D
2541   0E20 CB 1B       	RR	E
2542   0E22 CB 1C       	RR	H
2543   0E24 CB 1D       	RR	L
2544   0E26 10 F1       	DJNZ	RWACH3
2545   0E28             ;
2546   0E28             ; SAVE IN WATCH REGISTERS
2547   0E28             ;
2548   0E28 22 21 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2549   0E2B ED 53 23 3F 	LD	(SWREG6),DE	;GET THE DATA
2550   0E2F D9          	EXX
2551   0E30 22 1D 3F    	LD	(SWREG0),HL
2552   0E33 ED 53 1F 3F 	LD	(SWREG2),DE
2553   0E37 E1          	POP	HL
2554   0E38 D1          	POP	DE
2555   0E39 C1          	POP	BC
2556   0E3A F1          	POP	AF
2557   0E3B C9          	RET
2558   0E3C             ;
2559   0E3C             ; SMARTWATCH ACCESS PATTERN
2560   0E3C             ;
2561   0E3C C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2561   0E40 5C 2E 17 8B 
2562   0E44 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2562   0E48 A3 D1 E8 74 
2563   0E4C A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2563   0E50 3A 1D 8E 47 
2564   0E54 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2564   0E58 C5 E2 71 B8 
2565   0E5C C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2565   0E60 5C 2E 17 8B 
2566   0E64 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2566   0E68 A3 D1 E8 74 
2567   0E6C A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2567   0E70 3A 1D 8E 47 
2568   0E74 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2568   0E78 C5 E2 71 B8 
2569   0E7C             ;--------------------
2570   0E7C             ; WRITE TO SMARTWATCH
2571   0E7C             ;--------------------
2572   0E7C             ;
2573   0E7C             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2574   0E7C             ; IT USING BIT MANIPULATION.
2575   0E7C             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2576   0E7C             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2577   0E7C             ; SMARTWATCH IS ENABLED.
2578   0E7C             ;
2579   0E7C             ; ENTRY : NONE
2580   0E7C             ; THE DATA TO WRITE TO THE SMARTWATCH
2581   0E7C             ; MUST BE IN SWREG0 - SWREG7
2582   0E7C             ;  EXIT : NO WORKING REGISTERS MODIFIED
2583   0E7C             ;  (ALTERNATE SET MODIFIED)
2584   0E7C             ; GET DATA TO WRITE TO WATCH
2585   0E7C             ;
2586   0E7C F5          WWATCH	PUSH	AF
2587   0E7D C5          	PUSH	BC
2588   0E7E D5          	PUSH	DE
2589   0E7F E5          	PUSH	HL
2590   0E80 2A 21 3F    	LD	HL,(SWREG4)	;SET UP THE
2591   0E83 ED 5B 23 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2592   0E87 D9          	EXX
2593   0E88 2A 1D 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2594   0E8B ED 5B 1F 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2595   0E8F             ;
2596   0E8F             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2597   0E8F             ;
2598   0E8F 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2599   0E92 3E C5       	LD	A,0C5H
2600   0E94 0E 80       	LD	C,80H	;NUMBER OF BYTES
2601   0E96 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2602   0E98 32 64 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2603   0E9B CB 0F       	RRC	A
2604   0E9D CB 38       	SRL	B
2605   0E9F 30 F7       	JR	NC,WWACH2	;MORE BITS
2606   0EA1 CB 39       	SRL	C
2607   0EA3 38 11       	JR	C,WWACH4	;NO MORE BYTES
2608   0EA5 CB 47       	BIT	0,A
2609   0EA7 20 0A       	JR	NZ,WWACH3
2610   0EA9 CB 0F       	RRC	A
2611   0EAB CB 0F       	RRC	A
2612   0EAD CB 0F       	RRC	A
2613   0EAF CB 0F       	RRC	A
2614   0EB1 18 E3       	JR	WWACH1
2615   0EB3 2F          WWACH3	CPL
2616   0EB4 18 E0       	JR	WWACH1
2617   0EB6             ;
2618   0EB6             ; WRITE DATA TO WATCH
2619   0EB6             ;
2620   0EB6 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2621   0EB8 CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2622   0EBA CB 1B       	RR	E	;ONTO D0 AND INTO
2623   0EBC CB 1C       	RR	H	;THE SMARTWATCH
2624   0EBE CB 1D       	RR	L
2625   0EC0 17          	RLA
2626   0EC1 32 64 3F    	LD	(DALLAS),A
2627   0EC4 10 F2       	DJNZ	WWACH5
2628   0EC6 D9          	EXX	;RESTORE REGISTERS
2629   0EC7 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2630   0EC9 CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2631   0ECB CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2632   0ECD CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2633   0ECF CB 1D       	RR	L
2634   0ED1 17          	RLA
2635   0ED2 32 64 3F    	LD	(DALLAS),A
2636   0ED5 10 F2       	DJNZ	WWACH6
2637   0ED7 E1          	POP	HL
2638   0ED8 D1          	POP	DE
2639   0ED9 C1          	POP	BC
2640   0EDA F1          	POP	AF
2641   0EDB C9          	RET
2642   0EDC             ;-----------------
2643   0EDC             ; ONE SECOND DELAY
2644   0EDC             ;-----------------
2645   0EDC             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2646   0EDC             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2647   0EDC             ;
2648   0EDC             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2649   0EDC             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2650   0EDC             ; READS THE SAME AS THE REFERENCE VALUE,
2651   0EDC             ; THEN THE ROUTINE RETURNS
2652   0EDC             ;
2653   0EDC             ; ENTRY : NONE
2654   0EDC             ; EXIT : NONE MODIFIED
2655   0EDC             ;
2656   0EDC F5          ONESEC	PUSH	AF
2657   0EDD C5          	PUSH	BC
2658   0EDE CD F2 0D    	CALL	RWATCH	;READ WATCH
2659   0EE1 3A 1E 3F    	LD	A,(SWREG1)
2660   0EE4 47          	LD	B,A	;SAVE REF COUNT
2661   0EE5 CD F2 0D    ONESC1	CALL	RWATCH
2662   0EE8 3A 1E 3F    	LD	A,(SWREG1)
2663   0EEB B8          	CP	B	;SAME AS REF?
2664   0EEC CA E5 0E    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2665   0EEF C1          	POP	BC
2666   0EF0 F1          	POP	AF
2667   0EF1 C9          	RET
2668   0EF2             ;---------------
2669   0EF2             ; SERIAL MONITOR
2670   0EF2             ;---------------
2671   0EF2             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2672   0EF2             ; COMMS PARAMETERS ARE 4800,n,8,2
2673   0EF2             ;
2674   0EF2             ;------------
2675   0EF2             ; ASCII CODES
2676   0EF2             ;------------
2677   0EF2             ESC	.EQU	1BH
2678   0EF2             CR	.EQU	0DH
2679   0EF2             LF	.EQU	0AH
2680   0EF2             
2681   0EF2 3E 40       SCBUG	LD	A,40H
2682   0EF4 D3 85       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
2683   0EF6             ;
2684   0EF6             ; START UP THE MONITOR
2685   0EF6             ;
2686   0EF6 ED 73 14 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2687   0EFA 21 57 12    	LD	HL,SSSTEP
2688   0EFD 22 5F 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2689   0F00 CD BF 0B    	CALL	DELONE	;WAIT A SEC SO THE HOST SEES TX HIGH
2690   0F03 21 D2 07    	LD	HL,TXDATA
2691   0F06 22 10 3F    	LD	(PUTCH),HL	;USE THE BITBANG SERIAL TRANSMIT
2692   0F09 21 FD 07    	LD	HL,RXDATA
2693   0F0C 22 12 3F    	LD	(GETCH),HL	;USE THE BITBANG SERIAL RECEIVE
2694   0F0F 21 C6 13    	LD	HL,INITSZ	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2695   0F12 CD 49 12    	CALL	SNDMSG	;INITIALISE THE TERMINAL
2696   0F15 CD 92 03    	CALL	TYPE
2697   0F18 CD 49 12    	CALL	SNDMSG	;BOARD TYPE
2698   0F1B 21 F7 12    	LD	HL,SIGNON
2699   0F1E CD 49 12    	CALL	SNDMSG	;SEND THE SIGNON
2700   0F21 CD 8E 03    	CALL	VERS
2701   0F24 CD 49 12    	CALL	SNDMSG	;MONITOR VERSION
2702   0F27 21 17 13    	LD	HL,CMDLST
2703   0F2A CD 49 12    	CALL	SNDMSG
2704   0F2D             ;
2705   0F2D             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2706   0F2D             ;
2707   0F2D 3E 3E       START2	LD	A,'>'
2708   0F2F CD AA 0F    	CALL	OUTCH	;DISPLAY THE PROMPT
2709   0F32 CD B0 0F    START3	CALL	INCH	;GET A CHARACTER FROM THE CONSOLE
2710   0F35 4F          	LD	C,A	;SAVE FOR LATER
2711   0F36 E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2712   0F38             ;
2713   0F38             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2714   0F38             ;
2715   0F38 21 57 0F    	LD	HL,MONMENU
2716   0F3B 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2717   0F3C 23          	INC	HL
2718   0F3D BE          START4	CP	(HL)	;IN THE LIST?
2719   0F3E 28 05       	JR	Z,START5	;OK DO IT
2720   0F40 23          	INC	HL
2721   0F41 10 FA       	DJNZ	START4	;KEEP LOOKING
2722   0F43 18 ED       	JR	START3
2723   0F45 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2724   0F46 CD AA 0F    	CALL	OUTCH	;TO ECHO IT
2725   0F49 E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2726   0F4B 21 57 0F    	LD	HL,MONMENU	;USE THE MENU HANDLER
2727   0F4E CD 61 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2728   0F51             ;
2729   0F51             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2730   0F51             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2731   0F51             ;
2732   0F51 CD A3 0F    WARM	CALL	TXCRLF	;START ON A NEW LINE
2733   0F54 C3 2D 0F    	JP	START2
2734   0F57             ;
2735   0F57             ; SCBUG MONITOR COMMANDS
2736   0F57             ;
2737   0F57 07          MONMENU	.DB 7
2738   0F58 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2738   0F5C 47 49 58 
2739   0F5F 89 11 D9 0F 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2739   0F63 D5 10 DE 10 
2740   0F67 B6 0F 31 11 	.DW	GOJUMP,INTHEX,EXIT
2740   0F6B 4A 11 
2741   0F6D             ;-----------------------------
2742   0F6D             ; GET A BYTE FROM THE TERMINAL
2743   0F6D             ;-----------------------------
2744   0F6D CD B0 0F    GETCHR	CALL	INCH
2745   0F70 FE 1B       	CP	ESC
2746   0F72 28 27       	JR	Z,GETOUT
2747   0F74 47          	LD	B,A	;SAVE TO ECHO
2748   0F75 CD 5D 11    	CALL	ASC2HEX
2749   0F78 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2750   0F7A 21 18 3F    	LD	HL,DATA
2751   0F7D 77          	LD	(HL),A
2752   0F7E 78          	LD	A,B
2753   0F7F CD AA 0F    	CALL	OUTCH	;ECHO VALID HEX
2754   0F82 CD B0 0F    GETNYB	CALL	INCH
2755   0F85 FE 1B       	CP	ESC
2756   0F87 28 12       	JR	Z,GETOUT
2757   0F89 47          	LD	B,A	;SAVE TO ECHO
2758   0F8A CD 5D 11    	CALL	ASC2HEX
2759   0F8D 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2760   0F8F ED 6F       	RLD
2761   0F91 78          	LD	A,B
2762   0F92 CD AA 0F    	CALL	OUTCH	;ECHO VALID HEX
2763   0F95 7E          	LD	A,(HL)
2764   0F96 CD 9B 0F    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2765   0F99 3F          	CCF	;AND THEN COMPLEMENTING IT
2766   0F9A C9          	RET
2767   0F9B 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
2768   0F9C C9          	RET
2769   0F9D             ;---------------
2770   0F9D             ; OUTPUT A SPACE
2771   0F9D             ;---------------
2772   0F9D 3E 20       OUTSP	LD	A,' '
2773   0F9F CD AA 0F    	CALL	OUTCH
2774   0FA2 C9          	RET
2775   0FA3             ;-------------
2776   0FA3             ; OUTPUT CRLF
2777   0FA3             ;------------
2778   0FA3 3E 0D       TXCRLF	LD	A,CR
2779   0FA5 CD AA 0F    	CALL	OUTCH
2780   0FA8 3E 0A       	LD	A,LF
2781   0FAA             ;-----------------------------------
2782   0FAA             ; OUTPUT A CHARACTER TO THE TERMINAL
2783   0FAA             ;-----------------------------------
2784   0FAA DD 2A 10 3F OUTCH	LD	IX,(PUTCH)
2785   0FAE DD E9       	JP	(IX)
2786   0FB0             ;------------------------------------
2787   0FB0             ; INPUT A CHARACTER FROM THE TERMINAL
2788   0FB0             ;------------------------------------
2789   0FB0 DD 2A 12 3F INCH	LD	IX,(GETCH)
2790   0FB4 DD E9       	JP	(IX)
2791   0FB6             ;------------------------------
2792   0FB6             ; GO <ADDR>
2793   0FB6             ; TRANSFERS EXECUTION TO <ADDR>
2794   0FB6             ;------------------------------
2795   0FB6 CD 9D 0F    GOJUMP	CALL	OUTSP
2796   0FB9 CD 6D 0F    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
2797   0FBC D8          	RET	C
2798   0FBD 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2799   0FC0 CD 6D 0F    	CALL	GETCHR	;GET ADDRESS LOW BYTE
2800   0FC3 D8          	RET	C
2801   0FC4 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2802   0FC7             ;
2803   0FC7             ; WAIT FOR A CR OR ESC
2804   0FC7             ;
2805   0FC7 CD B0 0F    GOJMP1	CALL	INCH
2806   0FCA FE 1B       	CP	ESC	;ESC KEY?
2807   0FCC C8          	RET	Z
2808   0FCD FE 0D       	CP	CR
2809   0FCF 20 F6       	JR	NZ,GOJMP1
2810   0FD1 CD A3 0F    	CALL	TXCRLF
2811   0FD4 E1          	POP	HL	;POP THE UNUSED MENU RETURN ADDRESS FROM THE STACK
2812   0FD5 2A 16 3F    	LD	HL,(ADDR)
2813   0FD8 E9          	JP	(HL)	;GOOD LUCK WITH THAT!
2814   0FD9             ;---------------------
2815   0FD9             ; DISPLAY COMMAND HELP
2816   0FD9             ;---------------------
2817   0FD9 CD EA 12    HELP	CALL	PRNTSZ
2818   0FDC 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
2818   0FE0 41 41 41 41 
2818   0FE4 20 20 20 20 
2818   0FE8 44 69 73 70 
2818   0FEC 6C 61 79 20 
2818   0FF0 44 61 74 61 
2818   0FF4 20 61 74 20 
2818   0FF8 41 64 64 72 
2818   0FFC 65 73 73 20 
2818   1000 41 41 41 41 
2819   1004 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
2819   1008 20 20 20 20 
2819   100C 20 20 20 20 
2819   1010 53 50 41 43 
2819   1014 45 20 74 6F 
2819   1018 20 43 4F 4E 
2819   101C 54 49 4E 55 
2819   1020 45 2C 20 45 
2819   1024 53 43 20 74 
2819   1028 6F 20 51 55 
2819   102C 49 54 
2820   102E 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
2820   1032 20 20 20 20 
2820   1036 20 20 20 20 
2820   103A 54 6F 67 67 
2820   103E 6C 65 20 53 
2820   1042 69 6E 67 6C 
2820   1046 65 20 53 74 
2820   104A 65 70 70 65 
2820   104E 72 
2821   104F 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
2821   1053 41 41 41 41 
2821   1057 20 20 20 20 
2821   105B 4D 6F 64 69 
2821   105F 66 79 20 41 
2821   1063 64 64 72 65 
2821   1067 73 73 20 41 
2821   106B 41 41 41 
2822   106E 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
2822   1072 41 41 41 41 
2822   1076 20 20 20 20 
2822   107A 47 4F 20 66 
2822   107E 72 6F 6D 20 
2822   1082 41 41 41 41 
2823   1086 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
2823   108A 20 20 20 20 
2823   108E 20 20 20 20 
2823   1092 44 6F 77 6E 
2823   1096 6C 6F 61 64 
2823   109A 20 49 4E 54 
2823   109E 45 4C 20 48 
2823   10A2 65 78 
2824   10A4 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
2824   10A8 20 20 20 20 
2824   10AC 20 20 20 20 
2824   10B0 45 78 69 74 
2825   10B4 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
2825   10B8 20 20 20 20 
2825   10BC 20 20 20 20 
2825   10C0 54 68 69 73 
2825   10C4 20 48 65 6C 
2825   10C8 70 20 4D 65 
2825   10CC 73 73 61 67 
2825   10D0 65 0D 0A 00 
2826   10D4 C9          	RET
2827   10D5             ;-----------------------------------------------
2828   10D5             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
2829   10D5             ;-----------------------------------------------
2830   10D5             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
2831   10D5             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
2832   10D5             ;
2833   10D5 21 63 13    SSTOGL	LD	HL,TOGGLE
2834   10D8 CD 49 12    	CALL	SNDMSG
2835   10DB~            #IFDEF TEC-1F
2836   10DB~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
2837   10DB             #ELSE
2838   10DB D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
2839   10DD             #ENDIF
2840   10DD C9          	RET
2841   10DE             ;----------------------------
2842   10DE             ; M DISPLAY AND MODIFY MEMORY
2843   10DE             ;----------------------------
2844   10DE CD 9D 0F    MODIFY	CALL	OUTSP
2845   10E1             ;
2846   10E1             ;GET THE ADDRESS
2847   10E1             ;
2848   10E1 CD 6D 0F    	CALL	GETCHR
2849   10E4 D8          	RET	C
2850   10E5 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2851   10E8 CD 6D 0F    	CALL	GETCHR
2852   10EB D8          	RET	C
2853   10EC 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2854   10EF             ;
2855   10EF             ; DISPLAY ON A NEW LINE
2856   10EF             ;
2857   10EF CD A3 0F    MDIFY1	CALL	TXCRLF
2858   10F2 ED 5B 16 3F 	LD	DE,(ADDR)
2859   10F6 21 00 3E    	LD	HL,BUFFER
2860   10F9 CD 1B 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
2861   10FC 21 00 3E    	LD	HL,BUFFER
2862   10FF CD 0F 12    	CALL	WRDOUT	;OUTPUT THE ADDRESS
2863   1102 CD 9D 0F    	CALL	OUTSP
2864   1105             ;
2865   1105             ;GET THE DATA AT THE ADDRESS
2866   1105             ;
2867   1105 2A 16 3F    	LD	HL,(ADDR)
2868   1108 7E          	LD	A,(HL)
2869   1109             ;
2870   1109             ; DISPLAY THE DATA
2871   1109             ;
2872   1109 21 00 3E    	LD	HL,BUFFER
2873   110C CD 20 12    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
2874   110F 21 00 3E    	LD	HL,BUFFER
2875   1112 CD 12 12    	CALL	BYTOUT	;OUTPUT THE BYTE
2876   1115 CD 9D 0F    	CALL	OUTSP
2877   1118             ;
2878   1118             ; GET NEW DATA,EXIT OR CONTINUE
2879   1118             ;
2880   1118 CD 6D 0F    	CALL	GETCHR
2881   111B D8          	RET	C
2882   111C 47          	LD	B,A	;SAVE IT FOR LATER
2883   111D 2A 16 3F    	LD	HL,(ADDR)
2884   1120 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
2885   1121 78          	LD	A,B
2886   1122 BE          	CP	(HL)
2887   1123 28 05       	JR	Z,MDIFY2
2888   1125 3E 3F       	LD	A,'?'
2889   1127 CD AA 0F    	CALL	OUTCH	;NOT THE SAME DATA, PROBABLY NO RAM THERE
2890   112A             ;
2891   112A             ; INCREMENT THE ADDRESS
2892   112A             ;
2893   112A 23          MDIFY2	INC	HL
2894   112B 22 16 3F    	LD	(ADDR),HL
2895   112E C3 EF 10    	JP	MDIFY1
2896   1131             ;-----------------------
2897   1131             ; RECEIVE INTEL HEX FILE
2898   1131             ;-----------------------
2899   1131 21 7A 13    INTHEX	LD	HL,TXFILE
2900   1134 CD 49 12    	CALL	SNDMSG	;SEND FILE
2901   1137 CD 41 07    	CALL	INTELH
2902   113A 20 07       	JR	NZ,ITHEX1
2903   113C 21 93 13    	LD	HL,FILEOK
2904   113F CD 49 12    	CALL	SNDMSG	;GOT FILE OK
2905   1142 C9          	RET
2906   1143 21 A8 13    ITHEX1	LD	HL,CSUMERR
2907   1146 CD 49 12    	CALL	SNDMSG	;CHECKSUM ERROR
2908   1149 C9          	RET
2909   114A             ;------------------------
2910   114A             ; EXIT BACK TO SC MONITOR
2911   114A             ;------------------------
2912   114A 21 BB 13    EXIT	LD	HL,BYE
2913   114D CD 49 12    	CALL	SNDMSG
2914   1150 C3 74 02    	JP	MAIN	;STACK IS RESET TO TOP OF RAM IN MAIN
2915   1153             ;------------------
2916   1153             ; DISPLAY REGISTERS
2917   1153             ;------------------
2918   1153 CD B8 12    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
2919   1156 21 00 3E    	LD	HL,BUFFER
2920   1159 CD 49 12    	CALL	SNDMSG
2921   115C C9          	RET
2922   115D             ;----------------------------------------
2923   115D             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
2924   115D             ;----------------------------------------
2925   115D             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
2926   115D             ; ENTRY OTHER THAN HEXADECIMAL KEYS
2927   115D             ;
2928   115D             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
2929   115D             ;ENTRY : A= ASCII 0-9,A-F
2930   115D             ;EXIT  : CARRY =  1
2931   115D             ;          A= HEX 0-F IN LSN
2932   115D             ;      : CARRY = 0
2933   115D             ;          A= OUT OF RANGE CHARACTER & 7FH
2934   115D             ; A AND F REGISTERS MODIFIED
2935   115D             ;
2936   115D E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
2937   115F FE 30       	CP	'0'
2938   1161 38 23       	JR	C,AC2HEX4	;LESS THAN 0
2939   1163 FE 3A       	CP	3AH
2940   1165 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
2941   1167 E6 0F       	AND	0FH	;CONVERT TO NYBBLE
2942   1169 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
2943   116A C9          	RET
2944   116B             ;
2945   116B FE 41       AC2HEX2	CP	'A'
2946   116D 38 17       	JR	C,AC2HEX4	;LESS THAN A
2947   116F FE 47       	CP	47H
2948   1171 30 04       	JR	NC,AC2HEX3	;MORE THAN F
2949   1173 D6 07       	SUB	07H	;CONVERT TO NYBBLE
2950   1175 18 F2       	JR	AC2HEX1
2951   1177             	
2952   1177 FE 61       AC2HEX3	CP	'a'
2953   1179 DA 86 11    	JP	C,AC2HEX4	;LESS THAN a
2954   117C FE 67       	CP	67H
2955   117E 30 06       	JR	NC,AC2HEX4	;MORE THAN f
2956   1180 E6 DF       	AND 0DFH
2957   1182 D6 07       	SUB 07H	;CONVERT TO NYBBLE
2958   1184 18 E3       	JR	AC2HEX1
2959   1186 E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
2960   1188 C9          	RET
2961   1189             ;--------------------------
2962   1189             ; D DISPLAY MEMORY LOCATION
2963   1189             ;--------------------------
2964   1189 CD 9D 0F    DSPLAY	CALL	OUTSP	;A SPACE
2965   118C CD 6D 0F    	CALL	GETCHR
2966   118F D8          	RET	C
2967   1190 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2968   1193 CD 6D 0F    	CALL	GETCHR
2969   1196 D8          	RET	C
2970   1197 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2971   119A             ;
2972   119A             ; WAIT FOR CR OR ESC
2973   119A             ;
2974   119A CD B0 0F    DPLAY1	CALL	INCH
2975   119D FE 1B       	CP	ESC
2976   119F C8          	RET	Z
2977   11A0 FE 0D       	CP	CR
2978   11A2 20 F6       	JR	NZ,DPLAY1
2979   11A4 CD A3 0F    	CALL	TXCRLF	;NEWLINE
2980   11A7             ;
2981   11A7             ; DISPLAY THE LINE
2982   11A7             ;
2983   11A7 CD BC 11    DPLAY2 CALL  DPLINE
2984   11AA ED 53 16 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
2985   11AE             ;
2986   11AE             ; DISPLAY MORE LINES OR EXIT
2987   11AE             ;
2988   11AE CD B0 0F    DPLAY3	CALL	INCH
2989   11B1 38 FB       	JR	C,DPLAY3
2990   11B3 FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
2991   11B5 28 F0       	JR	Z,DPLAY2
2992   11B7 FE 1B       	CP	ESC	;ESC EXITS
2993   11B9 20 F3       	JR	NZ,DPLAY3
2994   11BB C9          	RET
2995   11BC             ;-------------------------
2996   11BC             ; DISPLAY A LINE OF MEMORY
2997   11BC             ;-------------------------
2998   11BC ED 5B 16 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
2999   11C0 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3000   11C3             ;
3001   11C3             ; DISPLAY THE ADDRESS
3002   11C3             ;
3003   11C3 CD 1B 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3004   11C6 CD FF 11    	CALL	SPCBUF
3005   11C9             ;
3006   11C9             ; DISPLAY 16 BYTES
3007   11C9             ;
3008   11C9 06 10       	LD	B,16
3009   11CB 1A          DLINE1	LD	A,(DE)
3010   11CC CD 20 12    	CALL	BYTASC
3011   11CF CD FF 11    	CALL	SPCBUF
3012   11D2 13          	INC	DE
3013   11D3 10 F6       	DJNZ	DLINE1
3014   11D5 CD FF 11    	CALL	SPCBUF
3015   11D8             ;
3016   11D8             ; NOW DISPLAY THE ASCII CHARACTER
3017   11D8             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3018   11D8             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3019   11D8             ;
3020   11D8 ED 5B 16 3F 	LD	DE,(ADDR)
3021   11DC 06 10       	LD	B,16
3022   11DE 1A          DLINE2	LD	A,(DE)
3023   11DF FE 20       	CP	20H
3024   11E1 38 07       	JR	C,DOT
3025   11E3 FE 7F       	CP	7FH
3026   11E5 30 03       	JR	NC,DOT
3027   11E7 C3 EC 11    	JP	NDOT
3028   11EA 3E 2E       DOT	LD	A,'.'
3029   11EC CD 01 12    NDOT	CALL	INBUF
3030   11EF 13          	INC	DE
3031   11F0 10 EC       	DJNZ	DLINE2
3032   11F2             ;
3033   11F2             ;TERMINATE AND DISPLAY STRING
3034   11F2             ;
3035   11F2 CD 04 12    	CALL	BCRLF
3036   11F5 3E 00       	LD	A,00H
3037   11F7 77          	LD	(HL),A
3038   11F8 21 00 3E    	LD	HL,BUFFER
3039   11FB CD 49 12    	CALL	SNDMSG
3040   11FE C9          	RET
3041   11FF             ;
3042   11FF             ; PUT A SPACE IN THE BUFFER
3043   11FF             ;
3044   11FF 3E 20       SPCBUF	LD	A,' '
3045   1201 77          INBUF	LD	(HL),A
3046   1202 23          	INC	HL
3047   1203 C9          	RET
3048   1204             ;
3049   1204             ; PUT A CR LF IN THE BUFFER
3050   1204             ;
3051   1204 3E 0D       BCRLF	LD	A,CR
3052   1206 CD 01 12    	CALL	INBUF
3053   1209 3E 0A       	LD	A,LF
3054   120B CD 01 12    	CALL	INBUF
3055   120E C9          	RET
3056   120F             ;----------------------
3057   120F             ; SEND ASCII HEX VALUES
3058   120F             ;----------------------
3059   120F             ;
3060   120F             ; OUTPUT THE 4 BYTE, WRDOUT
3061   120F             ; THE 2 BYTE, BYTOUT
3062   120F             ; OR THE SINGLE BYTE, NYBOUT
3063   120F             ; ASCII STRING AT HL TO THE SERIAL PORT
3064   120F             ;
3065   120F CD 12 12    WRDOUT	CALL	BYTOUT
3066   1212 CD 15 12    BYTOUT	CALL	NYBOUT
3067   1215 7E          NYBOUT	LD	A,(HL)
3068   1216 CD AA 0F    	CALL	OUTCH
3069   1219 23          	INC	HL
3070   121A C9          	RET
3071   121B             ;----------------
3072   121B             ;CONVERT TO ASCII
3073   121B             ;----------------
3074   121B             ;
3075   121B             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3076   121B             ;
3077   121B             ;        ENTRY :  A = BINARY TO CONVERT
3078   121B             ;                  HL = CHARACTER BUFFER ADDRESS
3079   121B             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3080   121B             ;
3081   121B             ;        MODIFIES : DE
3082   121B             ;
3083   121B 7A          WRDASC	LD	A,D	;CONVERT AND
3084   121C CD 20 12    	CALL	BYTASC	;OUTPUT D
3085   121F 7B          	LD	A,E	;THEN E
3086   1220             ;
3087   1220             ;CONVERT A BYTE TO ASCII 
3088   1220             ;
3089   1220 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3090   1221 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3091   1222 0F          	RRCA
3092   1223 0F          	RRCA
3093   1224 0F          	RRCA
3094   1225 CD 29 12    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3095   1228 F1          	POP	AF	;RESTORE LOW NYBBLE
3096   1229             ;
3097   1229             ; CONVERT A NYBBLE TO ASCII
3098   1229             ;
3099   1229 E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3100   122B C6 90       	ADD	A,90H	;CONVERT TO
3101   122D 27          	DAA	;ASCII
3102   122E CE 40       	ADC	A,40H
3103   1230 27          	DAA
3104   1231             ;
3105   1231             ; SAVE IN STRING
3106   1231             ;
3107   1231 77          INSBUF	LD	(HL),A
3108   1232 23          	INC	HL
3109   1233 C9          	RET
3110   1234             ;------------------------------------------------------
3111   1234             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3112   1234             ;------------------------------------------------------
3113   1234             ;
3114   1234             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3115   1234             ;                      INTO A STRING OF ASCII
3116   1234             ;                      ONES AND ZEROES.
3117   1234             ;
3118   1234             ;           ENTRY :  A = BINARY TO CONVERT
3119   1234             ;                   HL = CHARACTER BUFFER ADDRESS
3120   1234             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3121   1234             ;
3122   1234             ;        MODIFIES : NONE
3123   1234             ;
3124   1234 C5          BITASC PUSH  BC
3125   1235 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3126   1237 CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3127   1239 20 05       	JR	NZ,BTASC3
3128   123B 0E 30       	LD	C,30H	;IT'S A ZERO
3129   123D 71          BTASC2	LD	(HL),C
3130   123E 18 03       	JR	BTASC4
3131   1240 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3132   1242 71          	LD	(HL),C
3133   1243 23          BTASC4	INC	HL
3134   1244 17          	RLA
3135   1245 10 F0       	DJNZ	BTASC1	;NEXT BIT
3136   1247 C1          	POP	BC
3137   1248 C9          	RET
3138   1249             ;-----------------------------------------
3139   1249             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3140   1249             ;-----------------------------------------
3141   1249             ;
3142   1249             ; SENDS A ZERO TERMINATED STRING OR 
3143   1249             ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
3144   1249             ;
3145   1249             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3146   1249             ;      EXIT  : NONE
3147   1249             ;
3148   1249             ;       MODIFIES : A,B,C
3149   1249             ;
3150   1249 06 80       SNDMSG	LD	B,128	;128 CHARS MAX
3151   124B 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3152   124C FE 00       	CP	00H	;ZERO TERMINATOR?
3153   124E 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3154   1250 CD AA 0F    	CALL	OUTCH	;TRANSMIT THE CHAR
3155   1253 23          	INC	HL
3156   1254 10 F5       	DJNZ	SDMSG1	;128 CHARS MAX!
3157   1256 C9          SDMSG2	RET
3158   1257             ;----------------------
3159   1257             ; SERIAL SINGLE STEPPER
3160   1257             ;----------------------
3161   1257 E1          SSSTEP	POP	HL	;GET HL BACK
3162   1258 F5          	PUSH	AF	;SAVE AF FOR LATER
3163   1259 22 4D 3F    	LD	(TMPHL),HL
3164   125C ED 53 4B 3F 	LD	(TMPDE),DE
3165   1260 ED 43 49 3F 	LD	(TMPBC),BC
3166   1264 DD 22 4F 3F 	LD	(TMPIX),IX
3167   1268 FD 22 51 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3168   126C E1          	POP	HL	;GET AF BACK
3169   126D 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
3170   1270 E1          	POP	HL	;GET PC RETURN ADDRESS
3171   1271 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
3172   1274 ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3173   1278             ;
3174   1278 CD B8 12    	CALL	DISREG	;DISPLAY REGISTERS
3175   127B 21 00 3E    	LD	HL,BUFFER
3176   127E CD 49 12    	CALL	SNDMSG
3177   1281             ;
3178   1281             ; SPACE KEY CONTINUES
3179   1281             ;
3180   1281 CD B0 0F    SSTEP3	CALL	INCH
3181   1284 38 FB       	JR	C,SSTEP3
3182   1286 FE 20       	CP	' '	;IS IT SPACE
3183   1288 28 0C       	JR	Z,SSTEP4
3184   128A FE 1B       	CP	ESC	;ESC QUITS
3185   128C 20 F3       	JR	NZ,SSTEP3
3186   128E             ;
3187   128E             ; RETURN TO MONITOR
3188   128E             ;
3189   128E ED 7B 14 3F 	LD	SP,(SPSAVE)	;RESTORE THE STACK POINTER
3190   1292 FB          	EI	;RE-ENABLE INTERRUPTS
3191   1293 C3 51 0F    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3192   1296             ;
3193   1296             ; RETURN TO PROGRAM
3194   1296             ;
3195   1296 ED 7B 53 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3196   129A 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
3197   129D E5          	PUSH	HL	;ADDRESS BACK ON STACK
3198   129E 2A 47 3F    	LD	HL,(TMPAF)
3199   12A1 E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3200   12A2 FD 2A 51 3F 	LD	IY,(TMPIY)
3201   12A6 DD 2A 4F 3F 	LD	IX,(TMPIX)
3202   12AA ED 4B 49 3F 	LD	BC,(TMPBC)
3203   12AE ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3204   12B2 F1          	POP	AF	;RESTORE AF
3205   12B3 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
3206   12B6 FB          	EI		;RE-ENABLE INTERRUPTS
3207   12B7 C9          	RET		;AND RETURN TO PROGRAM
3208   12B8             ;----------------------------
3209   12B8             ; DISPLAY THE SAVED REGISTERS
3210   12B8             ;----------------------------
3211   12B8 21 2E 13    DISREG	LD	HL,REGS
3212   12BB CD 49 12    	CALL	SNDMSG
3213   12BE             ;
3214   12BE             ; DISPLAY THE REGISTERS
3215   12BE             ;
3216   12BE 06 08       	LD	B,08H
3217   12C0 21 00 3E    	LD	HL,BUFFER
3218   12C3 DD 21 45 3F 	LD	IX,TMPPC
3219   12C7 DD 7E 01    DSREG1	LD	A,(IX+1)
3220   12CA CD 20 12    	CALL	BYTASC
3221   12CD DD 7E 00    	LD	A,(IX+0)
3222   12D0 CD 20 12    	CALL	BYTASC
3223   12D3 DD 23       	INC	IX
3224   12D5 DD 23       	INC	IX
3225   12D7 3E 20       	LD	A,' '
3226   12D9 77          	LD	(HL),A
3227   12DA 23          	INC	HL
3228   12DB 10 EA       	DJNZ	DSREG1
3229   12DD             ;
3230   12DD             ; DISPLAY THE FLAGS
3231   12DD             ;
3232   12DD 3A 47 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3233   12E0 CD 34 12    	CALL	BITASC	;SHOW THEM AS BITS
3234   12E3             
3235   12E3 CD 04 12    SZCRLF CALL  BCRLF
3236   12E6 3E 00       	LD	A,0
3237   12E8 77          	LD	(HL),A	;TERMINATE THE STRING
3238   12E9 C9          	RET
3239   12EA             ;-----------------------------------------
3240   12EA             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3241   12EA             ;-----------------------------------------
3242   12EA             ;
3243   12EA             ;      CALL PRINTSZ
3244   12EA             ;      .DB  "STRING TO PRINT",0
3245   12EA             ;
3246   12EA E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3247   12EB 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3248   12EC CD AA 0F    	CALL	OUTCH	;AND SEND IT
3249   12EF 23          	INC	HL	;POINT TO THE NEXT
3250   12F0 B7          	OR	A	;CHARACTER AND
3251   12F1 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3252   12F3 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3253   12F4             ;
3254   12F4             ; STRING CONSTANTS
3255   12F4             ;
3256   12F4 0D 0A 00    CRLF	.DB	CR,LF,0
3257   12F7 20 53 6F 75 SIGNON	.DB	" Southern Cross Serial Monitor ",0
3257   12FB 74 68 65 72 
3257   12FF 6E 20 43 72 
3257   1303 6F 73 73 20 
3257   1307 53 65 72 69 
3257   130B 61 6C 20 4D 
3257   130F 6F 6E 69 74 
3257   1313 6F 72 20 00 
3258   1317 0D 0A 48 20 CMDLST	.DB	CR,LF,"H for command list",CR,LF,0
3258   131B 66 6F 72 20 
3258   131F 63 6F 6D 6D 
3258   1323 61 6E 64 20 
3258   1327 6C 69 73 74 
3258   132B 0D 0A 00 
3259   132E 0D 0A 50 43 REGS 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3259   1332 20 20 20 41 
3259   1336 46 20 20 20 
3259   133A 42 43 20 20 
3259   133E 20 44 45 20 
3259   1342 20 20 48 4C 
3259   1346 20 20 20 49 
3259   134A 58 20 20 20 
3259   134E 49 59 20 20 
3259   1352 20 53 50 20 
3259   1356 20 20 53 5A 
3259   135A 2D 48 2D 56 
3259   135E 4E 43 0D 0A 
3259   1362 00 
3260   1363 0D 0A 53 69 TOGGLE	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3260   1367 6E 67 6C 65 
3260   136B 20 53 74 65 
3260   136F 70 20 54 6F 
3260   1373 67 67 6C 65 
3260   1377 0D 0A 00 
3261   137A 0D 0A 53 65 TXFILE	.DB	CR,LF,"Send INTEL Hex File...",0
3261   137E 6E 64 20 49 
3261   1382 4E 54 45 4C 
3261   1386 20 48 65 78 
3261   138A 20 46 69 6C 
3261   138E 65 2E 2E 2E 
3261   1392 00 
3262   1393 0D 0A 46 69 FILEOK	.DB	CR,LF,"File Received OK",CR,LF,0
3262   1397 6C 65 20 52 
3262   139B 65 63 65 69 
3262   139F 76 65 64 20 
3262   13A3 4F 4B 0D 0A 
3262   13A7 00 
3263   13A8 0D 0A 43 68 CSUMERR	.DB	CR,LF,"Checksum Error",CR,LF,0
3263   13AC 65 63 6B 73 
3263   13B0 75 6D 20 45 
3263   13B4 72 72 6F 72 
3263   13B8 0D 0A 00 
3264   13BB 0D 0A 42 79 BYE	.DB	CR,LF,"Bye...",CR,LF,0
3264   13BF 65 2E 2E 2E 
3264   13C3 0D 0A 00 
3265   13C6             ;
3266   13C6             ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
3267   13C6             ;
3268   13C6 1B 5B 48 1B INITSZ	.DB	27,"[H",27,"[2J",0
3268   13CA 5B 32 4A 00 
3269   13CE             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F16      ADRESS        3F3F      ADDKEY        0309      
ADMODE        0383      ASCHEX        07C9      ASCHX1        07CF      
ADDRA         0837      ADDRB         0849      ASC2HEX       115D      
AC2HEX1       1169      AC2HEX2       116B      AC2HEX3       1177      
AC2HEX4       1186      B300          0220      B1200         0080      
B2400         003F      B4800         001B      B9600         000B      
BOTRAM        2000      BUFFER        3E00      BAUD          3F25      
BLKSRT        3F2D      BLKEND        3F2F      BLKDST        3F31      
BEEP          0570      BEEP1         0580      BEEP2         0587      
BEEP3         0597      BITIME        082A      BITIM1        082F      
BLKMVE        085B      BLKMV1        087A      BLKMV2        087D      
BLKMV3        088F      BLKSUM        08B1      BLKSM1        08CD      
BRANCH        08EF      BRNCH1        0911      BRNCH2        091C      
BCRLF         1204      BYTOUT        1212      BYTASC        1220      
BITASC        1234      BTASC1        1237      BTASC2        123D      
BTASC3        1240      BTASC4        1243      BYE           13BB      
CALMDE        3F1B      COUNT         3F2B      CONBYT        03BE      
CONVHI        03CB      CONVLO        03CF      CLRBUF        0419      
CLRBF1        0420      CHKSUM        0484      CHKSM1        0488      
CANCEL        06E2      CANCL1        06E5      CHKKEY        0AAE      
CHKKY1        0ABC      CHKKY2        0AE5      CHKKY3        0AF2      
CHKKY4        0AFA      CHKKY5        0B01      CHKKY6        0B0F      
CHKKY7        0B11      CHKKY8        0B16      CHKKY9        0B3B      
CHKKYA        0B49      CLKEXT        0CC3      CALKEY        0CCD      
CR            000D      COLD          0EF6      CRLF          12F4      
CMDLST        1317      CSUMERR       13A8      DISPLY        0084      
DATA          3F18      DISBUF        3F35      DALLAS        3F64      
DECKEY        033F      DECKY1        0342      DECKY2        034F      
DECKY3        0368      DISADD        03A0      DISBYT        03B5      
DECSTP        068D      DECSP1        069D      DELONE        0BBF      
DELON1        0BC8      DELON2        0BCA      DSPLAY        1189      
DPLAY1        119A      DPLAY2        11A7      DPLAY3        11AE      
DPLINE        11BC      DLINE1        11CB      DLINE2        11DE      
DOT           11EA      DISREG        12B8      DSREG1        12C7      
EDTKEY        0A7E      ENDKEY        0AA5      ESC           001B      
EXIT          114A      FUNTBL        3F19      FUNJMP        3F33      
FUNKEY        06C3      FUNKY1        06C7      FUNKY2        06D6      
FUNLST        06EF      FUNFUN        0723      FILEOK        1393      
GETCH         3F12      GOEXEC        0727      GETBYT        079D      
GETBT1        07A7      GETBT2        07BB      GETCHR        0F6D      
GETNYB        0F82      GETOUT        0F9B      GOJUMP        0FB6      
GOJMP1        0FC7      HEXKEY        02D7      HEXKY1        02E2      
HEXKY2        02F0      HELP          0FD9      IO0           0080      
IO1           0081      IO2           0082      IO3           0083      
IO7           0087      ISTACK        3E00      INCKEY        0315      
INCKY1        0318      INCKY2        0325      INCKY3        033E      
INDEXB        0494      INDEXW        049B      INCSTP        0678      
INCSP1        0688      INTELFN       0732      INTELH        0741      
INTEL1        0745      INTEL2        0770      INTEL4        078B      
INCH          0FB0      INTHEX        1131      ITHEX1        1143      
INBUF         1201      INSBUF        1231      INITSZ        13C6      
KEYBUF        0086      KEYTIM        3F27      KEYDEL        3F41      
KEYIN         044D      KEYREL        0457      KEYRL1        0458      
LENGTH        0537      LOSE          0B62      LF            000A      
LOOPSZ        12EB      MODE          3F3D      MAIN          0274      
MAIN1         0285      MAIN2         0288      MENLST        029A      
MENU          0461      MENU1         046F      MENU2         047B      
MUL16         04BC      MULT          04C5      MULT1         04CB      
MUSIC         04D3      MOVE          0895      MONMENU       0F57      
MODIFY        10DE      MDIFY1        10EF      MDIFY2        112A      
NXTBIT        07E3      NDOT          11EC      NYBOUT        1215      
NYBASC        1229      ONTIM         3F3B      OFTIM         3F3C      
ONESEC        0EDC      ONESC1        0EE5      OUTSP         0F9D      
OUTCH         0FAA      PUTCH         3F10      PAUSE         04E4      
PERIOD        051F      PLAY1         0934      PLAY2         0943      
PLAY3         0952      PATERN        0E3C      PRNTSZ        12EA      
RAMSRT        2000      RAMEND        3BFF      REGPNT        3F43      
RST08         3F55      RST10         3F57      RST18         3F59      
RST20         3F5B      RST28         3F5D      RST38         3F5F      
RST66         3F61      RAMSUM        3F63      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          04A4      REGTBL        05D8      REGNAM        0615      
REGKEY        0625      RETMON        064C      RETPGM        0656      
RXDATA        07FD      RXDAT1        07FF      RXDAT2        0817      
RELSQR        0B7C      RLTEST        0B8B      RLSTEP        0B91      
RELSR1        0B97      RELSR2        0BA8      RELSR3        0BB0      
RELSR4        0BB5      RWATCH        0DF2      RWACH1        0DFE      
RWACH2        0E07      RWACH3        0E19      REGSTR        1153      
REGS          132E      SCAN          0085      SPSAVE        3F14      
SWREG0        3F1D      SWREG1        3F1E      SWREG2        3F1F      
SWREG3        3F20      SWREG4        3F21      SWREG5        3F22      
SWREG6        3F23      SWREG7        3F24      SPTEMP        3F29      
SYSCALL       006B      SYSJMP        0100      SETDP         0388      
SEGMNT        03DE      SCAND         03EE      SCAND1        03F6      
SCAND2        0400      SCAND3        0409      SCANKEY       0428      
SKEYIN        0433      SKEYRL        0440      SKEYL1        0441      
STEP          04D9      STEP1         04EE      STEP2         04F8      
STEP3         0503      SSTEP         059A      SSTEP1        05C6      
SETREG        06A3      SDELAY        08A3      SDELY1        08A8      
SWBEEP        0961      SECRET        09FB      SECRT1        0A38      
SECNUM        0A47      SPLIT         0B69      SCOPE         0BD5      
SCOPE2        0BEA      SCOPE3        0BF2      SCOPE4        0C01      
SCOPE5        0C08      SCOPE6        0C0F      SCOPE7        0C16      
SCOPE8        0C1D      SCOPE9        0C26      SCOPEA        0C33      
SEED          0C54      SKATE         0C63      SKATE1        0C68      
SKATE2        0C70      SKATE3        0C79      SETCLK        0D54      
SETCK1        0D5A      SETCK2        0D89      SETCK3        0D9D      
SETCK4        0DAB      SETCK5        0DBA      SETCK6        0DC1      
SETCK7        0DD1      SETCK8        0DD8      SCBUG         0EF2      
START2        0F2D      START3        0F32      START4        0F3D      
START5        0F45      SSTOGL        10D5      SPCBUF        11FF      
SNDMSG        1249      SDMSG1        124B      SDMSG2        1256      
SSSTEP        1257      SSTEP3        1281      SSTEP4        1296      
SZCRLF        12E3      SIGNON        12F7      TOPRAM        3FFF      
TMPPC         3F45      TMPAF         3F47      TMPBC         3F49      
TMPDE         3F4B      TMPHL         3F4D      TMPIX         3F4F      
TMPIY         3F51      TMPSP         3F53      TYPE          0392      
TYPESZ        0396      TONE          0550      TONE1         055A      
TONE2         055F      TONE3         0562      TXDATA        07D2      
TRACE         0926      TUNE1         096F      TUNE2         09AF      
TIME          0C84      TIME1         0C9C      TIMKEY        0CB6      
TXCRLF        0FA3      TOGGLE        1363      TXFILE        137A      
UPDATE        0369      UPDBUF        0CDC      UPDBF1        0CE2      
UPDBF2        0D04      UPDBF3        0D28      UPDBF4        0D3A      
UPDBF5        0D53      VARBLS        3F00      VARIDX        3F00      
VERS          038E      VERSSZ        039B      WIN           0B59      
WWATCH        0E7C      WWACH1        0E96      WWACH2        0E98      
WWACH3        0EB3      WWACH4        0EB6      WWACH5        0EB8      
WWACH6        0EC9      WARM          0F51      WRDOUT        120F      
WRDASC        121B      

tasm: Number of errors = 0
