0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ; 
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;     
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES  
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ;
0028   0000             ;THE TARGET IS THE TEC-1F ELSE SC
0029   0000             #DEFINE TEC-1F
0030   0000             ; USE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0031   0000             ;#DEFINE 74C923
0032   0000             ;
0033   0000             ; I/O PORT ADDRESSES
0034   0000             ;
0035   0000             #IFDEF TEC-1F
0036   0000             KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0037   0000             SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0038   0000             DISPLY	.EQU	02H	;DISPLAY LATCH
0039   0000             PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0040   0000             PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0041   0000             PORT5	.EQU	05H
0042   0000             PORT6	.EQU	06H
0043   0000             PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0044   0000~            #ELSE
0045   0000~            IO0	.EQU	80H	;IO PORT 0
0046   0000~            IO1	.EQU	81H	;IO PORT 1
0047   0000~            IO2	.EQU	82H	;IO PORT 2
0048   0000~            IO3	.EQU	83H	;IO PORT 3
0049   0000~            DISPLY	.EQU	84H	;DISPLAY LATCH
0050   0000~            SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0051   0000~            KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0052   0000~            IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0053   0000             #ENDIF
0054   0000             ;
0055   0000             ; BAUD RATE CONSTANTS
0056   0000             ;
0057   0000             B300	.EQU	0220H	;300 BAUD
0058   0000             B1200	.EQU	0080H	;1200 BAUD
0059   0000             B2400	.EQU	003FH	;2400 BAUD
0060   0000             B4800	.EQU	001BH	;4800 BAUD
0061   0000             B9600	.EQU	000BH	;9600 BAUD
0062   0000             ;
0063   0000             ;---------------
0064   0000             ; RAM MEMORY MAP
0065   0000             ;---------------
0066   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0067   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0068   0000             ;
0069   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0070   0000             BUFFER	.EQU	TOPRAM-01FFH	;GENERAL PURPOSE BUFFER AREA
0071   0000             ISTACK	.EQU	BUFFER	;INITIAL MONITOR STACK
0072   0000             
0073   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0074   0000             RAMEND	.EQU	TOPRAM-0400H	;END OF USER RAM
0075   0000             
0076   0000             ;-------------------------
0077   0000             ; MONITOR GLOBAL VARIABLES
0078   0000             ;-------------------------
0079   0000             ;
0080   3F00             	.ORG	VARBLS
0081   3F00             ;
0082   3F00             ;SERIAL MONITOR VARIABLES
0083   3F00             ;
0084   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0085   3F10             PUTCH	.BLOCK	2	;OUTPUT A CHARACTER TO SERIAL
0086   3F12             GETCH	.BLOCK	2	;WAIT FOR A CHARACTER FROM SERIAL
0087   3F14             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0088   3F16             ADDR	.BLOCK	2	;THE ADDRESS
0089   3F18             DATA	.BLOCK	1	;THE DATA
0090   3F19             ;
0091   3F19             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0092   3F1B             ;
0093   3F1B             ; DALLAS SMARTWATCH REGISTERS
0094   3F1B             ;
0095   3F1B             CALMDE	.BLOCK	2	;CALENDAR MODE
0096   3F1D             SWREG0	.BLOCK	1	;10THS, 100THS
0097   3F1E             SWREG1	.BLOCK	1	;SECONDS
0098   3F1F             SWREG2	.BLOCK	1	;MINUTES
0099   3F20             SWREG3	.BLOCK	1	;HOURS
0100   3F21             SWREG4	.BLOCK	1	;DAY
0101   3F22             SWREG5	.BLOCK	1	;DATE
0102   3F23             SWREG6	.BLOCK	1	;MONTH
0103   3F24             SWREG7	.BLOCK	1	;YEAR
0104   3F25             ;
0105   3F25             BAUD	.BLOCK	2	;BAUD RATE
0106   3F27             KEYTIM	.BLOCK	2	;BEEP DELAY
0107   3F29             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0108   3F2B             ;
0109   3F2B             ; BLOCK FUNCTIONS
0110   3F2B             ;
0111   3F2B             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0112   3F2D             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0113   3F2F             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0114   3F31             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0115   3F33             ;
0116   3F33             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0117   3F35             ;
0118   3F35             ; DISPLAY SCAN REGISTERS
0119   3F35             ;
0120   3F35             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0121   3F3B             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0122   3F3C             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0123   3F3D             ;
0124   3F3D             ; MONITOR VARIABLES
0125   3F3D             ;
0126   3F3D             MODE	.BLOCK	2	;DISPLAY MODE
0127   3F3F             ADRESS	.BLOCK	2	;USER ADDRESS
0128   3F41             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0129   3F43             ;
0130   3F43             ; TEMPORARY REGISTER STORAGE
0131   3F43             ;
0132   3F43             REGPNT	.BLOCK	2	;REGISTER POINTER
0133   3F45             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0134   3F47             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0135   3F49             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0136   3F4B             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0137   3F4D             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0138   3F4F             TMPIX	.BLOCK	2	;INDEX REGISTER X
0139   3F51             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0140   3F53             TMPSP	.BLOCK	2	;STACK POINTER
0141   3F55             ;
0142   3F55             ; RESTART JUMP TABLE AND HARWARE TEST
0143   3F55             ;
0144   3F55             RST08	.BLOCK	2	;RESTART 08H JUMP
0145   3F57             RST10	.BLOCK	2	;RESTART 10H JUMP
0146   3F59             RST18	.BLOCK	2	;RESTART 18H JUMP
0147   3F5B             RST20	.BLOCK	2	;RESTART 20H JUMP
0148   3F5D             RST28	.BLOCK	2	;RESTART 28H JUMP
0149   3F5F             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0150   3F61             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0151   3F63             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0152   3F64             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0153   3F65             ;----------------
0154   3F65             ; RESTART VECTORS
0155   3F65             ;----------------
0156   3F65             ;
0157   3F65             ;  RESTART 00H - RST 0
0158   3F65             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0159   3F65             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0160   3F65             ;
0161   0000             	.ORG	0000H
0162   0000 C3 00 02    RSTVEC	JP	RESET
0163   0003             ;
0164   0003             ; RESTART 08H - RST 1
0165   0003             ;
0166   0008             	.ORG	0008H
0167   0008 E5          	PUSH	HL
0168   0009 2A 55 3F    	LD	HL,(RST08)
0169   000C E9          	JP	(HL)
0170   000D             ;
0171   000D             ; RESTART 10H - RST 2
0172   000D             ;
0173   0010             	.ORG	0010H
0174   0010 E5          	PUSH	HL
0175   0011 2A 57 3F    	LD	HL,(RST10)
0176   0014 E9          	JP	(HL)
0177   0015             ;
0178   0015             ; RESTART 18H - RST 3
0179   0015             ;
0180   0018             	.ORG	0018H
0181   0018 E5          	PUSH	HL
0182   0019 2A 59 3F    	LD	HL,(RST18)
0183   001C E9          	JP	(HL)
0184   001D             ;
0185   001D             ; RESTART 20H - RST 4
0186   001D             ;
0187   0020             	.ORG	0020H
0188   0020 E5          	PUSH	HL
0189   0021 2A 5B 3F    	LD	HL,(RST20)
0190   0024 E9          	JP	(HL)
0191   0025             ;
0192   0025             ; RESTART 28H - RST 5
0193   0025             ;
0194   0028             	.ORG	0028H
0195   0028 E5          	PUSH	HL
0196   0029 2A 5D 3F    	LD	HL,(RST28)
0197   002C E9          	JP	(HL)
0198   002D             ;
0199   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0200   002D             ;
0201   0030             	.ORG	0030H
0202   0030 C3 68 00    RST30	JP	SYSCALL
0203   0033             ;
0204   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0205   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0206   0033             ;INT OCCURS- FURTHER INTERRUPTS
0207   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0208   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0209   0033             ;STARTS HERE
0210   0033             ;
0211   0038             	.ORG	0038H
0212   0038 E5          	PUSH	HL
0213   0039 2A 5F 3F    	LD	HL,(RST38)
0214   003C E9          	JP	(HL)
0215   003D             ;
0216   003D             ; RESTART 66H NMI VECTOR
0217   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0218   003D             ;
0219   0066             	.ORG	0066H
0220   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0221   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0222   0066             #IFDEF TEC-1F
0223   0066 ED 4D           RETI
0224   0068~            #ELSE
0225   0068~            	PUSH	HL
0226   0068~            	LD	HL,(RST66)
0227   0068~            	JP	(HL)
0228   0068             #ENDIF
0229   0068             ;--------------------
0230   0068             ; SYSTEM CALL HANDLER
0231   0068             ;--------------------
0232   0068             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0233   0068             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0234   0068             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0235   0068             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0236   0068             ;CHANGE IN SUBSEQUENT MONITORS
0237   0068             ;
0238   0068             ;ENTRY : C = CALL NUMBER
0239   0068             ;SEE ROUTINES FOR ENTRY AND EXIT
0240   0068             ;PARAMETERS
0241   0068             ;
0242   0068 3B          SYSCALL	DEC	SP
0243   0069 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0244   006A ED 73 29 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0245   006E F5          	PUSH	AF
0246   006F D5          	PUSH	DE
0247   0070 E5          	PUSH	HL	;SAVE REGISTERS
0248   0071 79          	LD	A,C	;GET CALL NUMBER
0249   0072 E6 7F       	AND	127	;ENSURE IN LIMITS
0250   0074 CB 27       	SLA	A	;MULTIPLY BY TWO
0251   0076 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0252   0078 6F          	LD	L,A	;LOAD INDEX
0253   0079 7E          	LD	A,(HL)
0254   007A 23          	INC	HL
0255   007B 56          	LD	D,(HL)	;GET JUMP ADDRESS
0256   007C 2A 29 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0257   007F 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0258   0080 23          	INC	HL
0259   0081 7A          	LD	A,D
0260   0082 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0261   0083 E1          	POP	HL
0262   0084 D1          	POP	DE
0263   0085 F1          	POP	AF	;RESTORE REGISTERS
0264   0086 C9          	RET		;JUMPS TO SYSTEM CALL
0265   0087             ;-----------------------
0266   0087             ; SYSTEM CALL JUMP TABLE
0267   0087             ;-----------------------
0268   0100             	.ORG	0100H
0269   0100 74 02 8E 03 SYSJMP	.DW	MAIN,VERS
0270   0104 A2 03 B7 03 	.DW	DISADD,DISBYT,CLRBUF,SCAND
0270   0108 1B 04 F0 03 
0271   010C C0 03 CD 03 	.DW	CONBYT,CONVHI,CONVLO
0271   0110 D1 03 
0272   0112 69 04 76 04 	.DW	SKEYIN,SKEYRL,KEYIN,KEYREL
0272   0116 83 04 8D 04 
0273   011A 97 04 BA 04 	.DW	MENU,CHKSUM
0274   011E F2 04 DA 04 	.DW	MUL16,RAND
0275   0122 CA 04 D1 04 	.DW	INDEXB,INDEXW
0276   0126 09 05 86 05 	.DW	MUSIC,TONE,BEEP
0276   012A A6 05 
0277   012C 99 0C       	.DW	SKATE
0278   012E 08 08 33 08 	.DW	TXDATA,RXDATA,ASCHEX
0278   0132 FF 07 
0279   0134 B2 0E 28 0E 	.DW	WWATCH,RWATCH,ONESEC
0279   0138 12 0F 
0280   013A C7 0B F5 0B 	.DW	RLSTEP,DELONE
0281   013E 2A 04 77 07 	.DW	SCANKEY,INTELH
0282   0142 9F 0B       	.DW	SPLIT
0283   0144 7F 12 6A 12 	.DW	SNDMSG,BITASC
0284   0148 51 12 56 12 	.DW	WRDASC,BYTASC,NYBASC
0284   014C 5F 12 
0285   014E 92 03 20 13 	.DW	TYPE,PRNTSZ
0286   0152             ;------------------------------
0287   0152             ; POWER UP RESET / MANUAL RESET
0288   0152             ;------------------------------
0289   0200             	.ORG	0200H
0290   0200             ;
0291   0200             ; WAIT FOR SMART SOCKET
0292   0200             ; TO RECOVER FROM POWER DOWN
0293   0200             ;
0294   0200 3E 55       RESET	LD	A,55H
0295   0202 32 64 3F    	LD	(DALLAS),A	;WRITE TO RAM
0296   0205 AF          	XOR	A
0297   0206 D3 02       	OUT	(DISPLY),A	;WRITE NOTHING TO
0298   0208 D3 01       	OUT	(SCAN),A	;ON BOARD I/O
0299   020A DB 00       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0300   020C 3A 64 3F    	LD	A,(DALLAS)	;READ FROM RAM
0301   020F FE 55       	CP	55H	;IS IT READY?
0302   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0303   0214             ;
0304   0214             ; LOAD STACK POINTER
0305   0214             ;
0306   0214 31 00 3E    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0307   0217             ;
0308   0217             ; SET UP RESTART VECTORS
0309   0217             ;
0310   0217 21 14 02    	LD	HL,RESET1
0311   021A 22 55 3F    	LD	(RST08),HL
0312   021D 22 57 3F    	LD	(RST10),HL
0313   0220 22 59 3F    	LD	(RST18),HL
0314   0223 22 5B 3F    	LD	(RST20),HL
0315   0226 22 5D 3F    	LD	(RST28),HL
0316   0229 22 61 3F    	LD	(RST66),HL	;NMI INTERRUPT
0317   022C 21 D0 05    	LD	HL,SSTEP
0318   022F 22 5F 3F    	LD	(RST38),HL	;SINGLE STEPPER
0319   0232             ;
0320   0232             ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0321   0232             ;
0322   0232 ED 56       	IM	1
0323   0234 FB          	EI		;ENABLE INTERRUPTS
0324   0235             ;
0325   0235             ; PERFORM CHECKSUM ON USER RAM
0326   0235             ;
0327   0235 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0328   0238 11 FF 3B    	LD	DE,RAMEND	;END OF USER RAM
0329   023B CD BA 04    	CALL	CHKSUM
0330   023E 32 63 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0331   0241             ;
0332   0241             ; SET UP DEFAULT VARIABLES
0333   0241             ;
0334   0241 21 25 07    	LD	HL,FUNLST
0335   0244 22 19 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0336   0247             ;
0337   0247             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0338   0247             ;
0339   0247 21 28 0F    	LD	HL,SCBUG	;JUMP TO SERIAL MONITOR
0340   024A 22 33 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0341   024D 3E 00       	LD	A,00H
0342   024F 32 43 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0343   0252 21 1B 00    	LD	HL,B4800
0344   0255 22 25 3F    	LD	(BAUD),HL	;DEFAULT SERIAL=4800 BAUD
0345   0258 21 00 01    	LD	HL,0100H
0346   025B 22 41 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0347   025E 21 00 10    	LD	HL,1000H
0348   0261 22 27 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0349   0264~            #IFDEF 74C923
0350   0264~            	LD	A,20H
0351   0264             #ELSE
0352   0264 3E 08       	LD	A,08H
0353   0266             #ENDIF
0354   0266 32 3C 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0355   0269 CD A6 05    	CALL	BEEP
0356   026C CD A6 05    	CALL	BEEP
0357   026F~            #IFDEF 74C923
0358   026F~            	LD	A,08H
0359   026F             #ELSE
0360   026F 3E 10       	LD	A,10H
0361   0271             #ENDIF
0362   0271 32 3B 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0363   0274             ;-----------------
0364   0274             ; SET UP MAIN LOOP
0365   0274             ;-----------------
0366   0274 31 00 3E    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0367   0277 21 00 20    	LD	HL,RAMSRT
0368   027A 22 3F 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0369   027D 3A 3D 3F    	LD	A,(MODE)
0370   0280 F6 80       	OR	80H	;START OFF IN DATA MODE
0371   0282 32 3D 3F    	LD	(MODE),A
0372   0285             ;
0373   0285             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0374   0285             ;
0375   0285 CD 69 03    MAIN1	CALL	UPDATE
0376   0288 CD 69 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0377   028B 21 9A 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0378   028E CD 97 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0379   0291 CD 69 03    	CALL	UPDATE	;UPDATE BUFFER AND
0380   0294 CD 76 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0381   0297 C3 88 02    	JP	MAIN2
0382   029A             ;
0383   029A             ; MAIN MENU KEY TABLE
0384   029A             ;
0385   029A 14          MENLST	.DB	20
0386   029B 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0386   029F 04 05 06 07 
0387   02A3 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0387   02A7 0C 0D 0E 0F 
0388   02AB 10 11 12 13 	.DB	10H,11H,12H,13H
0389   02AF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0389   02B3 D7 02 D7 02 
0390   02B7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0390   02BB D7 02 D7 02 
0391   02BF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0391   02C3 D7 02 D7 02 
0392   02C7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0392   02CB D7 02 D7 02 
0393   02CF             #IFDEF TEC-1F
0394   02CF 15 03 3F 03 	.DW	INCKEY,DECKEY,FUNKEY,ADDKEY	;TEC KEYS    +  -  GO  AD
0394   02D3 F9 06 09 03 
0395   02D7~            #ELSE
0396   02D7~            	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0397   02D7             #ENDIF
0398   02D7             ;---------------------------------------------------
0399   02D7             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0400   02D7             ;---------------------------------------------------
0401   02D7 CD A6 05    HEXKEY	CALL	BEEP
0402   02DA 21 3D 3F    	LD	HL,MODE
0403   02DD CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0404   02DF CA F0 02    	JP	Z,HEXKY2	;IN ADDR MODE
0405   02E2             ;
0406   02E2             ; IN DATA MODE
0407   02E2             ;
0408   02E2 2A 3F 3F    HEXKY1	LD	HL,(ADRESS)
0409   02E5 CB 26       	SLA	(HL)	;FROM THE CURRENT
0410   02E7 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0411   02E9 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0412   02EB CB 26       	SLA	(HL)	;PUT THE KEY IN
0413   02ED B6          	OR	(HL)	;THE NEW DATA BACK AT
0414   02EE 77          	LD	(HL),A	;THE CURRENT ADDRESS
0415   02EF C9          	RET
0416   02F0             ;
0417   02F0             ; IN ADDRESS MODE
0418   02F0             ;
0419   02F0 2A 3F 3F    HEXKY2	LD	HL,(ADRESS)
0420   02F3 CB 25       	SLA	L	;CURRENT ADDRESS
0421   02F5 CB 14       	RL	H	;AND DO A 16 BIT
0422   02F7 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0423   02F9 CB 14       	RL	H	;TO MAKE  ROOM
0424   02FB CB 25       	SLA	L	;FOR THE NEW KEY
0425   02FD CB 14       	RL	H
0426   02FF CB 25       	SLA	L
0427   0301 CB 14       	RL	H
0428   0303 B5          	OR	L	;IT IN THE LEAST
0429   0304 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0430   0305 22 3F 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0431   0308 C9          	RET
0432   0309             ;-------------
0433   0309             ; CHANGE MODES
0434   0309             ;-------------
0435   0309 CD A6 05    ADDKEY	CALL	BEEP
0436   030C 3A 3D 3F    	LD	A,(MODE)
0437   030F EE 80       	XOR	80H	;TOGGLE MODE
0438   0311 32 3D 3F    	LD	(MODE),A
0439   0314 C9          	RET
0440   0315             ;------------------
0441   0315             ; INCREMENT ADDRESS
0442   0315             ;------------------
0443   0315 CD A6 05    INCKEY	CALL	BEEP
0444   0318 2A 3F 3F    INCKY1	LD	HL,(ADRESS)
0445   031B 23          	INC	HL	;INC ADDRESS
0446   031C 22 3F 3F    	LD	(ADRESS),HL
0447   031F CD 69 03    	CALL	UPDATE
0448   0322 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0449   0325 CD F0 03    INCKY2	CALL	SCAND
0450   0328 CD 2A 04    	CALL	SCANKEY
0451   032B CB 6F       	BIT	5,A	;RETURN IF
0452   032D 28 0F       	JR	Z,INCKY3	; KEY RELEASED
0453   032F             #IFDEF	TEC-1F
0454   032F FE 30       	CP	30H	;TEC-1F '+'
0455   0331~            #ELSE
0456   0331~            	CP	32H	;SC '+'
0457   0331             #ENDIF
0458   0331 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0459   0333 11 01 00    	LD	DE,0001H
0460   0336 ED 52       	SBC	HL,DE
0461   0338 D2 25 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0462   033B C3 18 03    	JP	INCKY1	;INC ADDRESS
0463   033E C9          INCKY3	RET
0464   033F             ;------------------
0465   033F             ; DECREMENT ADDRESS
0466   033F             ;------------------
0467   033F CD A6 05    DECKEY	CALL	BEEP
0468   0342 2A 3F 3F    DECKY1	LD	HL,(ADRESS)
0469   0345 2B          	DEC	HL	;DEC ADDRESS
0470   0346 22 3F 3F    	LD	(ADRESS),HL
0471   0349 CD 69 03    	CALL	UPDATE
0472   034C 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0473   034F CD F0 03    DECKY2	CALL	SCAND
0474   0352 CD 2A 04    	CALL	SCANKEY
0475   0355 CB 6F       	BIT	5,A	;RETURN IF
0476   0357 28 0F       	JR	Z,DECKY3	;KEY RELEASED
0477   0359             #IFDEF  TEC-1F
0478   0359 FE 31       	CP	31H	;TEC-1F '-'
0479   035B~            #ELSE
0480   035B~            	CP	33H	;SC '-'
0481   035B             #ENDIF
0482   035B 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0483   035D 11 01 00    	LD	DE,0001H
0484   0360 ED 52       	SBC	HL,DE
0485   0362 D2 4F 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0486   0365 C3 42 03    	JP	DECKY1	;INC ADDRESS 
0487   0368 C9          DECKY3	RET
0488   0369             ;-----------------------------------------
0489   0369             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0490   0369             ;-----------------------------------------
0491   0369 2A 3F 3F    UPDATE	LD	HL,(ADRESS)
0492   036C CD A2 03    	CALL	DISADD	;AND DATA, PUT IN
0493   036F 7E          	LD	A,(HL)
0494   0370 CD B7 03    	CALL	DISBYT	;DISPLAY BUFFER
0495   0373             ;
0496   0373             ; IN ADDRESS OR DATA MODE?
0497   0373             ;
0498   0373 21 3D 3F    	LD	HL,MODE
0499   0376 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0500   0378 CA 83 03    	JP	Z,ADMODE	;ADDRESS MODE
0501   037B             ;
0502   037B             ; SHOW DATA MODE
0503   037B             ;
0504   037B 21 35 3F    	LD	HL,DISBUF	;SET THE DP'S
0505   037E 06 02       	LD	B,2	;IN THE DATA
0506   0380 C3 88 03    	JP	SETDP	;DISPLAY
0507   0383             ;
0508   0383             ; SHOW ADDRESS MODE
0509   0383             ;
0510   0383 21 37 3F    ADMODE	LD	HL,DISBUF+2
0511   0386 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0512   0388             ;
0513   0388             ; SET DECIMAL POINT
0514   0388             ;
0515   0388             ;SET DP IN THE BYTE POINTED TO BY HL
0516   0388             ;
0517   0388             #IFDEF TEC-1F
0518   0388 CB E6       SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0519   038A~            #ELSE
0520   038A~            SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0521   038A             #ENDIF
0522   038A 23          	INC	HL	;POINT TO NEXT BYTE
0523   038B 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0524   038D C9          	RET
0525   038E             ;---------------
0526   038E             ; VERSION NUMBER
0527   038E             ;---------------
0528   038E             ;RETURNS THE SOFTWARE VERSION NUMBER
0529   038E             ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
0530   038E             ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
0531   038E             ;
0532   038E             ;	ENTRY : NONE
0533   038E             ; EXIT : HL = VERSION NUMBER STRING
0534   038E             ;
0535   038E 21 9D 03    VERS	LD	HL,VERSSZ
0536   0391 C9          	RET
0537   0392             ;-----------
0538   0392             ; BOARD TYPE
0539   0392             ;-----------
0540   0392             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0541   0392             ; ENTRY = NONE
0542   0392             ; EXIT: HL= 'SC-1'
0543   0392             ;          'TEC-1F'
0544   0392 21 96 03    TYPE	LD	HL,TYPESZ
0545   0395 C9          	RET
0546   0396             
0547   0396             #IFDEF TEC-1F
0548   0396 54 45 43 2D TYPESZ	.DB	"TEC-1F",0
0548   039A 31 46 00 
0549   039D~            #ELSE
0550   039D~            TYPESZ	.DB	"SC-1",0
0551   039D             #ENDIF
0552   039D 20 31 2E 37 VERSSZ	.DB	" 1.7",0
0552   03A1 00 
0553   03A2             ;-------------------------
0554   03A2             ; ADDRESS > DISPLAY BUFFER
0555   03A2             ;-------------------------
0556   03A2             ;CONVERT HL TO SEVEN SEGMENT CODE
0557   03A2             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0558   03A2             ;
0559   03A2             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0560   03A2             ;
0561   03A2             ; EXIT  : NO REGISTERS MODIFIED
0562   03A2             ;
0563   03A2 F5          DISADD	PUSH	AF
0564   03A3 E5          	PUSH	HL
0565   03A4 E5          	PUSH	 HL
0566   03A5 7C          	LD	A,H
0567   03A6 CD C0 03    	CALL	CONBYT
0568   03A9 22 39 3F    	LD	(DISBUF+4),HL
0569   03AC E1          	POP	HL
0570   03AD 7D          	LD	A,L
0571   03AE CD C0 03    	CALL	CONBYT
0572   03B1 22 37 3F    	LD	(DISBUF+2),HL
0573   03B4 E1          	POP	HL
0574   03B5 F1          	POP	AF
0575   03B6 C9          	RET
0576   03B7             ;---------------------------
0577   03B7             ; DATA BYTE > DISPLAY BUFFER
0578   03B7             ;---------------------------
0579   03B7             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0580   03B7             ;AND PUT IN DATA DISPLAY BUFFER.
0581   03B7             ;
0582   03B7             ; ENTRY :  A = DATA DISPLAY BYTE
0583   03B7             ;
0584   03B7             ; EXIT  : NO REGISTERS MODIFIED
0585   03B7             ;
0586   03B7 E5          DISBYT	PUSH	HL
0587   03B8 CD C0 03    	CALL	CONBYT
0588   03BB 22 35 3F    	LD	(DISBUF),HL
0589   03BE E1          	POP	HL
0590   03BF C9          	RET
0591   03C0             ;---------------------------------------
0592   03C0             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0593   03C0             ;---------------------------------------
0594   03C0             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0595   03C0             ; FOR DISPLAY
0596   03C0             ; ENTRY : A = BYTE TO BE CONVERTED
0597   03C0             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0598   03C0             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0599   03C0             ;         A = NOT MODIFIED
0600   03C0 F5          CONBYT	PUSH	AF
0601   03C1 F5          	PUSH	AF
0602   03C2 CD CD 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0603   03C5 67          	LD	H,A
0604   03C6 F1          	POP	AF
0605   03C7 CD D1 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0606   03CA 6F          	LD	L,A
0607   03CB F1          	POP	AF
0608   03CC C9          	RET
0609   03CD             ;---------------------------------------------
0610   03CD             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0611   03CD             ;---------------------------------------------
0612   03CD             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0613   03CD             ; FOR SEVEN SEGMENT DISPLAYS
0614   03CD             ; CONVHI = CONVERTS HIGH NYBBLE
0615   03CD             ; CONVLO = CONVERTS LO NYBBLE
0616   03CD             ;
0617   03CD             ; ENTRY : A = NYBBLE TO BE CONVERTED
0618   03CD             ; EXIT  : A = SEVEN SEGMENT CODE
0619   03CD             ;
0620   03CD 07          CONVHI	RLCA
0621   03CE 07          	RLCA
0622   03CF 07          	RLCA	;MOVE TO LO NYBBLE
0623   03D0 07          	RLCA	;FOR CONVERSION
0624   03D1 C5          CONVLO	PUSH	BC
0625   03D2 E5          	PUSH	HL
0626   03D3 21 E0 03    	LD	HL,SEGMNT	;USE THE HEX VALUE
0627   03D6 E6 0F       	AND	0FH	;TO INDEX TO THE
0628   03D8 4F          	LD	C,A	;THE SEVEN SEGMENT
0629   03D9 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0630   03DB 09          	ADD	HL,BC	;AND RETURN WITH
0631   03DC 7E          	LD	A,(HL)	;CODE IN A
0632   03DD E1          	POP	HL
0633   03DE C1          	POP	BC
0634   03DF C9          	RET
0635   03E0             ;
0636   03E0             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0637   03E0             ;
0638   03E0             #IFDEF TEC-1F
0639   03E0 EB 28 CD AD SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0640   03E4 2E A7 E7 29 	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0641   03E8 EF 2F 6F E6 	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0642   03EC C3 EC C7 47 	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0643   03F0~            #ELSE
0644   03F0~            SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0645   03F0~            	.DB	66H,6DH,7DH,07H	;4,5,6,7
0646   03F0~            	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0647   03F0~            	.DB	39H,5EH,79H,71H	;C,D,E,F
0648   03F0             #ENDIF
0649   03F0             ;-------------
0650   03F0             ; SCAN DISPLAY
0651   03F0             ;-------------
0652   03F0             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0653   03F0             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0654   03F0             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0655   03F0             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0656   03F0             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0657   03F0             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0658   03F0             ;
0659   03F0             ; ENTRY : NONE
0660   03F0             ; EXIT  : NO REGISTERS MODIFIED
0661   03F0             ;
0662   03F0 F5          SCAND   PUSH    AF
0663   03F1 C5          	PUSH	BC
0664   03F2 E5          	PUSH	HL	;SAVE REGISTERS
0665   03F3 21 3A 3F    	LD	HL,DISBUF+5
0666   03F6 0E 20       	LD	C,20H
0667   03F8 7E          SCAND1	LD	A,(HL)
0668   03F9 D3 02       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0669   03FB 79          	LD	A,C
0670   03FC D3 01       	OUT	(SCAN),A	;TURN ON DISPLAY
0671   03FE 3A 3B 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0672   0401 47          	LD	B,A	;TO ADJUST ON TIME
0673   0402 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0674   0404 78          	LD	A,B	;B IS NOW CLEAR, USE
0675   0405 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0676   0407 3A 3C 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0677   040A 47          	LD	B,A	;TO ADJUST OFF TIME
0678   040B 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0679   040D 2B          	DEC	HL	;POINT TO NEXT
0680   040E CB 09       	RRC	C	;ELEMENT IN BUFFER
0681   0410 30 E6       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0682   0412 78          	LD	A,B	;B IS NOW CLEAR, USE
0683   0413 D3 01       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0684   0415 D3 02       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0685   0417 E1          	POP	HL
0686   0418 C1          	POP	BC
0687   0419 F1          	POP	AF	;RESTORE REGISTERS
0688   041A C9          	RET
0689   041B             ;---------------------
0690   041B             ; CLEAR DISPLAY BUFFER
0691   041B             ;---------------------
0692   041B E5          CLRBUF	PUSH	HL
0693   041C C5          	PUSH	BC
0694   041D 21 35 3F    	LD	HL,DISBUF
0695   0420 06 06       	LD	B,6
0696   0422 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0697   0424 23          	INC	HL	;LOCATIONS POINTED
0698   0425 10 FB       	DJNZ	CLRBF1	;TO BY HL
0699   0427 C1          	POP	BC
0700   0428 E1          	POP	HL
0701   0429 C9          	RET
0702   042A             ;--------------
0703   042A             ; SCAN KEYBOARD
0704   042A             ;--------------
0705   042A             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0706   042A             ; AND KEYBOARD BUFFER AS ROWS.
0707   042A             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0708   042A             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0709   042A             ;
0710   042A             ; ENTRY : NONE
0711   042A             ; EXIT  : A = 00H IF NO KEY DETECTED
0712   042A             ;         A = DETECTED KEY WITH BIT 5 SET
0713   042A             ;             BIT 5 = KEY AVAILABLE
0714   042A C5          SCANKEY	PUSH	BC
0715   042B D5          	PUSH	DE	;SAVE REGISTERS
0716   042C E5          	PUSH	HL
0717   042D             ;USE THE KEYBOARD ENCODER
0718   042D~            #IFDEF 74C923
0719   042D~            #IFDEF TEC-1F
0720   042D~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0721   042D~            	AND	5FH	;STRIP UNUSED BITS
0722   042D~            	BIT	6,A	;DA LOW?
0723   042D~            	JR	Z,SCANKY1
0724   042D~            	LD	A,00H
0725   042D~            	JR	SCANKY2
0726   042D~            SCANKY1	SET	5,A	;SET DATA AVAILABLE FLAG 
0727   042D~            SCANKY2	POP	HL
0728   042D~            	POP	DE
0729   042D~            	POP	BC
0730   042D~            	RET
0731   042D~            #ELSE
0732   042D~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0733   042D~            	AND	3FH	;STRIP UNUSED BITS
0734   042D~            	POP	HL
0735   042D~            	POP	DE
0736   042D~            	POP	BC
0737   042D~            	RET
0738   042D~            #ENDIF
0739   042D~            
0740   042D             #ELSE
0741   042D             ;
0742   042D             ; SOFTWARE SCAN KEYBOARD
0743   042D             ;
0744   042D 3E 00       SCANKY1	LD	A,00H
0745   042F D3 02       	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0746   0431 47          	LD	B,A		;KEY
0747   0432 57          	LD	D,A		;COUNT
0748   0433 1E 01       	LD	E,01H	;MASK
0749   0435 0E 08       SCANKY2	LD	C,08H	;SCAN
0750   0437 79          SCANKY3	LD	A,C
0751   0438 D3 01       	OUT	(SCAN),A	;OUTPUT SCAN
0752   043A 00          	NOP
0753   043B 00          	NOP
0754   043C 00          	NOP
0755   043D DB 00       	IN	A,(KEYBUF)	;READ KEY BUFFER
0756   043F A3          	AND	E	;MASK
0757   0440 28 02       	JR	Z,SCANKY4	;KEY NOT DETECTED
0758   0442 14          	INC	D
0759   0443 68          	LD	L,B		;SAVE KEY
0760   0444             ;
0761   0444             ; END OF ROWS?
0762   0444             ;
0763   0444 04          SCANKY4	INC	B	;NEXT KEY
0764   0445 CB 29       	SRA	C	;SHIFT SCAN RIGHT
0765   0447 30 EE       	JR	NC,SCANKY3	;NEXT ROW
0766   0449             ;
0767   0449             ; END OF COLUMNS?
0768   0449             ;
0769   0449 CB 23       	SLA	E	;SHIFT MASK LEFT
0770   044B CB 6B       	BIT	5,E	;END OF KEYSCAN?
0771   044D 28 E6       	JR	Z,SCANKY2	;NEXT COLUMN
0772   044F             ;
0773   044F             ; END OF SCAN
0774   044F             ;
0775   044F 7A          	LD	A,D
0776   0450 FE 00       	CP	00H
0777   0452 28 0D       	JR	Z,SCANKY6	;NO KEY PRESSED
0778   0454 FE 01       	CP	01H
0779   0456 20 D5       	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0780   0458             ;
0781   0458             ; ONE KEY DETECTED
0782   0458             ;
0783   0458 3E 00       	LD	A,00H
0784   045A D3 01       	OUT	(SCAN),A	;CLEAR SCAN REG
0785   045C 7D          	LD	A,L		;RETURN KEY IN A
0786   045D CB EF       	SET	5,A		;SET DATA AVAILABLE FLAG
0787   045F 18 04       	JR	SCANKY7
0788   0461             ;
0789   0461             ; NO KEY
0790   0461             ;
0791   0461 3E 00       SCANKY6	LD	A,00H
0792   0463 D3 01       	OUT	(SCAN),A	;CLEAR SCAN REG
0793   0465 E1          SCANKY7	POP	HL
0794   0466 D1          	POP	DE
0795   0467 C1          	POP	BC
0796   0468 C9          	RET
0797   0469             #ENDIF
0798   0469             ;-----------------------------
0799   0469             ; SCAN DISPLAY UNTIL KEY PRESS
0800   0469             ;-----------------------------
0801   0469             ; ENTRY : NONE
0802   0469             ; EXIT  : A = KEY VALUE 00H TO 1FH
0803   0469             ;         FLAG REGISTER MODIFIED
0804   0469             ;
0805   0469 CD F0 03    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0806   046C CD 2A 04    	CALL	SCANKEY
0807   046F CB 6F       	BIT	5,A
0808   0471 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0809   0473 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0810   0475 C9          	RET
0811   0476             ;-------------------------------
0812   0476             ; SCAN DISPLAY UNTIL KEY RELEASE
0813   0476             ;-------------------------------
0814   0476             ; ENTRY : NONE
0815   0476             ; EXIT  : NONE
0816   0476             ;
0817   0476 F5          SKEYRL	PUSH	AF
0818   0477 CD F0 03    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0819   047A CD 2A 04    	CALL	SCANKEY
0820   047D CB 6F       	BIT	5,A
0821   047F 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0822   0481 F1          	POP	AF
0823   0482 C9          	RET
0824   0483             ;-------------------
0825   0483             ; WAIT FOR KEY PRESS
0826   0483             ;-------------------
0827   0483             ; ENTRY : NONE
0828   0483             ; EXIT  : A = KEY VALUE 00H TO 1FH
0829   0483             ;         FLAG REGISTER MODIFIED
0830   0483             ;
0831   0483 CD 2A 04    KEYIN	CALL	SCANKEY
0832   0486 CB 6F       	BIT	5,A
0833   0488 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
0834   048A E6 1F       	AND	1FH	;STRIP UNUSED BITS
0835   048C C9          	RET
0836   048D             ;---------------------
0837   048D             ; WAIT FOR KEY RELEASE
0838   048D             ;---------------------
0839   048D             ; ENTRY : NONE
0840   048D             ; EXIT  : NONE
0841   048D             ;
0842   048D F5          KEYREL	PUSH	AF
0843   048E CD 2A 04    KEYRL1	CALL	SCANKEY
0844   0491 CB 6F       	BIT	5,A
0845   0493 20 F9       	JR	NZ,KEYRL1
0846   0495 F1          	POP	AF
0847   0496 C9          	RET
0848   0497             ;-----------------
0849   0497             ; KEY MENU HANDLER
0850   0497             ;-----------------
0851   0497             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
0852   0497             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
0853   0497             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
0854   0497             ; ENTRY :  A = ELEMENT TO LOOK FOR
0855   0497             ;         HL = POINTS TO TABLE
0856   0497             ; EXIT  :  ELEMENT NOT FOUND
0857   0497             ;           HL HOLDS ADDRESS OF LAST ELEMENT
0858   0497             ;          ELEMENT FOUND
0859   0497             ;           CONTROL PASSES TO JUMP ADDRESS WITH
0860   0497             ;          RETURN ADDRESS OF MENU CALL ON STACK
0861   0497             ;
0862   0497 F5          MENU	PUSH	AF
0863   0498 C5          	PUSH	BC
0864   0499 D5          	PUSH	DE	;SAVE REGISTERS
0865   049A E5          	PUSH	HL	;CALCULATE ADDRESS
0866   049B 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
0867   049D 5E          	LD	E,(HL)	;ADDING THE INDEX TO
0868   049E 23          	INC	HL	;THE ELEMENTS
0869   049F 19          	ADD	HL,DE	;TO THE ADDR OF THE
0870   04A0 54          	LD	D,H	;TABLE
0871   04A1 5D          	LD	E,L
0872   04A2 E1          	POP	HL
0873   04A3 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
0874   04A4 23          	INC	HL	;POINT TO LIST OF ENTRIES
0875   04A5 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
0876   04A6 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
0877   04A8 23          	INC	HL	;NEXT ENTRY IN LIST
0878   04A9 13          	INC	DE	;NEXT ENTRY IN
0879   04AA 13          	INC	DE	;JUMP TABLE
0880   04AB 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
0881   04AD D1          	POP	DE
0882   04AE C1          	POP	BC
0883   04AF F1          	POP	AF
0884   04B0 C9          	RET	;NOT IN TABLE
0885   04B1             ;
0886   04B1             ; FOUND ELEMENT IN THE TABLE
0887   04B1             ; PASS CONTROL TO THE JUMP HANDLER
0888   04B1             ;
0889   04B1 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
0890   04B2 6F          	LD	L,A	;FROM THE TABLE
0891   04B3 13          	INC	DE	;AND JUMP TO
0892   04B4 1A          	LD	A,(DE)	;THE JUMP ADDRESS
0893   04B5 67          	LD	H,A	;FOR THAT ENTRY
0894   04B6 D1          	POP	DE
0895   04B7 C1          	POP	BC
0896   04B8 F1          	POP	AF	;RESTORE REGISTERS
0897   04B9 E9          	JP	(HL)
0898   04BA             ;-------------------
0899   04BA             ; CALCULATE CHECKSUM
0900   04BA             ;-------------------
0901   04BA             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
0902   04BA             ;
0903   04BA             ; ENTRY : HL = START OF BLOCK TO SUM
0904   04BA             ;         DE = END OF BLOCK TO SUM
0905   04BA             ; EXIT  : A =  CHECKSUM
0906   04BA             ;         FLAG REGISTER MODIFIED
0907   04BA             ;
0908   04BA E5          CHKSUM	PUSH	HL
0909   04BB D5          	PUSH	DE
0910   04BC 13          	INC	DE	;END OF BLOCK+1
0911   04BD AF          	XOR	A	;CLEAR CHECKSUM
0912   04BE 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
0913   04BF 23          	INC	HL	;POINT TO NEXT ELEMENT
0914   04C0 A7          	AND	A	;SET CARRY
0915   04C1 E5          	PUSH	HL
0916   04C2 ED 52       	SBC	HL,DE	;SUBTRACT
0917   04C4 E1          	POP	HL
0918   04C5 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
0919   04C7 D1          	POP	DE
0920   04C8 E1          	POP	HL
0921   04C9 C9          	RET
0922   04CA             ;--------------------------
0923   04CA             ; ACCESS BYTE LOOK UP TABLE
0924   04CA             ;--------------------------
0925   04CA             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
0926   04CA             ; UP TABLE
0927   04CA             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0928   04CA             ;         HL = ADDRESS OF LOOK UP TABLE
0929   04CA             ; EXIT : HL = ADDRESS OF ELEMENT A
0930   04CA             ;
0931   04CA D5          INDEXB	PUSH	DE
0932   04CB 5F          	LD	E,A	;USE DE AS INDEX
0933   04CC 16 00       	LD	D,0	;TO ELEMENT IN TABLE
0934   04CE 19          	ADD	HL,DE	;BY ADDING TO HL
0935   04CF D1          	POP	DE
0936   04D0 C9          	RET
0937   04D1             ;--------------------------
0938   04D1             ; ACCESS WORD LOOK UP TABLE
0939   04D1             ;--------------------------
0940   04D1             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
0941   04D1             ; UP TABLE
0942   04D1             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0943   04D1             ;         HL = ADDRESS OF LOOK UP TABLE
0944   04D1             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
0945   04D1             ;
0946   04D1 D5          INDEXW	PUSH	DE
0947   04D2 5F          	LD	E,A
0948   04D3 CB 23       	SLA	E	;MULTIPLY BY TWO
0949   04D5 16 00       	LD	D,0
0950   04D7 19          	ADD	HL,DE
0951   04D8 D1          	POP	DE
0952   04D9 C9          	RET
0953   04DA             ;-------------------------------
0954   04DA             ; GENERATE A QUASI-RANDOM NUMBER
0955   04DA             ;-------------------------------
0956   04DA             ; GENERATE AN 16 BIT RANDOM NUMBER
0957   04DA             ; USING LINEAR CONGRUENTIAL METHOD.
0958   04DA             ;     Rn+1 = (aRn+c) MOD m
0959   04DA             ; REFRESH REGISTER USED FOR Rn AND c
0960   04DA             ;	ENTRY : NONE
0961   04DA             ;	EXIT  : HL = RANDOM WORD
0962   04DA             ;	NO REGISTERS MODIFIED
0963   04DA             ;
0964   04DA F5          RAND	PUSH	AF
0965   04DB C5          	PUSH	BC
0966   04DC D5          	PUSH	DE	;SAVE REGISTERS
0967   04DD             ;
0968   04DD             ; CALCULATE aRn
0969   04DD             ;
0970   04DD ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
0971   04DF 5F          	LD	E,A	;(Rn) BY
0972   04E0 16 00       	LD	D,0
0973   04E2 21 48 05    	LD	HL,0548H	;CONSTANT (a)
0974   04E5 CD F2 04    	CALL	MUL16
0975   04E8             ;
0976   04E8             ; CALCULATE aRn+c
0977   04E8             ;
0978   04E8 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
0979   04EA 06 00       	LD	B,0	;READ OF THE
0980   04EC 4F          	LD	C,A	;THE REFRESH
0981   04ED 09          	ADD	HL,BC	;REGISTER (c)
0982   04EE D1          	POP	DE
0983   04EF C1          	POP	BC
0984   04F0 F1          	POP	AF	;RESTORE REGISTERS
0985   04F1 C9          	RET
0986   04F2             ;----------------------
0987   04F2             ; 16 BIT MULTIPLICATION
0988   04F2             ;----------------------
0989   04F2             ;16 BIT MULTIPLY
0990   04F2             ; ENTRY : HL = MULTIPLICAND (MPD)
0991   04F2             ;         DE = MULTIPLIER (MPR)
0992   04F2             ; EXIT : HL = RESULT
0993   04F2             ;FROM ZAKS 'PROGRAMMING THE Z80'
0994   04F2             ;
0995   04F2 F5          MUL16	PUSH	AF
0996   04F3 C5          	PUSH	BC
0997   04F4 4C          	LD	C,H	;MPR(H)
0998   04F5 7D          	LD	A,L	;MPR(L)
0999   04F6 06 10       	LD	B,16	;BIT COUNTER
1000   04F8 21 00 00    	LD	HL,0	;CLEAR RESULT
1001   04FB CB 39       MULT	SRL	C	;MPR (H)
1002   04FD 1F          	RRA	;MPR (L)
1003   04FE 30 01       	JR	NC,MULT1	;TEST CARRY
1004   0500 19          	ADD	HL,DE	;ADD MPD TO RESULT
1005   0501 EB          MULT1	EX	DE,HL
1006   0502 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1007   0503 EB          	EX	DE,HL
1008   0504 10 F5       	DJNZ	MULT	;DONE?
1009   0506 C1          	POP	BC
1010   0507 F1          	POP	AF
1011   0508 C9          	RET
1012   0509             ; MUSIC ROUTINE
1013   0509             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1014   0509             ; MONITOR MON-1
1015   0509             ; BY JOHN HARDY AND KEN STONE
1016   0509             ;
1017   0509             ;----------------
1018   0509             ; MUSIC SEQUENCER
1019   0509             ;----------------
1020   0509             ; SEQUENCES THROUGH A TABLE OF NOTES
1021   0509             ; 1EH = REPEAT TUNE UNTIL RESET
1022   0509             ; 1FH = PLAY ONCE AND RETURN
1023   0509             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1024   0509             ; EXIT : NO REGISTERS MODIFIED
1025   0509 F5          MUSIC	PUSH	AF
1026   050A C5          	PUSH	BC
1027   050B D5          	PUSH	DE
1028   050C E5          	PUSH	HL	;SAVE REGISTERS
1029   050D E5          	PUSH	HL
1030   050E EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1031   050F             ;
1032   050F             ; PLAY EACH NOTE IN TURN
1033   050F             ;
1034   050F 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1035   0510 E6 1F       	AND	1FH	;STRIP UNUSED BITS
1036   0512             ;
1037   0512             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1038   0512             ;
1039   0512 FE 00       	CP	00H
1040   0514 C2 24 05    	JP	NZ,STEP1
1041   0517 01 00 10    	LD	BC,1000H
1042   051A 0B          PAUSE	DEC	BC
1043   051B 78          	LD	A,B
1044   051C B1          	OR	C
1045   051D C2 1A 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1046   0520 13          	INC	DE	;POINT TO NEXT ELEMENT
1047   0521 C3 0F 05    	JP	STEP
1048   0524             ;
1049   0524             ; IF ELEMENT IS 1EH REPEAT TUNE
1050   0524             ;
1051   0524 FE 1E       STEP1	CP	1EH
1052   0526 C2 2E 05    	JP	NZ,STEP2
1053   0529 D1          	POP	DE	;GET TABLE ADDRESS BACK
1054   052A D5          	PUSH	DE	;SAVE IT FOR LATER
1055   052B C3 0F 05    	JP	STEP
1056   052E             ;
1057   052E             ; IF ELEMENT IS 1FH RETURN
1058   052E             ;
1059   052E FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1060   0530 C2 39 05    	JP	NZ,STEP3
1061   0533 E1          	POP	HL
1062   0534 E1          	POP	HL
1063   0535 D1          	POP	DE
1064   0536 C1          	POP	BC
1065   0537 F1          	POP	AF
1066   0538 C9          	RET
1067   0539             ;
1068   0539             ;NOW PLAY THE NOTE
1069   0539             ;
1070   0539 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1071   053A 21 55 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1072   053D CD CA 04    	CALL	INDEXB	;GET PERIOD/2
1073   0540 7E          	LD	A,(HL)	;GET ELEMENT
1074   0541 F5          	PUSH	AF	;SAVE FOR LATER
1075   0542 78          	LD	A,B	;GET ELEMENT BACK IN A
1076   0543 21 6D 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1077   0546 CD CA 04    	CALL	INDEXB	;GET DURATION/2
1078   0549 7E          	LD	A,(HL)	;GET ELEMENT
1079   054A 6F          	LD	L,A
1080   054B 26 00       	LD	H,0	;HL = DURATION/2
1081   054D F1          	POP	AF
1082   054E CD 86 05    	CALL	TONE	;DO NOTE ROUTINE
1083   0551 13          	INC	DE
1084   0552 C3 0F 05    	JP	STEP	;STEP TO NEXT ELEMENT
1085   0555             ;
1086   0555             ; PERIOD/2 OF NOTE
1087   0555             ;
1088   0555 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1088   0559 70 67 62 5C 
1089   055D 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1089   0561 45 41 3C 39 
1090   0565 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1090   0569 2A 27 25 23 
1091   056D             ;
1092   056D             ; NOTE DURATION/2
1093   056D             ;
1094   056D 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1094   0571 1E 20 23 25 
1095   0575 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1095   0579 31 33 37 3A 
1096   057D 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1096   0581 4D 52 57 5C 
1097   0585 10          	.DB	10H
1098   0586             ; TONE ROUTINE
1099   0586             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1100   0586             ; MONITOR MON-1
1101   0586             ; BY JOHN HARDY AND KEN STONE
1102   0586             ;
1103   0586             ;--------------
1104   0586             ; OUTPUT A TONE
1105   0586             ;--------------
1106   0586             ;
1107   0586             ; ENTRY : A = PERIOD/2 OF NOTE
1108   0586             ;         HL = DURATION/2 OF NOTE
1109   0586             ; EXIT NO REGISTERS MODIFIED
1110   0586 F5          TONE	PUSH	AF
1111   0587 C5          	PUSH	BC
1112   0588 D5          	PUSH	DE
1113   0589 E5          	PUSH	HL
1114   058A 11 01 00    	LD	DE,0001H
1115   058D 4F          	LD	C,A
1116   058E 29          	ADD	HL,HL	;DOUBLE DURATION
1117   058F AF          	XOR	A
1118   0590 EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1119   0592 D3 01       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1120   0594 41          	LD	B,C
1121   0595 C5          TONE2	PUSH	BC
1122   0596 06 02       	LD	B,02H
1123   0598 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1124   059A C1          	POP	BC
1125   059B 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1126   059D ED 52       	SBC	HL,DE	;END OF NOTE?
1127   059F 20 EF       	JR	NZ,TONE1	;DO AGAIN
1128   05A1 E1          	POP	HL
1129   05A2 D1          	POP	DE
1130   05A3 C1          	POP	BC
1131   05A4 F1          	POP	AF
1132   05A5 C9          	RET
1133   05A6             ;---------------
1134   05A6             ; KEY ENTRY BEEP
1135   05A6             ;---------------
1136   05A6 E5          BEEP	PUSH	HL
1137   05A7 F5          	PUSH	AF
1138   05A8 21 3D 3F    	LD	HL,MODE
1139   05AB CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1140   05AD 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1141   05AF             ;
1142   05AF             ; DO KEYPRESS DELAY
1143   05AF             ;
1144   05AF D5          	PUSH	DE	;DO A SHORT
1145   05B0 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1146   05B3 2A 27 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1147   05B6 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1148   05B8 30 FC       	JR	NC,BEEP1	;KEY STROKES
1149   05BA D1          	POP	DE
1150   05BB 18 10       	JR	BEEP3
1151   05BD             ;
1152   05BD             ; OUTPUT KEYPRESS TONES
1153   05BD             ;
1154   05BD 3E 24       BEEP2	LD	A,24H
1155   05BF 21 30 00    	LD	HL,0030H
1156   05C2 CD 86 05    	CALL	TONE	;DO FIRST TONE
1157   05C5 3E 0E       	LD	A,0EH
1158   05C7 21 50 00    	LD	HL,0050H
1159   05CA CD 86 05    	CALL	TONE	;DO SECOND TONE
1160   05CD F1          BEEP3	POP	AF
1161   05CE E1          	POP	HL
1162   05CF C9          	RET
1163   05D0             ;----------------------------------------
1164   05D0             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1165   05D0             ;----------------------------------------
1166   05D0             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1167   05D0             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1168   05D0             ; ATTACHED).
1169   05D0             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1170   05D0             ; AND MODIFY REGISTERS.
1171   05D0             ;
1172   05D0 E1          SSTEP	POP	HL	;GET HL BACK
1173   05D1 F5          	PUSH	AF	;SAVE AF FOR LATER
1174   05D2 22 4D 3F    	LD	(TMPHL),HL
1175   05D5 ED 53 4B 3F 	LD	(TMPDE),DE
1176   05D9 ED 43 49 3F 	LD	(TMPBC),BC
1177   05DD DD 22 4F 3F 	LD	(TMPIX),IX
1178   05E1 FD 22 51 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1179   05E5 E1          	POP	HL	;GET AF BACK
1180   05E6 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
1181   05E9 E1          	POP	HL	;GET PC RETURN ADDRESS
1182   05EA 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
1183   05ED ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1184   05F1             ;
1185   05F1             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1186   05F1             ;
1187   05F1 CD A6 05    	CALL	BEEP
1188   05F4 3A 43 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1189   05F7 E6 07       	AND	7	;MAKE SURE IN LIMITS
1190   05F9 32 43 3F    	LD	(REGPNT),A	;SAVE IT
1191   05FC CD D9 06    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1192   05FF CD 76 04    	CALL	SKEYRL	;WAIT FOR A KEY
1193   0602 CD 69 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1194   0605 21 0E 06    	LD	HL,REGTBL	;HANDLE THE KEY
1195   0608 CD 97 04    	CALL	MENU	;AND UPDATE DISPLAY
1196   060B C3 FC 05    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1197   060E             ;
1198   060E             ; REGISTER DISPLAY KEY TABLE
1199   060E             ;
1200   060E 14          REGTBL	.DB	14H
1201   060F 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1201   0613 04 05 06 07 
1202   0617 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1202   061B 0C 0D 0E 0F 
1203   061F 10 11 12 13 	.DB	10H,11H,12H,13H
1204   0623 5B 06 5B 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1204   0627 5B 06 5B 06 
1205   062B 5B 06 5B 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1205   062F 5B 06 5B 06 
1206   0633 5B 06 5B 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1206   0637 5B 06 5B 06 
1207   063B 5B 06 5B 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1207   063F 5B 06 5B 06 
1208   0643             #IFDEF TEC-1F
1209   0643 AE 06 C3 06 	.DW	INCSTP,DECSTP,RETPGM,RETMON
1209   0647 8C 06 82 06 
1210   064B~            #ELSE
1211   064B~            	.DW	RETMON,RETPGM,INCSTP,DECSTP
1212   064B             #ENDIF
1213   064B             ;
1214   064B             ; REGISTER NAME CHARACTERS
1215   064B             ;
1216   064B             #IFDEF TEC-1F
1217   064B C3 4F       REGNAM	.DW	4FC3H
1218   064D 47 6F C3 E6 	.DW	6F47H,0E6C3H,0ECC7H
1218   0651 C7 EC 
1219   0653 C2 66 6E 28 	.DW	66C2H,286EH,28AEH
1219   0657 AE 28 
1220   0659 4F A7       	.DW	0A74FH
1221   065B~            #ELSE
1222   065B~            REGNAM	.DW	7339H
1223   065B~            	.DW	7771H,7C39H,5E79H
1224   065B~            	.DW	7438H,0676H,066EH
1225   065B~            	.DW	6D73H
1226   065B             #ENDIF
1227   065B             ;--------------
1228   065B             ; EDIT REGISTER
1229   065B             ;--------------
1230   065B CD A6 05    REGKEY	CALL	BEEP
1231   065E F5          	PUSH	AF	;SAVE KEY FOR LATER
1232   065F 3A 43 3F    	LD	A,(REGPNT)
1233   0662             ;
1234   0662             ; EDIT REGISTER
1235   0662             ;
1236   0662 21 45 3F    	LD	HL,TMPPC
1237   0665 CD D1 04    	CALL	INDEXW
1238   0668 4E          	LD	C,(HL)
1239   0669 23          	INC	HL
1240   066A 46          	LD	B,(HL)	;GET REG CONTENTS
1241   066B CB 21       	SLA	C
1242   066D CB 10       	RL	B
1243   066F CB 21       	SLA	C
1244   0671 CB 10       	RL	B
1245   0673 CB 21       	SLA	C
1246   0675 CB 10       	RL	B	;SHIFT REGISTER
1247   0677 CB 21       	SLA	C	;FOUR BITS
1248   0679 CB 10       	RL	B	;LEFT AND
1249   067B F1          	POP	AF	;PUT THE KEY
1250   067C B1          	OR	C	;INTO THE LSN
1251   067D 4F          	LD	C,A	;AND PUT THE
1252   067E 70          	LD	(HL),B	;REGISTER BACK
1253   067F 2B          	DEC	HL	;WHERE IT BELONGS
1254   0680 71          	LD	(HL),C
1255   0681 C9          	RET
1256   0682             ;------------------
1257   0682             ; RETURN TO MONITOR
1258   0682             ;------------------
1259   0682 CD A6 05    RETMON	CALL	BEEP
1260   0685 CD 76 04    	CALL	SKEYRL
1261   0688 FB          	EI	;ENABLE INTERRUPTS AGAIN
1262   0689 C3 74 02    	JP	MAIN
1263   068C             ;------------------
1264   068C             ; RETURN TO PROGRAM
1265   068C             ;------------------
1266   068C ED 7B 53 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1267   0690 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
1268   0693 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1269   0694 2A 47 3F    	LD	HL,(TMPAF)
1270   0697 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1271   0698 FD 2A 51 3F 	LD	IY,(TMPIY)
1272   069C DD 2A 4F 3F 	LD	IX,(TMPIX)
1273   06A0 ED 4B 49 3F 	LD	BC,(TMPBC)
1274   06A4 ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1275   06A8 F1          	POP	AF	;RESTORE AF
1276   06A9 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
1277   06AC FB          	EI	;ENABLE INTERRUPTS
1278   06AD C9          	RET	;AND RETURN TO PROGRAM
1279   06AE             ;----------------------
1280   06AE             ; DISPLAY NEXT REGISTER
1281   06AE             ;----------------------
1282   06AE CD A6 05    INCSTP	CALL	BEEP
1283   06B1 3A 43 3F    	LD	A,(REGPNT)
1284   06B4 FE 07       	CP	7	;END OF REG TABLE?
1285   06B6 CA BE 06    	JP	Z,INCSP1
1286   06B9 3C          	INC	A
1287   06BA 32 43 3F    	LD	(REGPNT),A
1288   06BD C9          	RET
1289   06BE AF          INCSP1	XOR	A
1290   06BF 32 43 3F    	LD	(REGPNT),A
1291   06C2 C9          	RET
1292   06C3             ;--------------------------
1293   06C3             ; DISPLAY PREVIOUS REGISTER
1294   06C3             ;--------------------------
1295   06C3 CD A6 05    DECSTP	CALL	BEEP
1296   06C6 3A 43 3F    	LD	A,(REGPNT)
1297   06C9 FE 00       	CP	0	;START OF REG TABLE?
1298   06CB CA D3 06    	JP	Z,DECSP1
1299   06CE 3D          	DEC	A
1300   06CF 32 43 3F    	LD	(REGPNT),A
1301   06D2 C9          	RET
1302   06D3 3E 07       DECSP1	LD	A,7
1303   06D5 32 43 3F    	LD	(REGPNT),A
1304   06D8 C9          	RET
1305   06D9             ;-----------------
1306   06D9             ; DISPLAY REGISTER
1307   06D9             ;-----------------
1308   06D9 3A 43 3F    SETREG	LD	A,(REGPNT)
1309   06DC 21 45 3F    	LD	HL,TMPPC	;START OF TABLE
1310   06DF CD D1 04    	CALL	INDEXW	;GET ELEMENT ADDRESS
1311   06E2 5E          	LD	E,(HL)
1312   06E3 23          	INC	HL
1313   06E4 56          	LD	D,(HL)
1314   06E5 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1315   06E6 CD A2 03    	CALL	DISADD
1316   06E9             ;
1317   06E9             ; DISPLAY REGISTER NAME
1318   06E9             ;
1319   06E9 21 4B 06    	LD	HL,REGNAM
1320   06EC CD D1 04    	CALL	INDEXW
1321   06EF 7E          	LD	A,(HL)
1322   06F0 32 35 3F    	LD	(DISBUF+0),A
1323   06F3 23          	INC	HL
1324   06F4 7E          	LD	A,(HL)
1325   06F5 32 36 3F    	LD	(DISBUF+1),A
1326   06F8 C9          	RET
1327   06F9             ;------------------
1328   06F9             ; FUNCTION KEY MENU
1329   06F9             ;------------------
1330   06F9             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1331   06F9             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1332   06F9             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1333   06F9             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1334   06F9             ;
1335   06F9 E1          FUNKEY	POP	HL	;REMOVE RETURN ADDRESS
1336   06FA CD A6 05    	CALL	BEEP
1337   06FD 2A 3F 3F    FUNKY1	LD	HL,(ADRESS)
1338   0700 CD A2 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1339   0703             #IFDEF TEC-1F
1340   0703             
1341   0703 21 0F AF    	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1342   0706~            #ELSE
1343   0706~            	LD	HL,7154H	;FN
1344   0706             #ENDIF
1345   0706 22 35 3F    	LD	(DISBUF),HL	;DISPLAY FN
1346   0709 CD 76 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1347   070C CD 69 04    FUNKY2	CALL	SKEYIN
1348   070F 2A 19 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1349   0712 CD 97 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1350   0715 C3 0C 07    	JP	FUNKY2	;TRY AGAIN
1351   0718             ;
1352   0718             ; RETURN TO MAIN
1353   0718             ;
1354   0718 CD A6 05    CANCEL	CALL	BEEP
1355   071B CD 69 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1356   071E CD 76 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1357   0721 E1          	POP	HL	;REMOVE MENU RETURN
1358   0722 C3 88 02    	JP	MAIN2
1359   0725             ;
1360   0725             ; FUNCTION MENU KEY TABLE
1361   0725             ;
1362   0725 11          FUNLST	.DB	11H
1363   0726 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1363   072A 04 05 06 07 
1364   072E 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1364   0732 0C 0D 0E 0F 
1365   0736             #IFDEF TEC-1F
1366   0736 12          	.DB	12H	;GO KEY
1367   0737~            #ELSE
1368   0737~            	.DB	10H	;FN KEY
1369   0737             #ENDIF
1370   0737 5D 07 68 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1370   073B 6D 08 7F 08 
1371   073F 91 08 E7 08 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1371   0743 25 09 5C 09 
1372   0747 6A 09 79 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1372   074B 88 09 97 09 
1373   074F 31 0A B2 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1373   0753 0B 0C BA 0C 
1374   0757 59 07       	.DW	FUNFUN
1375   0759             ;--------------------------
1376   0759             ; JUMP TO FUNCTION FUNCTION
1377   0759             ;--------------------------
1378   0759 2A 33 3F    FUNFUN	LD	HL,(FUNJMP)
1379   075C E9          	JP	(HL)
1380   075D             ;------------------------------------------
1381   075D             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1382   075D             ;------------------------------------------
1383   075D CD A6 05    GOEXEC	CALL	BEEP
1384   0760 CD 8D 04    	CALL	KEYREL
1385   0763 E1          	POP	HL	;REMOVE EXEC RETURN
1386   0764 2A 3F 3F    	LD	HL,(ADRESS)
1387   0767 E9          	JP	(HL)	;START EXECUCTION
1388   0768             ;------------------------------------
1389   0768             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1390   0768             ;------------------------------------
1391   0768 CD A6 05    INTELFN	CALL	BEEP
1392   076B CD 8D 04    	CALL	KEYREL
1393   076E CD 77 07    	CALL	INTELH
1394   0771 C2 B0 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1395   0774 C3 18 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1396   0777             ;-----------------------
1397   0777             ; RECEIVE INTEL HEX FILE
1398   0777             ;-----------------------
1399   0777 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1400   077B             ;
1401   077B             ; WAIT FOR RECORD MARK
1402   077B             ;
1403   077B AF          INTEL1	XOR	A
1404   077C DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1405   077F CD 33 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1406   0782 FE 3A       	CP	':'	;TO BE TRANSMITTED
1407   0784 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1408   0786             ;
1409   0786             ; GET RECORD LENGTH
1410   0786             ;
1411   0786 CD D3 07    	CALL	GETBYT
1412   0789 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1413   078C             ;
1414   078C             ; GET ADDRESS FIELD
1415   078C             ;
1416   078C CD D3 07    	CALL	GETBYT
1417   078F DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1418   0792 CD D3 07    	CALL	GETBYT
1419   0795 DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1420   0798             ;
1421   0798             ; GET RECORD TYPE
1422   0798             ;
1423   0798 CD D3 07    	CALL	GETBYT
1424   079B 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1425   079D             ;
1426   079D             ; READ IN THE DATA
1427   079D             ;
1428   079D DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1429   07A0 DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1430   07A3 DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1431   07A6             
1432   07A6 CD D3 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1433   07A9 77          	LD	(HL),A	;STORE DATA BYTE
1434   07AA 23          	INC	HL
1435   07AB 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1436   07AD             ;
1437   07AD             ; GET CHECKSUM AND COMPARE
1438   07AD             ;
1439   07AD DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1440   07B0 ED 44       	NEG		;TWO'S COMPLEMENT
1441   07B2 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1442   07B5 CD D3 07    	CALL	GETBYT
1443   07B8 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1444   07BB DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1445   07BE 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1446   07C0 C9          	RET	;NZ=CHECKSUM ERROR
1447   07C1             ;
1448   07C1             ; END OF FILE RECORD
1449   07C1             ;
1450   07C1 DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1451   07C4 ED 44       	NEG		;TWO'S COMPLEMENT
1452   07C6 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1453   07C9 CD D3 07    	CALL	GETBYT
1454   07CC DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1455   07CF DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1456   07D2 C9          	RET	;NZ=CHECKSUM ERROR
1457   07D3             ;--------------------------
1458   07D3             ; GET BYTE FROM SERIAL PORT
1459   07D3             ;--------------------------
1460   07D3 C5          GETBYT	PUSH	BC
1461   07D4 CD 33 08    	CALL	RXDATA
1462   07D7 CB 77       	BIT	6,A
1463   07D9 28 02       	JR	Z,GETBT1
1464   07DB C6 09       	ADD	A,09H
1465   07DD E6 0F       GETBT1	AND	0FH
1466   07DF CB 27       	SLA 	A
1467   07E1 CB 27       	SLA	A
1468   07E3 CB 27       	SLA	A
1469   07E5 CB 27       	SLA	A
1470   07E7 4F          	LD	C,A
1471   07E8             ;
1472   07E8             ; GET LOW NYBBLE
1473   07E8             ;
1474   07E8 CD 33 08    	CALL	RXDATA
1475   07EB CB 77       	BIT	6,A
1476   07ED 28 02       	JR	Z,GETBT2
1477   07EF C6 09       	ADD	A,09H
1478   07F1 E6 0F       GETBT2	AND	0FH
1479   07F3 B1          	OR	C
1480   07F4 47          	LD	B,A
1481   07F5 DD 86 03    	ADD	A,(IX+3)
1482   07F8 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1483   07FB 78          	LD	A,B
1484   07FC A7          	AND	A	;CLEAR CARRY
1485   07FD C1          	POP	BC
1486   07FE C9          	RET
1487   07FF             ;-------------------------------
1488   07FF             ; CONVERT ASCII CHARACTER TO HEX
1489   07FF             ;-------------------------------
1490   07FF             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1491   07FF             ;ENTRY : A= ASCII 0-9,A-F
1492   07FF             ;EXIT  : A= HEX 0-F IN LSN
1493   07FF             ; A AND F REGISTERS MODIFIED
1494   07FF             ;
1495   07FF CB 77       ASCHEX	BIT	6,A
1496   0801 28 02       	JR	Z,ASCHX1
1497   0803 C6 09       	ADD	A,09H
1498   0805 E6 0F       ASCHX1	AND	0FH
1499   0807 C9          	RET
1500   0808             ;------------------------
1501   0808             ; SERIAL TRANSMIT ROUTINE
1502   0808             ;------------------------
1503   0808             ;TRANSMIT BYTE SERIALLY ON DOUT
1504   0808             ;
1505   0808             ; ENTRY : A = BYTE TO TRANSMIT
1506   0808             ;  EXIT : NO REGISTERS MODIFIED
1507   0808             ;
1508   0808 F5          TXDATA	PUSH	AF
1509   0809 C5          	PUSH	BC
1510   080A E5          	PUSH	HL
1511   080B 2A 25 3F    	LD	HL,(BAUD)
1512   080E 4F          	LD	C,A
1513   080F             ;
1514   080F             ; TRANSMIT START BIT
1515   080F             ;
1516   080F AF          	XOR	A
1517   0810 D3 01       	OUT	(SCAN),A
1518   0812 CD 60 08    	CALL	BITIME
1519   0815             ;
1520   0815             ; TRANSMIT DATA
1521   0815             ;
1522   0815 06 08       	LD	B,08H
1523   0817 CB 09       	RRC	C
1524   0819 CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1525   081B 79          	LD	A,C	;LSB FIRST AND OUTPUT
1526   081C E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1527   081E D3 01       	OUT	(SCAN),A
1528   0820 CD 60 08    	CALL	BITIME
1529   0823 10 F4       	DJNZ	NXTBIT
1530   0825             ;
1531   0825             ; SEND STOP BITS
1532   0825             ;
1533   0825 3E 40       	LD	A,40H
1534   0827 D3 01       	OUT	(SCAN),A
1535   0829 CD 60 08    	CALL	BITIME
1536   082C CD 60 08    	CALL	BITIME
1537   082F E1          	POP	HL
1538   0830 C1          	POP	BC
1539   0831 F1          	POP	AF
1540   0832 C9          	RET
1541   0833             ;-----------------------
1542   0833             ; SERIAL RECEIVE ROUTINE
1543   0833             ;-----------------------
1544   0833             ;RECEIVE SERIAL BYTE FROM DIN
1545   0833             ;
1546   0833             ; ENTRY : NONE
1547   0833             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1548   0833             ;
1549   0833             ; REGISTERS MODIFIED A AND F
1550   0833             ;
1551   0833 C5          RXDATA	PUSH	BC
1552   0834 E5          	PUSH	HL
1553   0835             ;
1554   0835             ; WAIT FOR START BIT
1555   0835             ;
1556   0835 DB 00       RXDAT1	IN	A,(KEYBUF)
1557   0837 CB 7F       	BIT	7,A
1558   0839 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1559   083B             ;
1560   083B             ; DETECTED START BIT
1561   083B             ;
1562   083B 2A 25 3F    	LD	HL,(BAUD)
1563   083E CB 3C       	SRL	H
1564   0840 CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1565   0842 CD 60 08    	CALL	BITIME
1566   0845 DB 00       	IN	A,(KEYBUF)
1567   0847 CB 7F       	BIT	7,A
1568   0849 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1569   084B             ;
1570   084B             ; DETECTED VALID START BIT,READ IN DATA
1571   084B             ;
1572   084B 06 08       	LD	B,08H
1573   084D 2A 25 3F    RXDAT2	LD	HL,(BAUD)
1574   0850 CD 60 08    	CALL	BITIME	;DELAY ONE BIT TIME
1575   0853 DB 00       	IN	A,(KEYBUF)
1576   0855 CB 17       	RL	A
1577   0857 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1578   0859 10 F2       	DJNZ	RXDAT2
1579   085B 79          	LD	A,C
1580   085C B7          	OR	A	;CLEAR CARRY FLAG
1581   085D E1          	POP	HL
1582   085E C1          	POP	BC
1583   085F C9          	RET
1584   0860             ;---------------
1585   0860             ; BIT TIME DELAY
1586   0860             ;---------------
1587   0860             ;DELAY FOR ONE SERIAL BIT TIME
1588   0860             ;ENTRY : HL = DELAY TIME
1589   0860             ; NO REGISTERS MODIFIED
1590   0860             ;
1591   0860 E5          BITIME	PUSH	HL
1592   0861 D5          	PUSH	DE
1593   0862 11 01 00    	LD	DE,0001H
1594   0865 ED 52       BITIM1	SBC	HL,DE
1595   0867 D2 65 08    	JP	NC,BITIM1
1596   086A D1          	POP	DE
1597   086B E1          	POP	HL
1598   086C C9          	RET
1599   086D             ;-----------------------------
1600   086D             ; FUNCTION 2 - ENTER ADDRESS 1
1601   086D             ;-----------------------------
1602   086D CD A6 05    ADDRA	CALL	BEEP
1603   0870 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1604   0873 22 2D 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1605   0876             #IFDEF TEC-1F
1606   0876 21 00 C3    	LD	HL,0C300H	;ADDRESS [
1607   0879~            #ELSE
1608   0879~            	LD	HL,3900H	;ADDRESS [
1609   0879             #ENDIF
1610   0879 CD D9 08    	CALL	SDELAY
1611   087C C3 1B 07    	JP	CANCL1
1612   087F             ;-----------------------------
1613   087F             ; FUNCTION 3 - ENTER ADDRESS 2
1614   087F             ;-----------------------------
1615   087F CD A6 05    ADDRB	CALL	BEEP
1616   0882 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1617   0885 22 2F 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1618   0888             #IFDEF TEC-1F
1619   0888 21 A9 00    	LD	HL,00A9H	;ADDRESS ]
1620   088B~            #ELSE
1621   088B~            	LD	HL,000FH	;ADDRESS ]
1622   088B             #ENDIF
1623   088B CD D9 08    	CALL	SDELAY
1624   088E C3 1B 07    	JP	CANCL1
1625   0891             ;------------------------
1626   0891             ; FUNCTION 4 - BLOCK MOVE
1627   0891             ;------------------------
1628   0891 CD A6 05    BLKMVE	CALL	BEEP
1629   0894 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1630   0897 22 31 3F    	LD	(BLKDST),HL	;ADDRESS AS
1631   089A             #IFDEF TEC-1F
1632   089A 21 A9 C3    	LD	HL,0C3A9H	;DESTINATION
1633   089D~            #ELSE
1634   089D~            	LD	HL,390FH	;DESTINATION
1635   089D             #ENDIF
1636   089D CD D9 08    	CALL	SDELAY
1637   08A0             ;
1638   08A0             ; CALCULATE NUMBER OF BYTES TO MOVE
1639   08A0             ;
1640   08A0 2A 2F 3F    	LD	HL,(BLKEND)
1641   08A3 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1642   08A7 A7          	AND	A
1643   08A8 ED 52       	SBC	HL,DE
1644   08AA 23          	INC	HL	;MAKE MOVE INCLUSIVE
1645   08AB 22 2B 3F    	LD	(COUNT),HL
1646   08AE 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1647   08B0             ;
1648   08B0             ; SHOW ERROR
1649   08B0             ;
1650   08B0             #IFDEF TEC-1F
1651   08B0 21 C7 00    BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1652   08B3~            #ELSE
1653   08B3~            BLKMV1	LD	HL,0079H	;SHOW ERROR E
1654   08B3             #ENDIF
1655   08B3 CD A6 05    BLKMV2	CALL	BEEP
1656   08B6 22 35 3F    	LD	(DISBUF),HL	;AND WAIT
1657   08B9 CD 69 04    	CALL	SKEYIN	;FOR KEYPRESS
1658   08BC CD A6 05    	CALL	BEEP
1659   08BF CD 76 04    	CALL	SKEYRL
1660   08C2 C3 1B 07    	JP	CANCL1
1661   08C5             ;
1662   08C5             ; MOVE BLOCK
1663   08C5             ;
1664   08C5 CD CB 08    BLKMV3	CALL	MOVE
1665   08C8 C3 1B 07    	JP	CANCL1
1666   08CB             ;-----------
1667   08CB             ; BLOCK MOVE
1668   08CB             ;-----------
1669   08CB ED 4B 2B 3F MOVE	LD	BC,(COUNT)
1670   08CF 2A 2D 3F    	LD	HL,(BLKSRT)	;START ADDR
1671   08D2 ED 5B 31 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1672   08D6 ED B0       	LDIR
1673   08D8 C9          	RET
1674   08D9             ;-------------------------------
1675   08D9             ; SCAN DISPLAY UNTIL KEY RELEASE
1676   08D9             ;-------------------------------
1677   08D9 22 35 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1678   08DC 06 FF       	LD	B,255	;IN DATA DISPLAYS
1679   08DE CD F0 03    SDELY1	CALL	SCAND	;UNTIL KEY
1680   08E1 10 FB       	DJNZ SDELY1	;IS RELEASED
1681   08E3 CD 76 04    	CALL	SKEYRL
1682   08E6 C9          	RET
1683   08E7             ;---------------------------
1684   08E7             ;FUNCTION 5 - BLOCK CHECKSUM
1685   08E7             ;---------------------------
1686   08E7 CD A6 05    BLKSUM	CALL	BEEP
1687   08EA             #IFDEF TEC-1F
1688   08EA 21 A7 C3    	LD	HL,0C3A7H	;CS
1689   08ED~            #ELSE
1690   08ED~            	LD	HL,396DH	;CS
1691   08ED             #ENDIF
1692   08ED CD D9 08    	CALL	SDELAY	;SHOW PROMPT
1693   08F0 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1694   08F4 2A 2F 3F    	LD	HL,(BLKEND)
1695   08F7 A7          	AND	A
1696   08F8 ED 52       	SBC	HL,DE
1697   08FA 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1698   08FB 22 2B 3F    	LD	(COUNT),HL
1699   08FE 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1700   0900             ;
1701   0900             ; SHOW ERROR
1702   0900             ;
1703   0900 C3 B0 08    	JP	BLKMV1
1704   0903             ;
1705   0903             ; CALCULATE CHECKSUM
1706   0903             ;
1707   0903 2A 2D 3F    BLKSM1	LD	HL,(BLKSRT)
1708   0906 ED 5B 2F 3F 	LD	DE,(BLKEND)
1709   090A CD BA 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1710   090D CD B7 03    	CALL	DISBYT	;DISPLAY
1711   0910 2A 2B 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1712   0913 CD A2 03    	CALL	DISADD	;SUMMED AND
1713   0916 CD A6 05    	CALL	BEEP
1714   0919 CD 69 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1715   091C CD A6 05    	CALL	BEEP	;A KEY IS PRESSED
1716   091F CD 76 04    	CALL	SKEYRL
1717   0922 C3 1B 07    	JP	CANCL1
1718   0925             ;----------------------------------------
1719   0925             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1720   0925             ;----------------------------------------
1721   0925 CD A6 05    BRANCH	CALL	BEEP
1722   0928             #IFDEF TEC-1F
1723   0928 21 E6 44    	LD	HL,44E6H	;RB
1724   092B~            #ELSE
1725   092B~            	LD	HL,507CH	;RB
1726   092B             #ENDIF
1727   092B CD D9 08    	CALL	SDELAY
1728   092E 2A 3F 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1729   0931 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1730   0935 13          	INC	DE	;POINT TO PC+2
1731   0936 A7          	AND	A
1732   0937 ED 52       	SBC	HL,DE	;SUBTRACT
1733   0939             ;
1734   0939             ;TEST HIGH BYTE OF RESULT TO
1735   0939             ;DETERMINE IF BACKWARD BRANCH
1736   0939             ;
1737   0939 7C          	LD	A,H
1738   093A FE FF       	CP	255	;BACKWARD BRANCH?
1739   093C C2 47 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1740   093F             ;
1741   093F             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1742   093F             ;
1743   093F 7D          	LD	A,L
1744   0940 CB 7F       	BIT	7,A
1745   0942 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1746   0944 C3 B0 08    	JP	BLKMV1	;TOO FAR BACK
1747   0947             ;
1748   0947             ;TEST HIGH BYTE OF RESULT TO
1749   0947             ;DETERMINE IF FORWARD BRANCH
1750   0947             ;
1751   0947 FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1752   0949 C2 B0 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1753   094C             ;
1754   094C             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1755   094C             ;
1756   094C 7D          	LD	A,L
1757   094D CB 7F       	BIT	7,A
1758   094F C2 B0 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1759   0952             ;
1760   0952             ; WITHIN LIMITS PUT IN RAM
1761   0952             ; AND SHOW AS CURRENT ADDRESS
1762   0952             ;
1763   0952 2A 2D 3F    BRNCH2	LD	HL,(BLKSRT)
1764   0955 22 3F 3F    	LD	(ADRESS),HL
1765   0958 77          	LD	(HL),A
1766   0959 C3 1B 07    	JP	CANCL1
1767   095C             ;-----------------------------------------
1768   095C             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1769   095C             ;-----------------------------------------
1770   095C CD A6 05    TRACE	CALL	BEEP
1771   095F             #IFDEF TEC-1F
1772   095F D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1773   0961 21 46 00    	LD	HL,0046H	;SHOW T
1774   0964~            #ELSE
1775   0964~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1776   0964~            	LD	HL,0070H	;SHOW T
1777   0964             #ENDIF
1778   0964 CD D9 08    	CALL	SDELAY
1779   0967 C3 1B 07    	JP	CANCL1
1780   096A             ;-------------------------
1781   096A             ; FUNCTION 8 - PLAY TUNE 1
1782   096A             ;-------------------------
1783   096A CD A6 05    PLAY1	CALL	BEEP
1784   096D CD 8D 04    	CALL	KEYREL
1785   0970 21 A5 09    	LD	HL,TUNE1
1786   0973 CD 09 05    	CALL	MUSIC
1787   0976 C3 1B 07    	JP	CANCL1
1788   0979             ;-------------------------
1789   0979             ; FUNCTION 9 - PLAY TUNE 2
1790   0979             ;-------------------------
1791   0979 CD A6 05    PLAY2	CALL	BEEP
1792   097C CD 8D 04    	CALL	KEYREL
1793   097F 21 E5 09    	LD	HL,TUNE2
1794   0982 CD 09 05    	CALL	MUSIC
1795   0985 C3 1B 07    	JP	CANCL1
1796   0988             ;------------------------------
1797   0988             ; FUNCTION A - PLAY TUNE IN RAM
1798   0988             ;------------------------------
1799   0988 CD A6 05    PLAY3	CALL	BEEP
1800   098B CD 8D 04    	CALL	KEYREL
1801   098E 2A 3F 3F    	LD	HL,(ADRESS)
1802   0991 CD 09 05    	CALL	MUSIC
1803   0994 C3 1B 07    	JP	CANCL1
1804   0997             ;-----------------------------
1805   0997             ; FUNCTION B - TOGGLE KEY BEEP
1806   0997             ;-----------------------------
1807   0997 CD A6 05    SWBEEP	CALL	BEEP
1808   099A 3A 3D 3F    	LD	A,(MODE)
1809   099D EE 40       	XOR	40H
1810   099F 32 3D 3F    	LD	(MODE),A
1811   09A2 C3 1B 07    	JP	CANCL1
1812   09A5             ;
1813   09A5             ; TUNE 1
1814   09A5             ; FROM TALKING ELECTRONICS TEC-1
1815   09A5             ; MONITOR MON-1
1816   09A5             ; BY JOHN HARDY AND KEN STONE
1817   09A5             ;
1818   09A5 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1818   09A9 06 0D 0A 0D 
1819   09AD 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1819   09B1 0F 11 12 0F 
1820   09B5 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1820   09B9 12 0F 0D 0A 
1821   09BD 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
1821   09C1 0F 0A 0D 0F 
1822   09C5 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1822   09C9 06 0D 0A 0D 
1823   09CD 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1823   09D1 0F 11 12 0F 
1824   09D5 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1824   09D9 12 0F 0D 0A 
1825   09DD 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
1825   09E1 06 12 00 1E 
1826   09E5             ;
1827   09E5             ; TUNE 2
1828   09E5             ; FROM TALKING ELECTRONICS TEC-1
1829   09E5             ; MONITOR MON-1
1830   09E5             ; BY JOHN HARDY AND KEN STONE
1831   09E5             ;
1832   09E5 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
1832   09E9 0A 0A 06 06 
1833   09ED 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
1833   09F1 0A 0A 0A 0A 
1834   09F5 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
1834   09F9 08 0A 0A 0A 
1835   09FD 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
1835   0A01 08 0A 0D 0D 
1836   0A05 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
1836   0A09 0D 05 08 0B 
1837   0A0D 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
1837   0A11 06 0B 0A 08 
1838   0A15 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
1838   0A19 06 06 0B 0A 
1839   0A1D 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
1839   0A21 08 08 0A 0B 
1840   0A25 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
1840   0A29 06 06 06 06 
1841   0A2D 00 00 00 1E 	.DB	00H,00H,00H,1EH
1842   0A31             ;---------------------------
1843   0A31             ; FUNCTION C - SECRET NUMBER
1844   0A31             ;---------------------------
1845   0A31 CD A6 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
1846   0A34 CD 8D 04    	CALL	KEYREL	;AND CLEAR DISPLAY
1847   0A37 CD 1B 04    	CALL	CLRBUF	;BUFFER
1848   0A3A DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
1849   0A3E             ;
1850   0A3E             ; SEPARATE NYBBLES IN RANDOM NUMBER
1851   0A3E             ;
1852   0A3E CD DA 04    	CALL	RAND
1853   0A41 DD 75 0B    	LD	(IX+11),L
1854   0A44 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
1855   0A47 DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
1856   0A4A CD 9F 0B    	CALL	SPLIT	;NUMBER INTO
1857   0A4D DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
1858   0A50 DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
1859   0A53 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
1860   0A56 CD 9F 0B    	CALL	SPLIT	;GUESS EASIER
1861   0A59 DD 75 06    	LD	(IX+6),L
1862   0A5C DD 74 07    	LD	(IX+7),H
1863   0A5F AF          	XOR	A
1864   0A60 ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
1865   0A62 21 00 00    	LD	HL,0
1866   0A65 DD 75 08    	LD	(IX+8),L
1867   0A68 DD 74 09    	LD	(IX+9),H
1868   0A6B CD A2 03    	CALL	DISADD	;AND DISPLAY GUESS
1869   0A6E             ;
1870   0A6E             ; SCAN THE KEYBOARD
1871   0A6E             ;
1872   0A6E CD 69 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
1873   0A71 21 7D 0A    	LD	HL,SECNUM
1874   0A74 CD 97 04    	CALL	MENU	;EXECUTE KEY HANDLER
1875   0A77 CD 76 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1876   0A7A C3 6E 0A    	JP	SECRT1
1877   0A7D             ;
1878   0A7D             ; SECRET NUMBER KEY TABLE
1879   0A7D             ;
1880   0A7D 12          SECNUM	.DB	12H
1881   0A7E 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1881   0A82 04 05 06 07 
1882   0A86 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1882   0A8A 0C 0D 0E 0F 
1883   0A8E 10 11       	.DB	10H,11H
1884   0A90 B4 0A B4 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1884   0A94 B4 0A B4 0A 
1885   0A98 B4 0A B4 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1885   0A9C B4 0A B4 0A 
1886   0AA0 B4 0A B4 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1886   0AA4 B4 0A B4 0A 
1887   0AA8 B4 0A B4 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1887   0AAC B4 0A B4 0A 
1888   0AB0 DB 0A E4 0A 	.DW	ENDKEY,CHKKEY
1889   0AB4             ;---------------
1890   0AB4             ; EDIT GUESS KEY
1891   0AB4             ;---------------
1892   0AB4 F5          EDTKEY	PUSH	AF
1893   0AB5 DD 6E 08    	LD	L,(IX+8)
1894   0AB8 DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
1895   0ABB CB 25       	SLA	L
1896   0ABD CB 14       	RL	H	;AND DO A 16 BIT
1897   0ABF CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
1898   0AC1 CB 14       	RL	H	;TO MAKE  ROOM
1899   0AC3 CB 25       	SLA	L	;FOR THE NEW KEY
1900   0AC5 CB 14       	RL	H
1901   0AC7 CB 25       	SLA	L
1902   0AC9 CB 14       	RL	H
1903   0ACB F1          	POP	AF
1904   0ACC B5          	OR	L	;IT IN THE LEAST
1905   0ACD 6F          	LD	L,A	;SIGNIFICANT NYBBLE
1906   0ACE DD 75 08    	LD	(IX+8),L
1907   0AD1 DD 74 09    	LD	(IX+9),H	;SAVE GUESS
1908   0AD4 CD A2 03    	CALL	DISADD
1909   0AD7 CD A6 05    	CALL	BEEP
1910   0ADA C9          	RET
1911   0ADB             ;----------
1912   0ADB             ; QUIT GAME
1913   0ADB             ;----------
1914   0ADB CD A6 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
1915   0ADE CD 8D 04    	CALL	KEYREL	;AND RETURN TO
1916   0AE1 C3 74 02    	JP	MAIN	;MONITOR
1917   0AE4             ;---------------------------
1918   0AE4             ; SEE IF ITS THE RIGHT GUESS
1919   0AE4             ;---------------------------
1920   0AE4 CD A6 05    CHKKEY	CALL	BEEP
1921   0AE7 ED 57       	LD	A,I
1922   0AE9 3C          	INC	A
1923   0AEA 27          	DAA	;INC BCD NO. OF TRIES
1924   0AEB             ;
1925   0AEB             ; BRIEFLY SHOW GUESS NO.
1926   0AEB             ;
1927   0AEB ED 47       	LD	I,A
1928   0AED CD B7 03    	CALL	DISBYT
1929   0AF0 06 FF       	LD	B,255
1930   0AF2 CD F0 03    CHKKY1	CALL	SCAND
1931   0AF5 10 FB       	DJNZ	CHKKY1
1932   0AF7             ;
1933   0AF7             ; SEPARATE GUESS INTO NYBBLES
1934   0AF7             ;
1935   0AF7 DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
1936   0AFA CD 9F 0B    	CALL	SPLIT	;NUMBER INTO
1937   0AFD DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
1938   0B00 DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
1939   0B03 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
1940   0B06 CD 9F 0B    	CALL	SPLIT	;GUESS EASIER
1941   0B09 DD 75 02    	LD	(IX+2),L
1942   0B0C DD 74 03    	LD	(IX+3),H
1943   0B0F             ;
1944   0B0F             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
1945   0B0F             ;
1946   0B0F AF          	XOR	A
1947   0B10 DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
1948   0B13 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
1949   0B16 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
1950   0B19 06 04       	LD	B,4	;NUMBER OF DIGITS
1951   0B1B 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
1952   0B1C EB          	EX	DE,HL
1953   0B1D BE          	CP	(HL)	;SAME AS GUESS?
1954   0B1E 20 10       	JR	NZ,CHKKY4	;NOT SAME
1955   0B20 DD 7E 0A    	LD	A,(IX+10)
1956   0B23 C6 10       	ADD	A,10H	;RIGHT POSITION
1957   0B25 DD 77 0A    	LD	(IX+10),A
1958   0B28 23          CHKKY3	INC	HL	;POINT TO NEXT
1959   0B29 EB          	EX	DE,HL	;DIGIT POSITION
1960   0B2A 23          	INC	HL	;AND GO
1961   0B2B 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
1962   0B2D C3 4C 0B    	JP	CHKKY8
1963   0B30             ;
1964   0B30             ; CHECK IF NUMBER IS THERE
1965   0B30             ;
1966   0B30 C5          CHKKY4	PUSH	BC
1967   0B31 E5          	PUSH	HL
1968   0B32 06 04       	LD	B,4	;CHECK EACH DIGIT
1969   0B34 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
1970   0B37 BE          CHKKY5	CP	(HL)	;NUMBER IS IN
1971   0B38 23          	INC	HL	;THE WRONG
1972   0B39 20 0A       	JR	NZ,CHKKY6	;POSITION
1973   0B3B DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
1974   0B3E 3C          	INC	A	;THE RESULT
1975   0B3F DD 77 0A    	LD	(IX+10),A
1976   0B42 C3 47 0B    	JP	CHKKY7
1977   0B45 10 F0       CHKKY6	DJNZ	CHKKY5
1978   0B47 E1          CHKKY7	POP	HL
1979   0B48 C1          	POP	BC
1980   0B49 C3 28 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
1981   0B4C             ;
1982   0B4C             ; CHECK IF CORRECT
1983   0B4C             ;
1984   0B4C DD 7E 0A    CHKKY8	LD	A,(IX+10)
1985   0B4F FE 40       	CP	40H	;IS IT CORRECT?
1986   0B51 CA 71 0B    	JP	Z,CHKKY9	;YES!
1987   0B54 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
1988   0B57 CD B7 03    	CALL	DISBYT	;IN DATA DISPLAYS
1989   0B5A ED 57       	LD	A,I	;WAS THAT THE
1990   0B5C FE 20       	CP	20H	;LAST GUESS?
1991   0B5E C0          	RET	NZ	;NO TRY AGAIN
1992   0B5F             ;
1993   0B5F             ; RAN OUT OF TRYS
1994   0B5F             ;
1995   0B5F CD 1B 04    	CALL	CLRBUF	;DISPLAY
1996   0B62 DD 6E 0B    	LD	L,(IX+11)
1997   0B65 DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
1998   0B68 CD A2 03    	CALL	DISADD	;AND PLAY
1999   0B6B 21 98 0B    	LD	HL,LOSE	;THE LOSE
2000   0B6E C3 7F 0B    	JP	CHKKYA	;MUSIC
2001   0B71             ;
2002   0B71             ; GOT THE RIGHT ANSWER
2003   0B71             ;
2004   0B71 ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2005   0B73 CD B7 03    	CALL	DISBYT	;AND PLAY THE WIN
2006   0B76 DD 6E 0B    	LD	L,(IX+11)
2007   0B79 DD 66 0C    	LD	H,(IX+12)
2008   0B7C 21 8F 0B    	LD	HL,WIN	;MUSIC
2009   0B7F             ;
2010   0B7F             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2011   0B7F             ;
2012   0B7F CD 09 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2013   0B82 CD 69 04    	CALL	SKEYIN	;WAIT FOR A KEY
2014   0B85 CD A6 05    	CALL	BEEP
2015   0B88 CD 76 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2016   0B8B E1          	POP	HL	;AND RESTART THE GAME
2017   0B8C C3 31 0A    	JP	SECRET
2018   0B8F             ;
2019   0B8F             ; WIN AND LOSE MUSIC
2020   0B8F             ; FROM TALKING ELECTRONICS TEC-1
2021   0B8F             ; MONITOR MON-1
2022   0B8F             ; BY JOHN HARDY AND KEN STONE
2023   0B8F             ;
2024   0B8F 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2024   0B93 17 12 14 10 
2024   0B97 1F 
2025   0B98 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2025   0B9C 01 11 1F 
2026   0B9F             ;-------------------------------
2027   0B9F             ; SEPARATE BYTE INTO TWO NYBBLES
2028   0B9F             ;-------------------------------
2029   0B9F             ;SEPARATES A BYTE INTO TWO
2030   0B9F             ;RIGHT JUSTIFIED NYBBLES
2031   0B9F             ; ENTRY : A = BYTE TO BE SEPARATED
2032   0B9F             ; EXIT  : H = MSN
2033   0B9F             ;         L = LSN
2034   0B9F             ;
2035   0B9F F5          SPLIT	PUSH	AF
2036   0BA0 C5          	PUSH	BC
2037   0BA1 47          	LD	B,A	;SAVE BYTE
2038   0BA2 E6 0F       	AND	0FH	;STRIP BITS LSN
2039   0BA4 6F          	LD	L,A	;RETURN LSN IN L
2040   0BA5 78          	LD	A,B
2041   0BA6 CB 3F       	SRL	A
2042   0BA8 CB 3F       	SRL	A
2043   0BAA CB 3F       	SRL	A	;MOVE MSN
2044   0BAC CB 3F       	SRL	A	;INTO LSN
2045   0BAE 67          	LD	H,A	;RETURN MSN IN H
2046   0BAF C1          	POP	BC
2047   0BB0 F1          	POP	AF
2048   0BB1 C9          	RET
2049   0BB2             ;-----------------------------------
2050   0BB2             ; FUNCTION D - RELAY BOARD SEQUENCER
2051   0BB2             ;-----------------------------------
2052   0BB2 CD A6 05    RELSQR	CALL	BEEP
2053   0BB5 CD 8D 04    	CALL	KEYREL
2054   0BB8 21 C1 0B    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2055   0BBB CD C7 0B    	CALL	RLSTEP
2056   0BBE C3 1B 07    	JP	CANCL1
2057   0BC1             ;--------------
2058   0BC1             ; TEST SEQUENCE
2059   0BC1             ;--------------
2060   0BC1 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2060   0BC5 00 FF 
2061   0BC7             ;----------------
2062   0BC7             ; RELAY SEQUENCER
2063   0BC7             ;----------------
2064   0BC7             ; SEQUENCES RELAYS ON RELAY BOARD
2065   0BC7             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2066   0BC7             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2067   0BC7             ; OR REPEAT.
2068   0BC7             ;  TABLE:
2069   0BC7             ;  <BYTE1>,<BYTE2>
2070   0BC7             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2071   0BC7             ;  BYTE2 = FF - REPEAT
2072   0BC7             ;          00 - FINISHED
2073   0BC7             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2074   0BC7             ;  EXIT : NONE MODIFIED
2075   0BC7             ;
2076   0BC7 F5          RLSTEP	PUSH	AF
2077   0BC8 C5          	PUSH	BC
2078   0BC9 D5          	PUSH	DE
2079   0BCA E5          	PUSH	HL	;SAVE REGISTERS
2080   0BCB E5          	PUSH	HL
2081   0BCC EB          	EX	DE,HL	;GET ADDRESS OF DATA
2082   0BCD 1A          RELSR1	LD	A,(DE)
2083   0BCE 4F          	LD	C,A	;GET OUTPUT DATA
2084   0BCF 13          	INC	DE
2085   0BD0 1A          	LD	A,(DE)	;GET TIME DELAY
2086   0BD1 FE 00       	CP	0
2087   0BD3 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2088   0BD5 FE FF       	CP	255
2089   0BD7 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2090   0BD9 47          	LD	B,A
2091   0BDA 79          	LD	A,C
2092   0BDB             #IFDEF TEC-1F
2093   0BDB D3 03       	OUT	(PORT3),A	;STROBE
2094   0BDD~            #ELSE
2095   0BDD~            	OUT	(IO1),A
2096   0BDD             #ENDIF
2097   0BDD 13          	INC	DE
2098   0BDE CD F5 0B    RELSR2	CALL	DELONE	;1 SEC DELAY
2099   0BE1 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2100   0BE3 C3 CD 0B    	JP	RELSR1
2101   0BE6             ;
2102   0BE6             ; REPEAT
2103   0BE6             ;
2104   0BE6 D1          RELSR3	POP	DE	;GET START ADDRESS
2105   0BE7 D5          	PUSH	DE	;SAVE FOR LATER
2106   0BE8 C3 CD 0B    	JP	RELSR1
2107   0BEB             ;
2108   0BEB             ; FINISHED
2109   0BEB             ;
2110   0BEB 3E 00       RELSR4	LD	A,00H
2111   0BED             #IFDEF TEC-1F
2112   0BED D3 03       	OUT	(PORT3),A	;STROBE
2113   0BEF~            #ELSE
2114   0BEF~            	OUT	(IO1),A	;CLEAR OUTPUT REG
2115   0BEF             #ENDIF
2116   0BEF E1          	POP	HL
2117   0BF0 E1          	POP	HL
2118   0BF1 D1          	POP	DE
2119   0BF2 C1          	POP	BC
2120   0BF3 F1          	POP	AF
2121   0BF4 C9          	RET
2122   0BF5             ;-----------------
2123   0BF5             ; ONE SECOND DELAY
2124   0BF5             ;-----------------
2125   0BF5             ;
2126   0BF5             ; ENTRY : NONE
2127   0BF5             ; EXIT : FLAG REGISTER MODIFIED
2128   0BF5             ;
2129   0BF5 C5          DELONE	PUSH	BC
2130   0BF6 D5          	PUSH	DE
2131   0BF7 E5          	PUSH	HL
2132   0BF8 11 01 00    	LD	DE,0001H
2133   0BFB 21 70 08    	LD	HL,0870H
2134   0BFE 06 92       DELON1	LD	B,92H
2135   0C00 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2136   0C02 ED 52       	SBC	HL,DE
2137   0C04 D2 FE 0B    	JP	NC,DELON1	;OUTER LOOP
2138   0C07 E1          	POP	HL
2139   0C08 D1          	POP	DE
2140   0C09 C1          	POP	BC
2141   0C0A C9          	RET
2142   0C0B             ;--------------------------
2143   0C0B             ; FUNCTION E - KALEIDOSCOPE
2144   0C0B             ;--------------------------
2145   0C0B CD A6 05    SCOPE	CALL	BEEP
2146   0C0E CD 8D 04    	CALL	KEYREL
2147   0C11 CD DA 04    	CALL	RAND	;GENERATE RANDOM
2148   0C14 EB          	EX	DE,HL
2149   0C15 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2150   0C18 7B          	LD	A,E	;THE FIRST QUADRANT
2151   0C19 CD 8A 0C    	CALL	SEED	;WITH A RANDOM BIT
2152   0C1C 7A          	LD	A,D	;PATTERN
2153   0C1D CD 8A 0C    	CALL	SEED
2154   0C20             ;
2155   0C20             ; GENERATE MIRROR IMAGES
2156   0C20             ;
2157   0C20 06 04       SCOPE2	LD	B,04H
2158   0C22 21 00 3E    	LD	HL,BUFFER
2159   0C25 11 07 3E    	LD	DE,BUFFER+7
2160   0C28 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2161   0C29 12          	LD	(DE),A	;QUADRANT INTO
2162   0C2A 23          	INC	HL	;THE FOURTH
2163   0C2B 1B          	DEC	DE	;QUADRANT
2164   0C2C 10 FA       	DJNZ	SCOPE3
2165   0C2E             ;
2166   0C2E             ; MIRROR ACROSS CENTRE OF DISPLAY
2167   0C2E             ;
2168   0C2E 06 08       	LD	B,8	;MIRROR THE FIRST
2169   0C30 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2170   0C33 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2171   0C34 E6 0F       	AND	0FH	;OF THE DISPLAY
2172   0C36 77          	LD	(HL),A	;INTO THE SECOND
2173   0C37 CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2174   0C39 CA 3E 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2175   0C3C CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2176   0C3E CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2177   0C40 CA 45 0C    	JP	Z,SCOPE6	;CORRESPONDING
2178   0C43 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2179   0C45 CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2180   0C47 CA 4C 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2181   0C4A CB EE       	SET	5,(HL)	;DO THIS FOR
2182   0C4C CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2183   0C4E CA 53 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2184   0C51 CB E6       	SET	4,(HL)	;IN THE DISPLAY
2185   0C53 23          SCOPE8	INC	HL
2186   0C54 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2187   0C56             ;
2188   0C56             ; DISPLAY RANDOM BIT PATTERN
2189   0C56             ;
2190   0C56 11 01 00    	LD	DE,0001H	;SET UP DELAY
2191   0C59 21 00 02    	LD	HL,0200H
2192   0C5C E5          SCOPE9	PUSH	HL
2193   0C5D 21 00 3E    	LD	HL,BUFFER
2194   0C60 CD 99 0C    	CALL	SKATE	;SCAN 8X8
2195   0C63 E1          	POP	HL
2196   0C64 ED 52       	SBC	HL,DE
2197   0C66 C2 5C 0C    	JP	NZ,SCOPE9
2198   0C69             ;
2199   0C69             ; MANIPULATE BITS FOR NEXT IMAGE
2200   0C69             ;
2201   0C69 21 00 3E    SCOPEA	LD	HL,BUFFER
2202   0C6C 3E 05       	LD	A,5
2203   0C6E 86          	ADD	A,(HL)
2204   0C6F E6 0F       	AND	0FH
2205   0C71 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2206   0C72 23          	INC	HL
2207   0C73 3E 03       	LD	A,03H
2208   0C75 86          	ADD	A,(HL)
2209   0C76 E6 0F       	AND	0FH
2210   0C78 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2211   0C79 23          	INC	HL
2212   0C7A 3E 01       	LD	A,01H
2213   0C7C 86          	ADD	A,(HL)
2214   0C7D E6 0F       	AND	0FH
2215   0C7F 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2216   0C80 23          	INC	HL
2217   0C81 3E 07       	LD	A,07H
2218   0C83 86          	ADD	A,(HL)
2219   0C84 E6 0F       	AND	0FH
2220   0C86 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2221   0C87 C3 20 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2222   0C8A             ;
2223   0C8A             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2224   0C8A             ;
2225   0C8A 47          SEED	LD	B,A	;PUT THE
2226   0C8B E6 0F       	AND	0FH	;RANDOM NUMBER
2227   0C8D 77          	LD	(HL),A	;INTO THE
2228   0C8E 23          	INC	HL	;FIRST QUADRANT
2229   0C8F 78          	LD	A,B	;OF THE
2230   0C90 E6 F0       	AND	240	;DISPLAY
2231   0C92 1F          	RRA
2232   0C93 1F          	RRA
2233   0C94 1F          	RRA
2234   0C95 1F          	RRA
2235   0C96 77          	LD	(HL),A
2236   0C97 23          	INC	HL
2237   0C98 C9          	RET
2238   0C99             ;-----------------
2239   0C99             ; SCAN 8X8 DISPLAY
2240   0C99             ;-----------------
2241   0C99             ;PUT THE 8 RAM LOCATIONS POINTED TO
2242   0C99             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2243   0C99             ;ON TOP ROW.
2244   0C99             ;  ROUTINE PERIOD IS 500uS
2245   0C99             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2246   0C99             ;
2247   0C99             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2248   0C99             ;	EXIT : NO REGISTERS MODIFIED
2249   0C99             ;
2250   0C99 F5          SKATE	PUSH	AF
2251   0C9A C5          	PUSH	BC
2252   0C9B E5          	PUSH	HL	;SAVE REGISTERS
2253   0C9C 0E 80       	LD	C,80H
2254   0C9E 7E          SKATE1	LD	A,(HL)
2255   0C9F             #IFDEF TEC-1F
2256   0C9F D3 03       	OUT	(PORT3),A	;OUTPUT X
2257   0CA1~            #ELSE
2258   0CA1~            	OUT	(IO0),A	;OUTPUT X
2259   0CA1             #ENDIF
2260   0CA1 79          	LD	A,C
2261   0CA2             #IFDEF TEC-1F
2262   0CA2 D3 04       	OUT	(PORT4),A	;OUTPUT Y
2263   0CA4~            #ELSE
2264   0CA4~            	OUT	(IO2),A	;OUTPUT Y
2265   0CA4             #ENDIF
2266   0CA4 06 02       	LD	B,02H
2267   0CA6 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2268   0CA8 AF          	XOR	A
2269   0CA9             #IFDEF TEC-1F
2270   0CA9 D3 03       	OUT	(PORT3),A
2271   0CAB D3 04       	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2272   0CAD~            #ELSE
2273   0CAD~            	OUT	(IO0),A
2274   0CAD~            	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2275   0CAD             #ENDIF
2276   0CAD 06 08       	LD	B,08H
2277   0CAF 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2278   0CB1 23          	INC	HL
2279   0CB2 CB 09       	RRC	C
2280   0CB4 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2281   0CB6 E1          	POP	HL
2282   0CB7 C1          	POP	BC
2283   0CB8 F1          	POP	AF
2284   0CB9 C9          	RET
2285   0CBA             ;----------------------------
2286   0CBA             ; FUNCTION F - CLOCK CALENDAR
2287   0CBA             ;----------------------------
2288   0CBA CD A6 05    TIME	CALL	BEEP
2289   0CBD CD 8D 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2290   0CC0 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2291   0CC4 3A 3B 3F    	LD	A,(ONTIM)
2292   0CC7 DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2293   0CCA 3E 60       	LD	A,60H
2294   0CCC 32 3B 3F    	LD	(ONTIM),A	;USE NEW DELAY
2295   0CCF DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2296   0CD2             ;
2297   0CD2             ; DISPLAY TIME,CHECK FOR KEY
2298   0CD2             ;
2299   0CD2 CD 28 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2300   0CD5 CD 12 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2301   0CD8 CD F0 03    	CALL	SCAND
2302   0CDB CD 2A 04    	CALL	SCANKEY
2303   0CDE CB 6F       	BIT	5,A
2304   0CE0 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2305   0CE2 E6 1F       	AND	1FH
2306   0CE4 21 EC 0C    	LD	HL,TIMKEY
2307   0CE7 CD 97 04    	CALL	MENU
2308   0CEA 18 E6       	JR	TIME1
2309   0CEC             
2310   0CEC 04          TIMKEY	.DB	4
2311   0CED 10 11 12 13 	.DB	10H,11H,12H,13H
2312   0CF1 F9 0C 8A 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2312   0CF5 03 0D 03 0D 
2313   0CF9             ;--------------------
2314   0CF9             ; EXIT CLOCK CALENDAR
2315   0CF9             ;--------------------
2316   0CF9 E1          CLKEXT	POP	HL	;REMOVE RETURN
2317   0CFA DD 7E 00    	LD	A,(IX+0)
2318   0CFD 32 3B 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2319   0D00 C3 18 07    	JP	CANCEL
2320   0D03             ;--------------------
2321   0D03             ; TOGGLE DISPLAY MODE
2322   0D03             ;--------------------
2323   0D03 CD A6 05    CALKEY	CALL	BEEP
2324   0D06 CD 8D 04    	CALL	KEYREL
2325   0D09 DD 7E 01    	LD	A,(IX+1)
2326   0D0C EE 80       	XOR	80H	;TOGGLE DISPLAY
2327   0D0E DD 77 01    	LD	(IX+1),A
2328   0D11 C9          	RET
2329   0D12             ;----------------------
2330   0D12             ; UPDATE DISPLAY BUFFER
2331   0D12             ;----------------------
2332   0D12 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2333   0D16 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2334   0D18             ;
2335   0D18             ; TIME DISPLAY
2336   0D18             ;
2337   0D18 3A 1E 3F    UPDBF1	LD	A,(SWREG1)
2338   0D1B CD C0 03    	CALL	CONBYT
2339   0D1E CB FD       	SET	7,L	;SET DECIMAL POINT
2340   0D20 22 35 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2341   0D23 3A 1F 3F    	LD	A,(SWREG2)
2342   0D26 CD C0 03    	CALL	CONBYT
2343   0D29 CB FD       	SET	7,L	;SET DECIMAL POINT
2344   0D2B 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2345   0D2E 3A 20 3F    	LD	A,(SWREG3)
2346   0D31 CD C0 03    	CALL	CONBYT
2347   0D34 CB FD       	SET	7,L	;SET DECIMAL POINT
2348   0D36 22 39 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2349   0D39 C9          	RET
2350   0D3A             ;
2351   0D3A             ; CALENDAR DISPLAY
2352   0D3A             ;
2353   0D3A 3A 24 3F    UPDBF2	LD	A,(SWREG7)
2354   0D3D CD C0 03    	CALL	CONBYT
2355   0D40 22 35 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2356   0D43             ;
2357   0D43             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2358   0D43             ;
2359   0D43 21 1B 3F    	LD	HL,CALMDE
2360   0D46 CB 7E       	BIT	7,(HL)
2361   0D48 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2362   0D4A             ;
2363   0D4A             ; DD/MM/YY MODE
2364   0D4A             ;
2365   0D4A 3A 23 3F    	LD	A,(SWREG6)
2366   0D4D CD C0 03    	CALL	CONBYT
2367   0D50 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2368   0D53 3A 22 3F    	LD	A,(SWREG5)
2369   0D56 CD C0 03    	CALL	CONBYT
2370   0D59 22 39 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2371   0D5C 18 12       	JR	UPDBF4
2372   0D5E             ;
2373   0D5E             ; MM/DD/YY MODE
2374   0D5E             ;
2375   0D5E 3A 23 3F    UPDBF3	LD	A,(SWREG6)
2376   0D61 CD C0 03    	CALL	CONBYT
2377   0D64 22 39 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2378   0D67 3A 22 3F    	LD	A,(SWREG5)
2379   0D6A CD C0 03    	CALL	CONBYT
2380   0D6D 22 37 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2381   0D70             ;
2382   0D70             ; SHOW DAY
2383   0D70             ;
2384   0D70 3A 21 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2385   0D73 E6 07       	AND	07H
2386   0D75 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2387   0D77 FE 07       	CP	07H
2388   0D79 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2389   0D7B 2F          	CPL	;WORK OUT
2390   0D7C D6 01       	SUB	01H	;WHICH DECIMAL POINT
2391   0D7E E6 07       	AND	07H	;TO LIGHT
2392   0D80 21 35 3F    	LD	HL,DISBUF	;ADDING THE DAY
2393   0D83 06 00       	LD	B,00H	;TO A DISPLAY
2394   0D85 4F          	LD	C,A	;BUFFER INDEX
2395   0D86 09          	ADD	HL,BC	;AND SETTING THE
2396   0D87 CB FE       	SET	7,(HL)	;DECIMAL POINT
2397   0D89 C9          UPDBF5	RET	;IN THAT DISPLAY
2398   0D8A             ;--------------
2399   0D8A             ; SET TIME/DATE
2400   0D8A             ;--------------
2401   0D8A CD A6 05    SETCLK	CALL	BEEP
2402   0D8D CD 8D 04    	CALL	KEYREL
2403   0D90             ;
2404   0D90             ; EDIT THE DISPLAY BUFFER
2405   0D90             ;
2406   0D90 CD 12 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2407   0D93 CD 69 04    	CALL	SKEYIN
2408   0D96 CD 8D 04    	CALL	KEYREL
2409   0D99 FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2410   0D9B C8          	RET	Z
2411   0D9C FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2412   0D9E 28 6E       	JR	Z,SETCK8
2413   0DA0 FE 12       	CP	12H
2414   0DA2 28 3D       	JR	Z,SETCK4	;PLUS KEY
2415   0DA4 FE 13       	CP	13H
2416   0DA6 28 4F       	JR	Z,SETCK6	;MINUS KEY
2417   0DA8 FE 0A       	CP	0AH	;NO A-F KEYS
2418   0DAA 30 E4       	JR	NC,SETCK1
2419   0DAC             ;
2420   0DAC             ; IS IT SET CLOCK OR SET CALENDAR?
2421   0DAC             ;
2422   0DAC DD CB 01 7E 	BIT	7,(IX+1)
2423   0DB0 20 0D       	JR	NZ,SETCK2
2424   0DB2             ;
2425   0DB2             ; SET CLOCK DISPLAY
2426   0DB2             ;
2427   0DB2 21 1E 3F    	LD	HL,SWREG1
2428   0DB5 ED 6F       	RLD	;MOVE THE NEW KEY
2429   0DB7 23          	INC	HL	;INTO THE CLOCK BUFFER
2430   0DB8 ED 6F       	RLD
2431   0DBA 23          	INC	HL
2432   0DBB ED 6F       	RLD
2433   0DBD 18 D1       	JR	SETCK1
2434   0DBF             ;
2435   0DBF             ; SET CALENDAR DISPLAY
2436   0DBF             ;
2437   0DBF 21 1B 3F    SETCK2	LD	HL,CALMDE
2438   0DC2 CB 7E       	BIT	7,(HL)
2439   0DC4 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2440   0DC6             ;
2441   0DC6             ; SET CALENDAR AS DD/MM/YY
2442   0DC6             ;
2443   0DC6 21 24 3F    	LD	HL,SWREG7
2444   0DC9 ED 6F       	RLD	;MOVE THE NEW KEY
2445   0DCB 2B          	DEC	HL	;INTO THE CAL BUFFER
2446   0DCC ED 6F       	RLD
2447   0DCE 2B          	DEC	HL
2448   0DCF ED 6F       	RLD
2449   0DD1 18 BD       	JR	SETCK1
2450   0DD3             ;
2451   0DD3             ; SET CALENDAR AS MM/DD/YY
2452   0DD3             ;
2453   0DD3 21 24 3F    SETCK3	LD	HL,SWREG7
2454   0DD6 ED 6F       	RLD	;MOVE THE NEW KEY
2455   0DD8 2B          	DEC	HL	;INTO THE CAL BUFFER
2456   0DD9 2B          	DEC	HL
2457   0DDA ED 6F       	RLD
2458   0DDC 23          	INC	HL
2459   0DDD ED 6F       	RLD
2460   0DDF 18 AF       	JR	SETCK1
2461   0DE1             ;
2462   0DE1             ; INC DAY
2463   0DE1             ;
2464   0DE1 DD CB 01 7E SETCK4	BIT	7,(IX+1)
2465   0DE5 28 A9       	JR	Z,SETCK1
2466   0DE7 3A 21 3F    	LD	A,(SWREG4)
2467   0DEA FE 07       	CP	07H	;IS THE DAY SUNDAY?
2468   0DEC 20 02       	JR	NZ,SETCK5
2469   0DEE 3E 00       	LD	A,00H	;SET MONDAY
2470   0DF0 3C          SETCK5	INC	A	;DAY=DAY+1
2471   0DF1 32 21 3F    	LD	(SWREG4),A
2472   0DF4 C3 90 0D    	JP	SETCK1
2473   0DF7             ;
2474   0DF7             ; DEC DAY
2475   0DF7             ;
2476   0DF7 DD CB 01 7E SETCK6	BIT	7,(IX+1)
2477   0DFB CA 90 0D    	JP	Z,SETCK1
2478   0DFE 3A 21 3F    	LD	A,(SWREG4)
2479   0E01 FE 01       	CP	01H	;IS THE DAY MONDAY?
2480   0E03 20 02       	JR	NZ,SETCK7
2481   0E05 3E 08       	LD	A,08H	;SET SUNDAY
2482   0E07 3D          SETCK7	DEC	A	;DAY=DAY-1
2483   0E08 32 21 3F    	LD	(SWREG4),A
2484   0E0B C3 90 0D    	JP	SETCK1
2485   0E0E             ;
2486   0E0E             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2487   0E0E             ;
2488   0E0E CD A6 05    SETCK8	CALL	BEEP
2489   0E11 CD 8D 04    	CALL	KEYREL
2490   0E14 3A 20 3F    	LD	A,(SWREG3)
2491   0E17 E6 3F       	AND	3FH	;24 HOUR MODE
2492   0E19 32 20 3F    	LD	(SWREG3),A
2493   0E1C 3A 21 3F    	LD	A,(SWREG4)
2494   0E1F E6 07       	AND	07H	;OSC ON,RST ENABLED
2495   0E21 32 21 3F    	LD	(SWREG4),A
2496   0E24 CD B2 0E    	CALL	WWATCH	;WRITE CHANGES
2497   0E27 C9          	RET
2498   0E28             ;---------------------
2499   0E28             ; READ FROM SMARTWATCH
2500   0E28             ;---------------------
2501   0E28             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2502   0E28             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2503   0E28             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2504   0E28             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2505   0E28             ;
2506   0E28             ;  ENTRY : NONE
2507   0E28             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2508   0E28             ;          (ALTERNATE SET MODIFIED)
2509   0E28             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2510   0E28             ;
2511   0E28             ;
2512   0E28             ; ENABLE SMARTWATCH
2513   0E28             ;
2514   0E28 F5          RWATCH	PUSH	AF
2515   0E29 C5          	PUSH	BC
2516   0E2A D5          	PUSH	DE
2517   0E2B E5          	PUSH	HL
2518   0E2C 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2519   0E2F 21 72 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2520   0E32 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2521   0E34 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2522   0E35 32 64 3F    	LD	(DALLAS),A
2523   0E38 23          	INC	HL
2524   0E39 10 F9       	DJNZ	RWACH1
2525   0E3B             ;
2526   0E3B             ; READ DATA FROM WATCH
2527   0E3B             ;
2528   0E3B 06 20       	LD	B,32
2529   0E3D 3A 64 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2530   0E40 CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2531   0E42 CB 1A       	RR	D	;DE AND HL
2532   0E44 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2533   0E46 CB 1C       	RR	H	;THE ALTERNATE PAIR
2534   0E48 CB 1D       	RR	L
2535   0E4A 10 F1       	DJNZ	RWACH2
2536   0E4C D9          	EXX
2537   0E4D 06 20       	LD	B,32
2538   0E4F 3A 64 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2539   0E52 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2540   0E54 CB 1A       	RR	D
2541   0E56 CB 1B       	RR	E
2542   0E58 CB 1C       	RR	H
2543   0E5A CB 1D       	RR	L
2544   0E5C 10 F1       	DJNZ	RWACH3
2545   0E5E             ;
2546   0E5E             ; SAVE IN WATCH REGISTERS
2547   0E5E             ;
2548   0E5E 22 21 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2549   0E61 ED 53 23 3F 	LD	(SWREG6),DE	;GET THE DATA
2550   0E65 D9          	EXX
2551   0E66 22 1D 3F    	LD	(SWREG0),HL
2552   0E69 ED 53 1F 3F 	LD	(SWREG2),DE
2553   0E6D E1          	POP	HL
2554   0E6E D1          	POP	DE
2555   0E6F C1          	POP	BC
2556   0E70 F1          	POP	AF
2557   0E71 C9          	RET
2558   0E72             ;
2559   0E72             ; SMARTWATCH ACCESS PATTERN
2560   0E72             ;
2561   0E72 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2561   0E76 5C 2E 17 8B 
2562   0E7A 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2562   0E7E A3 D1 E8 74 
2563   0E82 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2563   0E86 3A 1D 8E 47 
2564   0E8A 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2564   0E8E C5 E2 71 B8 
2565   0E92 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2565   0E96 5C 2E 17 8B 
2566   0E9A 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2566   0E9E A3 D1 E8 74 
2567   0EA2 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2567   0EA6 3A 1D 8E 47 
2568   0EAA 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2568   0EAE C5 E2 71 B8 
2569   0EB2             ;--------------------
2570   0EB2             ; WRITE TO SMARTWATCH
2571   0EB2             ;--------------------
2572   0EB2             ;
2573   0EB2             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2574   0EB2             ; IT USING BIT MANIPULATION.
2575   0EB2             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2576   0EB2             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2577   0EB2             ; SMARTWATCH IS ENABLED.
2578   0EB2             ;
2579   0EB2             ; ENTRY : NONE
2580   0EB2             ; THE DATA TO WRITE TO THE SMARTWATCH
2581   0EB2             ; MUST BE IN SWREG0 - SWREG7
2582   0EB2             ;  EXIT : NO WORKING REGISTERS MODIFIED
2583   0EB2             ;  (ALTERNATE SET MODIFIED)
2584   0EB2             ; GET DATA TO WRITE TO WATCH
2585   0EB2             ;
2586   0EB2 F5          WWATCH	PUSH	AF
2587   0EB3 C5          	PUSH	BC
2588   0EB4 D5          	PUSH	DE
2589   0EB5 E5          	PUSH	HL
2590   0EB6 2A 21 3F    	LD	HL,(SWREG4)	;SET UP THE
2591   0EB9 ED 5B 23 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2592   0EBD D9          	EXX
2593   0EBE 2A 1D 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2594   0EC1 ED 5B 1F 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2595   0EC5             ;
2596   0EC5             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2597   0EC5             ;
2598   0EC5 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2599   0EC8 3E C5       	LD	A,0C5H
2600   0ECA 0E 80       	LD	C,80H	;NUMBER OF BYTES
2601   0ECC 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2602   0ECE 32 64 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2603   0ED1 CB 0F       	RRC	A
2604   0ED3 CB 38       	SRL	B
2605   0ED5 30 F7       	JR	NC,WWACH2	;MORE BITS
2606   0ED7 CB 39       	SRL	C
2607   0ED9 38 11       	JR	C,WWACH4	;NO MORE BYTES
2608   0EDB CB 47       	BIT	0,A
2609   0EDD 20 0A       	JR	NZ,WWACH3
2610   0EDF CB 0F       	RRC	A
2611   0EE1 CB 0F       	RRC	A
2612   0EE3 CB 0F       	RRC	A
2613   0EE5 CB 0F       	RRC	A
2614   0EE7 18 E3       	JR	WWACH1
2615   0EE9 2F          WWACH3	CPL
2616   0EEA 18 E0       	JR	WWACH1
2617   0EEC             ;
2618   0EEC             ; WRITE DATA TO WATCH
2619   0EEC             ;
2620   0EEC 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2621   0EEE CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2622   0EF0 CB 1B       	RR	E	;ONTO D0 AND INTO
2623   0EF2 CB 1C       	RR	H	;THE SMARTWATCH
2624   0EF4 CB 1D       	RR	L
2625   0EF6 17          	RLA
2626   0EF7 32 64 3F    	LD	(DALLAS),A
2627   0EFA 10 F2       	DJNZ	WWACH5
2628   0EFC D9          	EXX	;RESTORE REGISTERS
2629   0EFD 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2630   0EFF CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2631   0F01 CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2632   0F03 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2633   0F05 CB 1D       	RR	L
2634   0F07 17          	RLA
2635   0F08 32 64 3F    	LD	(DALLAS),A
2636   0F0B 10 F2       	DJNZ	WWACH6
2637   0F0D E1          	POP	HL
2638   0F0E D1          	POP	DE
2639   0F0F C1          	POP	BC
2640   0F10 F1          	POP	AF
2641   0F11 C9          	RET
2642   0F12             ;-----------------
2643   0F12             ; ONE SECOND DELAY
2644   0F12             ;-----------------
2645   0F12             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2646   0F12             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2647   0F12             ;
2648   0F12             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2649   0F12             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2650   0F12             ; READS THE SAME AS THE REFERENCE VALUE,
2651   0F12             ; THEN THE ROUTINE RETURNS
2652   0F12             ;
2653   0F12             ; ENTRY : NONE
2654   0F12             ; EXIT : NONE MODIFIED
2655   0F12             ;
2656   0F12 F5          ONESEC	PUSH	AF
2657   0F13 C5          	PUSH	BC
2658   0F14 CD 28 0E    	CALL	RWATCH	;READ WATCH
2659   0F17 3A 1E 3F    	LD	A,(SWREG1)
2660   0F1A 47          	LD	B,A	;SAVE REF COUNT
2661   0F1B CD 28 0E    ONESC1	CALL	RWATCH
2662   0F1E 3A 1E 3F    	LD	A,(SWREG1)
2663   0F21 B8          	CP	B	;SAME AS REF?
2664   0F22 CA 1B 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2665   0F25 C1          	POP	BC
2666   0F26 F1          	POP	AF
2667   0F27 C9          	RET
2668   0F28             ;---------------
2669   0F28             ; SERIAL MONITOR
2670   0F28             ;---------------
2671   0F28             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2672   0F28             ; COMMS PARAMETERS ARE 4800,n,8,2
2673   0F28             ;
2674   0F28             ;------------
2675   0F28             ; ASCII CODES
2676   0F28             ;------------
2677   0F28             ESC	.EQU	1BH
2678   0F28             CR	.EQU	0DH
2679   0F28             LF	.EQU	0AH
2680   0F28             
2681   0F28 3E 40       SCBUG	LD	A,40H
2682   0F2A D3 01       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
2683   0F2C             ;
2684   0F2C             ; START UP THE MONITOR
2685   0F2C             ;
2686   0F2C ED 73 14 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2687   0F30 21 8D 12    	LD	HL,SSSTEP
2688   0F33 22 5F 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2689   0F36 CD F5 0B    	CALL	DELONE	;WAIT A SEC SO THE HOST SEES TX HIGH
2690   0F39 21 08 08    	LD	HL,TXDATA
2691   0F3C 22 10 3F    	LD	(PUTCH),HL	;USE THE BITBANG SERIAL TRANSMIT
2692   0F3F 21 33 08    	LD	HL,RXDATA
2693   0F42 22 12 3F    	LD	(GETCH),HL	;USE THE BITBANG SERIAL RECEIVE
2694   0F45 21 FC 13    	LD	HL,INITSZ	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2695   0F48 CD 7F 12    	CALL	SNDMSG	;INITIALISE THE TERMINAL
2696   0F4B CD 92 03    	CALL	TYPE
2697   0F4E CD 7F 12    	CALL	SNDMSG	;BOARD TYPE
2698   0F51 21 2D 13    	LD	HL,SIGNON
2699   0F54 CD 7F 12    	CALL	SNDMSG	;SEND THE SIGNON
2700   0F57 CD 8E 03    	CALL	VERS
2701   0F5A CD 7F 12    	CALL	SNDMSG	;MONITOR VERSION
2702   0F5D 21 4D 13    	LD	HL,CMDLST
2703   0F60 CD 7F 12    	CALL	SNDMSG
2704   0F63             ;
2705   0F63             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2706   0F63             ;
2707   0F63 3E 3E       START2	LD	A,'>'
2708   0F65 CD E0 0F    	CALL	OUTCH	;DISPLAY THE PROMPT
2709   0F68 CD E6 0F    START3	CALL	INCH	;GET A CHARACTER FROM THE CONSOLE
2710   0F6B 4F          	LD	C,A	;SAVE FOR LATER
2711   0F6C E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2712   0F6E             ;
2713   0F6E             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2714   0F6E             ;
2715   0F6E 21 8D 0F    	LD	HL,MONMENU
2716   0F71 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2717   0F72 23          	INC	HL
2718   0F73 BE          START4	CP	(HL)	;IN THE LIST?
2719   0F74 28 05       	JR	Z,START5	;OK DO IT
2720   0F76 23          	INC	HL
2721   0F77 10 FA       	DJNZ	START4	;KEEP LOOKING
2722   0F79 18 ED       	JR	START3
2723   0F7B 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2724   0F7C CD E0 0F    	CALL	OUTCH	;TO ECHO IT
2725   0F7F E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2726   0F81 21 8D 0F    	LD	HL,MONMENU	;USE THE MENU HANDLER
2727   0F84 CD 97 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2728   0F87             ;
2729   0F87             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2730   0F87             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2731   0F87             ;
2732   0F87 CD D9 0F    WARM	CALL	TXCRLF	;START ON A NEW LINE
2733   0F8A C3 63 0F    	JP	START2
2734   0F8D             ;
2735   0F8D             ; SCBUG MONITOR COMMANDS
2736   0F8D             ;
2737   0F8D 07          MONMENU	.DB 7
2738   0F8E 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2738   0F92 47 49 58 
2739   0F95 BF 11 0F 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2739   0F99 0B 11 14 11 
2740   0F9D EC 0F 67 11 	.DW	GOJUMP,INTHEX,EXIT
2740   0FA1 80 11 
2741   0FA3             ;-----------------------------
2742   0FA3             ; GET A BYTE FROM THE TERMINAL
2743   0FA3             ;-----------------------------
2744   0FA3 CD E6 0F    GETCHR	CALL	INCH
2745   0FA6 FE 1B       	CP	ESC
2746   0FA8 28 27       	JR	Z,GETOUT
2747   0FAA 47          	LD	B,A	;SAVE TO ECHO
2748   0FAB CD 93 11    	CALL	ASC2HEX
2749   0FAE 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2750   0FB0 21 18 3F    	LD	HL,DATA
2751   0FB3 77          	LD	(HL),A
2752   0FB4 78          	LD	A,B
2753   0FB5 CD E0 0F    	CALL	OUTCH	;ECHO VALID HEX
2754   0FB8 CD E6 0F    GETNYB	CALL	INCH
2755   0FBB FE 1B       	CP	ESC
2756   0FBD 28 12       	JR	Z,GETOUT
2757   0FBF 47          	LD	B,A	;SAVE TO ECHO
2758   0FC0 CD 93 11    	CALL	ASC2HEX
2759   0FC3 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2760   0FC5 ED 6F       	RLD
2761   0FC7 78          	LD	A,B
2762   0FC8 CD E0 0F    	CALL	OUTCH	;ECHO VALID HEX
2763   0FCB 7E          	LD	A,(HL)
2764   0FCC CD D1 0F    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2765   0FCF 3F          	CCF	;AND THEN COMPLEMENTING IT
2766   0FD0 C9          	RET
2767   0FD1 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
2768   0FD2 C9          	RET
2769   0FD3             ;---------------
2770   0FD3             ; OUTPUT A SPACE
2771   0FD3             ;---------------
2772   0FD3 3E 20       OUTSP	LD	A,' '
2773   0FD5 CD E0 0F    	CALL	OUTCH
2774   0FD8 C9          	RET
2775   0FD9             ;-------------
2776   0FD9             ; OUTPUT CRLF
2777   0FD9             ;------------
2778   0FD9 3E 0D       TXCRLF	LD	A,CR
2779   0FDB CD E0 0F    	CALL	OUTCH
2780   0FDE 3E 0A       	LD	A,LF
2781   0FE0             ;-----------------------------------
2782   0FE0             ; OUTPUT A CHARACTER TO THE TERMINAL
2783   0FE0             ;-----------------------------------
2784   0FE0 DD 2A 10 3F OUTCH	LD	IX,(PUTCH)
2785   0FE4 DD E9       	JP	(IX)
2786   0FE6             ;------------------------------------
2787   0FE6             ; INPUT A CHARACTER FROM THE TERMINAL
2788   0FE6             ;------------------------------------
2789   0FE6 DD 2A 12 3F INCH	LD	IX,(GETCH)
2790   0FEA DD E9       	JP	(IX)
2791   0FEC             ;------------------------------
2792   0FEC             ; GO <ADDR>
2793   0FEC             ; TRANSFERS EXECUTION TO <ADDR>
2794   0FEC             ;------------------------------
2795   0FEC CD D3 0F    GOJUMP	CALL	OUTSP
2796   0FEF CD A3 0F    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
2797   0FF2 D8          	RET	C
2798   0FF3 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2799   0FF6 CD A3 0F    	CALL	GETCHR	;GET ADDRESS LOW BYTE
2800   0FF9 D8          	RET	C
2801   0FFA 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2802   0FFD             ;
2803   0FFD             ; WAIT FOR A CR OR ESC
2804   0FFD             ;
2805   0FFD CD E6 0F    GOJMP1	CALL	INCH
2806   1000 FE 1B       	CP	ESC	;ESC KEY?
2807   1002 C8          	RET	Z
2808   1003 FE 0D       	CP	CR
2809   1005 20 F6       	JR	NZ,GOJMP1
2810   1007 CD D9 0F    	CALL	TXCRLF
2811   100A E1          	POP	HL	;POP THE UNUSED MENU RETURN ADDRESS FROM THE STACK
2812   100B 2A 16 3F    	LD	HL,(ADDR)
2813   100E E9          	JP	(HL)	;GOOD LUCK WITH THAT!
2814   100F             ;---------------------
2815   100F             ; DISPLAY COMMAND HELP
2816   100F             ;---------------------
2817   100F CD 20 13    HELP	CALL	PRNTSZ
2818   1012 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
2818   1016 41 41 41 41 
2818   101A 20 20 20 20 
2818   101E 44 69 73 70 
2818   1022 6C 61 79 20 
2818   1026 44 61 74 61 
2818   102A 20 61 74 20 
2818   102E 41 64 64 72 
2818   1032 65 73 73 20 
2818   1036 41 41 41 41 
2819   103A 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
2819   103E 20 20 20 20 
2819   1042 20 20 20 20 
2819   1046 53 50 41 43 
2819   104A 45 20 74 6F 
2819   104E 20 43 4F 4E 
2819   1052 54 49 4E 55 
2819   1056 45 2C 20 45 
2819   105A 53 43 20 74 
2819   105E 6F 20 51 55 
2819   1062 49 54 
2820   1064 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
2820   1068 20 20 20 20 
2820   106C 20 20 20 20 
2820   1070 54 6F 67 67 
2820   1074 6C 65 20 53 
2820   1078 69 6E 67 6C 
2820   107C 65 20 53 74 
2820   1080 65 70 70 65 
2820   1084 72 
2821   1085 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
2821   1089 41 41 41 41 
2821   108D 20 20 20 20 
2821   1091 4D 6F 64 69 
2821   1095 66 79 20 41 
2821   1099 64 64 72 65 
2821   109D 73 73 20 41 
2821   10A1 41 41 41 
2822   10A4 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
2822   10A8 41 41 41 41 
2822   10AC 20 20 20 20 
2822   10B0 47 4F 20 66 
2822   10B4 72 6F 6D 20 
2822   10B8 41 41 41 41 
2823   10BC 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
2823   10C0 20 20 20 20 
2823   10C4 20 20 20 20 
2823   10C8 44 6F 77 6E 
2823   10CC 6C 6F 61 64 
2823   10D0 20 49 4E 54 
2823   10D4 45 4C 20 48 
2823   10D8 65 78 
2824   10DA 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
2824   10DE 20 20 20 20 
2824   10E2 20 20 20 20 
2824   10E6 45 78 69 74 
2825   10EA 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
2825   10EE 20 20 20 20 
2825   10F2 20 20 20 20 
2825   10F6 54 68 69 73 
2825   10FA 20 48 65 6C 
2825   10FE 70 20 4D 65 
2825   1102 73 73 61 67 
2825   1106 65 0D 0A 00 
2826   110A C9          	RET
2827   110B             ;-----------------------------------------------
2828   110B             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
2829   110B             ;-----------------------------------------------
2830   110B             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
2831   110B             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
2832   110B             ;
2833   110B 21 99 13    SSTOGL	LD	HL,TOGGLE
2834   110E CD 7F 12    	CALL	SNDMSG
2835   1111             #IFDEF TEC-1F
2836   1111 D3 07       	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
2837   1113~            #ELSE
2838   1113~            	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
2839   1113             #ENDIF
2840   1113 C9          	RET
2841   1114             ;----------------------------
2842   1114             ; M DISPLAY AND MODIFY MEMORY
2843   1114             ;----------------------------
2844   1114 CD D3 0F    MODIFY	CALL	OUTSP
2845   1117             ;
2846   1117             ;GET THE ADDRESS
2847   1117             ;
2848   1117 CD A3 0F    	CALL	GETCHR
2849   111A D8          	RET	C
2850   111B 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2851   111E CD A3 0F    	CALL	GETCHR
2852   1121 D8          	RET	C
2853   1122 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2854   1125             ;
2855   1125             ; DISPLAY ON A NEW LINE
2856   1125             ;
2857   1125 CD D9 0F    MDIFY1	CALL	TXCRLF
2858   1128 ED 5B 16 3F 	LD	DE,(ADDR)
2859   112C 21 00 3E    	LD	HL,BUFFER
2860   112F CD 51 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
2861   1132 21 00 3E    	LD	HL,BUFFER
2862   1135 CD 45 12    	CALL	WRDOUT	;OUTPUT THE ADDRESS
2863   1138 CD D3 0F    	CALL	OUTSP
2864   113B             ;
2865   113B             ;GET THE DATA AT THE ADDRESS
2866   113B             ;
2867   113B 2A 16 3F    	LD	HL,(ADDR)
2868   113E 7E          	LD	A,(HL)
2869   113F             ;
2870   113F             ; DISPLAY THE DATA
2871   113F             ;
2872   113F 21 00 3E    	LD	HL,BUFFER
2873   1142 CD 56 12    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
2874   1145 21 00 3E    	LD	HL,BUFFER
2875   1148 CD 48 12    	CALL	BYTOUT	;OUTPUT THE BYTE
2876   114B CD D3 0F    	CALL	OUTSP
2877   114E             ;
2878   114E             ; GET NEW DATA,EXIT OR CONTINUE
2879   114E             ;
2880   114E CD A3 0F    	CALL	GETCHR
2881   1151 D8          	RET	C
2882   1152 47          	LD	B,A	;SAVE IT FOR LATER
2883   1153 2A 16 3F    	LD	HL,(ADDR)
2884   1156 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
2885   1157 78          	LD	A,B
2886   1158 BE          	CP	(HL)
2887   1159 28 05       	JR	Z,MDIFY2
2888   115B 3E 3F       	LD	A,'?'
2889   115D CD E0 0F    	CALL	OUTCH	;NOT THE SAME DATA, PROBABLY NO RAM THERE
2890   1160             ;
2891   1160             ; INCREMENT THE ADDRESS
2892   1160             ;
2893   1160 23          MDIFY2	INC	HL
2894   1161 22 16 3F    	LD	(ADDR),HL
2895   1164 C3 25 11    	JP	MDIFY1
2896   1167             ;-----------------------
2897   1167             ; RECEIVE INTEL HEX FILE
2898   1167             ;-----------------------
2899   1167 21 B0 13    INTHEX	LD	HL,TXFILE
2900   116A CD 7F 12    	CALL	SNDMSG	;SEND FILE
2901   116D CD 77 07    	CALL	INTELH
2902   1170 20 07       	JR	NZ,ITHEX1
2903   1172 21 C9 13    	LD	HL,FILEOK
2904   1175 CD 7F 12    	CALL	SNDMSG	;GOT FILE OK
2905   1178 C9          	RET
2906   1179 21 DE 13    ITHEX1	LD	HL,CSUMERR
2907   117C CD 7F 12    	CALL	SNDMSG	;CHECKSUM ERROR
2908   117F C9          	RET
2909   1180             ;------------------------
2910   1180             ; EXIT BACK TO SC MONITOR
2911   1180             ;------------------------
2912   1180 21 F1 13    EXIT	LD	HL,BYE
2913   1183 CD 7F 12    	CALL	SNDMSG
2914   1186 C3 74 02    	JP	MAIN	;STACK IS RESET TO TOP OF RAM IN MAIN
2915   1189             ;------------------
2916   1189             ; DISPLAY REGISTERS
2917   1189             ;------------------
2918   1189 CD EE 12    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
2919   118C 21 00 3E    	LD	HL,BUFFER
2920   118F CD 7F 12    	CALL	SNDMSG
2921   1192 C9          	RET
2922   1193             ;----------------------------------------
2923   1193             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
2924   1193             ;----------------------------------------
2925   1193             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
2926   1193             ; ENTRY OTHER THAN HEXADECIMAL KEYS
2927   1193             ;
2928   1193             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
2929   1193             ;ENTRY : A= ASCII 0-9,A-F
2930   1193             ;EXIT  : CARRY =  1
2931   1193             ;          A= HEX 0-F IN LSN
2932   1193             ;      : CARRY = 0
2933   1193             ;          A= OUT OF RANGE CHARACTER & 7FH
2934   1193             ; A AND F REGISTERS MODIFIED
2935   1193             ;
2936   1193 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
2937   1195 FE 30       	CP	'0'
2938   1197 38 23       	JR	C,AC2HEX4	;LESS THAN 0
2939   1199 FE 3A       	CP	3AH
2940   119B 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
2941   119D E6 0F       	AND	0FH	;CONVERT TO NYBBLE
2942   119F 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
2943   11A0 C9          	RET
2944   11A1             ;
2945   11A1 FE 41       AC2HEX2	CP	'A'
2946   11A3 38 17       	JR	C,AC2HEX4	;LESS THAN A
2947   11A5 FE 47       	CP	47H
2948   11A7 30 04       	JR	NC,AC2HEX3	;MORE THAN F
2949   11A9 D6 07       	SUB	07H	;CONVERT TO NYBBLE
2950   11AB 18 F2       	JR	AC2HEX1
2951   11AD             	
2952   11AD FE 61       AC2HEX3	CP	'a'
2953   11AF DA BC 11    	JP	C,AC2HEX4	;LESS THAN a
2954   11B2 FE 67       	CP	67H
2955   11B4 30 06       	JR	NC,AC2HEX4	;MORE THAN f
2956   11B6 E6 DF       	AND 0DFH
2957   11B8 D6 07       	SUB 07H	;CONVERT TO NYBBLE
2958   11BA 18 E3       	JR	AC2HEX1
2959   11BC E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
2960   11BE C9          	RET
2961   11BF             ;--------------------------
2962   11BF             ; D DISPLAY MEMORY LOCATION
2963   11BF             ;--------------------------
2964   11BF CD D3 0F    DSPLAY	CALL	OUTSP	;A SPACE
2965   11C2 CD A3 0F    	CALL	GETCHR
2966   11C5 D8          	RET	C
2967   11C6 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2968   11C9 CD A3 0F    	CALL	GETCHR
2969   11CC D8          	RET	C
2970   11CD 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2971   11D0             ;
2972   11D0             ; WAIT FOR CR OR ESC
2973   11D0             ;
2974   11D0 CD E6 0F    DPLAY1	CALL	INCH
2975   11D3 FE 1B       	CP	ESC
2976   11D5 C8          	RET	Z
2977   11D6 FE 0D       	CP	CR
2978   11D8 20 F6       	JR	NZ,DPLAY1
2979   11DA CD D9 0F    	CALL	TXCRLF	;NEWLINE
2980   11DD             ;
2981   11DD             ; DISPLAY THE LINE
2982   11DD             ;
2983   11DD CD F2 11    DPLAY2 CALL  DPLINE
2984   11E0 ED 53 16 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
2985   11E4             ;
2986   11E4             ; DISPLAY MORE LINES OR EXIT
2987   11E4             ;
2988   11E4 CD E6 0F    DPLAY3	CALL	INCH
2989   11E7 38 FB       	JR	C,DPLAY3
2990   11E9 FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
2991   11EB 28 F0       	JR	Z,DPLAY2
2992   11ED FE 1B       	CP	ESC	;ESC EXITS
2993   11EF 20 F3       	JR	NZ,DPLAY3
2994   11F1 C9          	RET
2995   11F2             ;-------------------------
2996   11F2             ; DISPLAY A LINE OF MEMORY
2997   11F2             ;-------------------------
2998   11F2 ED 5B 16 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
2999   11F6 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3000   11F9             ;
3001   11F9             ; DISPLAY THE ADDRESS
3002   11F9             ;
3003   11F9 CD 51 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3004   11FC CD 35 12    	CALL	SPCBUF
3005   11FF             ;
3006   11FF             ; DISPLAY 16 BYTES
3007   11FF             ;
3008   11FF 06 10       	LD	B,16
3009   1201 1A          DLINE1	LD	A,(DE)
3010   1202 CD 56 12    	CALL	BYTASC
3011   1205 CD 35 12    	CALL	SPCBUF
3012   1208 13          	INC	DE
3013   1209 10 F6       	DJNZ	DLINE1
3014   120B CD 35 12    	CALL	SPCBUF
3015   120E             ;
3016   120E             ; NOW DISPLAY THE ASCII CHARACTER
3017   120E             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3018   120E             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3019   120E             ;
3020   120E ED 5B 16 3F 	LD	DE,(ADDR)
3021   1212 06 10       	LD	B,16
3022   1214 1A          DLINE2	LD	A,(DE)
3023   1215 FE 20       	CP	20H
3024   1217 38 07       	JR	C,DOT
3025   1219 FE 7F       	CP	7FH
3026   121B 30 03       	JR	NC,DOT
3027   121D C3 22 12    	JP	NDOT
3028   1220 3E 2E       DOT	LD	A,'.'
3029   1222 CD 37 12    NDOT	CALL	INBUF
3030   1225 13          	INC	DE
3031   1226 10 EC       	DJNZ	DLINE2
3032   1228             ;
3033   1228             ;TERMINATE AND DISPLAY STRING
3034   1228             ;
3035   1228 CD 3A 12    	CALL	BCRLF
3036   122B 3E 00       	LD	A,00H
3037   122D 77          	LD	(HL),A
3038   122E 21 00 3E    	LD	HL,BUFFER
3039   1231 CD 7F 12    	CALL	SNDMSG
3040   1234 C9          	RET
3041   1235             ;
3042   1235             ; PUT A SPACE IN THE BUFFER
3043   1235             ;
3044   1235 3E 20       SPCBUF	LD	A,' '
3045   1237 77          INBUF	LD	(HL),A
3046   1238 23          	INC	HL
3047   1239 C9          	RET
3048   123A             ;
3049   123A             ; PUT A CR LF IN THE BUFFER
3050   123A             ;
3051   123A 3E 0D       BCRLF	LD	A,CR
3052   123C CD 37 12    	CALL	INBUF
3053   123F 3E 0A       	LD	A,LF
3054   1241 CD 37 12    	CALL	INBUF
3055   1244 C9          	RET
3056   1245             ;----------------------
3057   1245             ; SEND ASCII HEX VALUES
3058   1245             ;----------------------
3059   1245             ;
3060   1245             ; OUTPUT THE 4 BYTE, WRDOUT
3061   1245             ; THE 2 BYTE, BYTOUT
3062   1245             ; OR THE SINGLE BYTE, NYBOUT
3063   1245             ; ASCII STRING AT HL TO THE SERIAL PORT
3064   1245             ;
3065   1245 CD 48 12    WRDOUT	CALL	BYTOUT
3066   1248 CD 4B 12    BYTOUT	CALL	NYBOUT
3067   124B 7E          NYBOUT	LD	A,(HL)
3068   124C CD E0 0F    	CALL	OUTCH
3069   124F 23          	INC	HL
3070   1250 C9          	RET
3071   1251             ;----------------
3072   1251             ;CONVERT TO ASCII
3073   1251             ;----------------
3074   1251             ;
3075   1251             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3076   1251             ;
3077   1251             ;        ENTRY :  A = BINARY TO CONVERT
3078   1251             ;                  HL = CHARACTER BUFFER ADDRESS
3079   1251             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3080   1251             ;
3081   1251             ;        MODIFIES : DE
3082   1251             ;
3083   1251 7A          WRDASC	LD	A,D	;CONVERT AND
3084   1252 CD 56 12    	CALL	BYTASC	;OUTPUT D
3085   1255 7B          	LD	A,E	;THEN E
3086   1256             ;
3087   1256             ;CONVERT A BYTE TO ASCII 
3088   1256             ;
3089   1256 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3090   1257 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3091   1258 0F          	RRCA
3092   1259 0F          	RRCA
3093   125A 0F          	RRCA
3094   125B CD 5F 12    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3095   125E F1          	POP	AF	;RESTORE LOW NYBBLE
3096   125F             ;
3097   125F             ; CONVERT A NYBBLE TO ASCII
3098   125F             ;
3099   125F E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3100   1261 C6 90       	ADD	A,90H	;CONVERT TO
3101   1263 27          	DAA	;ASCII
3102   1264 CE 40       	ADC	A,40H
3103   1266 27          	DAA
3104   1267             ;
3105   1267             ; SAVE IN STRING
3106   1267             ;
3107   1267 77          INSBUF	LD	(HL),A
3108   1268 23          	INC	HL
3109   1269 C9          	RET
3110   126A             ;------------------------------------------------------
3111   126A             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3112   126A             ;------------------------------------------------------
3113   126A             ;
3114   126A             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3115   126A             ;                      INTO A STRING OF ASCII
3116   126A             ;                      ONES AND ZEROES.
3117   126A             ;
3118   126A             ;           ENTRY :  A = BINARY TO CONVERT
3119   126A             ;                   HL = CHARACTER BUFFER ADDRESS
3120   126A             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3121   126A             ;
3122   126A             ;        MODIFIES : NONE
3123   126A             ;
3124   126A C5          BITASC PUSH  BC
3125   126B 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3126   126D CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3127   126F 20 05       	JR	NZ,BTASC3
3128   1271 0E 30       	LD	C,30H	;IT'S A ZERO
3129   1273 71          BTASC2	LD	(HL),C
3130   1274 18 03       	JR	BTASC4
3131   1276 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3132   1278 71          	LD	(HL),C
3133   1279 23          BTASC4	INC	HL
3134   127A 17          	RLA
3135   127B 10 F0       	DJNZ	BTASC1	;NEXT BIT
3136   127D C1          	POP	BC
3137   127E C9          	RET
3138   127F             ;-----------------------------------------
3139   127F             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3140   127F             ;-----------------------------------------
3141   127F             ;
3142   127F             ; SENDS A ZERO TERMINATED STRING OR 
3143   127F             ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
3144   127F             ;
3145   127F             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3146   127F             ;      EXIT  : NONE
3147   127F             ;
3148   127F             ;       MODIFIES : A,B,C
3149   127F             ;
3150   127F 06 80       SNDMSG	LD	B,128	;128 CHARS MAX
3151   1281 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3152   1282 FE 00       	CP	00H	;ZERO TERMINATOR?
3153   1284 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3154   1286 CD E0 0F    	CALL	OUTCH	;TRANSMIT THE CHAR
3155   1289 23          	INC	HL
3156   128A 10 F5       	DJNZ	SDMSG1	;128 CHARS MAX!
3157   128C C9          SDMSG2	RET
3158   128D             ;----------------------
3159   128D             ; SERIAL SINGLE STEPPER
3160   128D             ;----------------------
3161   128D E1          SSSTEP	POP	HL	;GET HL BACK
3162   128E F5          	PUSH	AF	;SAVE AF FOR LATER
3163   128F 22 4D 3F    	LD	(TMPHL),HL
3164   1292 ED 53 4B 3F 	LD	(TMPDE),DE
3165   1296 ED 43 49 3F 	LD	(TMPBC),BC
3166   129A DD 22 4F 3F 	LD	(TMPIX),IX
3167   129E FD 22 51 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3168   12A2 E1          	POP	HL	;GET AF BACK
3169   12A3 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
3170   12A6 E1          	POP	HL	;GET PC RETURN ADDRESS
3171   12A7 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
3172   12AA ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3173   12AE             ;
3174   12AE CD EE 12    	CALL	DISREG	;DISPLAY REGISTERS
3175   12B1 21 00 3E    	LD	HL,BUFFER
3176   12B4 CD 7F 12    	CALL	SNDMSG
3177   12B7             ;
3178   12B7             ; SPACE KEY CONTINUES
3179   12B7             ;
3180   12B7 CD E6 0F    SSTEP3	CALL	INCH
3181   12BA 38 FB       	JR	C,SSTEP3
3182   12BC FE 20       	CP	' '	;IS IT SPACE
3183   12BE 28 0C       	JR	Z,SSTEP4
3184   12C0 FE 1B       	CP	ESC	;ESC QUITS
3185   12C2 20 F3       	JR	NZ,SSTEP3
3186   12C4             ;
3187   12C4             ; RETURN TO MONITOR
3188   12C4             ;
3189   12C4 ED 7B 14 3F 	LD	SP,(SPSAVE)	;RESTORE THE STACK POINTER
3190   12C8 FB          	EI	;RE-ENABLE INTERRUPTS
3191   12C9 C3 87 0F    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3192   12CC             ;
3193   12CC             ; RETURN TO PROGRAM
3194   12CC             ;
3195   12CC ED 7B 53 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3196   12D0 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
3197   12D3 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3198   12D4 2A 47 3F    	LD	HL,(TMPAF)
3199   12D7 E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3200   12D8 FD 2A 51 3F 	LD	IY,(TMPIY)
3201   12DC DD 2A 4F 3F 	LD	IX,(TMPIX)
3202   12E0 ED 4B 49 3F 	LD	BC,(TMPBC)
3203   12E4 ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3204   12E8 F1          	POP	AF	;RESTORE AF
3205   12E9 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
3206   12EC FB          	EI		;RE-ENABLE INTERRUPTS
3207   12ED C9          	RET		;AND RETURN TO PROGRAM
3208   12EE             ;----------------------------
3209   12EE             ; DISPLAY THE SAVED REGISTERS
3210   12EE             ;----------------------------
3211   12EE 21 64 13    DISREG	LD	HL,REGS
3212   12F1 CD 7F 12    	CALL	SNDMSG
3213   12F4             ;
3214   12F4             ; DISPLAY THE REGISTERS
3215   12F4             ;
3216   12F4 06 08       	LD	B,08H
3217   12F6 21 00 3E    	LD	HL,BUFFER
3218   12F9 DD 21 45 3F 	LD	IX,TMPPC
3219   12FD DD 7E 01    DSREG1	LD	A,(IX+1)
3220   1300 CD 56 12    	CALL	BYTASC
3221   1303 DD 7E 00    	LD	A,(IX+0)
3222   1306 CD 56 12    	CALL	BYTASC
3223   1309 DD 23       	INC	IX
3224   130B DD 23       	INC	IX
3225   130D 3E 20       	LD	A,' '
3226   130F 77          	LD	(HL),A
3227   1310 23          	INC	HL
3228   1311 10 EA       	DJNZ	DSREG1
3229   1313             ;
3230   1313             ; DISPLAY THE FLAGS
3231   1313             ;
3232   1313 3A 47 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3233   1316 CD 6A 12    	CALL	BITASC	;SHOW THEM AS BITS
3234   1319             
3235   1319 CD 3A 12    SZCRLF CALL  BCRLF
3236   131C 3E 00       	LD	A,0
3237   131E 77          	LD	(HL),A	;TERMINATE THE STRING
3238   131F C9          	RET
3239   1320             ;-----------------------------------------
3240   1320             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3241   1320             ;-----------------------------------------
3242   1320             ;
3243   1320             ;      CALL PRINTSZ
3244   1320             ;      .DB  "STRING TO PRINT",0
3245   1320             ;
3246   1320 E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3247   1321 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3248   1322 CD E0 0F    	CALL	OUTCH	;AND SEND IT
3249   1325 23          	INC	HL	;POINT TO THE NEXT
3250   1326 B7          	OR	A	;CHARACTER AND
3251   1327 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3252   1329 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3253   132A             ;
3254   132A             ; STRING CONSTANTS
3255   132A             ;
3256   132A 0D 0A 00    CRLF	.DB	CR,LF,0
3257   132D 20 53 6F 75 SIGNON	.DB	" Southern Cross Serial Monitor ",0
3257   1331 74 68 65 72 
3257   1335 6E 20 43 72 
3257   1339 6F 73 73 20 
3257   133D 53 65 72 69 
3257   1341 61 6C 20 4D 
3257   1345 6F 6E 69 74 
3257   1349 6F 72 20 00 
3258   134D 0D 0A 48 20 CMDLST	.DB	CR,LF,"H for command list",CR,LF,0
3258   1351 66 6F 72 20 
3258   1355 63 6F 6D 6D 
3258   1359 61 6E 64 20 
3258   135D 6C 69 73 74 
3258   1361 0D 0A 00 
3259   1364 0D 0A 50 43 REGS 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3259   1368 20 20 20 41 
3259   136C 46 20 20 20 
3259   1370 42 43 20 20 
3259   1374 20 44 45 20 
3259   1378 20 20 48 4C 
3259   137C 20 20 20 49 
3259   1380 58 20 20 20 
3259   1384 49 59 20 20 
3259   1388 20 53 50 20 
3259   138C 20 20 53 5A 
3259   1390 2D 48 2D 56 
3259   1394 4E 43 0D 0A 
3259   1398 00 
3260   1399 0D 0A 53 69 TOGGLE	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3260   139D 6E 67 6C 65 
3260   13A1 20 53 74 65 
3260   13A5 70 20 54 6F 
3260   13A9 67 67 6C 65 
3260   13AD 0D 0A 00 
3261   13B0 0D 0A 53 65 TXFILE	.DB	CR,LF,"Send INTEL Hex File...",0
3261   13B4 6E 64 20 49 
3261   13B8 4E 54 45 4C 
3261   13BC 20 48 65 78 
3261   13C0 20 46 69 6C 
3261   13C4 65 2E 2E 2E 
3261   13C8 00 
3262   13C9 0D 0A 46 69 FILEOK	.DB	CR,LF,"File Received OK",CR,LF,0
3262   13CD 6C 65 20 52 
3262   13D1 65 63 65 69 
3262   13D5 76 65 64 20 
3262   13D9 4F 4B 0D 0A 
3262   13DD 00 
3263   13DE 0D 0A 43 68 CSUMERR	.DB	CR,LF,"Checksum Error",CR,LF,0
3263   13E2 65 63 6B 73 
3263   13E6 75 6D 20 45 
3263   13EA 72 72 6F 72 
3263   13EE 0D 0A 00 
3264   13F1 0D 0A 42 79 BYE	.DB	CR,LF,"Bye...",CR,LF,0
3264   13F5 65 2E 2E 2E 
3264   13F9 0D 0A 00 
3265   13FC             ;
3266   13FC             ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
3267   13FC             ;
3268   13FC 1B 5B 48 1B INITSZ	.DB	27,"[H",27,"[2J",0
3268   1400 5B 32 4A 00 
3269   1404             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F16      ADRESS        3F3F      ADDKEY        0309      
ADMODE        0383      ASCHEX        07FF      ASCHX1        0805      
ADDRA         086D      ADDRB         087F      ASC2HEX       1193      
AC2HEX1       119F      AC2HEX2       11A1      AC2HEX3       11AD      
AC2HEX4       11BC      B300          0220      B1200         0080      
B2400         003F      B4800         001B      B9600         000B      
BOTRAM        2000      BUFFER        3E00      BAUD          3F25      
BLKSRT        3F2D      BLKEND        3F2F      BLKDST        3F31      
BEEP          05A6      BEEP1         05B6      BEEP2         05BD      
BEEP3         05CD      BITIME        0860      BITIM1        0865      
BLKMVE        0891      BLKMV1        08B0      BLKMV2        08B3      
BLKMV3        08C5      BLKSUM        08E7      BLKSM1        0903      
BRANCH        0925      BRNCH1        0947      BRNCH2        0952      
BCRLF         123A      BYTOUT        1248      BYTASC        1256      
BITASC        126A      BTASC1        126D      BTASC2        1273      
BTASC3        1276      BTASC4        1279      BYE           13F1      
CALMDE        3F1B      COUNT         3F2B      CONBYT        03C0      
CONVHI        03CD      CONVLO        03D1      CLRBUF        041B      
CLRBF1        0422      CHKSUM        04BA      CHKSM1        04BE      
CANCEL        0718      CANCL1        071B      CHKKEY        0AE4      
CHKKY1        0AF2      CHKKY2        0B1B      CHKKY3        0B28      
CHKKY4        0B30      CHKKY5        0B37      CHKKY6        0B45      
CHKKY7        0B47      CHKKY8        0B4C      CHKKY9        0B71      
CHKKYA        0B7F      CLKEXT        0CF9      CALKEY        0D03      
CR            000D      COLD          0F2C      CRLF          132A      
CMDLST        134D      CSUMERR       13DE      DISPLY        0002      
DATA          3F18      DISBUF        3F35      DALLAS        3F64      
DECKEY        033F      DECKY1        0342      DECKY2        034F      
DECKY3        0368      DISADD        03A2      DISBYT        03B7      
DECSTP        06C3      DECSP1        06D3      DELONE        0BF5      
DELON1        0BFE      DELON2        0C00      DSPLAY        11BF      
DPLAY1        11D0      DPLAY2        11DD      DPLAY3        11E4      
DPLINE        11F2      DLINE1        1201      DLINE2        1214      
DOT           1220      DISREG        12EE      DSREG1        12FD      
EDTKEY        0AB4      ENDKEY        0ADB      ESC           001B      
EXIT          1180      FUNTBL        3F19      FUNJMP        3F33      
FUNKEY        06F9      FUNKY1        06FD      FUNKY2        070C      
FUNLST        0725      FUNFUN        0759      FILEOK        13C9      
GETCH         3F12      GOEXEC        075D      GETBYT        07D3      
GETBT1        07DD      GETBT2        07F1      GETCHR        0FA3      
GETNYB        0FB8      GETOUT        0FD1      GOJUMP        0FEC      
GOJMP1        0FFD      HEXKEY        02D7      HEXKY1        02E2      
HEXKY2        02F0      HELP          100F      ISTACK        3E00      
INCKEY        0315      INCKY1        0318      INCKY2        0325      
INCKY3        033E      INDEXB        04CA      INDEXW        04D1      
INCSTP        06AE      INCSP1        06BE      INTELFN       0768      
INTELH        0777      INTEL1        077B      INTEL2        07A6      
INTEL4        07C1      INCH          0FE6      INTHEX        1167      
ITHEX1        1179      INBUF         1237      INSBUF        1267      
INITSZ        13FC      KEYBUF        0000      KEYTIM        3F27      
KEYDEL        3F41      KEYIN         0483      KEYREL        048D      
KEYRL1        048E      LENGTH        056D      LOSE          0B98      
LF            000A      LOOPSZ        1321      MODE          3F3D      
MAIN          0274      MAIN1         0285      MAIN2         0288      
MENLST        029A      MENU          0497      MENU1         04A5      
MENU2         04B1      MUL16         04F2      MULT          04FB      
MULT1         0501      MUSIC         0509      MOVE          08CB      
MONMENU       0F8D      MODIFY        1114      MDIFY1        1125      
MDIFY2        1160      NXTBIT        0819      NDOT          1222      
NYBOUT        124B      NYBASC        125F      ONTIM         3F3B      
OFTIM         3F3C      ONESEC        0F12      ONESC1        0F1B      
OUTSP         0FD3      OUTCH         0FE0      PORT3         0003      
PORT4         0004      PORT5         0005      PORT6         0006      
PORT7         0007      PUTCH         3F10      PAUSE         051A      
PERIOD        0555      PLAY1         096A      PLAY2         0979      
PLAY3         0988      PATERN        0E72      PRNTSZ        1320      
RAMSRT        2000      RAMEND        3BFF      REGPNT        3F43      
RST08         3F55      RST10         3F57      RST18         3F59      
RST20         3F5B      RST28         3F5D      RST38         3F5F      
RST66         3F61      RAMSUM        3F63      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          04DA      REGTBL        060E      REGNAM        064B      
REGKEY        065B      RETMON        0682      RETPGM        068C      
RXDATA        0833      RXDAT1        0835      RXDAT2        084D      
RELSQR        0BB2      RLTEST        0BC1      RLSTEP        0BC7      
RELSR1        0BCD      RELSR2        0BDE      RELSR3        0BE6      
RELSR4        0BEB      RWATCH        0E28      RWACH1        0E34      
RWACH2        0E3D      RWACH3        0E4F      REGSTR        1189      
REGS          1364      SCAN          0001      SPSAVE        3F14      
SWREG0        3F1D      SWREG1        3F1E      SWREG2        3F1F      
SWREG3        3F20      SWREG4        3F21      SWREG5        3F22      
SWREG6        3F23      SWREG7        3F24      SPTEMP        3F29      
SYSCALL       0068      SYSJMP        0100      SETDP         0388      
SEGMNT        03E0      SCAND         03F0      SCAND1        03F8      
SCAND2        0402      SCAND3        040B      SCANKEY       042A      
SCANKY1       042D      SCANKY2       0435      SCANKY3       0437      
SCANKY4       0444      SCANKY6       0461      SCANKY7       0465      
SKEYIN        0469      SKEYRL        0476      SKEYL1        0477      
STEP          050F      STEP1         0524      STEP2         052E      
STEP3         0539      SSTEP         05D0      SSTEP1        05FC      
SETREG        06D9      SDELAY        08D9      SDELY1        08DE      
SWBEEP        0997      SECRET        0A31      SECRT1        0A6E      
SECNUM        0A7D      SPLIT         0B9F      SCOPE         0C0B      
SCOPE2        0C20      SCOPE3        0C28      SCOPE4        0C37      
SCOPE5        0C3E      SCOPE6        0C45      SCOPE7        0C4C      
SCOPE8        0C53      SCOPE9        0C5C      SCOPEA        0C69      
SEED          0C8A      SKATE         0C99      SKATE1        0C9E      
SKATE2        0CA6      SKATE3        0CAF      SETCLK        0D8A      
SETCK1        0D90      SETCK2        0DBF      SETCK3        0DD3      
SETCK4        0DE1      SETCK5        0DF0      SETCK6        0DF7      
SETCK7        0E07      SETCK8        0E0E      SCBUG         0F28      
START2        0F63      START3        0F68      START4        0F73      
START5        0F7B      SSTOGL        110B      SPCBUF        1235      
SNDMSG        127F      SDMSG1        1281      SDMSG2        128C      
SSSTEP        128D      SSTEP3        12B7      SSTEP4        12CC      
SZCRLF        1319      SIGNON        132D      TOPRAM        3FFF      
TMPPC         3F45      TMPAF         3F47      TMPBC         3F49      
TMPDE         3F4B      TMPHL         3F4D      TMPIX         3F4F      
TMPIY         3F51      TMPSP         3F53      TYPE          0392      
TYPESZ        0396      TONE          0586      TONE1         0590      
TONE2         0595      TONE3         0598      TXDATA        0808      
TRACE         095C      TUNE1         09A5      TUNE2         09E5      
TIME          0CBA      TIME1         0CD2      TIMKEY        0CEC      
TXCRLF        0FD9      TOGGLE        1399      TXFILE        13B0      
UPDATE        0369      UPDBUF        0D12      UPDBF1        0D18      
UPDBF2        0D3A      UPDBF3        0D5E      UPDBF4        0D70      
UPDBF5        0D89      VARBLS        3F00      VARIDX        3F00      
VERS          038E      VERSSZ        039D      WIN           0B8F      
WWATCH        0EB2      WWACH1        0ECC      WWACH2        0ECE      
WWACH3        0EE9      WWACH4        0EEC      WWACH5        0EEE      
WWACH6        0EFF      WARM          0F87      WRDOUT        1245      
WRDASC        1251      

tasm: Number of errors = 0
