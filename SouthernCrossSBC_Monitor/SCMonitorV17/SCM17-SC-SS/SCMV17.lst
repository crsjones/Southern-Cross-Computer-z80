0001   0000             ;--------------------------------------------
0002   0000             ; S O U T H E R N   C R O S S   M O N I T O R
0003   0000             ;--------------------------------------------
0004   0000             ;
0005   0000             ; WRITTEN BY CRAIG R. S. JONES
0006   0000             ; MELBOURNE, AUSTRALIA.
0007   0000             ; 
0008   0000             ; MUSIC AND SOUND CODE FROM
0009   0000             ; TALKING ELECTRONICS TEC-1 MONITOR, MON-1
0010   0000             ; BY JOHN HARDY AND KEN STONE
0011   0000             ;     
0012   0000             ; 16 BIT MULTIPLY FROM ZAKS 'PROGRAMMING THE Z80'
0013   0000             ;
0014   0000             ; VERSION : 1.2  01/93  INITIAL RELEASE
0015   0000             ; VERSION : 1.21  7/93  CORRECTED RELAY BOARD TEST CODE
0016   0000             ;
0017   0000             ; Version 1.3  02/2003  ADDED SOFTWARE SCANNED KEYBOARD (UNRELEASED)
0018   0000             ; Version 1.4  03/2021  MADE INTELH A SYSTEM CALL, REMOVED CANCEL FUNCTIONALITY FROM RXDATA
0019   0000             ;
0020   0000             ; Version 1.5  06/2021  ADDED SBUG SERIAL MONITOR
0021   0000             ;                       ADDED HELP FOR SBUG COMMANDS
0022   0000             ;                       ADDED SBUG ROUTINES TO SYSTEM CALLS
0023   0000             ;                       MOVED THE STACK DOWN TO 3E00H TO RESERVE SOME MORE ROOM FOR MONITOR VARIABLES  
0024   0000             ;                       ADDED INITIALISATION CODE FOR KEYTIM
0025   0000             ; VERSION 1.6  09/2021  CONDITIONAL ASSEMBLY ALLOWS FOR TARGET TO BE TEC-1F OR SOUTHERN CROSS
0026   0000             ; VERSION 1.7  11/2022  CONDITIONAL ASSEMBLY TARGETS TEC-1F, SOUTHERN CROSS, HARDWARE AND SOFTWARE KEYBOARDS
0027   0000             ;
0028   0000             ;THE TARGET IS THE TEC-1F ELSE SC
0029   0000             ;#DEFINE TEC-1F
0030   0000             ; USE 74C923 KEYBOARD ENCODER ELSE USE SOFTWARE SCANNING
0031   0000             ;#DEFINE 74C923
0032   0000             ;
0033   0000             ; I/O PORT ADDRESSES
0034   0000             ;
0035   0000~            #IFDEF TEC-1F
0036   0000~            KEYBUF	.EQU	00H	;MM74C923N KEYBOARD ENCODER
0037   0000~            SCAN	.EQU	01H	;DISPLAY SCAN LATCH
0038   0000~            DISPLY	.EQU	02H	;DISPLAY LATCH
0039   0000~            PORT3	.EQU	03H	;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0040   0000~            PORT4	.EQU	04H	;ST4 (8X8), LCD 'E' (DAT BOARD)
0041   0000~            PORT5	.EQU	05H
0042   0000~            PORT6	.EQU	06H
0043   0000~            PORT7	.EQU	07H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0044   0000             #ELSE
0045   0000             IO0	.EQU	80H	;IO PORT 0
0046   0000             IO1	.EQU	81H	;IO PORT 1
0047   0000             IO2	.EQU	82H	;IO PORT 2
0048   0000             IO3	.EQU	83H	;IO PORT 3
0049   0000             DISPLY	.EQU	84H	;DISPLAY LATCH
0050   0000             SCAN	.EQU	85H	;DISPLAY SCAN LATCH
0051   0000             KEYBUF	.EQU	86H	;KEYBOARD BUFFER
0052   0000             IO7	.EQU	87H	;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0053   0000             #ENDIF
0054   0000             ;
0055   0000             ; BAUD RATE CONSTANTS
0056   0000             ;
0057   0000             B300	.EQU	0220H	;300 BAUD
0058   0000             B1200	.EQU	0080H	;1200 BAUD
0059   0000             B2400	.EQU	003FH	;2400 BAUD
0060   0000             B4800	.EQU	001BH	;4800 BAUD
0061   0000             B9600	.EQU	000BH	;9600 BAUD
0062   0000             ;
0063   0000             ;---------------
0064   0000             ; RAM MEMORY MAP
0065   0000             ;---------------
0066   0000             BOTRAM	.EQU	2000H	;BOTTOM OF SRAM
0067   0000             TOPRAM	.EQU	3FFFH	;TOP OF SRAM
0068   0000             ;
0069   0000             VARBLS	.EQU	TOPRAM-0FFH	;MONITOR VARIABLES
0070   0000             BUFFER	.EQU	TOPRAM-01FFH	;GENERAL PURPOSE BUFFER AREA
0071   0000             ISTACK	.EQU	BUFFER	;INITIAL MONITOR STACK
0072   0000             
0073   0000             RAMSRT	.EQU	BOTRAM	;START OF USER RAM
0074   0000             RAMEND	.EQU	TOPRAM-0400H	;END OF USER RAM
0075   0000             
0076   0000             ;-------------------------
0077   0000             ; MONITOR GLOBAL VARIABLES
0078   0000             ;-------------------------
0079   0000             ;
0080   3F00             	.ORG	VARBLS
0081   3F00             ;
0082   3F00             ;SERIAL MONITOR VARIABLES
0083   3F00             ;
0084   3F00             VARIDX	.BLOCK	16	;RESERVE SOME SPACE FOR INDEXED VARIABLES (SEE INTELH)
0085   3F10             PUTCH	.BLOCK	2	;OUTPUT A CHARACTER TO SERIAL
0086   3F12             GETCH	.BLOCK	2	;WAIT FOR A CHARACTER FROM SERIAL
0087   3F14             SPSAVE	.BLOCK	2	;SAVE THE STACK POINTER
0088   3F16             ADDR	.BLOCK	2	;THE ADDRESS
0089   3F18             DATA	.BLOCK	1	;THE DATA
0090   3F19             ;
0091   3F19             FUNTBL	.BLOCK	 2	;FN TABLE ADDRESS
0092   3F1B             ;
0093   3F1B             ; DALLAS SMARTWATCH REGISTERS
0094   3F1B             ;
0095   3F1B             CALMDE	.BLOCK	2	;CALENDAR MODE
0096   3F1D             SWREG0	.BLOCK	1	;10THS, 100THS
0097   3F1E             SWREG1	.BLOCK	1	;SECONDS
0098   3F1F             SWREG2	.BLOCK	1	;MINUTES
0099   3F20             SWREG3	.BLOCK	1	;HOURS
0100   3F21             SWREG4	.BLOCK	1	;DAY
0101   3F22             SWREG5	.BLOCK	1	;DATE
0102   3F23             SWREG6	.BLOCK	1	;MONTH
0103   3F24             SWREG7	.BLOCK	1	;YEAR
0104   3F25             ;
0105   3F25             BAUD	.BLOCK	2	;BAUD RATE
0106   3F27             KEYTIM	.BLOCK	2	;BEEP DELAY
0107   3F29             SPTEMP	.BLOCK	2	;TEMP SYSTEM CALL SP
0108   3F2B             ;
0109   3F2B             ; BLOCK FUNCTIONS
0110   3F2B             ;
0111   3F2B             COUNT	.BLOCK	2	;NUMBER OF BYTES TO MOVE
0112   3F2D             BLKSRT	.BLOCK	2	;BLOCK START ADDRESS
0113   3F2F             BLKEND	.BLOCK	2	;BLOCK END ADDRESS
0114   3F31             BLKDST	.BLOCK	2	;DESTINATION ADDRESS
0115   3F33             ;
0116   3F33             FUNJMP	.BLOCK	2	;FN FN KEY JUMP ADDRESS
0117   3F35             ;
0118   3F35             ; DISPLAY SCAN REGISTERS
0119   3F35             ;
0120   3F35             DISBUF	.BLOCK	6	;DISPLAY BUFFER
0121   3F3B             ONTIM	.BLOCK	1	;DISPLAY SCAN ON TIME
0122   3F3C             OFTIM	.BLOCK	1	;DISPLAY SCAN OFF TIME
0123   3F3D             ;
0124   3F3D             ; MONITOR VARIABLES
0125   3F3D             ;
0126   3F3D             MODE	.BLOCK	2	;DISPLAY MODE
0127   3F3F             ADRESS	.BLOCK	2	;USER ADDRESS
0128   3F41             KEYDEL	.BLOCK	2	;AUTO INCREMENT DELAY
0129   3F43             ;
0130   3F43             ; TEMPORARY REGISTER STORAGE
0131   3F43             ;
0132   3F43             REGPNT	.BLOCK	2	;REGISTER POINTER
0133   3F45             TMPPC	.BLOCK	2	;PROGRAM COUNTER
0134   3F47             TMPAF	.BLOCK	2	;ACCUMULATOR,FLAG
0135   3F49             TMPBC	.BLOCK	2	;BC REGISTER PAIR
0136   3F4B             TMPDE	.BLOCK	2	;DE REGISTER PAIR
0137   3F4D             TMPHL	.BLOCK	2	;HL REGISTER PAIR
0138   3F4F             TMPIX	.BLOCK	2	;INDEX REGISTER X
0139   3F51             TMPIY	.BLOCK	2	;INDEX REGISTER Y
0140   3F53             TMPSP	.BLOCK	2	;STACK POINTER
0141   3F55             ;
0142   3F55             ; RESTART JUMP TABLE AND HARWARE TEST
0143   3F55             ;
0144   3F55             RST08	.BLOCK	2	;RESTART 08H JUMP
0145   3F57             RST10	.BLOCK	2	;RESTART 10H JUMP
0146   3F59             RST18	.BLOCK	2	;RESTART 18H JUMP
0147   3F5B             RST20	.BLOCK	2	;RESTART 20H JUMP
0148   3F5D             RST28	.BLOCK	2	;RESTART 28H JUMP
0149   3F5F             RST38	.BLOCK	2	;INT INTERRUPT JUMP
0150   3F61             RST66	.BLOCK	2	;NMI INTERRUPT JUMP
0151   3F63             RAMSUM	.BLOCK	1	;USER RAM CHECKSUM
0152   3F64             DALLAS	.BLOCK	1	;RAM TEST LOCATION
0153   3F65             ;----------------
0154   3F65             ; RESTART VECTORS
0155   3F65             ;----------------
0156   3F65             ;
0157   3F65             ;  RESTART 00H - RST 0
0158   3F65             ;WHEN POWER IS APPLIED TO THE SOUTHERN CROSS
0159   3F65             ;THE Z80 STARTS EXECUTING INSTRUCTIONS FROM HERE
0160   3F65             ;
0161   0000             	.ORG	0000H
0162   0000 C3 00 02    RSTVEC	JP	RESET
0163   0003             ;
0164   0003             ; RESTART 08H - RST 1
0165   0003             ;
0166   0008             	.ORG	0008H
0167   0008 E5          	PUSH	HL
0168   0009 2A 55 3F    	LD	HL,(RST08)
0169   000C E9          	JP	(HL)
0170   000D             ;
0171   000D             ; RESTART 10H - RST 2
0172   000D             ;
0173   0010             	.ORG	0010H
0174   0010 E5          	PUSH	HL
0175   0011 2A 57 3F    	LD	HL,(RST10)
0176   0014 E9          	JP	(HL)
0177   0015             ;
0178   0015             ; RESTART 18H - RST 3
0179   0015             ;
0180   0018             	.ORG	0018H
0181   0018 E5          	PUSH	HL
0182   0019 2A 59 3F    	LD	HL,(RST18)
0183   001C E9          	JP	(HL)
0184   001D             ;
0185   001D             ; RESTART 20H - RST 4
0186   001D             ;
0187   0020             	.ORG	0020H
0188   0020 E5          	PUSH	HL
0189   0021 2A 5B 3F    	LD	HL,(RST20)
0190   0024 E9          	JP	(HL)
0191   0025             ;
0192   0025             ; RESTART 28H - RST 5
0193   0025             ;
0194   0028             	.ORG	0028H
0195   0028 E5          	PUSH	HL
0196   0029 2A 5D 3F    	LD	HL,(RST28)
0197   002C E9          	JP	(HL)
0198   002D             ;
0199   002D             ; RESTART 30H - RST 6 - MONITOR ROUTINES ENTRY POINT
0200   002D             ;
0201   0030             	.ORG	0030H
0202   0030 C3 6B 00    RST30	JP	SYSCALL
0203   0033             ;
0204   0033             ; RESTART 38H - RST 7     BREAKPOINT HANDLER
0205   0033             ;IF INTERRUPTS ARE ENABLED,AND AN
0206   0033             ;INT OCCURS- FURTHER INTERRUPTS
0207   0033             ;ARE DISABLED, THE PROGRAM COUNTER
0208   0033             ;IS PUSHED ONTO THE STACK, AND EXECUTION
0209   0033             ;STARTS HERE
0210   0033             ;
0211   0038             	.ORG	0038H
0212   0038 E5          	PUSH	HL
0213   0039 2A 5F 3F    	LD	HL,(RST38)
0214   003C E9          	JP	(HL)
0215   003D             ;
0216   003D             ; RESTART 66H NMI VECTOR
0217   003D             ; SAME AS ABOVE BUT NMI CANNOT BE DISABLED.
0218   003D             ;
0219   0066             	.ORG	0066H
0220   0066             ; THE TEC-1F HAS NMI CONNECTED TO THE INVERTED
0221   0066             ; 74C923 KEYBOARD ENCODER DA SO JUST RETURN
0222   0066~            #IFDEF TEC-1F
0223   0066~                RETI
0224   0066             #ELSE
0225   0066 E5          	PUSH	HL
0226   0067 2A 61 3F    	LD	HL,(RST66)
0227   006A E9          	JP	(HL)
0228   006B             #ENDIF
0229   006B             ;--------------------
0230   006B             ; SYSTEM CALL HANDLER
0231   006B             ;--------------------
0232   006B             ;CALLS TO BASIC I/O AND OTHER ROUTINES
0233   006B             ;WITHIN THE MONITOR HAVE BEEN ASSIGNED
0234   006B             ;SYSTEM CALL NUMBERS TO AVOID RE-WRITING
0235   006B             ;USER SOFTWARE IF MONITOR ABSOLUTE ADDRESSES
0236   006B             ;CHANGE IN SUBSEQUENT MONITORS
0237   006B             ;
0238   006B             ;ENTRY : C = CALL NUMBER
0239   006B             ;SEE ROUTINES FOR ENTRY AND EXIT
0240   006B             ;PARAMETERS
0241   006B             ;
0242   006B 3B          SYSCALL	DEC	SP
0243   006C 3B          	DEC	SP	;LEAVE SPACE FOR SYSCALL
0244   006D ED 73 29 3F 	LD	(SPTEMP),SP	;POINTS TO SYSCALL LO
0245   0071 F5          	PUSH	AF
0246   0072 D5          	PUSH	DE
0247   0073 E5          	PUSH	HL	;SAVE REGISTERS
0248   0074 79          	LD	A,C	;GET CALL NUMBER
0249   0075 E6 7F       	AND	127	;ENSURE IN LIMITS
0250   0077 CB 27       	SLA	A	;MULTIPLY BY TWO
0251   0079 26 01       	LD	H,1	;LOAD JUMP TABLE HIGH BYTE
0252   007B 6F          	LD	L,A	;LOAD INDEX
0253   007C 7E          	LD	A,(HL)
0254   007D 23          	INC	HL
0255   007E 56          	LD	D,(HL)	;GET JUMP ADDRESS
0256   007F 2A 29 3F    	LD	HL,(SPTEMP)	;POINT TO SYSCALL LO
0257   0082 77          	LD	(HL),A	;PUT SYSCALL LO ON STACK
0258   0083 23          	INC	HL
0259   0084 7A          	LD	A,D
0260   0085 77          	LD	(HL),A	;PUT SYSCALL HI ON STACK
0261   0086 E1          	POP	HL
0262   0087 D1          	POP	DE
0263   0088 F1          	POP	AF	;RESTORE REGISTERS
0264   0089 C9          	RET		;JUMPS TO SYSTEM CALL
0265   008A             ;-----------------------
0266   008A             ; SYSTEM CALL JUMP TABLE
0267   008A             ;-----------------------
0268   0100             	.ORG	0100H
0269   0100 74 02 8E 03 SYSJMP	.DW	MAIN,VERS
0270   0104 A0 03 B5 03 	.DW	DISADD,DISBYT,CLRBUF,SCAND
0270   0108 19 04 EE 03 
0271   010C BE 03 CB 03 	.DW	CONBYT,CONVHI,CONVLO
0271   0110 CF 03 
0272   0112 67 04 74 04 	.DW	SKEYIN,SKEYRL,KEYIN,KEYREL
0272   0116 81 04 8B 04 
0273   011A 95 04 B8 04 	.DW	MENU,CHKSUM
0274   011E F0 04 D8 04 	.DW	MUL16,RAND
0275   0122 C8 04 CF 04 	.DW	INDEXB,INDEXW
0276   0126 07 05 84 05 	.DW	MUSIC,TONE,BEEP
0276   012A A4 05 
0277   012C 97 0C       	.DW	SKATE
0278   012E 06 08 31 08 	.DW	TXDATA,RXDATA,ASCHEX
0278   0132 FD 07 
0279   0134 B0 0E 26 0E 	.DW	WWATCH,RWATCH,ONESEC
0279   0138 10 0F 
0280   013A C5 0B F3 0B 	.DW	RLSTEP,DELONE
0281   013E 28 04 75 07 	.DW	SCANKEY,INTELH
0282   0142 9D 0B       	.DW	SPLIT
0283   0144 7D 12 68 12 	.DW	SNDMSG,BITASC
0284   0148 4F 12 54 12 	.DW	WRDASC,BYTASC,NYBASC
0284   014C 5D 12 
0285   014E 92 03 1E 13 	.DW	TYPE,PRNTSZ
0286   0152             ;------------------------------
0287   0152             ; POWER UP RESET / MANUAL RESET
0288   0152             ;------------------------------
0289   0200             	.ORG	0200H
0290   0200             ;
0291   0200             ; WAIT FOR SMART SOCKET
0292   0200             ; TO RECOVER FROM POWER DOWN
0293   0200             ;
0294   0200 3E 55       RESET	LD	A,55H
0295   0202 32 64 3F    	LD	(DALLAS),A	;WRITE TO RAM
0296   0205 AF          	XOR	A
0297   0206 D3 84       	OUT	(DISPLY),A	;WRITE NOTHING TO
0298   0208 D3 85       	OUT	(SCAN),A	;ON BOARD I/O
0299   020A DB 86       	IN	A,(KEYBUF)	;TO HELP DEBUGGING
0300   020C 3A 64 3F    	LD	A,(DALLAS)	;READ FROM RAM
0301   020F FE 55       	CP	55H	;IS IT READY?
0302   0211 C2 00 02    	JP	NZ,RESET	;KEEP TRYING
0303   0214             ;
0304   0214             ; LOAD STACK POINTER
0305   0214             ;
0306   0214 31 00 3E    RESET1	LD	SP,ISTACK	;INITIALISE MONITOR STACK POINTER
0307   0217             ;
0308   0217             ; SET UP RESTART VECTORS
0309   0217             ;
0310   0217 21 14 02    	LD	HL,RESET1
0311   021A 22 55 3F    	LD	(RST08),HL
0312   021D 22 57 3F    	LD	(RST10),HL
0313   0220 22 59 3F    	LD	(RST18),HL
0314   0223 22 5B 3F    	LD	(RST20),HL
0315   0226 22 5D 3F    	LD	(RST28),HL
0316   0229 22 61 3F    	LD	(RST66),HL	;NMI INTERRUPT
0317   022C 21 CE 05    	LD	HL,SSTEP
0318   022F 22 5F 3F    	LD	(RST38),HL	;SINGLE STEPPER
0319   0232             ;
0320   0232             ; SET INTERRUPT MODE 1 - USE THE AUTOMATED INTERRUPT
0321   0232             ;
0322   0232 ED 56       	IM	1
0323   0234 FB          	EI		;ENABLE INTERRUPTS
0324   0235             ;
0325   0235             ; PERFORM CHECKSUM ON USER RAM
0326   0235             ;
0327   0235 21 00 20    	LD	HL,RAMSRT	;START OF USER RAM
0328   0238 11 FF 3B    	LD	DE,RAMEND	;END OF USER RAM
0329   023B CD B8 04    	CALL	CHKSUM
0330   023E 32 63 3F    	LD	(RAMSUM),A	;RAM CHECKSUM
0331   0241             ;
0332   0241             ; SET UP DEFAULT VARIABLES
0333   0241             ;
0334   0241 21 23 07    	LD	HL,FUNLST
0335   0244 22 19 3F    	LD	(FUNTBL),HL	;FUNCTION KEY TABLE
0336   0247             ;
0337   0247             ; PRESS THE FUNCTION KEY TWICE TO JUMP INTO THE SERIAL MONITOR
0338   0247             ;
0339   0247 21 26 0F    	LD	HL,SCBUG	;JUMP TO SERIAL MONITOR
0340   024A 22 33 3F    	LD	(FUNJMP),HL	;FN FN JUMP
0341   024D 3E 00       	LD	A,00H
0342   024F 32 43 3F    	LD	(REGPNT),A	;INIT SINGLE STEPPER
0343   0252 21 1B 00    	LD	HL,B4800
0344   0255 22 25 3F    	LD	(BAUD),HL	;DEFAULT SERIAL=4800 BAUD
0345   0258 21 00 01    	LD	HL,0100H
0346   025B 22 41 3F    	LD	(KEYDEL),HL	;AUTO-INC/DEC DELAY
0347   025E 21 00 10    	LD	HL,1000H
0348   0261 22 27 3F    	LD	(KEYTIM),HL	;DELAY TIME INSTEAD OF A BEEP
0349   0264~            #IFDEF 74C923
0350   0264~            	LD	A,20H
0351   0264             #ELSE
0352   0264 3E 08       	LD	A,08H
0353   0266             #ENDIF
0354   0266 32 3C 3F    	LD	(OFTIM),A	;DISPLAY OFF TIME
0355   0269 CD A4 05    	CALL	BEEP
0356   026C CD A4 05    	CALL	BEEP
0357   026F~            #IFDEF 74C923
0358   026F~            	LD	A,08H
0359   026F             #ELSE
0360   026F 3E 10       	LD	A,10H
0361   0271             #ENDIF
0362   0271 32 3B 3F    	LD	(ONTIM),A	;DISPLAY ON TIME FOR KEYBOARD ENCODER
0363   0274             ;-----------------
0364   0274             ; SET UP MAIN LOOP
0365   0274             ;-----------------
0366   0274 31 00 3E    MAIN	LD	SP,ISTACK	;INITIALISE/RESET STACK
0367   0277 21 00 20    	LD	HL,RAMSRT
0368   027A 22 3F 3F    	LD	(ADRESS),HL	;DEFAULT ADDRESS
0369   027D 3A 3D 3F    	LD	A,(MODE)
0370   0280 F6 80       	OR	80H	;START OFF IN DATA MODE
0371   0282 32 3D 3F    	LD	(MODE),A
0372   0285             ;
0373   0285             ; SCAN THE DISPLAYS UNTIL A KEY IS PRESSED
0374   0285             ;
0375   0285 CD 69 03    MAIN1	CALL	UPDATE
0376   0288 CD 67 04    MAIN2	CALL	SKEYIN	;WAIT FOR A KEY
0377   028B 21 9A 02    	LD	HL,MENLST	;USE THE MENU HANDLER
0378   028E CD 95 04    	CALL	MENU	;ROUTINE FOR EACH KEY
0379   0291 CD 69 03    	CALL	UPDATE	;UPDATE BUFFER AND
0380   0294 CD 74 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
0381   0297 C3 88 02    	JP	MAIN2
0382   029A             ;
0383   029A             ; MAIN MENU KEY TABLE
0384   029A             ;
0385   029A 14          MENLST	.DB	20
0386   029B 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
0386   029F 04 05 06 07 
0387   02A3 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
0387   02A7 0C 0D 0E 0F 
0388   02AB 10 11 12 13 	.DB	10H,11H,12H,13H
0389   02AF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0389   02B3 D7 02 D7 02 
0390   02B7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0390   02BB D7 02 D7 02 
0391   02BF D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0391   02C3 D7 02 D7 02 
0392   02C7 D7 02 D7 02 	.DW	HEXKEY,HEXKEY,HEXKEY,HEXKEY
0392   02CB D7 02 D7 02 
0393   02CF~            #IFDEF TEC-1F
0394   02CF~            	.DW	INCKEY,DECKEY,FUNKEY,ADDKEY	;TEC KEYS    +  -  GO  AD
0395   02CF             #ELSE
0396   02CF F7 06 09 03 	.DW	FUNKEY,ADDKEY,INCKEY,DECKEY	;SC-1 KEYS  FN  AD  +  -
0396   02D3 15 03 3F 03 
0397   02D7             #ENDIF
0398   02D7             ;---------------------------------------------------
0399   02D7             ; ENTER HEX KEY AS LEAST SIGNIFICANT ADDRESS OR DATA
0400   02D7             ;---------------------------------------------------
0401   02D7 CD A4 05    HEXKEY	CALL	BEEP
0402   02DA 21 3D 3F    	LD	HL,MODE
0403   02DD CB 7E       	BIT	7,(HL)	;ADDR OR DATA MODE?
0404   02DF CA F0 02    	JP	Z,HEXKY2	;IN ADDR MODE
0405   02E2             ;
0406   02E2             ; IN DATA MODE
0407   02E2             ;
0408   02E2 2A 3F 3F    HEXKY1	LD	HL,(ADRESS)
0409   02E5 CB 26       	SLA	(HL)	;FROM THE CURRENT
0410   02E7 CB 26       	SLA	(HL)	;ADDRESS,MOVE THE
0411   02E9 CB 26       	SLA	(HL)	;LSN TO THE MSN.
0412   02EB CB 26       	SLA	(HL)	;PUT THE KEY IN
0413   02ED B6          	OR	(HL)	;THE NEW DATA BACK AT
0414   02EE 77          	LD	(HL),A	;THE CURRENT ADDRESS
0415   02EF C9          	RET
0416   02F0             ;
0417   02F0             ; IN ADDRESS MODE
0418   02F0             ;
0419   02F0 2A 3F 3F    HEXKY2	LD	HL,(ADRESS)
0420   02F3 CB 25       	SLA	L	;CURRENT ADDRESS
0421   02F5 CB 14       	RL	H	;AND DO A 16 BIT
0422   02F7 CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
0423   02F9 CB 14       	RL	H	;TO MAKE  ROOM
0424   02FB CB 25       	SLA	L	;FOR THE NEW KEY
0425   02FD CB 14       	RL	H
0426   02FF CB 25       	SLA	L
0427   0301 CB 14       	RL	H
0428   0303 B5          	OR	L	;IT IN THE LEAST
0429   0304 6F          	LD	L,A	;SIGNIFICANT NYBBLE
0430   0305 22 3F 3F    	LD	(ADRESS),HL	;SAVE CURRENT ADDRESS
0431   0308 C9          	RET
0432   0309             ;-------------
0433   0309             ; CHANGE MODES
0434   0309             ;-------------
0435   0309 CD A4 05    ADDKEY	CALL	BEEP
0436   030C 3A 3D 3F    	LD	A,(MODE)
0437   030F EE 80       	XOR	80H	;TOGGLE MODE
0438   0311 32 3D 3F    	LD	(MODE),A
0439   0314 C9          	RET
0440   0315             ;------------------
0441   0315             ; INCREMENT ADDRESS
0442   0315             ;------------------
0443   0315 CD A4 05    INCKEY	CALL	BEEP
0444   0318 2A 3F 3F    INCKY1	LD	HL,(ADRESS)
0445   031B 23          	INC	HL	;INC ADDRESS
0446   031C 22 3F 3F    	LD	(ADRESS),HL
0447   031F CD 69 03    	CALL	UPDATE
0448   0322 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0449   0325 CD EE 03    INCKY2	CALL	SCAND
0450   0328 CD 28 04    	CALL	SCANKEY
0451   032B CB 6F       	BIT	5,A	;RETURN IF
0452   032D 28 0F       	JR	Z,INCKY3	; KEY RELEASED
0453   032F~            #IFDEF	TEC-1F
0454   032F~            	CP	30H	;TEC-1F '+'
0455   032F             #ELSE
0456   032F FE 32       	CP	32H	;SC '+'
0457   0331             #ENDIF
0458   0331 20 0B       	JR	NZ,INCKY3	;NOT '+' KEY
0459   0333 11 01 00    	LD	DE,0001H
0460   0336 ED 52       	SBC	HL,DE
0461   0338 D2 25 03    	JP	NC,INCKY2	;SCAN DISPLAY FOR KEYDEL
0462   033B C3 18 03    	JP	INCKY1	;INC ADDRESS
0463   033E C9          INCKY3	RET
0464   033F             ;------------------
0465   033F             ; DECREMENT ADDRESS
0466   033F             ;------------------
0467   033F CD A4 05    DECKEY	CALL	BEEP
0468   0342 2A 3F 3F    DECKY1	LD	HL,(ADRESS)
0469   0345 2B          	DEC	HL	;DEC ADDRESS
0470   0346 22 3F 3F    	LD	(ADRESS),HL
0471   0349 CD 69 03    	CALL	UPDATE
0472   034C 2A 41 3F    	LD	HL,(KEYDEL)	;AUTO REPEAT DELAY
0473   034F CD EE 03    DECKY2	CALL	SCAND
0474   0352 CD 28 04    	CALL	SCANKEY
0475   0355 CB 6F       	BIT	5,A	;RETURN IF
0476   0357 28 0F       	JR	Z,DECKY3	;KEY RELEASED
0477   0359~            #IFDEF  TEC-1F
0478   0359~            	CP	31H	;TEC-1F '-'
0479   0359             #ELSE
0480   0359 FE 33       	CP	33H	;SC '-'
0481   035B             #ENDIF
0482   035B 20 0B       	JR	NZ,DECKY3	;NOT '-' KEY
0483   035D 11 01 00    	LD	DE,0001H
0484   0360 ED 52       	SBC	HL,DE
0485   0362 D2 4F 03    	JP	NC,DECKY2	;SCAN DISPLAY FOR KEYDEL
0486   0365 C3 42 03    	JP	DECKY1	;INC ADDRESS 
0487   0368 C9          DECKY3	RET
0488   0369             ;-----------------------------------------
0489   0369             ; UPDATE DISPLAY BUFFER TO CURRENT ADDRESS
0490   0369             ;-----------------------------------------
0491   0369 2A 3F 3F    UPDATE	LD	HL,(ADRESS)
0492   036C CD A0 03    	CALL	DISADD	;AND DATA, PUT IN
0493   036F 7E          	LD	A,(HL)
0494   0370 CD B5 03    	CALL	DISBYT	;DISPLAY BUFFER
0495   0373             ;
0496   0373             ; IN ADDRESS OR DATA MODE?
0497   0373             ;
0498   0373 21 3D 3F    	LD	HL,MODE
0499   0376 CB 7E       	BIT	7,(HL)	;DATA OR ADDR MODE?
0500   0378 CA 83 03    	JP	Z,ADMODE	;ADDRESS MODE
0501   037B             ;
0502   037B             ; SHOW DATA MODE
0503   037B             ;
0504   037B 21 35 3F    	LD	HL,DISBUF	;SET THE DP'S
0505   037E 06 02       	LD	B,2	;IN THE DATA
0506   0380 C3 88 03    	JP	SETDP	;DISPLAY
0507   0383             ;
0508   0383             ; SHOW ADDRESS MODE
0509   0383             ;
0510   0383 21 37 3F    ADMODE	LD	HL,DISBUF+2
0511   0386 06 04       	LD	B,4	;SET THE DP'S IN THE ADDRESS DISPLAY
0512   0388             ;
0513   0388             ; SET DECIMAL POINT
0514   0388             ;
0515   0388             ;SET DP IN THE BYTE POINTED TO BY HL
0516   0388             ;
0517   0388~            #IFDEF TEC-1F
0518   0388~            SETDP	SET	4,(HL)	;SET BIT 4 FOR DP ON TEC-1F DISPLAY
0519   0388             #ELSE
0520   0388 CB FE       SETDP	SET	7,(HL)	;SET BIT 7 FOR DP ON SC-1 DISPLAY
0521   038A             #ENDIF
0522   038A 23          	INC	HL	;POINT TO NEXT BYTE
0523   038B 10 FB       	DJNZ	SETDP	;MORE BITS TO SET
0524   038D C9          	RET
0525   038E             ;---------------
0526   038E             ; VERSION NUMBER
0527   038E             ;---------------
0528   038E             ;RETURNS THE SOFTWARE VERSION NUMBER
0529   038E             ;SHOULD FUTURE MONITORS EXHIBIT DIFFERENCES
0530   038E             ;THE VERSION NUMBER CAN BE USED TO COMPENSATE
0531   038E             ;
0532   038E             ;	ENTRY : NONE
0533   038E             ; EXIT : HL = VERSION NUMBER STRING
0534   038E             ;
0535   038E 21 9B 03    VERS	LD	HL,VERSSZ
0536   0391 C9          	RET
0537   0392             ;-----------
0538   0392             ; BOARD TYPE
0539   0392             ;-----------
0540   0392             ; RETURNS THE TYPE OF BOARD THE MONITOR IS BUILT FOR
0541   0392             ; ENTRY = NONE
0542   0392             ; EXIT: HL= 'SC-1'
0543   0392             ;          'TEC-1F'
0544   0392 21 96 03    TYPE	LD	HL,TYPESZ
0545   0395 C9          	RET
0546   0396             
0547   0396~            #IFDEF TEC-1F
0548   0396~            TYPESZ	.DB	"TEC-1F",0
0549   0396             #ELSE
0550   0396 53 43 2D 31 TYPESZ	.DB	"SC-1",0
0550   039A 00 
0551   039B             #ENDIF
0552   039B 20 31 2E 37 VERSSZ	.DB	" 1.7",0
0552   039F 00 
0553   03A0             ;-------------------------
0554   03A0             ; ADDRESS > DISPLAY BUFFER
0555   03A0             ;-------------------------
0556   03A0             ;CONVERT HL TO SEVEN SEGMENT CODE
0557   03A0             ;AND PUT IN ADDRESS DISPLAY BUFFER.
0558   03A0             ;
0559   03A0             ; ENTRY : HL = ADDRESS TO BE DISPLAYED
0560   03A0             ;
0561   03A0             ; EXIT  : NO REGISTERS MODIFIED
0562   03A0             ;
0563   03A0 F5          DISADD	PUSH	AF
0564   03A1 E5          	PUSH	HL
0565   03A2 E5          	PUSH	 HL
0566   03A3 7C          	LD	A,H
0567   03A4 CD BE 03    	CALL	CONBYT
0568   03A7 22 39 3F    	LD	(DISBUF+4),HL
0569   03AA E1          	POP	HL
0570   03AB 7D          	LD	A,L
0571   03AC CD BE 03    	CALL	CONBYT
0572   03AF 22 37 3F    	LD	(DISBUF+2),HL
0573   03B2 E1          	POP	HL
0574   03B3 F1          	POP	AF
0575   03B4 C9          	RET
0576   03B5             ;---------------------------
0577   03B5             ; DATA BYTE > DISPLAY BUFFER
0578   03B5             ;---------------------------
0579   03B5             ;CONVERT THE ACC TO SEVEN SEGMENT CODE
0580   03B5             ;AND PUT IN DATA DISPLAY BUFFER.
0581   03B5             ;
0582   03B5             ; ENTRY :  A = DATA DISPLAY BYTE
0583   03B5             ;
0584   03B5             ; EXIT  : NO REGISTERS MODIFIED
0585   03B5             ;
0586   03B5 E5          DISBYT	PUSH	HL
0587   03B6 CD BE 03    	CALL	CONBYT
0588   03B9 22 35 3F    	LD	(DISBUF),HL
0589   03BC E1          	POP	HL
0590   03BD C9          	RET
0591   03BE             ;---------------------------------------
0592   03BE             ; CONVERT BYTE TO 7 SEGMENT DISPLAY CODE
0593   03BE             ;---------------------------------------
0594   03BE             ; CONVERTS BYTE IN ACC TO SEVEN SEGMENT CODE
0595   03BE             ; FOR DISPLAY
0596   03BE             ; ENTRY : A = BYTE TO BE CONVERTED
0597   03BE             ; EXIT  : H = HI NYBBLE SEVEN SEGMENT CODE
0598   03BE             ;         L = LO NYBBLE SEVEN SEGMENT CODE
0599   03BE             ;         A = NOT MODIFIED
0600   03BE F5          CONBYT	PUSH	AF
0601   03BF F5          	PUSH	AF
0602   03C0 CD CB 03    	CALL	CONVHI	;CONVERT HI NYBBLE
0603   03C3 67          	LD	H,A
0604   03C4 F1          	POP	AF
0605   03C5 CD CF 03    	CALL	CONVLO	;CONVERT LO NYBBLE
0606   03C8 6F          	LD	L,A
0607   03C9 F1          	POP	AF
0608   03CA C9          	RET
0609   03CB             ;---------------------------------------------
0610   03CB             ; HEXADECIMAL TO SEVEN SEGMENT CODE CONVERSION
0611   03CB             ;---------------------------------------------
0612   03CB             ; CONVERTS NYBBLE IN ACC TO SEVEN SEGMENT CODE
0613   03CB             ; FOR SEVEN SEGMENT DISPLAYS
0614   03CB             ; CONVHI = CONVERTS HIGH NYBBLE
0615   03CB             ; CONVLO = CONVERTS LO NYBBLE
0616   03CB             ;
0617   03CB             ; ENTRY : A = NYBBLE TO BE CONVERTED
0618   03CB             ; EXIT  : A = SEVEN SEGMENT CODE
0619   03CB             ;
0620   03CB 07          CONVHI	RLCA
0621   03CC 07          	RLCA
0622   03CD 07          	RLCA	;MOVE TO LO NYBBLE
0623   03CE 07          	RLCA	;FOR CONVERSION
0624   03CF C5          CONVLO	PUSH	BC
0625   03D0 E5          	PUSH	HL
0626   03D1 21 DE 03    	LD	HL,SEGMNT	;USE THE HEX VALUE
0627   03D4 E6 0F       	AND	0FH	;TO INDEX TO THE
0628   03D6 4F          	LD	C,A	;THE SEVEN SEGMENT
0629   03D7 06 00       	LD	B,00H	;CODE FOR THAT VALUE
0630   03D9 09          	ADD	HL,BC	;AND RETURN WITH
0631   03DA 7E          	LD	A,(HL)	;CODE IN A
0632   03DB E1          	POP	HL
0633   03DC C1          	POP	BC
0634   03DD C9          	RET
0635   03DE             ;
0636   03DE             ; HEXADECIMAL TO 7 SEGMENT DISPLAY CODE TABLE
0637   03DE             ;
0638   03DE~            #IFDEF TEC-1F
0639   03DE~            SEGMNT	.DB	0EBH,28H,0CDH,0ADH	;0,1,2,3
0640   03DE~            	.DB	2EH,0A7H,0E7H,29H	;4,5,6,7
0641   03DE~            	.DB	0EFH,2FH,6FH,0E6H	;8,9,A,B
0642   03DE~            	.DB	0C3H,0ECH,0C7H,47H	;C,D,E,F
0643   03DE             #ELSE
0644   03DE 3F 06 5B 4F SEGMNT	.DB	3FH,06H,5BH,4FH	;0,1,2,3
0645   03E2 66 6D 7D 07 	.DB	66H,6DH,7DH,07H	;4,5,6,7
0646   03E6 7F 6F 77 7C 	.DB	7FH,6FH,77H,7CH	;8,9,A,B
0647   03EA 39 5E 79 71 	.DB	39H,5EH,79H,71H	;C,D,E,F
0648   03EE             #ENDIF
0649   03EE             ;-------------
0650   03EE             ; SCAN DISPLAY
0651   03EE             ;-------------
0652   03EE             ;AS THE DISPLAYS ARE MULTIPLEXED, THE DATA FOR EACH
0653   03EE             ;DISPLAY MUST BE LATCHED INTO THE DISPLAY SEGMENT
0654   03EE             ;LATCH IN TURN AND THE CORRESPONDING BIT IN THE DISPLAY
0655   03EE             ;SCAN LATCH TURNED ON TO DISPLAY THE DATA.
0656   03EE             ;TWO SHORT DELAYS ARE USED TO ADJUST THE DUTY
0657   03EE             ;CYCLE AND HENCE DISPLAY BRIGHTNESS.
0658   03EE             ;
0659   03EE             ; ENTRY : NONE
0660   03EE             ; EXIT  : NO REGISTERS MODIFIED
0661   03EE             ;
0662   03EE F5          SCAND   PUSH    AF
0663   03EF C5          	PUSH	BC
0664   03F0 E5          	PUSH	HL	;SAVE REGISTERS
0665   03F1 21 3A 3F    	LD	HL,DISBUF+5
0666   03F4 0E 20       	LD	C,20H
0667   03F6 7E          SCAND1	LD	A,(HL)
0668   03F7 D3 84       	OUT	(DISPLY),A	;OUTPUT CHARACTER
0669   03F9 79          	LD	A,C
0670   03FA D3 85       	OUT	(SCAN),A	;TURN ON DISPLAY
0671   03FC 3A 3B 3F    	LD	A,(ONTIM)	;DO A SHORT DELAY
0672   03FF 47          	LD	B,A	;TO ADJUST ON TIME
0673   0400 10 FE       SCAND2	DJNZ	SCAND2	;OF DISPLAY
0674   0402 78          	LD	A,B	;B IS NOW CLEAR, USE
0675   0403 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0676   0405 3A 3C 3F    	LD	A,(OFTIM)	;DO A SHORT DELAY
0677   0408 47          	LD	B,A	;TO ADJUST OFF TIME
0678   0409 10 FE       SCAND3	DJNZ	SCAND3	;OF DISPLAY
0679   040B 2B          	DEC	HL	;POINT TO NEXT
0680   040C CB 09       	RRC	C	;ELEMENT IN BUFFER
0681   040E 30 E6       	JR	NC,SCAND1	;DISPLAY NEXT ELEMENT
0682   0410 78          	LD	A,B	;B IS NOW CLEAR, USE
0683   0411 D3 85       	OUT	(SCAN),A	;IT TO TURN OFF SCAN
0684   0413 D3 84       	OUT	(DISPLY),A	;AND CLEAR DISPLAY LATCH
0685   0415 E1          	POP	HL
0686   0416 C1          	POP	BC
0687   0417 F1          	POP	AF	;RESTORE REGISTERS
0688   0418 C9          	RET
0689   0419             ;---------------------
0690   0419             ; CLEAR DISPLAY BUFFER
0691   0419             ;---------------------
0692   0419 E5          CLRBUF	PUSH	HL
0693   041A C5          	PUSH	BC
0694   041B 21 35 3F    	LD	HL,DISBUF
0695   041E 06 06       	LD	B,6
0696   0420 36 00       CLRBF1	LD	(HL),00H	;PUT ZERO IN 6
0697   0422 23          	INC	HL	;LOCATIONS POINTED
0698   0423 10 FB       	DJNZ	CLRBF1	;TO BY HL
0699   0425 C1          	POP	BC
0700   0426 E1          	POP	HL
0701   0427 C9          	RET
0702   0428             ;--------------
0703   0428             ; SCAN KEYBOARD
0704   0428             ;--------------
0705   0428             ; USE DISPLAY SCAN DRIVERS FOR COLUMNS
0706   0428             ; AND KEYBOARD BUFFER AS ROWS.
0707   0428             ; MAKE EACH DATA LINE HIGH IN TURN AND CHECK
0708   0428             ; IF EACH INDIVIDUAL PUSHBUTTON IS PRESSED.
0709   0428             ;
0710   0428             ; ENTRY : NONE
0711   0428             ; EXIT  : A = 00H IF NO KEY DETECTED
0712   0428             ;         A = DETECTED KEY WITH BIT 5 SET
0713   0428             ;             BIT 5 = KEY AVAILABLE
0714   0428 C5          SCANKEY	PUSH	BC
0715   0429 D5          	PUSH	DE	;SAVE REGISTERS
0716   042A E5          	PUSH	HL
0717   042B             ;USE THE KEYBOARD ENCODER
0718   042B~            #IFDEF 74C923
0719   042B~            #IFDEF TEC-1F
0720   042B~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0721   042B~            	AND	5FH	;STRIP UNUSED BITS
0722   042B~            	BIT	6,A	;DA LOW?
0723   042B~            	JR	Z,SCANKY1
0724   042B~            	LD	A,00H
0725   042B~            	JR	SCANKY2
0726   042B~            SCANKY1	SET	5,A	;SET DATA AVAILABLE FLAG 
0727   042B~            SCANKY2	POP	HL
0728   042B~            	POP	DE
0729   042B~            	POP	BC
0730   042B~            	RET
0731   042B~            #ELSE
0732   042B~            	IN	A,(KEYBUF)	;READ HARDWARE ENCODER
0733   042B~            	AND	3FH	;STRIP UNUSED BITS
0734   042B~            	POP	HL
0735   042B~            	POP	DE
0736   042B~            	POP	BC
0737   042B~            	RET
0738   042B~            #ENDIF
0739   042B~            
0740   042B             #ELSE
0741   042B             ;
0742   042B             ; SOFTWARE SCAN KEYBOARD
0743   042B             ;
0744   042B 3E 00       SCANKY1	LD	A,00H
0745   042D D3 84       	OUT	(DISPLY),A	;CLEAR DISPLAY LATCH
0746   042F 47          	LD	B,A		;KEY
0747   0430 57          	LD	D,A		;COUNT
0748   0431 1E 01       	LD	E,01H	;MASK
0749   0433 0E 08       SCANKY2	LD	C,08H	;SCAN
0750   0435 79          SCANKY3	LD	A,C
0751   0436 D3 85       	OUT	(SCAN),A	;OUTPUT SCAN
0752   0438 00          	NOP
0753   0439 00          	NOP
0754   043A 00          	NOP
0755   043B DB 86       	IN	A,(KEYBUF)	;READ KEY BUFFER
0756   043D A3          	AND	E	;MASK
0757   043E 28 02       	JR	Z,SCANKY4	;KEY NOT DETECTED
0758   0440 14          	INC	D
0759   0441 68          	LD	L,B		;SAVE KEY
0760   0442             ;
0761   0442             ; END OF ROWS?
0762   0442             ;
0763   0442 04          SCANKY4	INC	B	;NEXT KEY
0764   0443 CB 29       	SRA	C	;SHIFT SCAN RIGHT
0765   0445 30 EE       	JR	NC,SCANKY3	;NEXT ROW
0766   0447             ;
0767   0447             ; END OF COLUMNS?
0768   0447             ;
0769   0447 CB 23       	SLA	E	;SHIFT MASK LEFT
0770   0449 CB 6B       	BIT	5,E	;END OF KEYSCAN?
0771   044B 28 E6       	JR	Z,SCANKY2	;NEXT COLUMN
0772   044D             ;
0773   044D             ; END OF SCAN
0774   044D             ;
0775   044D 7A          	LD	A,D
0776   044E FE 00       	CP	00H
0777   0450 28 0D       	JR	Z,SCANKY6	;NO KEY PRESSED
0778   0452 FE 01       	CP	01H
0779   0454 20 D5       	JR	NZ,SCANKY1	;MORE THAN ONE KEY PRESSED
0780   0456             ;
0781   0456             ; ONE KEY DETECTED
0782   0456             ;
0783   0456 3E 00       	LD	A,00H
0784   0458 D3 85       	OUT	(SCAN),A	;CLEAR SCAN REG
0785   045A 7D          	LD	A,L		;RETURN KEY IN A
0786   045B CB EF       	SET	5,A		;SET DATA AVAILABLE FLAG
0787   045D 18 04       	JR	SCANKY7
0788   045F             ;
0789   045F             ; NO KEY
0790   045F             ;
0791   045F 3E 00       SCANKY6	LD	A,00H
0792   0461 D3 85       	OUT	(SCAN),A	;CLEAR SCAN REG
0793   0463 E1          SCANKY7	POP	HL
0794   0464 D1          	POP	DE
0795   0465 C1          	POP	BC
0796   0466 C9          	RET
0797   0467             #ENDIF
0798   0467             ;-----------------------------
0799   0467             ; SCAN DISPLAY UNTIL KEY PRESS
0800   0467             ;-----------------------------
0801   0467             ; ENTRY : NONE
0802   0467             ; EXIT  : A = KEY VALUE 00H TO 1FH
0803   0467             ;         FLAG REGISTER MODIFIED
0804   0467             ;
0805   0467 CD EE 03    SKEYIN	CALL	SCAND	;SCAN DISPLAY
0806   046A CD 28 04    	CALL	SCANKEY
0807   046D CB 6F       	BIT	5,A
0808   046F 28 F6       	JR	Z,SKEYIN	;NO KEY PRESS
0809   0471 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0810   0473 C9          	RET
0811   0474             ;-------------------------------
0812   0474             ; SCAN DISPLAY UNTIL KEY RELEASE
0813   0474             ;-------------------------------
0814   0474             ; ENTRY : NONE
0815   0474             ; EXIT  : NONE
0816   0474             ;
0817   0474 F5          SKEYRL	PUSH	AF
0818   0475 CD EE 03    SKEYL1	CALL	SCAND	;SCAN DISPLAY
0819   0478 CD 28 04    	CALL	SCANKEY
0820   047B CB 6F       	BIT	5,A
0821   047D 20 F6       	JR	NZ,SKEYL1	;KEY NOT RELEASED
0822   047F F1          	POP	AF
0823   0480 C9          	RET
0824   0481             ;-------------------
0825   0481             ; WAIT FOR KEY PRESS
0826   0481             ;-------------------
0827   0481             ; ENTRY : NONE
0828   0481             ; EXIT  : A = KEY VALUE 00H TO 1FH
0829   0481             ;         FLAG REGISTER MODIFIED
0830   0481             ;
0831   0481 CD 28 04    KEYIN	CALL	SCANKEY
0832   0484 CB 6F       	BIT	5,A
0833   0486 28 F9       	JR	Z,KEYIN	;NO KEY PRESS
0834   0488 E6 1F       	AND	1FH	;STRIP UNUSED BITS
0835   048A C9          	RET
0836   048B             ;---------------------
0837   048B             ; WAIT FOR KEY RELEASE
0838   048B             ;---------------------
0839   048B             ; ENTRY : NONE
0840   048B             ; EXIT  : NONE
0841   048B             ;
0842   048B F5          KEYREL	PUSH	AF
0843   048C CD 28 04    KEYRL1	CALL	SCANKEY
0844   048F CB 6F       	BIT	5,A
0845   0491 20 F9       	JR	NZ,KEYRL1
0846   0493 F1          	POP	AF
0847   0494 C9          	RET
0848   0495             ;-----------------
0849   0495             ; KEY MENU HANDLER
0850   0495             ;-----------------
0851   0495             ; COMPARES ACC AGAINST TABLE OF ELEMENTS,
0852   0495             ; IF FOUND JUMP TO ADDRESS CORRESPONDING TO
0853   0495             ; THAT ELEMENT, RETURNS IF ELEMENT NOT FOUND.
0854   0495             ; ENTRY :  A = ELEMENT TO LOOK FOR
0855   0495             ;         HL = POINTS TO TABLE
0856   0495             ; EXIT  :  ELEMENT NOT FOUND
0857   0495             ;           HL HOLDS ADDRESS OF LAST ELEMENT
0858   0495             ;          ELEMENT FOUND
0859   0495             ;           CONTROL PASSES TO JUMP ADDRESS WITH
0860   0495             ;          RETURN ADDRESS OF MENU CALL ON STACK
0861   0495             ;
0862   0495 F5          MENU	PUSH	AF
0863   0496 C5          	PUSH	BC
0864   0497 D5          	PUSH	DE	;SAVE REGISTERS
0865   0498 E5          	PUSH	HL	;CALCULATE ADDRESS
0866   0499 16 00       	LD	D,00H	;OF THE JUMP TABLE BY
0867   049B 5E          	LD	E,(HL)	;ADDING THE INDEX TO
0868   049C 23          	INC	HL	;THE ELEMENTS
0869   049D 19          	ADD	HL,DE	;TO THE ADDR OF THE
0870   049E 54          	LD	D,H	;TABLE
0871   049F 5D          	LD	E,L
0872   04A0 E1          	POP	HL
0873   04A1 46          	LD	B,(HL)	;GET NUMBER OF ENTRIES
0874   04A2 23          	INC	HL	;POINT TO LIST OF ENTRIES
0875   04A3 BE          MENU1	CP	(HL)	;COMPARE WITH ENTRY
0876   04A4 28 09       	JR	Z,MENU2	;FOUND VALUE IN TABLE
0877   04A6 23          	INC	HL	;NEXT ENTRY IN LIST
0878   04A7 13          	INC	DE	;NEXT ENTRY IN
0879   04A8 13          	INC	DE	;JUMP TABLE
0880   04A9 10 F8       	DJNZ	MENU1	;CHECK MORE ENTRIES
0881   04AB D1          	POP	DE
0882   04AC C1          	POP	BC
0883   04AD F1          	POP	AF
0884   04AE C9          	RET	;NOT IN TABLE
0885   04AF             ;
0886   04AF             ; FOUND ELEMENT IN THE TABLE
0887   04AF             ; PASS CONTROL TO THE JUMP HANDLER
0888   04AF             ;
0889   04AF 1A          MENU2	LD	A,(DE)	;GET THE JUMP ADDR
0890   04B0 6F          	LD	L,A	;FROM THE TABLE
0891   04B1 13          	INC	DE	;AND JUMP TO
0892   04B2 1A          	LD	A,(DE)	;THE JUMP ADDRESS
0893   04B3 67          	LD	H,A	;FOR THAT ENTRY
0894   04B4 D1          	POP	DE
0895   04B5 C1          	POP	BC
0896   04B6 F1          	POP	AF	;RESTORE REGISTERS
0897   04B7 E9          	JP	(HL)
0898   04B8             ;-------------------
0899   04B8             ; CALCULATE CHECKSUM
0900   04B8             ;-------------------
0901   04B8             ;CALCULATES CHECKSUM BETWEEN START AND END (INCLUSIVE)
0902   04B8             ;
0903   04B8             ; ENTRY : HL = START OF BLOCK TO SUM
0904   04B8             ;         DE = END OF BLOCK TO SUM
0905   04B8             ; EXIT  : A =  CHECKSUM
0906   04B8             ;         FLAG REGISTER MODIFIED
0907   04B8             ;
0908   04B8 E5          CHKSUM	PUSH	HL
0909   04B9 D5          	PUSH	DE
0910   04BA 13          	INC	DE	;END OF BLOCK+1
0911   04BB AF          	XOR	A	;CLEAR CHECKSUM
0912   04BC 86          CHKSM1	ADD	A,(HL)	;COMPUTE CHEKSUM
0913   04BD 23          	INC	HL	;POINT TO NEXT ELEMENT
0914   04BE A7          	AND	A	;SET CARRY
0915   04BF E5          	PUSH	HL
0916   04C0 ED 52       	SBC	HL,DE	;SUBTRACT
0917   04C2 E1          	POP	HL
0918   04C3 38 F7       	JR	C,CHKSM1	;MORE ELEMENTS
0919   04C5 D1          	POP	DE
0920   04C6 E1          	POP	HL
0921   04C7 C9          	RET
0922   04C8             ;--------------------------
0923   04C8             ; ACCESS BYTE LOOK UP TABLE
0924   04C8             ;--------------------------
0925   04C8             ; USE 8 BIT INDEX TO ACCESS BYTE LOOK
0926   04C8             ; UP TABLE
0927   04C8             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0928   04C8             ;         HL = ADDRESS OF LOOK UP TABLE
0929   04C8             ; EXIT : HL = ADDRESS OF ELEMENT A
0930   04C8             ;
0931   04C8 D5          INDEXB	PUSH	DE
0932   04C9 5F          	LD	E,A	;USE DE AS INDEX
0933   04CA 16 00       	LD	D,0	;TO ELEMENT IN TABLE
0934   04CC 19          	ADD	HL,DE	;BY ADDING TO HL
0935   04CD D1          	POP	DE
0936   04CE C9          	RET
0937   04CF             ;--------------------------
0938   04CF             ; ACCESS WORD LOOK UP TABLE
0939   04CF             ;--------------------------
0940   04CF             ; USE 8 BIT INDEX TO ACCESS WORD LOOK
0941   04CF             ; UP TABLE
0942   04CF             ; ENTRY :  A = NUMBER OF ELEMENT IN TABLE
0943   04CF             ;         HL = ADDRESS OF LOOK UP TABLE
0944   04CF             ; EXIT : HL = ADDRESS OF 2 BYTE ELEMENT A
0945   04CF             ;
0946   04CF D5          INDEXW	PUSH	DE
0947   04D0 5F          	LD	E,A
0948   04D1 CB 23       	SLA	E	;MULTIPLY BY TWO
0949   04D3 16 00       	LD	D,0
0950   04D5 19          	ADD	HL,DE
0951   04D6 D1          	POP	DE
0952   04D7 C9          	RET
0953   04D8             ;-------------------------------
0954   04D8             ; GENERATE A QUASI-RANDOM NUMBER
0955   04D8             ;-------------------------------
0956   04D8             ; GENERATE AN 16 BIT RANDOM NUMBER
0957   04D8             ; USING LINEAR CONGRUENTIAL METHOD.
0958   04D8             ;     Rn+1 = (aRn+c) MOD m
0959   04D8             ; REFRESH REGISTER USED FOR Rn AND c
0960   04D8             ;	ENTRY : NONE
0961   04D8             ;	EXIT  : HL = RANDOM WORD
0962   04D8             ;	NO REGISTERS MODIFIED
0963   04D8             ;
0964   04D8 F5          RAND	PUSH	AF
0965   04D9 C5          	PUSH	BC
0966   04DA D5          	PUSH	DE	;SAVE REGISTERS
0967   04DB             ;
0968   04DB             ; CALCULATE aRn
0969   04DB             ;
0970   04DB ED 5F       	LD	A,R	;MULTIPLY RANDOM NUMBER
0971   04DD 5F          	LD	E,A	;(Rn) BY
0972   04DE 16 00       	LD	D,0
0973   04E0 21 48 05    	LD	HL,0548H	;CONSTANT (a)
0974   04E3 CD F0 04    	CALL	MUL16
0975   04E6             ;
0976   04E6             ; CALCULATE aRn+c
0977   04E6             ;
0978   04E6 ED 5F       	LD	A,R	;ADD IT TO ANOTHER
0979   04E8 06 00       	LD	B,0	;READ OF THE
0980   04EA 4F          	LD	C,A	;THE REFRESH
0981   04EB 09          	ADD	HL,BC	;REGISTER (c)
0982   04EC D1          	POP	DE
0983   04ED C1          	POP	BC
0984   04EE F1          	POP	AF	;RESTORE REGISTERS
0985   04EF C9          	RET
0986   04F0             ;----------------------
0987   04F0             ; 16 BIT MULTIPLICATION
0988   04F0             ;----------------------
0989   04F0             ;16 BIT MULTIPLY
0990   04F0             ; ENTRY : HL = MULTIPLICAND (MPD)
0991   04F0             ;         DE = MULTIPLIER (MPR)
0992   04F0             ; EXIT : HL = RESULT
0993   04F0             ;FROM ZAKS 'PROGRAMMING THE Z80'
0994   04F0             ;
0995   04F0 F5          MUL16	PUSH	AF
0996   04F1 C5          	PUSH	BC
0997   04F2 4C          	LD	C,H	;MPR(H)
0998   04F3 7D          	LD	A,L	;MPR(L)
0999   04F4 06 10       	LD	B,16	;BIT COUNTER
1000   04F6 21 00 00    	LD	HL,0	;CLEAR RESULT
1001   04F9 CB 39       MULT	SRL	C	;MPR (H)
1002   04FB 1F          	RRA	;MPR (L)
1003   04FC 30 01       	JR	NC,MULT1	;TEST CARRY
1004   04FE 19          	ADD	HL,DE	;ADD MPD TO RESULT
1005   04FF EB          MULT1	EX	DE,HL
1006   0500 29          	ADD	HL,HL	;DOUBLE -SHIFT MPD LEFT
1007   0501 EB          	EX	DE,HL
1008   0502 10 F5       	DJNZ	MULT	;DONE?
1009   0504 C1          	POP	BC
1010   0505 F1          	POP	AF
1011   0506 C9          	RET
1012   0507             ; MUSIC ROUTINE
1013   0507             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1014   0507             ; MONITOR MON-1
1015   0507             ; BY JOHN HARDY AND KEN STONE
1016   0507             ;
1017   0507             ;----------------
1018   0507             ; MUSIC SEQUENCER
1019   0507             ;----------------
1020   0507             ; SEQUENCES THROUGH A TABLE OF NOTES
1021   0507             ; 1EH = REPEAT TUNE UNTIL RESET
1022   0507             ; 1FH = PLAY ONCE AND RETURN
1023   0507             ; ENTRY : HL = ADDRESS OF NOTE TABLE
1024   0507             ; EXIT : NO REGISTERS MODIFIED
1025   0507 F5          MUSIC	PUSH	AF
1026   0508 C5          	PUSH	BC
1027   0509 D5          	PUSH	DE
1028   050A E5          	PUSH	HL	;SAVE REGISTERS
1029   050B E5          	PUSH	HL
1030   050C EB          	EX	DE,HL	;GET ADDRESS OF MUSIC
1031   050D             ;
1032   050D             ; PLAY EACH NOTE IN TURN
1033   050D             ;
1034   050D 1A          STEP	LD	A,(DE)	;GET ELEMENT FROM TABLE
1035   050E E6 1F       	AND	1FH	;STRIP UNUSED BITS
1036   0510             ;
1037   0510             ; IF ELEMENT IS 00H PAUSE FOR A WHILE
1038   0510             ;
1039   0510 FE 00       	CP	00H
1040   0512 C2 22 05    	JP	NZ,STEP1
1041   0515 01 00 10    	LD	BC,1000H
1042   0518 0B          PAUSE	DEC	BC
1043   0519 78          	LD	A,B
1044   051A B1          	OR	C
1045   051B C2 18 05    	JP	NZ,PAUSE	;LOOP UNTIL DE = 0
1046   051E 13          	INC	DE	;POINT TO NEXT ELEMENT
1047   051F C3 0D 05    	JP	STEP
1048   0522             ;
1049   0522             ; IF ELEMENT IS 1EH REPEAT TUNE
1050   0522             ;
1051   0522 FE 1E       STEP1	CP	1EH
1052   0524 C2 2C 05    	JP	NZ,STEP2
1053   0527 D1          	POP	DE	;GET TABLE ADDRESS BACK
1054   0528 D5          	PUSH	DE	;SAVE IT FOR LATER
1055   0529 C3 0D 05    	JP	STEP
1056   052C             ;
1057   052C             ; IF ELEMENT IS 1FH RETURN
1058   052C             ;
1059   052C FE 1F       STEP2	CP	1FH	;END OF TUNE TABLE?
1060   052E C2 37 05    	JP	NZ,STEP3
1061   0531 E1          	POP	HL
1062   0532 E1          	POP	HL
1063   0533 D1          	POP	DE
1064   0534 C1          	POP	BC
1065   0535 F1          	POP	AF
1066   0536 C9          	RET
1067   0537             ;
1068   0537             ;NOW PLAY THE NOTE
1069   0537             ;
1070   0537 47          STEP3	LD	B,A	;SAVE ELEMENT IN B
1071   0538 21 53 05    	LD	HL,PERIOD	;POINT TO PERIOD/2 TABLE
1072   053B CD C8 04    	CALL	INDEXB	;GET PERIOD/2
1073   053E 7E          	LD	A,(HL)	;GET ELEMENT
1074   053F F5          	PUSH	AF	;SAVE FOR LATER
1075   0540 78          	LD	A,B	;GET ELEMENT BACK IN A
1076   0541 21 6B 05    	LD	HL,LENGTH	;POINT TO DURATION/2 TABLE
1077   0544 CD C8 04    	CALL	INDEXB	;GET DURATION/2
1078   0547 7E          	LD	A,(HL)	;GET ELEMENT
1079   0548 6F          	LD	L,A
1080   0549 26 00       	LD	H,0	;HL = DURATION/2
1081   054B F1          	POP	AF
1082   054C CD 84 05    	CALL	TONE	;DO NOTE ROUTINE
1083   054F 13          	INC	DE
1084   0550 C3 0D 05    	JP	STEP	;STEP TO NEXT ELEMENT
1085   0553             ;
1086   0553             ; PERIOD/2 OF NOTE
1087   0553             ;
1088   0553 8C 83 7C 75 PERIOD	.DB	8CH,83H,7CH,75H,70H,67H,62H,5CH
1088   0557 70 67 62 5C 
1089   055B 57 52 4E 48 	.DB	57H,52H,4EH,48H,45H,41H,3CH,39H
1089   055F 45 41 3C 39 
1090   0563 36 32 2F 2C 	.DB	36H,32H,2FH,2CH,2AH,27H,25H,23H
1090   0567 2A 27 25 23 
1091   056B             ;
1092   056B             ; NOTE DURATION/2
1093   056B             ;
1094   056B 19 1A 1C 1D LENGTH	.DB	19H,1AH,1CH,1DH,1EH,20H,23H,25H
1094   056F 1E 20 23 25 
1095   0573 27 29 2C 2E 	.DB	27H,29H,2CH,2EH,31H,33H,37H,3AH
1095   0577 31 33 37 3A 
1096   057B 3D 41 45 49 	.DB	3DH,41H,45H,49H,4DH,52H,57H,5CH
1096   057F 4D 52 57 5C 
1097   0583 10          	.DB	10H
1098   0584             ; TONE ROUTINE
1099   0584             ; ADAPTED FROM TALKING ELECTRONICS TEC-1
1100   0584             ; MONITOR MON-1
1101   0584             ; BY JOHN HARDY AND KEN STONE
1102   0584             ;
1103   0584             ;--------------
1104   0584             ; OUTPUT A TONE
1105   0584             ;--------------
1106   0584             ;
1107   0584             ; ENTRY : A = PERIOD/2 OF NOTE
1108   0584             ;         HL = DURATION/2 OF NOTE
1109   0584             ; EXIT NO REGISTERS MODIFIED
1110   0584 F5          TONE	PUSH	AF
1111   0585 C5          	PUSH	BC
1112   0586 D5          	PUSH	DE
1113   0587 E5          	PUSH	HL
1114   0588 11 01 00    	LD	DE,0001H
1115   058B 4F          	LD	C,A
1116   058C 29          	ADD	HL,HL	;DOUBLE DURATION
1117   058D AF          	XOR	A
1118   058E EE 80       TONE1	XOR	80H	;TOGGLE SPEAKER BIT
1119   0590 D3 85       	OUT	(SCAN),A	;OUTPUT SPEAKER BIT
1120   0592 41          	LD	B,C
1121   0593 C5          TONE2	PUSH	BC
1122   0594 06 02       	LD	B,02H
1123   0596 10 FE       TONE3	DJNZ	TONE3	;DELAY FOR PERIOD/2
1124   0598 C1          	POP	BC
1125   0599 10 F8       	DJNZ	TONE2	; DELAY FOR PERIOD/2
1126   059B ED 52       	SBC	HL,DE	;END OF NOTE?
1127   059D 20 EF       	JR	NZ,TONE1	;DO AGAIN
1128   059F E1          	POP	HL
1129   05A0 D1          	POP	DE
1130   05A1 C1          	POP	BC
1131   05A2 F1          	POP	AF
1132   05A3 C9          	RET
1133   05A4             ;---------------
1134   05A4             ; KEY ENTRY BEEP
1135   05A4             ;---------------
1136   05A4 E5          BEEP	PUSH	HL
1137   05A5 F5          	PUSH	AF
1138   05A6 21 3D 3F    	LD	HL,MODE
1139   05A9 CB 76       	BIT	6,(HL)	;BEEP ENABLED?
1140   05AB 28 0E       	JR	Z,BEEP2	;BEEP IS ENABLED
1141   05AD             ;
1142   05AD             ; DO KEYPRESS DELAY
1143   05AD             ;
1144   05AD D5          	PUSH	DE	;DO A SHORT
1145   05AE 11 01 00    	LD	DE,0001H	;DELAY TO PREVENT
1146   05B1 2A 27 3F    	LD	HL,(KEYTIM)	;RECOGNITION
1147   05B4 ED 52       BEEP1	SBC	HL,DE	;OF DOUBLE
1148   05B6 30 FC       	JR	NC,BEEP1	;KEY STROKES
1149   05B8 D1          	POP	DE
1150   05B9 18 10       	JR	BEEP3
1151   05BB             ;
1152   05BB             ; OUTPUT KEYPRESS TONES
1153   05BB             ;
1154   05BB 3E 24       BEEP2	LD	A,24H
1155   05BD 21 30 00    	LD	HL,0030H
1156   05C0 CD 84 05    	CALL	TONE	;DO FIRST TONE
1157   05C3 3E 0E       	LD	A,0EH
1158   05C5 21 50 00    	LD	HL,0050H
1159   05C8 CD 84 05    	CALL	TONE	;DO SECOND TONE
1160   05CB F1          BEEP3	POP	AF
1161   05CC E1          	POP	HL
1162   05CD C9          	RET
1163   05CE             ;----------------------------------------
1164   05CE             ; BREAKPOINT AND SINGLE STEPPING ROUTINES
1165   05CE             ;----------------------------------------
1166   05CE             ;DISPLAYS AND MODIFIES REGISTERS AFTER BREAKPOINT
1167   05CE             ; (RST 38H) OR SINGLE STEP INTERRUPT (IF HARDWARE
1168   05CE             ; ATTACHED).
1169   05CE             ;INSERT RST 38H (FFH) IN PROGRAM TO EXAMINE
1170   05CE             ; AND MODIFY REGISTERS.
1171   05CE             ;
1172   05CE E1          SSTEP	POP	HL	;GET HL BACK
1173   05CF F5          	PUSH	AF	;SAVE AF FOR LATER
1174   05D0 22 4D 3F    	LD	(TMPHL),HL
1175   05D3 ED 53 4B 3F 	LD	(TMPDE),DE
1176   05D7 ED 43 49 3F 	LD	(TMPBC),BC
1177   05DB DD 22 4F 3F 	LD	(TMPIX),IX
1178   05DF FD 22 51 3F 	LD	(TMPIY),IY	;SAVE REGISTERS
1179   05E3 E1          	POP	HL	;GET AF BACK
1180   05E4 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
1181   05E7 E1          	POP	HL	;GET PC RETURN ADDRESS
1182   05E8 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
1183   05EB ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
1184   05EF             ;
1185   05EF             ; STEP THROUGH,DISPLAY AND EDIT REGISTERS
1186   05EF             ;
1187   05EF CD A4 05    	CALL	BEEP
1188   05F2 3A 43 3F    	LD	A,(REGPNT)	;GET CURRENT REG
1189   05F5 E6 07       	AND	7	;MAKE SURE IN LIMITS
1190   05F7 32 43 3F    	LD	(REGPNT),A	;SAVE IT
1191   05FA CD D7 06    SSTEP1	CALL	SETREG	;SET UP DISPLAY BUFFER
1192   05FD CD 74 04    	CALL	SKEYRL	;WAIT FOR A KEY
1193   0600 CD 67 04    	CALL	SKEYIN	;WAIT FOR KEY RELEASE
1194   0603 21 0C 06    	LD	HL,REGTBL	;HANDLE THE KEY
1195   0606 CD 95 04    	CALL	MENU	;AND UPDATE DISPLAY
1196   0609 C3 FA 05    	JP	SSTEP1	;BEFORE RETURNING TO LOOP
1197   060C             ;
1198   060C             ; REGISTER DISPLAY KEY TABLE
1199   060C             ;
1200   060C 14          REGTBL	.DB	14H
1201   060D 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1201   0611 04 05 06 07 
1202   0615 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1202   0619 0C 0D 0E 0F 
1203   061D 10 11 12 13 	.DB	10H,11H,12H,13H
1204   0621 59 06 59 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1204   0625 59 06 59 06 
1205   0629 59 06 59 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1205   062D 59 06 59 06 
1206   0631 59 06 59 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1206   0635 59 06 59 06 
1207   0639 59 06 59 06 	.DW	REGKEY,REGKEY,REGKEY,REGKEY
1207   063D 59 06 59 06 
1208   0641~            #IFDEF TEC-1F
1209   0641~            	.DW	INCSTP,DECSTP,RETPGM,RETMON
1210   0641             #ELSE
1211   0641 80 06 8A 06 	.DW	RETMON,RETPGM,INCSTP,DECSTP
1211   0645 AC 06 C1 06 
1212   0649             #ENDIF
1213   0649             ;
1214   0649             ; REGISTER NAME CHARACTERS
1215   0649             ;
1216   0649~            #IFDEF TEC-1F
1217   0649~            REGNAM	.DW	4FC3H
1218   0649~            	.DW	6F47H,0E6C3H,0ECC7H
1219   0649~            	.DW	66C2H,286EH,28AEH
1220   0649~            	.DW	0A74FH
1221   0649             #ELSE
1222   0649 39 73       REGNAM	.DW	7339H
1223   064B 71 77 39 7C 	.DW	7771H,7C39H,5E79H
1223   064F 79 5E 
1224   0651 38 74 76 06 	.DW	7438H,0676H,066EH
1224   0655 6E 06 
1225   0657 73 6D       	.DW	6D73H
1226   0659             #ENDIF
1227   0659             ;--------------
1228   0659             ; EDIT REGISTER
1229   0659             ;--------------
1230   0659 CD A4 05    REGKEY	CALL	BEEP
1231   065C F5          	PUSH	AF	;SAVE KEY FOR LATER
1232   065D 3A 43 3F    	LD	A,(REGPNT)
1233   0660             ;
1234   0660             ; EDIT REGISTER
1235   0660             ;
1236   0660 21 45 3F    	LD	HL,TMPPC
1237   0663 CD CF 04    	CALL	INDEXW
1238   0666 4E          	LD	C,(HL)
1239   0667 23          	INC	HL
1240   0668 46          	LD	B,(HL)	;GET REG CONTENTS
1241   0669 CB 21       	SLA	C
1242   066B CB 10       	RL	B
1243   066D CB 21       	SLA	C
1244   066F CB 10       	RL	B
1245   0671 CB 21       	SLA	C
1246   0673 CB 10       	RL	B	;SHIFT REGISTER
1247   0675 CB 21       	SLA	C	;FOUR BITS
1248   0677 CB 10       	RL	B	;LEFT AND
1249   0679 F1          	POP	AF	;PUT THE KEY
1250   067A B1          	OR	C	;INTO THE LSN
1251   067B 4F          	LD	C,A	;AND PUT THE
1252   067C 70          	LD	(HL),B	;REGISTER BACK
1253   067D 2B          	DEC	HL	;WHERE IT BELONGS
1254   067E 71          	LD	(HL),C
1255   067F C9          	RET
1256   0680             ;------------------
1257   0680             ; RETURN TO MONITOR
1258   0680             ;------------------
1259   0680 CD A4 05    RETMON	CALL	BEEP
1260   0683 CD 74 04    	CALL	SKEYRL
1261   0686 FB          	EI	;ENABLE INTERRUPTS AGAIN
1262   0687 C3 74 02    	JP	MAIN
1263   068A             ;------------------
1264   068A             ; RETURN TO PROGRAM
1265   068A             ;------------------
1266   068A ED 7B 53 3F RETPGM	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
1267   068E 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
1268   0691 E5          	PUSH	HL	;ADDRESS BACK ON STACK
1269   0692 2A 47 3F    	LD	HL,(TMPAF)
1270   0695 E5          	PUSH	HL	;SAVE AF REG FOR LATER
1271   0696 FD 2A 51 3F 	LD	IY,(TMPIY)
1272   069A DD 2A 4F 3F 	LD	IX,(TMPIX)
1273   069E ED 4B 49 3F 	LD	BC,(TMPBC)
1274   06A2 ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
1275   06A6 F1          	POP	AF	;RESTORE AF
1276   06A7 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
1277   06AA FB          	EI	;ENABLE INTERRUPTS
1278   06AB C9          	RET	;AND RETURN TO PROGRAM
1279   06AC             ;----------------------
1280   06AC             ; DISPLAY NEXT REGISTER
1281   06AC             ;----------------------
1282   06AC CD A4 05    INCSTP	CALL	BEEP
1283   06AF 3A 43 3F    	LD	A,(REGPNT)
1284   06B2 FE 07       	CP	7	;END OF REG TABLE?
1285   06B4 CA BC 06    	JP	Z,INCSP1
1286   06B7 3C          	INC	A
1287   06B8 32 43 3F    	LD	(REGPNT),A
1288   06BB C9          	RET
1289   06BC AF          INCSP1	XOR	A
1290   06BD 32 43 3F    	LD	(REGPNT),A
1291   06C0 C9          	RET
1292   06C1             ;--------------------------
1293   06C1             ; DISPLAY PREVIOUS REGISTER
1294   06C1             ;--------------------------
1295   06C1 CD A4 05    DECSTP	CALL	BEEP
1296   06C4 3A 43 3F    	LD	A,(REGPNT)
1297   06C7 FE 00       	CP	0	;START OF REG TABLE?
1298   06C9 CA D1 06    	JP	Z,DECSP1
1299   06CC 3D          	DEC	A
1300   06CD 32 43 3F    	LD	(REGPNT),A
1301   06D0 C9          	RET
1302   06D1 3E 07       DECSP1	LD	A,7
1303   06D3 32 43 3F    	LD	(REGPNT),A
1304   06D6 C9          	RET
1305   06D7             ;-----------------
1306   06D7             ; DISPLAY REGISTER
1307   06D7             ;-----------------
1308   06D7 3A 43 3F    SETREG	LD	A,(REGPNT)
1309   06DA 21 45 3F    	LD	HL,TMPPC	;START OF TABLE
1310   06DD CD CF 04    	CALL	INDEXW	;GET ELEMENT ADDRESS
1311   06E0 5E          	LD	E,(HL)
1312   06E1 23          	INC	HL
1313   06E2 56          	LD	D,(HL)
1314   06E3 EB          	EX	DE,HL	;LOAD REGISTER CONTENTS
1315   06E4 CD A0 03    	CALL	DISADD
1316   06E7             ;
1317   06E7             ; DISPLAY REGISTER NAME
1318   06E7             ;
1319   06E7 21 49 06    	LD	HL,REGNAM
1320   06EA CD CF 04    	CALL	INDEXW
1321   06ED 7E          	LD	A,(HL)
1322   06EE 32 35 3F    	LD	(DISBUF+0),A
1323   06F1 23          	INC	HL
1324   06F2 7E          	LD	A,(HL)
1325   06F3 32 36 3F    	LD	(DISBUF+1),A
1326   06F6 C9          	RET
1327   06F7             ;------------------
1328   06F7             ; FUNCTION KEY MENU
1329   06F7             ;------------------
1330   06F7             ; WHEN THE FN KEY IS PRESSED, Fn IS DISPLAYED IN THE
1331   06F7             ; DATA DISPLAYS, THE CURRENT ADDRESS REMAINS IN THE
1332   06F7             ; ADDRESS DISPLAYS THE PROGRAM THEN WAITS FOR A
1333   06F7             ; KEYPRESS WHICH WILL SELECT 1 OF 16 ROUTINES.
1334   06F7             ;
1335   06F7 E1          FUNKEY	POP	HL	;REMOVE RETURN ADDRESS
1336   06F8 CD A4 05    	CALL	BEEP
1337   06FB 2A 3F 3F    FUNKY1	LD	HL,(ADRESS)
1338   06FE CD A0 03    	CALL	DISADD	;DISP ADDR TO REMOVE DP'S
1339   0701~            #IFDEF TEC-1F
1340   0701~            
1341   0701~            	LD	HL,0AF0FH	;USE THE GO KEY IN THE TEC
1342   0701             #ELSE
1343   0701 21 54 71    	LD	HL,7154H	;FN
1344   0704             #ENDIF
1345   0704 22 35 3F    	LD	(DISBUF),HL	;DISPLAY FN
1346   0707 CD 74 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1347   070A CD 67 04    FUNKY2	CALL	SKEYIN
1348   070D 2A 19 3F    	LD	HL,(FUNTBL)	;USE THE MENU HANDLER
1349   0710 CD 95 04    	CALL	MENU	;ROUTINE FOR EACH KEY
1350   0713 C3 0A 07    	JP	FUNKY2	;TRY AGAIN
1351   0716             ;
1352   0716             ; RETURN TO MAIN
1353   0716             ;
1354   0716 CD A4 05    CANCEL	CALL	BEEP
1355   0719 CD 69 03    CANCL1	CALL	UPDATE	;UPDATE DISPLAY BUFFER
1356   071C CD 74 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1357   071F E1          	POP	HL	;REMOVE MENU RETURN
1358   0720 C3 88 02    	JP	MAIN2
1359   0723             ;
1360   0723             ; FUNCTION MENU KEY TABLE
1361   0723             ;
1362   0723 11          FUNLST	.DB	11H
1363   0724 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1363   0728 04 05 06 07 
1364   072C 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1364   0730 0C 0D 0E 0F 
1365   0734~            #IFDEF TEC-1F
1366   0734~            	.DB	12H	;GO KEY
1367   0734             #ELSE
1368   0734 10          	.DB	10H	;FN KEY
1369   0735             #ENDIF
1370   0735 5B 07 66 07 	.DW	GOEXEC,INTELFN,ADDRA,ADDRB
1370   0739 6B 08 7D 08 
1371   073D 8F 08 E5 08 	.DW	BLKMVE,BLKSUM,BRANCH,TRACE
1371   0741 23 09 5A 09 
1372   0745 68 09 77 09 	.DW	PLAY1,PLAY2,PLAY3,SWBEEP
1372   0749 86 09 95 09 
1373   074D 2F 0A B0 0B 	.DW	SECRET,RELSQR,SCOPE,TIME
1373   0751 09 0C B8 0C 
1374   0755 57 07       	.DW	FUNFUN
1375   0757             ;--------------------------
1376   0757             ; JUMP TO FUNCTION FUNCTION
1377   0757             ;--------------------------
1378   0757 2A 33 3F    FUNFUN	LD	HL,(FUNJMP)
1379   075A E9          	JP	(HL)
1380   075B             ;------------------------------------------
1381   075B             ; FUNCTION 0 - EXECUTE FROM CURRENT ADDRESS
1382   075B             ;------------------------------------------
1383   075B CD A4 05    GOEXEC	CALL	BEEP
1384   075E CD 8B 04    	CALL	KEYREL
1385   0761 E1          	POP	HL	;REMOVE EXEC RETURN
1386   0762 2A 3F 3F    	LD	HL,(ADRESS)
1387   0765 E9          	JP	(HL)	;START EXECUCTION
1388   0766             ;------------------------------------
1389   0766             ; FUNCTION 1 RECEIVE INTEL HEX FORMAT
1390   0766             ;------------------------------------
1391   0766 CD A4 05    INTELFN	CALL	BEEP
1392   0769 CD 8B 04    	CALL	KEYREL
1393   076C CD 75 07    	CALL	INTELH
1394   076F C2 AE 08    	JP	NZ,BLKMV1	;SHOW THE ERROR
1395   0772 C3 16 07    	JP	CANCEL	;JUST RETURN IF ALL OK
1396   0775             ;-----------------------
1397   0775             ; RECEIVE INTEL HEX FILE
1398   0775             ;-----------------------
1399   0775 DD 21 00 3F INTELH	LD	IX,VARIDX	;POINT TO VARIABLES
1400   0779             ;
1401   0779             ; WAIT FOR RECORD MARK
1402   0779             ;
1403   0779 AF          INTEL1	XOR	A
1404   077A DD 77 03    	LD	(IX+3),A	;CLEAR CHECKSUM
1405   077D CD 31 08    	CALL	RXDATA	;WAIT FOR THE RECORD MARK
1406   0780 FE 3A       	CP	':'	;TO BE TRANSMITTED
1407   0782 20 F5       	JR	NZ,INTEL1	;NOT RECORD MARK
1408   0784             ;
1409   0784             ; GET RECORD LENGTH
1410   0784             ;
1411   0784 CD D1 07    	CALL	GETBYT
1412   0787 DD 77 00    	LD	(IX+0),A	;NUMBER OF DATA BYTES
1413   078A             ;
1414   078A             ; GET ADDRESS FIELD
1415   078A             ;
1416   078A CD D1 07    	CALL	GETBYT
1417   078D DD 77 02    	LD	(IX+2),A	;LOAD ADDRESS HIGH BYTE
1418   0790 CD D1 07    	CALL	GETBYT
1419   0793 DD 77 01    	LD	(IX+1),A	;LOAD ADDRESS LOW BYTE
1420   0796             ;
1421   0796             ; GET RECORD TYPE
1422   0796             ;
1423   0796 CD D1 07    	CALL	GETBYT
1424   0799 20 24       	JR	NZ,INTEL4	;END OF FILE RECORD
1425   079B             ;
1426   079B             ; READ IN THE DATA
1427   079B             ;
1428   079B DD 46 00    	LD	B,(IX+0)	;NUMBER OF DATA BYTES
1429   079E DD 66 02    	LD	H,(IX+2)	;LOAD ADDRESS HIGH BYTE
1430   07A1 DD 6E 01    	LD	L,(IX+1)	;LOAD ADDRESS LOW BYTE
1431   07A4             
1432   07A4 CD D1 07    INTEL2	CALL	GETBYT	;GET DATA BYTE
1433   07A7 77          	LD	(HL),A	;STORE DATA BYTE
1434   07A8 23          	INC	HL
1435   07A9 10 F9       	DJNZ	INTEL2	;LOAD MORE BYTES
1436   07AB             ;
1437   07AB             ; GET CHECKSUM AND COMPARE
1438   07AB             ;
1439   07AB DD 7E 03    	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1440   07AE ED 44       	NEG		;TWO'S COMPLEMENT
1441   07B0 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1442   07B3 CD D1 07    	CALL	GETBYT
1443   07B6 DD 77 03    	LD	(IX+3),A	;SAVE RECORD CHECKSUM
1444   07B9 DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1445   07BC 28 BB       	JR	Z,INTEL1	;CHECKSUM OK,NEXT RECORD
1446   07BE C9          	RET	;NZ=CHECKSUM ERROR
1447   07BF             ;
1448   07BF             ; END OF FILE RECORD
1449   07BF             ;
1450   07BF DD 7E 03    INTEL4	LD	A,(IX+3)	;CONVERT CHECKSUM TO
1451   07C2 ED 44       	NEG		;TWO'S COMPLEMENT
1452   07C4 DD 77 04    	LD	(IX+4),A	;SAVE COMPUTED CHECKSUM
1453   07C7 CD D1 07    	CALL	GETBYT
1454   07CA DD 77 03    	LD	(IX+3),A	;SAVE EOF CHECKSUM
1455   07CD DD BE 04    	CP	(IX+4)	;COMPARE CHECKSUM
1456   07D0 C9          	RET	;NZ=CHECKSUM ERROR
1457   07D1             ;--------------------------
1458   07D1             ; GET BYTE FROM SERIAL PORT
1459   07D1             ;--------------------------
1460   07D1 C5          GETBYT	PUSH	BC
1461   07D2 CD 31 08    	CALL	RXDATA
1462   07D5 CB 77       	BIT	6,A
1463   07D7 28 02       	JR	Z,GETBT1
1464   07D9 C6 09       	ADD	A,09H
1465   07DB E6 0F       GETBT1	AND	0FH
1466   07DD CB 27       	SLA 	A
1467   07DF CB 27       	SLA	A
1468   07E1 CB 27       	SLA	A
1469   07E3 CB 27       	SLA	A
1470   07E5 4F          	LD	C,A
1471   07E6             ;
1472   07E6             ; GET LOW NYBBLE
1473   07E6             ;
1474   07E6 CD 31 08    	CALL	RXDATA
1475   07E9 CB 77       	BIT	6,A
1476   07EB 28 02       	JR	Z,GETBT2
1477   07ED C6 09       	ADD	A,09H
1478   07EF E6 0F       GETBT2	AND	0FH
1479   07F1 B1          	OR	C
1480   07F2 47          	LD	B,A
1481   07F3 DD 86 03    	ADD	A,(IX+3)
1482   07F6 DD 77 03    	LD	(IX+3),A	;ADD TO CHECKSUM
1483   07F9 78          	LD	A,B
1484   07FA A7          	AND	A	;CLEAR CARRY
1485   07FB C1          	POP	BC
1486   07FC C9          	RET
1487   07FD             ;-------------------------------
1488   07FD             ; CONVERT ASCII CHARACTER TO HEX
1489   07FD             ;-------------------------------
1490   07FD             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
1491   07FD             ;ENTRY : A= ASCII 0-9,A-F
1492   07FD             ;EXIT  : A= HEX 0-F IN LSN
1493   07FD             ; A AND F REGISTERS MODIFIED
1494   07FD             ;
1495   07FD CB 77       ASCHEX	BIT	6,A
1496   07FF 28 02       	JR	Z,ASCHX1
1497   0801 C6 09       	ADD	A,09H
1498   0803 E6 0F       ASCHX1	AND	0FH
1499   0805 C9          	RET
1500   0806             ;------------------------
1501   0806             ; SERIAL TRANSMIT ROUTINE
1502   0806             ;------------------------
1503   0806             ;TRANSMIT BYTE SERIALLY ON DOUT
1504   0806             ;
1505   0806             ; ENTRY : A = BYTE TO TRANSMIT
1506   0806             ;  EXIT : NO REGISTERS MODIFIED
1507   0806             ;
1508   0806 F5          TXDATA	PUSH	AF
1509   0807 C5          	PUSH	BC
1510   0808 E5          	PUSH	HL
1511   0809 2A 25 3F    	LD	HL,(BAUD)
1512   080C 4F          	LD	C,A
1513   080D             ;
1514   080D             ; TRANSMIT START BIT
1515   080D             ;
1516   080D AF          	XOR	A
1517   080E D3 85       	OUT	(SCAN),A
1518   0810 CD 5E 08    	CALL	BITIME
1519   0813             ;
1520   0813             ; TRANSMIT DATA
1521   0813             ;
1522   0813 06 08       	LD	B,08H
1523   0815 CB 09       	RRC	C
1524   0817 CB 09       NXTBIT	RRC	C	;SHIFT BITS TO D6,
1525   0819 79          	LD	A,C	;LSB FIRST AND OUTPUT
1526   081A E6 40       	AND	40H	;THEM FOR ONE BIT TIME.
1527   081C D3 85       	OUT	(SCAN),A
1528   081E CD 5E 08    	CALL	BITIME
1529   0821 10 F4       	DJNZ	NXTBIT
1530   0823             ;
1531   0823             ; SEND STOP BITS
1532   0823             ;
1533   0823 3E 40       	LD	A,40H
1534   0825 D3 85       	OUT	(SCAN),A
1535   0827 CD 5E 08    	CALL	BITIME
1536   082A CD 5E 08    	CALL	BITIME
1537   082D E1          	POP	HL
1538   082E C1          	POP	BC
1539   082F F1          	POP	AF
1540   0830 C9          	RET
1541   0831             ;-----------------------
1542   0831             ; SERIAL RECEIVE ROUTINE
1543   0831             ;-----------------------
1544   0831             ;RECEIVE SERIAL BYTE FROM DIN
1545   0831             ;
1546   0831             ; ENTRY : NONE
1547   0831             ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
1548   0831             ;
1549   0831             ; REGISTERS MODIFIED A AND F
1550   0831             ;
1551   0831 C5          RXDATA	PUSH	BC
1552   0832 E5          	PUSH	HL
1553   0833             ;
1554   0833             ; WAIT FOR START BIT
1555   0833             ;
1556   0833 DB 86       RXDAT1	IN	A,(KEYBUF)
1557   0835 CB 7F       	BIT	7,A
1558   0837 20 FA       	JR	NZ,RXDAT1	;NO START BIT
1559   0839             ;
1560   0839             ; DETECTED START BIT
1561   0839             ;
1562   0839 2A 25 3F    	LD	HL,(BAUD)
1563   083C CB 3C       	SRL	H
1564   083E CB 1D       	RR	L	;DELAY FOR HALF BIT TIME
1565   0840 CD 5E 08    	CALL	BITIME
1566   0843 DB 86       	IN	A,(KEYBUF)
1567   0845 CB 7F       	BIT	7,A
1568   0847 20 EA       	JR	NZ,RXDAT1	;START BIT NOT VALID
1569   0849             ;
1570   0849             ; DETECTED VALID START BIT,READ IN DATA
1571   0849             ;
1572   0849 06 08       	LD	B,08H
1573   084B 2A 25 3F    RXDAT2	LD	HL,(BAUD)
1574   084E CD 5E 08    	CALL	BITIME	;DELAY ONE BIT TIME
1575   0851 DB 86       	IN	A,(KEYBUF)
1576   0853 CB 17       	RL	A
1577   0855 CB 19       	RR	C	;SHIFT BIT INTO DATA REG
1578   0857 10 F2       	DJNZ	RXDAT2
1579   0859 79          	LD	A,C
1580   085A B7          	OR	A	;CLEAR CARRY FLAG
1581   085B E1          	POP	HL
1582   085C C1          	POP	BC
1583   085D C9          	RET
1584   085E             ;---------------
1585   085E             ; BIT TIME DELAY
1586   085E             ;---------------
1587   085E             ;DELAY FOR ONE SERIAL BIT TIME
1588   085E             ;ENTRY : HL = DELAY TIME
1589   085E             ; NO REGISTERS MODIFIED
1590   085E             ;
1591   085E E5          BITIME	PUSH	HL
1592   085F D5          	PUSH	DE
1593   0860 11 01 00    	LD	DE,0001H
1594   0863 ED 52       BITIM1	SBC	HL,DE
1595   0865 D2 63 08    	JP	NC,BITIM1
1596   0868 D1          	POP	DE
1597   0869 E1          	POP	HL
1598   086A C9          	RET
1599   086B             ;-----------------------------
1600   086B             ; FUNCTION 2 - ENTER ADDRESS 1
1601   086B             ;-----------------------------
1602   086B CD A4 05    ADDRA	CALL	BEEP
1603   086E 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1604   0871 22 2D 3F    	LD	(BLKSRT),HL	;ADDRESS AS START
1605   0874~            #IFDEF TEC-1F
1606   0874~            	LD	HL,0C300H	;ADDRESS [
1607   0874             #ELSE
1608   0874 21 00 39    	LD	HL,3900H	;ADDRESS [
1609   0877             #ENDIF
1610   0877 CD D7 08    	CALL	SDELAY
1611   087A C3 19 07    	JP	CANCL1
1612   087D             ;-----------------------------
1613   087D             ; FUNCTION 3 - ENTER ADDRESS 2
1614   087D             ;-----------------------------
1615   087D CD A4 05    ADDRB	CALL	BEEP
1616   0880 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1617   0883 22 2F 3F    	LD	(BLKEND),HL	;ADDRESS AS END
1618   0886~            #IFDEF TEC-1F
1619   0886~            	LD	HL,00A9H	;ADDRESS ]
1620   0886             #ELSE
1621   0886 21 0F 00    	LD	HL,000FH	;ADDRESS ]
1622   0889             #ENDIF
1623   0889 CD D7 08    	CALL	SDELAY
1624   088C C3 19 07    	JP	CANCL1
1625   088F             ;------------------------
1626   088F             ; FUNCTION 4 - BLOCK MOVE
1627   088F             ;------------------------
1628   088F CD A4 05    BLKMVE	CALL	BEEP
1629   0892 2A 3F 3F    	LD	HL,(ADRESS)	;COPY CURRENT
1630   0895 22 31 3F    	LD	(BLKDST),HL	;ADDRESS AS
1631   0898~            #IFDEF TEC-1F
1632   0898~            	LD	HL,0C3A9H	;DESTINATION
1633   0898             #ELSE
1634   0898 21 0F 39    	LD	HL,390FH	;DESTINATION
1635   089B             #ENDIF
1636   089B CD D7 08    	CALL	SDELAY
1637   089E             ;
1638   089E             ; CALCULATE NUMBER OF BYTES TO MOVE
1639   089E             ;
1640   089E 2A 2F 3F    	LD	HL,(BLKEND)
1641   08A1 ED 5B 2D 3F 	LD	DE,(BLKSRT)
1642   08A5 A7          	AND	A
1643   08A6 ED 52       	SBC	HL,DE
1644   08A8 23          	INC	HL	;MAKE MOVE INCLUSIVE
1645   08A9 22 2B 3F    	LD	(COUNT),HL
1646   08AC 30 15       	JR	NC,BLKMV3	;IF OK MOVE BLOCK
1647   08AE             ;
1648   08AE             ; SHOW ERROR
1649   08AE             ;
1650   08AE~            #IFDEF TEC-1F
1651   08AE~            BLKMV1	LD	HL,00C7H	;SHOW ERROR E
1652   08AE             #ELSE
1653   08AE 21 79 00    BLKMV1	LD	HL,0079H	;SHOW ERROR E
1654   08B1             #ENDIF
1655   08B1 CD A4 05    BLKMV2	CALL	BEEP
1656   08B4 22 35 3F    	LD	(DISBUF),HL	;AND WAIT
1657   08B7 CD 67 04    	CALL	SKEYIN	;FOR KEYPRESS
1658   08BA CD A4 05    	CALL	BEEP
1659   08BD CD 74 04    	CALL	SKEYRL
1660   08C0 C3 19 07    	JP	CANCL1
1661   08C3             ;
1662   08C3             ; MOVE BLOCK
1663   08C3             ;
1664   08C3 CD C9 08    BLKMV3	CALL	MOVE
1665   08C6 C3 19 07    	JP	CANCL1
1666   08C9             ;-----------
1667   08C9             ; BLOCK MOVE
1668   08C9             ;-----------
1669   08C9 ED 4B 2B 3F MOVE	LD	BC,(COUNT)
1670   08CD 2A 2D 3F    	LD	HL,(BLKSRT)	;START ADDR
1671   08D0 ED 5B 31 3F 	LD	DE,(BLKDST)	;DESTINATION ADDR
1672   08D4 ED B0       	LDIR
1673   08D6 C9          	RET
1674   08D7             ;-------------------------------
1675   08D7             ; SCAN DISPLAY UNTIL KEY RELEASE
1676   08D7             ;-------------------------------
1677   08D7 22 35 3F    SDELAY	LD	(DISBUF),HL	;SHOW HL
1678   08DA 06 FF       	LD	B,255	;IN DATA DISPLAYS
1679   08DC CD EE 03    SDELY1	CALL	SCAND	;UNTIL KEY
1680   08DF 10 FB       	DJNZ SDELY1	;IS RELEASED
1681   08E1 CD 74 04    	CALL	SKEYRL
1682   08E4 C9          	RET
1683   08E5             ;---------------------------
1684   08E5             ;FUNCTION 5 - BLOCK CHECKSUM
1685   08E5             ;---------------------------
1686   08E5 CD A4 05    BLKSUM	CALL	BEEP
1687   08E8~            #IFDEF TEC-1F
1688   08E8~            	LD	HL,0C3A7H	;CS
1689   08E8             #ELSE
1690   08E8 21 6D 39    	LD	HL,396DH	;CS
1691   08EB             #ENDIF
1692   08EB CD D7 08    	CALL	SDELAY	;SHOW PROMPT
1693   08EE ED 5B 2D 3F 	LD	DE,(BLKSRT)
1694   08F2 2A 2F 3F    	LD	HL,(BLKEND)
1695   08F5 A7          	AND	A
1696   08F6 ED 52       	SBC	HL,DE
1697   08F8 23          	INC	HL	;MAKE CHECKSUM INCLUSIVE
1698   08F9 22 2B 3F    	LD	(COUNT),HL
1699   08FC 30 03       	JR	NC,BLKSM1	;IF OK SUM BLOCK
1700   08FE             ;
1701   08FE             ; SHOW ERROR
1702   08FE             ;
1703   08FE C3 AE 08    	JP	BLKMV1
1704   0901             ;
1705   0901             ; CALCULATE CHECKSUM
1706   0901             ;
1707   0901 2A 2D 3F    BLKSM1	LD	HL,(BLKSRT)
1708   0904 ED 5B 2F 3F 	LD	DE,(BLKEND)
1709   0908 CD B8 04    	CALL	CHKSUM	;DO THE CHECKSUM,
1710   090B CD B5 03    	CALL	DISBYT	;DISPLAY
1711   090E 2A 2B 3F    	LD	HL,(COUNT)	;NUMBER OF BYTES
1712   0911 CD A0 03    	CALL	DISADD	;SUMMED AND
1713   0914 CD A4 05    	CALL	BEEP
1714   0917 CD 67 04    	CALL	SKEYIN	;CHECKSUM UNTIL
1715   091A CD A4 05    	CALL	BEEP	;A KEY IS PRESSED
1716   091D CD 74 04    	CALL	SKEYRL
1717   0920 C3 19 07    	JP	CANCL1
1718   0923             ;----------------------------------------
1719   0923             ; FUNCTION 6 - RELATIVE BRANCH CALCULATOR
1720   0923             ;----------------------------------------
1721   0923 CD A4 05    BRANCH	CALL	BEEP
1722   0926~            #IFDEF TEC-1F
1723   0926~            	LD	HL,44E6H	;RB
1724   0926             #ELSE
1725   0926 21 7C 50    	LD	HL,507CH	;RB
1726   0929             #ENDIF
1727   0929 CD D7 08    	CALL	SDELAY
1728   092C 2A 3F 3F    	LD	HL,(ADRESS)	;GET CURRENT ADDRESS
1729   092F ED 5B 2D 3F 	LD	DE,(BLKSRT)
1730   0933 13          	INC	DE	;POINT TO PC+2
1731   0934 A7          	AND	A
1732   0935 ED 52       	SBC	HL,DE	;SUBTRACT
1733   0937             ;
1734   0937             ;TEST HIGH BYTE OF RESULT TO
1735   0937             ;DETERMINE IF BACKWARD BRANCH
1736   0937             ;
1737   0937 7C          	LD	A,H
1738   0938 FE FF       	CP	255	;BACKWARD BRANCH?
1739   093A C2 45 09    	JP	NZ,BRNCH1	;CHECK IF FORWARD
1740   093D             ;
1741   093D             ;CHECK IF WE HAVE BRANCHED BEYOND -128
1742   093D             ;
1743   093D 7D          	LD	A,L
1744   093E CB 7F       	BIT	7,A
1745   0940 20 0E       	JR	NZ,BRNCH2	;BRANCH IS WITHIN LIMITS
1746   0942 C3 AE 08    	JP	BLKMV1	;TOO FAR BACK
1747   0945             ;
1748   0945             ;TEST HIGH BYTE OF RESULT TO
1749   0945             ;DETERMINE IF FORWARD BRANCH
1750   0945             ;
1751   0945 FE 00       BRNCH1	CP	0	;FORWARD BRANCH?
1752   0947 C2 AE 08    	JP	NZ,BLKMV1	;TOO FAR IN ANY DIRECTION
1753   094A             ;
1754   094A             ; CHECK IF WE HAVE BRANCHED BEYOND +128
1755   094A             ;
1756   094A 7D          	LD	A,L
1757   094B CB 7F       	BIT	7,A
1758   094D C2 AE 08    	JP	NZ,BLKMV1	;TOO FAR FORWARD
1759   0950             ;
1760   0950             ; WITHIN LIMITS PUT IN RAM
1761   0950             ; AND SHOW AS CURRENT ADDRESS
1762   0950             ;
1763   0950 2A 2D 3F    BRNCH2	LD	HL,(BLKSRT)
1764   0953 22 3F 3F    	LD	(ADRESS),HL
1765   0956 77          	LD	(HL),A
1766   0957 C3 19 07    	JP	CANCL1
1767   095A             ;-----------------------------------------
1768   095A             ; FUNCTION 7 - TOGGLE HARDWARE SINGLE STEP
1769   095A             ;-----------------------------------------
1770   095A CD A4 05    TRACE	CALL	BEEP
1771   095D~            #IFDEF TEC-1F
1772   095D~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
1773   095D~            	LD	HL,0046H	;SHOW T
1774   095D             #ELSE
1775   095D D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
1776   095F 21 70 00    	LD	HL,0070H	;SHOW T
1777   0962             #ENDIF
1778   0962 CD D7 08    	CALL	SDELAY
1779   0965 C3 19 07    	JP	CANCL1
1780   0968             ;-------------------------
1781   0968             ; FUNCTION 8 - PLAY TUNE 1
1782   0968             ;-------------------------
1783   0968 CD A4 05    PLAY1	CALL	BEEP
1784   096B CD 8B 04    	CALL	KEYREL
1785   096E 21 A3 09    	LD	HL,TUNE1
1786   0971 CD 07 05    	CALL	MUSIC
1787   0974 C3 19 07    	JP	CANCL1
1788   0977             ;-------------------------
1789   0977             ; FUNCTION 9 - PLAY TUNE 2
1790   0977             ;-------------------------
1791   0977 CD A4 05    PLAY2	CALL	BEEP
1792   097A CD 8B 04    	CALL	KEYREL
1793   097D 21 E3 09    	LD	HL,TUNE2
1794   0980 CD 07 05    	CALL	MUSIC
1795   0983 C3 19 07    	JP	CANCL1
1796   0986             ;------------------------------
1797   0986             ; FUNCTION A - PLAY TUNE IN RAM
1798   0986             ;------------------------------
1799   0986 CD A4 05    PLAY3	CALL	BEEP
1800   0989 CD 8B 04    	CALL	KEYREL
1801   098C 2A 3F 3F    	LD	HL,(ADRESS)
1802   098F CD 07 05    	CALL	MUSIC
1803   0992 C3 19 07    	JP	CANCL1
1804   0995             ;-----------------------------
1805   0995             ; FUNCTION B - TOGGLE KEY BEEP
1806   0995             ;-----------------------------
1807   0995 CD A4 05    SWBEEP	CALL	BEEP
1808   0998 3A 3D 3F    	LD	A,(MODE)
1809   099B EE 40       	XOR	40H
1810   099D 32 3D 3F    	LD	(MODE),A
1811   09A0 C3 19 07    	JP	CANCL1
1812   09A3             ;
1813   09A3             ; TUNE 1
1814   09A3             ; FROM TALKING ELECTRONICS TEC-1
1815   09A3             ; MONITOR MON-1
1816   09A3             ; BY JOHN HARDY AND KEN STONE
1817   09A3             ;
1818   09A3 06 06 0A 0D TUNE1	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1818   09A7 06 0D 0A 0D 
1819   09AB 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1819   09AF 0F 11 12 0F 
1820   09B3 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1820   09B7 12 0F 0D 0A 
1821   09BB 08 06 08 0A 	.DB	08H,06H,08H,0AH,0FH,0AH,0DH,0FH
1821   09BF 0F 0A 0D 0F 
1822   09C3 06 06 0A 0D 	.DB	06H,06H,0AH,0DH,06H,0DH,0AH,0DH
1822   09C7 06 0D 0A 0D 
1823   09CB 12 16 14 12 	.DB	12H,16H,14H,12H,0FH,11H,12H,0FH
1823   09CF 0F 11 12 0F 
1824   09D3 0D 0D 0D 0A 	.DB	0DH,0DH,0DH,0AH,12H,0FH,0DH,0AH
1824   09D7 12 0F 0D 0A 
1825   09DB 08 06 08 0A 	.DB	08H,06H,08H,0AH,06H,12H,00H,1EH
1825   09DF 06 12 00 1E 
1826   09E3             ;
1827   09E3             ; TUNE 2
1828   09E3             ; FROM TALKING ELECTRONICS TEC-1
1829   09E3             ; MONITOR MON-1
1830   09E3             ; BY JOHN HARDY AND KEN STONE
1831   09E3             ;
1832   09E3 0B 0A 08 0A TUNE2	.DB	0BH,0AH,08H,0AH,0AH,0AH,06H,06H
1832   09E7 0A 0A 06 06 
1833   09EB 06 0B 0A 08 	.DB	06H,0BH,0AH,08H,0AH,0AH,0AH,0AH
1833   09EF 0A 0A 0A 0A 
1834   09F3 0A 0A 0B 0A 	.DB	0AH,0AH,0BH,0AH,08H,0AH,0AH,0AH
1834   09F7 08 0A 0A 0A 
1835   09FB 06 06 06 0A 	.DB	06H,06H,06H,0AH,08H,0AH,0DH,0DH
1835   09FF 08 0A 0D 0D 
1836   0A03 0D 0D 0D 00 	.DB	0DH,0DH,0DH,00H,0DH,05H,08H,0BH
1836   0A07 0D 05 08 0B 
1837   0A0B 0B 0B 06 06 	.DB	0BH,0BH,06H,06H,06H,0BH,0AH,08H
1837   0A0F 06 0B 0A 08 
1838   0A13 0A 0A 0A 06 	.DB	0AH,0AH,0AH,06H,06H,06H,0BH,0AH
1838   0A17 06 06 0B 0A 
1839   0A1B 06 08 08 08 	.DB	06H,08H,08H,08H,08H,08H,0AH,0BH
1839   0A1F 08 08 0A 0B 
1840   0A23 0A 08 06 06 	.DB	0AH,08H,06H,06H,06H,06H,06H,06H
1840   0A27 06 06 06 06 
1841   0A2B 00 00 00 1E 	.DB	00H,00H,00H,1EH
1842   0A2F             ;---------------------------
1843   0A2F             ; FUNCTION C - SECRET NUMBER
1844   0A2F             ;---------------------------
1845   0A2F CD A4 05    SECRET	CALL	BEEP	;WAIT FOR KEY RELEASE
1846   0A32 CD 8B 04    	CALL	KEYREL	;AND CLEAR DISPLAY
1847   0A35 CD 19 04    	CALL	CLRBUF	;BUFFER
1848   0A38 DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR LOCAL VARIABLES
1849   0A3C             ;
1850   0A3C             ; SEPARATE NYBBLES IN RANDOM NUMBER
1851   0A3C             ;
1852   0A3C CD D8 04    	CALL	RAND
1853   0A3F DD 75 0B    	LD	(IX+11),L
1854   0A42 DD 74 0C    	LD	(IX+12),H	;RANDOM NUMBER
1855   0A45 DD 7E 0B    	LD	A,(IX+11)	;SEPARATE THE RANDOM
1856   0A48 CD 9D 0B    	CALL	SPLIT	;NUMBER INTO
1857   0A4B DD 75 04    	LD	(IX+4),L	;FOUR NYBBLES
1858   0A4E DD 74 05    	LD	(IX+5),H	;TO MAKE CHECKING
1859   0A51 DD 7E 0C    	LD	A,(IX+12)	;AGAINST THE
1860   0A54 CD 9D 0B    	CALL	SPLIT	;GUESS EASIER
1861   0A57 DD 75 06    	LD	(IX+6),L
1862   0A5A DD 74 07    	LD	(IX+7),H
1863   0A5D AF          	XOR	A
1864   0A5E ED 47       	LD	I,A	;CLEAR NUMBER OF TRIES
1865   0A60 21 00 00    	LD	HL,0
1866   0A63 DD 75 08    	LD	(IX+8),L
1867   0A66 DD 74 09    	LD	(IX+9),H
1868   0A69 CD A0 03    	CALL	DISADD	;AND DISPLAY GUESS
1869   0A6C             ;
1870   0A6C             ; SCAN THE KEYBOARD
1871   0A6C             ;
1872   0A6C CD 67 04    SECRT1	CALL	SKEYIN	;WAIT FOR KEY
1873   0A6F 21 7B 0A    	LD	HL,SECNUM
1874   0A72 CD 95 04    	CALL	MENU	;EXECUTE KEY HANDLER
1875   0A75 CD 74 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
1876   0A78 C3 6C 0A    	JP	SECRT1
1877   0A7B             ;
1878   0A7B             ; SECRET NUMBER KEY TABLE
1879   0A7B             ;
1880   0A7B 12          SECNUM	.DB	12H
1881   0A7C 00 01 02 03 	.DB	00H,01H,02H,03H,04H,05H,06H,07H
1881   0A80 04 05 06 07 
1882   0A84 08 09 0A 0B 	.DB	08H,09H,0AH,0BH,0CH,0DH,0EH,0FH
1882   0A88 0C 0D 0E 0F 
1883   0A8C 10 11       	.DB	10H,11H
1884   0A8E B2 0A B2 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1884   0A92 B2 0A B2 0A 
1885   0A96 B2 0A B2 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1885   0A9A B2 0A B2 0A 
1886   0A9E B2 0A B2 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1886   0AA2 B2 0A B2 0A 
1887   0AA6 B2 0A B2 0A 	.DW	EDTKEY,EDTKEY,EDTKEY,EDTKEY
1887   0AAA B2 0A B2 0A 
1888   0AAE D9 0A E2 0A 	.DW	ENDKEY,CHKKEY
1889   0AB2             ;---------------
1890   0AB2             ; EDIT GUESS KEY
1891   0AB2             ;---------------
1892   0AB2 F5          EDTKEY	PUSH	AF
1893   0AB3 DD 6E 08    	LD	L,(IX+8)
1894   0AB6 DD 66 09    	LD	H,(IX+9)	;GET CURRENT GUESS
1895   0AB9 CB 25       	SLA	L
1896   0ABB CB 14       	RL	H	;AND DO A 16 BIT
1897   0ABD CB 25       	SLA	L	;LEFT SHIFT 4 TIMES
1898   0ABF CB 14       	RL	H	;TO MAKE  ROOM
1899   0AC1 CB 25       	SLA	L	;FOR THE NEW KEY
1900   0AC3 CB 14       	RL	H
1901   0AC5 CB 25       	SLA	L
1902   0AC7 CB 14       	RL	H
1903   0AC9 F1          	POP	AF
1904   0ACA B5          	OR	L	;IT IN THE LEAST
1905   0ACB 6F          	LD	L,A	;SIGNIFICANT NYBBLE
1906   0ACC DD 75 08    	LD	(IX+8),L
1907   0ACF DD 74 09    	LD	(IX+9),H	;SAVE GUESS
1908   0AD2 CD A0 03    	CALL	DISADD
1909   0AD5 CD A4 05    	CALL	BEEP
1910   0AD8 C9          	RET
1911   0AD9             ;----------
1912   0AD9             ; QUIT GAME
1913   0AD9             ;----------
1914   0AD9 CD A4 05    ENDKEY	CALL	BEEP	;WAIT FOR KEY RELEASE
1915   0ADC CD 8B 04    	CALL	KEYREL	;AND RETURN TO
1916   0ADF C3 74 02    	JP	MAIN	;MONITOR
1917   0AE2             ;---------------------------
1918   0AE2             ; SEE IF ITS THE RIGHT GUESS
1919   0AE2             ;---------------------------
1920   0AE2 CD A4 05    CHKKEY	CALL	BEEP
1921   0AE5 ED 57       	LD	A,I
1922   0AE7 3C          	INC	A
1923   0AE8 27          	DAA	;INC BCD NO. OF TRIES
1924   0AE9             ;
1925   0AE9             ; BRIEFLY SHOW GUESS NO.
1926   0AE9             ;
1927   0AE9 ED 47       	LD	I,A
1928   0AEB CD B5 03    	CALL	DISBYT
1929   0AEE 06 FF       	LD	B,255
1930   0AF0 CD EE 03    CHKKY1	CALL	SCAND
1931   0AF3 10 FB       	DJNZ	CHKKY1
1932   0AF5             ;
1933   0AF5             ; SEPARATE GUESS INTO NYBBLES
1934   0AF5             ;
1935   0AF5 DD 7E 08    	LD	A,(IX+8)	;GET CURRENT GUESS
1936   0AF8 CD 9D 0B    	CALL	SPLIT	;NUMBER INTO
1937   0AFB DD 75 00    	LD	(IX+0),L	;FOUR NYBBLES
1938   0AFE DD 74 01    	LD	(IX+1),H	;TO MAKE CHECKING
1939   0B01 DD 7E 09    	LD	A,(IX+9)	;AGAINST THE
1940   0B04 CD 9D 0B    	CALL	SPLIT	;GUESS EASIER
1941   0B07 DD 75 02    	LD	(IX+2),L
1942   0B0A DD 74 03    	LD	(IX+3),H
1943   0B0D             ;
1944   0B0D             ; CHECK FOR CORRECT NUMBER,CORRECT SPOT
1945   0B0D             ;
1946   0B0D AF          	XOR	A
1947   0B0E DD 77 0A    	LD	(IX+10),A	;CLEAR RESULT
1948   0B11 21 04 3F    	LD	HL,VARIDX+4	;POINT TO RANDOM
1949   0B14 11 00 3F    	LD	DE,VARIDX	;POINT TO GUESS
1950   0B17 06 04       	LD	B,4	;NUMBER OF DIGITS
1951   0B19 7E          CHKKY2	LD	A,(HL)	;GET RANDOM
1952   0B1A EB          	EX	DE,HL
1953   0B1B BE          	CP	(HL)	;SAME AS GUESS?
1954   0B1C 20 10       	JR	NZ,CHKKY4	;NOT SAME
1955   0B1E DD 7E 0A    	LD	A,(IX+10)
1956   0B21 C6 10       	ADD	A,10H	;RIGHT POSITION
1957   0B23 DD 77 0A    	LD	(IX+10),A
1958   0B26 23          CHKKY3	INC	HL	;POINT TO NEXT
1959   0B27 EB          	EX	DE,HL	;DIGIT POSITION
1960   0B28 23          	INC	HL	;AND GO
1961   0B29 10 EE       	DJNZ	CHKKY2	;CHECK OTHER POSITIONS
1962   0B2B C3 4A 0B    	JP	CHKKY8
1963   0B2E             ;
1964   0B2E             ; CHECK IF NUMBER IS THERE
1965   0B2E             ;
1966   0B2E C5          CHKKY4	PUSH	BC
1967   0B2F E5          	PUSH	HL
1968   0B30 06 04       	LD	B,4	;CHECK EACH DIGIT
1969   0B32 21 00 3F    	LD	HL,VARIDX	;TO SEE IF THIS
1970   0B35 BE          CHKKY5	CP	(HL)	;NUMBER IS IN
1971   0B36 23          	INC	HL	;THE WRONG
1972   0B37 20 0A       	JR	NZ,CHKKY6	;POSITION
1973   0B39 DD 7E 0A    	LD	A,(IX+10)	;AND UPDATE
1974   0B3C 3C          	INC	A	;THE RESULT
1975   0B3D DD 77 0A    	LD	(IX+10),A
1976   0B40 C3 45 0B    	JP	CHKKY7
1977   0B43 10 F0       CHKKY6	DJNZ	CHKKY5
1978   0B45 E1          CHKKY7	POP	HL
1979   0B46 C1          	POP	BC
1980   0B47 C3 26 0B    	JP	CHKKY3	;CHECK NEXT DIGIT
1981   0B4A             ;
1982   0B4A             ; CHECK IF CORRECT
1983   0B4A             ;
1984   0B4A DD 7E 0A    CHKKY8	LD	A,(IX+10)
1985   0B4D FE 40       	CP	40H	;IS IT CORRECT?
1986   0B4F CA 6F 0B    	JP	Z,CHKKY9	;YES!
1987   0B52 DD 7E 0A    	LD	A,(IX+10)	;NOT CORRECT
1988   0B55 CD B5 03    	CALL	DISBYT	;IN DATA DISPLAYS
1989   0B58 ED 57       	LD	A,I	;WAS THAT THE
1990   0B5A FE 20       	CP	20H	;LAST GUESS?
1991   0B5C C0          	RET	NZ	;NO TRY AGAIN
1992   0B5D             ;
1993   0B5D             ; RAN OUT OF TRYS
1994   0B5D             ;
1995   0B5D CD 19 04    	CALL	CLRBUF	;DISPLAY
1996   0B60 DD 6E 0B    	LD	L,(IX+11)
1997   0B63 DD 66 0C    	LD	H,(IX+12)	;THE RANDOM NUMBER
1998   0B66 CD A0 03    	CALL	DISADD	;AND PLAY
1999   0B69 21 96 0B    	LD	HL,LOSE	;THE LOSE
2000   0B6C C3 7D 0B    	JP	CHKKYA	;MUSIC
2001   0B6F             ;
2002   0B6F             ; GOT THE RIGHT ANSWER
2003   0B6F             ;
2004   0B6F ED 57       CHKKY9	LD	A,I	;DISPLAY HOW MANY
2005   0B71 CD B5 03    	CALL	DISBYT	;AND PLAY THE WIN
2006   0B74 DD 6E 0B    	LD	L,(IX+11)
2007   0B77 DD 66 0C    	LD	H,(IX+12)
2008   0B7A 21 8D 0B    	LD	HL,WIN	;MUSIC
2009   0B7D             ;
2010   0B7D             ; PLAY MUSIC AND WAIT FOR ANY KEY TO RESTART
2011   0B7D             ;
2012   0B7D CD 07 05    CHKKYA	CALL	MUSIC	;PLAY THE MUSIC
2013   0B80 CD 67 04    	CALL	SKEYIN	;WAIT FOR A KEY
2014   0B83 CD A4 05    	CALL	BEEP
2015   0B86 CD 74 04    	CALL	SKEYRL	;WAIT FOR KEY RELEASE
2016   0B89 E1          	POP	HL	;AND RESTART THE GAME
2017   0B8A C3 2F 0A    	JP	SECRET
2018   0B8D             ;
2019   0B8D             ; WIN AND LOSE MUSIC
2020   0B8D             ; FROM TALKING ELECTRONICS TEC-1
2021   0B8D             ; MONITOR MON-1
2022   0B8D             ; BY JOHN HARDY AND KEN STONE
2023   0B8D             ;
2024   0B8D 14 12 14 17 WIN	.DB	14H,12H,14H,17H,17H,12H,14H,10H,1FH
2024   0B91 17 12 14 10 
2024   0B95 1F 
2025   0B96 01 11 01 11 LOSE	.DB	01H,11H,01H,11H,01H,11H,1FH
2025   0B9A 01 11 1F 
2026   0B9D             ;-------------------------------
2027   0B9D             ; SEPARATE BYTE INTO TWO NYBBLES
2028   0B9D             ;-------------------------------
2029   0B9D             ;SEPARATES A BYTE INTO TWO
2030   0B9D             ;RIGHT JUSTIFIED NYBBLES
2031   0B9D             ; ENTRY : A = BYTE TO BE SEPARATED
2032   0B9D             ; EXIT  : H = MSN
2033   0B9D             ;         L = LSN
2034   0B9D             ;
2035   0B9D F5          SPLIT	PUSH	AF
2036   0B9E C5          	PUSH	BC
2037   0B9F 47          	LD	B,A	;SAVE BYTE
2038   0BA0 E6 0F       	AND	0FH	;STRIP BITS LSN
2039   0BA2 6F          	LD	L,A	;RETURN LSN IN L
2040   0BA3 78          	LD	A,B
2041   0BA4 CB 3F       	SRL	A
2042   0BA6 CB 3F       	SRL	A
2043   0BA8 CB 3F       	SRL	A	;MOVE MSN
2044   0BAA CB 3F       	SRL	A	;INTO LSN
2045   0BAC 67          	LD	H,A	;RETURN MSN IN H
2046   0BAD C1          	POP	BC
2047   0BAE F1          	POP	AF
2048   0BAF C9          	RET
2049   0BB0             ;-----------------------------------
2050   0BB0             ; FUNCTION D - RELAY BOARD SEQUENCER
2051   0BB0             ;-----------------------------------
2052   0BB0 CD A4 05    RELSQR	CALL	BEEP
2053   0BB3 CD 8B 04    	CALL	KEYREL
2054   0BB6 21 BF 0B    	LD	HL,RLTEST	;POINT TO TEST SEQUENCE
2055   0BB9 CD C5 0B    	CALL	RLSTEP
2056   0BBC C3 19 07    	JP	CANCL1
2057   0BBF             ;--------------
2058   0BBF             ; TEST SEQUENCE
2059   0BBF             ;--------------
2060   0BBF 55 01 AA 01 RLTEST	.DB	55H,01H,0AAH,01H,00H,0FFH
2060   0BC3 00 FF 
2061   0BC5             ;----------------
2062   0BC5             ; RELAY SEQUENCER
2063   0BC5             ;----------------
2064   0BC5             ; SEQUENCES RELAYS ON RELAY BOARD
2065   0BC5             ; USES TWO BYTES TO SPECIFY OUTPUT DATA AND DELAY TIME
2066   0BC5             ; DELAY TIME BYTE ALSO DETERMINES IF SEQUENCE IS TO STOP
2067   0BC5             ; OR REPEAT.
2068   0BC5             ;  TABLE:
2069   0BC5             ;  <BYTE1>,<BYTE2>
2070   0BC5             ;  BYTE1 = DATA TO GO TO OUTPUT LATCH (USES PORT IO1)
2071   0BC5             ;  BYTE2 = FF - REPEAT
2072   0BC5             ;          00 - FINISHED
2073   0BC5             ;  ENTRY : HL POINTS TO TABLE OF OUTPUT DATA
2074   0BC5             ;  EXIT : NONE MODIFIED
2075   0BC5             ;
2076   0BC5 F5          RLSTEP	PUSH	AF
2077   0BC6 C5          	PUSH	BC
2078   0BC7 D5          	PUSH	DE
2079   0BC8 E5          	PUSH	HL	;SAVE REGISTERS
2080   0BC9 E5          	PUSH	HL
2081   0BCA EB          	EX	DE,HL	;GET ADDRESS OF DATA
2082   0BCB 1A          RELSR1	LD	A,(DE)
2083   0BCC 4F          	LD	C,A	;GET OUTPUT DATA
2084   0BCD 13          	INC	DE
2085   0BCE 1A          	LD	A,(DE)	;GET TIME DELAY
2086   0BCF FE 00       	CP	0
2087   0BD1 28 16       	JR	Z,RELSR4	;END OF SEQUENCE
2088   0BD3 FE FF       	CP	255
2089   0BD5 28 0D       	JR	Z,RELSR3	;REPEAT SEQUENCE
2090   0BD7 47          	LD	B,A
2091   0BD8 79          	LD	A,C
2092   0BD9~            #IFDEF TEC-1F
2093   0BD9~            	OUT	(PORT3),A	;STROBE
2094   0BD9             #ELSE
2095   0BD9 D3 81       	OUT	(IO1),A
2096   0BDB             #ENDIF
2097   0BDB 13          	INC	DE
2098   0BDC CD F3 0B    RELSR2	CALL	DELONE	;1 SEC DELAY
2099   0BDF 10 FB       	DJNZ	RELSR2	;MORE SECONDS TO GO
2100   0BE1 C3 CB 0B    	JP	RELSR1
2101   0BE4             ;
2102   0BE4             ; REPEAT
2103   0BE4             ;
2104   0BE4 D1          RELSR3	POP	DE	;GET START ADDRESS
2105   0BE5 D5          	PUSH	DE	;SAVE FOR LATER
2106   0BE6 C3 CB 0B    	JP	RELSR1
2107   0BE9             ;
2108   0BE9             ; FINISHED
2109   0BE9             ;
2110   0BE9 3E 00       RELSR4	LD	A,00H
2111   0BEB~            #IFDEF TEC-1F
2112   0BEB~            	OUT	(PORT3),A	;STROBE
2113   0BEB             #ELSE
2114   0BEB D3 81       	OUT	(IO1),A	;CLEAR OUTPUT REG
2115   0BED             #ENDIF
2116   0BED E1          	POP	HL
2117   0BEE E1          	POP	HL
2118   0BEF D1          	POP	DE
2119   0BF0 C1          	POP	BC
2120   0BF1 F1          	POP	AF
2121   0BF2 C9          	RET
2122   0BF3             ;-----------------
2123   0BF3             ; ONE SECOND DELAY
2124   0BF3             ;-----------------
2125   0BF3             ;
2126   0BF3             ; ENTRY : NONE
2127   0BF3             ; EXIT : FLAG REGISTER MODIFIED
2128   0BF3             ;
2129   0BF3 C5          DELONE	PUSH	BC
2130   0BF4 D5          	PUSH	DE
2131   0BF5 E5          	PUSH	HL
2132   0BF6 11 01 00    	LD	DE,0001H
2133   0BF9 21 70 08    	LD	HL,0870H
2134   0BFC 06 92       DELON1	LD	B,92H
2135   0BFE 10 FE       DELON2	DJNZ	DELON2	;INNER LOOP
2136   0C00 ED 52       	SBC	HL,DE
2137   0C02 D2 FC 0B    	JP	NC,DELON1	;OUTER LOOP
2138   0C05 E1          	POP	HL
2139   0C06 D1          	POP	DE
2140   0C07 C1          	POP	BC
2141   0C08 C9          	RET
2142   0C09             ;--------------------------
2143   0C09             ; FUNCTION E - KALEIDOSCOPE
2144   0C09             ;--------------------------
2145   0C09 CD A4 05    SCOPE	CALL	BEEP
2146   0C0C CD 8B 04    	CALL	KEYREL
2147   0C0F CD D8 04    	CALL	RAND	;GENERATE RANDOM
2148   0C12 EB          	EX	DE,HL
2149   0C13 21 00 3E    	LD	HL,BUFFER	;NUMBER AND SET UP
2150   0C16 7B          	LD	A,E	;THE FIRST QUADRANT
2151   0C17 CD 88 0C    	CALL	SEED	;WITH A RANDOM BIT
2152   0C1A 7A          	LD	A,D	;PATTERN
2153   0C1B CD 88 0C    	CALL	SEED
2154   0C1E             ;
2155   0C1E             ; GENERATE MIRROR IMAGES
2156   0C1E             ;
2157   0C1E 06 04       SCOPE2	LD	B,04H
2158   0C20 21 00 3E    	LD	HL,BUFFER
2159   0C23 11 07 3E    	LD	DE,BUFFER+7
2160   0C26 7E          SCOPE3	LD	A,(HL)	;MIRROR THE FIRST
2161   0C27 12          	LD	(DE),A	;QUADRANT INTO
2162   0C28 23          	INC	HL	;THE FOURTH
2163   0C29 1B          	DEC	DE	;QUADRANT
2164   0C2A 10 FA       	DJNZ	SCOPE3
2165   0C2C             ;
2166   0C2C             ; MIRROR ACROSS CENTRE OF DISPLAY
2167   0C2C             ;
2168   0C2C 06 08       	LD	B,8	;MIRROR THE FIRST
2169   0C2E 21 00 3E    	LD	HL,BUFFER	;AND FOURTH QUADRANT
2170   0C31 7E          	LD	A,(HL)	;ACROSS THE CENTRE
2171   0C32 E6 0F       	AND	0FH	;OF THE DISPLAY
2172   0C34 77          	LD	(HL),A	;INTO THE SECOND
2173   0C35 CB 46       SCOPE4	BIT	0,(HL)	;AND THIRD QUADRANTS.
2174   0C37 CA 3C 0C    	JP	Z,SCOPE5	;CHECKING IF THE
2175   0C3A CB FE       	SET	7,(HL)	;BITS IN THE LSN ARE
2176   0C3C CB 4E       SCOPE5	BIT	1,(HL)	;SET, AND SETTING THE
2177   0C3E CA 43 0C    	JP	Z,SCOPE6	;CORRESPONDING
2178   0C41 CB F6       	SET	6,(HL)	;MIRROR IMAGE
2179   0C43 CB 56       SCOPE6	BIT	2,(HL)	;BIT IN THE MSN
2180   0C45 CA 4A 0C    	JP	Z,SCOPE7	;IF THEY ARE.
2181   0C48 CB EE       	SET	5,(HL)	;DO THIS FOR
2182   0C4A CB 5E       SCOPE7	BIT	3,(HL)	;THE EIGHT ROWS
2183   0C4C CA 51 0C    	JP	Z,SCOPE8	;OF DATA BYTES
2184   0C4F CB E6       	SET	4,(HL)	;IN THE DISPLAY
2185   0C51 23          SCOPE8	INC	HL
2186   0C52 10 E1       	DJNZ	SCOPE4	;MORE ROWS TO DO
2187   0C54             ;
2188   0C54             ; DISPLAY RANDOM BIT PATTERN
2189   0C54             ;
2190   0C54 11 01 00    	LD	DE,0001H	;SET UP DELAY
2191   0C57 21 00 02    	LD	HL,0200H
2192   0C5A E5          SCOPE9	PUSH	HL
2193   0C5B 21 00 3E    	LD	HL,BUFFER
2194   0C5E CD 97 0C    	CALL	SKATE	;SCAN 8X8
2195   0C61 E1          	POP	HL
2196   0C62 ED 52       	SBC	HL,DE
2197   0C64 C2 5A 0C    	JP	NZ,SCOPE9
2198   0C67             ;
2199   0C67             ; MANIPULATE BITS FOR NEXT IMAGE
2200   0C67             ;
2201   0C67 21 00 3E    SCOPEA	LD	HL,BUFFER
2202   0C6A 3E 05       	LD	A,5
2203   0C6C 86          	ADD	A,(HL)
2204   0C6D E6 0F       	AND	0FH
2205   0C6F 77          	LD	(HL),A	;ADD 5 TO FIRST LSN
2206   0C70 23          	INC	HL
2207   0C71 3E 03       	LD	A,03H
2208   0C73 86          	ADD	A,(HL)
2209   0C74 E6 0F       	AND	0FH
2210   0C76 77          	LD	(HL),A	;ADD 3 TO SECOND LSN
2211   0C77 23          	INC	HL
2212   0C78 3E 01       	LD	A,01H
2213   0C7A 86          	ADD	A,(HL)
2214   0C7B E6 0F       	AND	0FH
2215   0C7D 77          	LD	(HL),A	;ADD 1 TO THIRD LSN
2216   0C7E 23          	INC	HL
2217   0C7F 3E 07       	LD	A,07H
2218   0C81 86          	ADD	A,(HL)
2219   0C82 E6 0F       	AND	0FH
2220   0C84 77          	LD	(HL),A	;ADD 15 TO FOURTH LSN
2221   0C85 C3 1E 0C    	JP	SCOPE2	;MIRROR BIT PATTERN
2222   0C88             ;
2223   0C88             ; SEED THE FIRST QUADRANT WITH RANDOM BITS
2224   0C88             ;
2225   0C88 47          SEED	LD	B,A	;PUT THE
2226   0C89 E6 0F       	AND	0FH	;RANDOM NUMBER
2227   0C8B 77          	LD	(HL),A	;INTO THE
2228   0C8C 23          	INC	HL	;FIRST QUADRANT
2229   0C8D 78          	LD	A,B	;OF THE
2230   0C8E E6 F0       	AND	240	;DISPLAY
2231   0C90 1F          	RRA
2232   0C91 1F          	RRA
2233   0C92 1F          	RRA
2234   0C93 1F          	RRA
2235   0C94 77          	LD	(HL),A
2236   0C95 23          	INC	HL
2237   0C96 C9          	RET
2238   0C97             ;-----------------
2239   0C97             ; SCAN 8X8 DISPLAY
2240   0C97             ;-----------------
2241   0C97             ;PUT THE 8 RAM LOCATIONS POINTED TO
2242   0C97             ;BY HL ON THE 8X8 DISPLAY,LOW BYTE
2243   0C97             ;ON TOP ROW.
2244   0C97             ;  ROUTINE PERIOD IS 500uS
2245   0C97             ;  PULSE WIDTH 15uS  GIVES 3% DUTY
2246   0C97             ;
2247   0C97             ; ENTRY : HL = ADDRESS OF 8X8 BUFFER
2248   0C97             ;	EXIT : NO REGISTERS MODIFIED
2249   0C97             ;
2250   0C97 F5          SKATE	PUSH	AF
2251   0C98 C5          	PUSH	BC
2252   0C99 E5          	PUSH	HL	;SAVE REGISTERS
2253   0C9A 0E 80       	LD	C,80H
2254   0C9C 7E          SKATE1	LD	A,(HL)
2255   0C9D~            #IFDEF TEC-1F
2256   0C9D~            	OUT	(PORT3),A	;OUTPUT X
2257   0C9D             #ELSE
2258   0C9D D3 80       	OUT	(IO0),A	;OUTPUT X
2259   0C9F             #ENDIF
2260   0C9F 79          	LD	A,C
2261   0CA0~            #IFDEF TEC-1F
2262   0CA0~            	OUT	(PORT4),A	;OUTPUT Y
2263   0CA0             #ELSE
2264   0CA0 D3 82       	OUT	(IO2),A	;OUTPUT Y
2265   0CA2             #ENDIF
2266   0CA2 06 02       	LD	B,02H
2267   0CA4 10 FE       SKATE2	DJNZ	SKATE2	;ON TIME DELAY
2268   0CA6 AF          	XOR	A
2269   0CA7~            #IFDEF TEC-1F
2270   0CA7~            	OUT	(PORT3),A
2271   0CA7~            	OUT	(PORT4),A	;CLEAR DISPLAY LATCHES
2272   0CA7             #ELSE
2273   0CA7 D3 80       	OUT	(IO0),A
2274   0CA9 D3 82       	OUT	(IO2),A	;CLEAR DISPLAY LATCHES
2275   0CAB             #ENDIF
2276   0CAB 06 08       	LD	B,08H
2277   0CAD 10 FE       SKATE3	DJNZ	SKATE3	;OFF TIME DELAY
2278   0CAF 23          	INC	HL
2279   0CB0 CB 09       	RRC	C
2280   0CB2 30 E8       	JR	NC,SKATE1	;MORE TO OUTPUT
2281   0CB4 E1          	POP	HL
2282   0CB5 C1          	POP	BC
2283   0CB6 F1          	POP	AF
2284   0CB7 C9          	RET
2285   0CB8             ;----------------------------
2286   0CB8             ; FUNCTION F - CLOCK CALENDAR
2287   0CB8             ;----------------------------
2288   0CB8 CD A4 05    TIME	CALL	BEEP
2289   0CBB CD 8B 04    	CALL	KEYREL	;WAIT FOR KEY RELEASE
2290   0CBE DD 21 00 3F 	LD	IX,VARIDX	;USE IX FOR TEMP VARIABLES
2291   0CC2 3A 3B 3F    	LD	A,(ONTIM)
2292   0CC5 DD 77 00    	LD	(IX+0),A	;SAVE DISPLAY SCAN DELAY
2293   0CC8 3E 60       	LD	A,60H
2294   0CCA 32 3B 3F    	LD	(ONTIM),A	;USE NEW DELAY
2295   0CCD DD 77 01    	LD	(IX+1),A	;START IN TIME MODE
2296   0CD0             ;
2297   0CD0             ; DISPLAY TIME,CHECK FOR KEY
2298   0CD0             ;
2299   0CD0 CD 26 0E    TIME1	CALL	RWATCH	;READ THE CLOCK/CALENDAR
2300   0CD3 CD 10 0D    	CALL	UPDBUF	;UPDATE THE DISPLAY BUFFER
2301   0CD6 CD EE 03    	CALL	SCAND
2302   0CD9 CD 28 04    	CALL	SCANKEY
2303   0CDC CB 6F       	BIT	5,A
2304   0CDE 28 F0       	JR	Z,TIME1	;NO KEY KEEP LOOKING
2305   0CE0 E6 1F       	AND	1FH
2306   0CE2 21 EA 0C    	LD	HL,TIMKEY
2307   0CE5 CD 95 04    	CALL	MENU
2308   0CE8 18 E6       	JR	TIME1
2309   0CEA             
2310   0CEA 04          TIMKEY	.DB	4
2311   0CEB 10 11 12 13 	.DB	10H,11H,12H,13H
2312   0CEF F7 0C 88 0D 	.DW	CLKEXT,SETCLK,CALKEY,CALKEY
2312   0CF3 01 0D 01 0D 
2313   0CF7             ;--------------------
2314   0CF7             ; EXIT CLOCK CALENDAR
2315   0CF7             ;--------------------
2316   0CF7 E1          CLKEXT	POP	HL	;REMOVE RETURN
2317   0CF8 DD 7E 00    	LD	A,(IX+0)
2318   0CFB 32 3B 3F    	LD	(ONTIM),A	;RESTORE DELAY TIME
2319   0CFE C3 16 07    	JP	CANCEL
2320   0D01             ;--------------------
2321   0D01             ; TOGGLE DISPLAY MODE
2322   0D01             ;--------------------
2323   0D01 CD A4 05    CALKEY	CALL	BEEP
2324   0D04 CD 8B 04    	CALL	KEYREL
2325   0D07 DD 7E 01    	LD	A,(IX+1)
2326   0D0A EE 80       	XOR	80H	;TOGGLE DISPLAY
2327   0D0C DD 77 01    	LD	(IX+1),A
2328   0D0F C9          	RET
2329   0D10             ;----------------------
2330   0D10             ; UPDATE DISPLAY BUFFER
2331   0D10             ;----------------------
2332   0D10 DD CB 01 7E UPDBUF	BIT	7,(IX+1)	;WHICH DISPLAY MODE?
2333   0D14 20 22       	JR	NZ,UPDBF2	;CALENDAR DISPLAY
2334   0D16             ;
2335   0D16             ; TIME DISPLAY
2336   0D16             ;
2337   0D16 3A 1E 3F    UPDBF1	LD	A,(SWREG1)
2338   0D19 CD BE 03    	CALL	CONBYT
2339   0D1C CB FD       	SET	7,L	;SET DECIMAL POINT
2340   0D1E 22 35 3F    	LD	(DISBUF),HL	;SHOW SECONDS (0-59)
2341   0D21 3A 1F 3F    	LD	A,(SWREG2)
2342   0D24 CD BE 03    	CALL	CONBYT
2343   0D27 CB FD       	SET	7,L	;SET DECIMAL POINT
2344   0D29 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MINUTES (0-59)
2345   0D2C 3A 20 3F    	LD	A,(SWREG3)
2346   0D2F CD BE 03    	CALL	CONBYT
2347   0D32 CB FD       	SET	7,L	;SET DECIMAL POINT
2348   0D34 22 39 3F    	LD	(DISBUF+4),HL	;SHOW HOURS (0-23)
2349   0D37 C9          	RET
2350   0D38             ;
2351   0D38             ; CALENDAR DISPLAY
2352   0D38             ;
2353   0D38 3A 24 3F    UPDBF2	LD	A,(SWREG7)
2354   0D3B CD BE 03    	CALL	CONBYT
2355   0D3E 22 35 3F    	LD	(DISBUF),HL	;SHOW YEAR (0-99)
2356   0D41             ;
2357   0D41             ; CHECK MODE FOR DD/MM/YY OR MM/DD/YY
2358   0D41             ;
2359   0D41 21 1B 3F    	LD	HL,CALMDE
2360   0D44 CB 7E       	BIT	7,(HL)
2361   0D46 20 14       	JR	NZ,UPDBF3	;MM/DD/YY MODE
2362   0D48             ;
2363   0D48             ; DD/MM/YY MODE
2364   0D48             ;
2365   0D48 3A 23 3F    	LD	A,(SWREG6)
2366   0D4B CD BE 03    	CALL	CONBYT
2367   0D4E 22 37 3F    	LD	(DISBUF+2),HL	;SHOW MONTH (1-12)
2368   0D51 3A 22 3F    	LD	A,(SWREG5)
2369   0D54 CD BE 03    	CALL	CONBYT
2370   0D57 22 39 3F    	LD	(DISBUF+4),HL	;SHOW DATE (1-31)
2371   0D5A 18 12       	JR	UPDBF4
2372   0D5C             ;
2373   0D5C             ; MM/DD/YY MODE
2374   0D5C             ;
2375   0D5C 3A 23 3F    UPDBF3	LD	A,(SWREG6)
2376   0D5F CD BE 03    	CALL	CONBYT
2377   0D62 22 39 3F    	LD	(DISBUF+4),HL	;SHOW MONTH (1-12)
2378   0D65 3A 22 3F    	LD	A,(SWREG5)
2379   0D68 CD BE 03    	CALL	CONBYT
2380   0D6B 22 37 3F    	LD	(DISBUF+2),HL	;SHOW DATE (1-31)
2381   0D6E             ;
2382   0D6E             ; SHOW DAY
2383   0D6E             ;
2384   0D6E 3A 21 3F    UPDBF4	LD	A,(SWREG4)	;GET DAY REG
2385   0D71 E6 07       	AND	07H
2386   0D73 28 12       	JR	Z,UPDBF5	;ZERO IS ILLEGAL
2387   0D75 FE 07       	CP	07H
2388   0D77 28 0E       	JR	Z,UPDBF5	;DON'T SHOW SATURDAY
2389   0D79 2F          	CPL	;WORK OUT
2390   0D7A D6 01       	SUB	01H	;WHICH DECIMAL POINT
2391   0D7C E6 07       	AND	07H	;TO LIGHT
2392   0D7E 21 35 3F    	LD	HL,DISBUF	;ADDING THE DAY
2393   0D81 06 00       	LD	B,00H	;TO A DISPLAY
2394   0D83 4F          	LD	C,A	;BUFFER INDEX
2395   0D84 09          	ADD	HL,BC	;AND SETTING THE
2396   0D85 CB FE       	SET	7,(HL)	;DECIMAL POINT
2397   0D87 C9          UPDBF5	RET	;IN THAT DISPLAY
2398   0D88             ;--------------
2399   0D88             ; SET TIME/DATE
2400   0D88             ;--------------
2401   0D88 CD A4 05    SETCLK	CALL	BEEP
2402   0D8B CD 8B 04    	CALL	KEYREL
2403   0D8E             ;
2404   0D8E             ; EDIT THE DISPLAY BUFFER
2405   0D8E             ;
2406   0D8E CD 10 0D    SETCK1	CALL	UPDBUF	;UPDATE DISPLAY BUFFER
2407   0D91 CD 67 04    	CALL	SKEYIN
2408   0D94 CD 8B 04    	CALL	KEYREL
2409   0D97 FE 10       	CP	10H	;FN KEY EXITS (NO CHANGE)
2410   0D99 C8          	RET	Z
2411   0D9A FE 11       	CP	11H	;AD KEY SETS CLOCK/CALENDAR
2412   0D9C 28 6E       	JR	Z,SETCK8
2413   0D9E FE 12       	CP	12H
2414   0DA0 28 3D       	JR	Z,SETCK4	;PLUS KEY
2415   0DA2 FE 13       	CP	13H
2416   0DA4 28 4F       	JR	Z,SETCK6	;MINUS KEY
2417   0DA6 FE 0A       	CP	0AH	;NO A-F KEYS
2418   0DA8 30 E4       	JR	NC,SETCK1
2419   0DAA             ;
2420   0DAA             ; IS IT SET CLOCK OR SET CALENDAR?
2421   0DAA             ;
2422   0DAA DD CB 01 7E 	BIT	7,(IX+1)
2423   0DAE 20 0D       	JR	NZ,SETCK2
2424   0DB0             ;
2425   0DB0             ; SET CLOCK DISPLAY
2426   0DB0             ;
2427   0DB0 21 1E 3F    	LD	HL,SWREG1
2428   0DB3 ED 6F       	RLD	;MOVE THE NEW KEY
2429   0DB5 23          	INC	HL	;INTO THE CLOCK BUFFER
2430   0DB6 ED 6F       	RLD
2431   0DB8 23          	INC	HL
2432   0DB9 ED 6F       	RLD
2433   0DBB 18 D1       	JR	SETCK1
2434   0DBD             ;
2435   0DBD             ; SET CALENDAR DISPLAY
2436   0DBD             ;
2437   0DBD 21 1B 3F    SETCK2	LD	HL,CALMDE
2438   0DC0 CB 7E       	BIT	7,(HL)
2439   0DC2 20 0D       	JR	NZ,SETCK3	;MM/DD/YY MODE
2440   0DC4             ;
2441   0DC4             ; SET CALENDAR AS DD/MM/YY
2442   0DC4             ;
2443   0DC4 21 24 3F    	LD	HL,SWREG7
2444   0DC7 ED 6F       	RLD	;MOVE THE NEW KEY
2445   0DC9 2B          	DEC	HL	;INTO THE CAL BUFFER
2446   0DCA ED 6F       	RLD
2447   0DCC 2B          	DEC	HL
2448   0DCD ED 6F       	RLD
2449   0DCF 18 BD       	JR	SETCK1
2450   0DD1             ;
2451   0DD1             ; SET CALENDAR AS MM/DD/YY
2452   0DD1             ;
2453   0DD1 21 24 3F    SETCK3	LD	HL,SWREG7
2454   0DD4 ED 6F       	RLD	;MOVE THE NEW KEY
2455   0DD6 2B          	DEC	HL	;INTO THE CAL BUFFER
2456   0DD7 2B          	DEC	HL
2457   0DD8 ED 6F       	RLD
2458   0DDA 23          	INC	HL
2459   0DDB ED 6F       	RLD
2460   0DDD 18 AF       	JR	SETCK1
2461   0DDF             ;
2462   0DDF             ; INC DAY
2463   0DDF             ;
2464   0DDF DD CB 01 7E SETCK4	BIT	7,(IX+1)
2465   0DE3 28 A9       	JR	Z,SETCK1
2466   0DE5 3A 21 3F    	LD	A,(SWREG4)
2467   0DE8 FE 07       	CP	07H	;IS THE DAY SUNDAY?
2468   0DEA 20 02       	JR	NZ,SETCK5
2469   0DEC 3E 00       	LD	A,00H	;SET MONDAY
2470   0DEE 3C          SETCK5	INC	A	;DAY=DAY+1
2471   0DEF 32 21 3F    	LD	(SWREG4),A
2472   0DF2 C3 8E 0D    	JP	SETCK1
2473   0DF5             ;
2474   0DF5             ; DEC DAY
2475   0DF5             ;
2476   0DF5 DD CB 01 7E SETCK6	BIT	7,(IX+1)
2477   0DF9 CA 8E 0D    	JP	Z,SETCK1
2478   0DFC 3A 21 3F    	LD	A,(SWREG4)
2479   0DFF FE 01       	CP	01H	;IS THE DAY MONDAY?
2480   0E01 20 02       	JR	NZ,SETCK7
2481   0E03 3E 08       	LD	A,08H	;SET SUNDAY
2482   0E05 3D          SETCK7	DEC	A	;DAY=DAY-1
2483   0E06 32 21 3F    	LD	(SWREG4),A
2484   0E09 C3 8E 0D    	JP	SETCK1
2485   0E0C             ;
2486   0E0C             ; SET THE CLOCK/CALENDAR WITH NEW DATA
2487   0E0C             ;
2488   0E0C CD A4 05    SETCK8	CALL	BEEP
2489   0E0F CD 8B 04    	CALL	KEYREL
2490   0E12 3A 20 3F    	LD	A,(SWREG3)
2491   0E15 E6 3F       	AND	3FH	;24 HOUR MODE
2492   0E17 32 20 3F    	LD	(SWREG3),A
2493   0E1A 3A 21 3F    	LD	A,(SWREG4)
2494   0E1D E6 07       	AND	07H	;OSC ON,RST ENABLED
2495   0E1F 32 21 3F    	LD	(SWREG4),A
2496   0E22 CD B0 0E    	CALL	WWATCH	;WRITE CHANGES
2497   0E25 C9          	RET
2498   0E26             ;---------------------
2499   0E26             ; READ FROM SMARTWATCH
2500   0E26             ;---------------------
2501   0E26             ; READS DATA FROM SMARTWATCH, USES LOOKUP TABLE TO
2502   0E26             ; WRITE 64 BIT ACCESS CODE TO ENABLE THE SMARTWATCH.
2503   0E26             ; READS ALL DATA INTO REGISTERS AS RAM CANNOT BE READ
2504   0E26             ; OR WRITTEN TO WHILE WATCH IS ENABLED.
2505   0E26             ;
2506   0E26             ;  ENTRY : NONE
2507   0E26             ;  EXIT  : NO WORKING REGISTERS MODIFIED
2508   0E26             ;          (ALTERNATE SET MODIFIED)
2509   0E26             ;  CONTENTS OF SMARTWATCH WRITTEN TO SWREG0 - SWREG7
2510   0E26             ;
2511   0E26             ;
2512   0E26             ; ENABLE SMARTWATCH
2513   0E26             ;
2514   0E26 F5          RWATCH	PUSH	AF
2515   0E27 C5          	PUSH	BC
2516   0E28 D5          	PUSH	DE
2517   0E29 E5          	PUSH	HL
2518   0E2A 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2519   0E2D 21 70 0E    	LD	HL,PATERN	;WRITE D0 OF ALL THE BYTES
2520   0E30 06 40       	LD	B,64	;IN THE TABLE TO THE RAM TO
2521   0E32 7E          RWACH1	LD	A,(HL)	;ENABLE THE SMARTWATCH
2522   0E33 32 64 3F    	LD	(DALLAS),A
2523   0E36 23          	INC	HL
2524   0E37 10 F9       	DJNZ	RWACH1
2525   0E39             ;
2526   0E39             ; READ DATA FROM WATCH
2527   0E39             ;
2528   0E39 06 20       	LD	B,32
2529   0E3B 3A 64 3F    RWACH2	LD	A,(DALLAS)	;SHIFT THE FIRST 32 BITS
2530   0E3E CB 3F       	SRL	A	;INTO THE 16 BIT REGISTERS
2531   0E40 CB 1A       	RR	D	;DE AND HL
2532   0E42 CB 1B       	RR	E	;THEN EXCHANGE THEM WITH
2533   0E44 CB 1C       	RR	H	;THE ALTERNATE PAIR
2534   0E46 CB 1D       	RR	L
2535   0E48 10 F1       	DJNZ	RWACH2
2536   0E4A D9          	EXX
2537   0E4B 06 20       	LD	B,32
2538   0E4D 3A 64 3F    RWACH3	LD	A,(DALLAS)	;NOW SHIFT THE LAST 32 BITS
2539   0E50 CB 3F       	SRL	A	;INTO THE SAME 16 BIT REGISTERS
2540   0E52 CB 1A       	RR	D
2541   0E54 CB 1B       	RR	E
2542   0E56 CB 1C       	RR	H
2543   0E58 CB 1D       	RR	L
2544   0E5A 10 F1       	DJNZ	RWACH3
2545   0E5C             ;
2546   0E5C             ; SAVE IN WATCH REGISTERS
2547   0E5C             ;
2548   0E5C 22 21 3F    	LD	(SWREG4),HL	;SMARTWATCH READ IS COMPLETE
2549   0E5F ED 53 23 3F 	LD	(SWREG6),DE	;GET THE DATA
2550   0E63 D9          	EXX
2551   0E64 22 1D 3F    	LD	(SWREG0),HL
2552   0E67 ED 53 1F 3F 	LD	(SWREG2),DE
2553   0E6B E1          	POP	HL
2554   0E6C D1          	POP	DE
2555   0E6D C1          	POP	BC
2556   0E6E F1          	POP	AF
2557   0E6F C9          	RET
2558   0E70             ;
2559   0E70             ; SMARTWATCH ACCESS PATTERN
2560   0E70             ;
2561   0E70 C5 E2 71 B8 PATERN	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2561   0E74 5C 2E 17 8B 
2562   0E78 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2562   0E7C A3 D1 E8 74 
2563   0E80 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2563   0E84 3A 1D 8E 47 
2564   0E88 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2564   0E8C C5 E2 71 B8 
2565   0E90 C5 E2 71 B8 	.DB	0C5H,0E2H,71H,0B8H,5CH,2EH,17H,8BH
2565   0E94 5C 2E 17 8B 
2566   0E98 3A 1D 8E 47 	.DB	3AH,1DH,8EH,47H,0A3H,0D1H,0E8H,74H
2566   0E9C A3 D1 E8 74 
2567   0EA0 A3 D1 E8 74 	.DB	0A3H,0D1H,0E8H,74H,3AH,1DH,8EH,47H
2567   0EA4 3A 1D 8E 47 
2568   0EA8 5C 2E 17 8B 	.DB	5CH,2EH,17H,8BH,0C5H,0E2H,71H,0B8H
2568   0EAC C5 E2 71 B8 
2569   0EB0             ;--------------------
2570   0EB0             ; WRITE TO SMARTWATCH
2571   0EB0             ;--------------------
2572   0EB0             ;
2573   0EB0             ; WRITE DATA TO SMARTWATCH BY FIRST ACCESSING
2574   0EB0             ; IT USING BIT MANIPULATION.
2575   0EB0             ; DATA IS WRITTEN BY FIRSTLY PUTTING ALL 64 BITS
2576   0EB0             ; INTO REGISTERS AS RAM CANNOT BE ACCESSED ONCE THE
2577   0EB0             ; SMARTWATCH IS ENABLED.
2578   0EB0             ;
2579   0EB0             ; ENTRY : NONE
2580   0EB0             ; THE DATA TO WRITE TO THE SMARTWATCH
2581   0EB0             ; MUST BE IN SWREG0 - SWREG7
2582   0EB0             ;  EXIT : NO WORKING REGISTERS MODIFIED
2583   0EB0             ;  (ALTERNATE SET MODIFIED)
2584   0EB0             ; GET DATA TO WRITE TO WATCH
2585   0EB0             ;
2586   0EB0 F5          WWATCH	PUSH	AF
2587   0EB1 C5          	PUSH	BC
2588   0EB2 D5          	PUSH	DE
2589   0EB3 E5          	PUSH	HL
2590   0EB4 2A 21 3F    	LD	HL,(SWREG4)	;SET UP THE
2591   0EB7 ED 5B 23 3F 	LD	DE,(SWREG6)	;16 BIT REGISTERS
2592   0EBB D9          	EXX
2593   0EBC 2A 1D 3F    	LD	HL,(SWREG0)	;WITH THE DATA TO BE
2594   0EBF ED 5B 1F 3F 	LD	DE,(SWREG2)	;WRITTEN TO THE SMARTWATCH
2595   0EC3             ;
2596   0EC3             ; WRITE 64 BIT ACCESS CODE TO ENABLE SMARTWATCH
2597   0EC3             ;
2598   0EC3 3A 64 3F    	LD	A,(DALLAS)	;INITIATE PATTERN
2599   0EC6 3E C5       	LD	A,0C5H
2600   0EC8 0E 80       	LD	C,80H	;NUMBER OF BYTES
2601   0ECA 06 80       WWACH1	LD	B,80H	;NUMBER OF BITS
2602   0ECC 32 64 3F    WWACH2	LD	(DALLAS),A	;WRITE TO RAM
2603   0ECF CB 0F       	RRC	A
2604   0ED1 CB 38       	SRL	B
2605   0ED3 30 F7       	JR	NC,WWACH2	;MORE BITS
2606   0ED5 CB 39       	SRL	C
2607   0ED7 38 11       	JR	C,WWACH4	;NO MORE BYTES
2608   0ED9 CB 47       	BIT	0,A
2609   0EDB 20 0A       	JR	NZ,WWACH3
2610   0EDD CB 0F       	RRC	A
2611   0EDF CB 0F       	RRC	A
2612   0EE1 CB 0F       	RRC	A
2613   0EE3 CB 0F       	RRC	A
2614   0EE5 18 E3       	JR	WWACH1
2615   0EE7 2F          WWACH3	CPL
2616   0EE8 18 E0       	JR	WWACH1
2617   0EEA             ;
2618   0EEA             ; WRITE DATA TO WATCH
2619   0EEA             ;
2620   0EEA 06 20       WWACH4	LD	B,32	;SHIFT THE FIRST 32 BITS
2621   0EEC CB 3A       WWACH5	SRL	D	;OUT OF THE 16 BIT REGISTERS
2622   0EEE CB 1B       	RR	E	;ONTO D0 AND INTO
2623   0EF0 CB 1C       	RR	H	;THE SMARTWATCH
2624   0EF2 CB 1D       	RR	L
2625   0EF4 17          	RLA
2626   0EF5 32 64 3F    	LD	(DALLAS),A
2627   0EF8 10 F2       	DJNZ	WWACH5
2628   0EFA D9          	EXX	;RESTORE REGISTERS
2629   0EFB 06 20       	LD	B,32	;GET THE OTHER 32 BITS FROM
2630   0EFD CB 3A       WWACH6	SRL	D	;THE ALTERNATE REGISTER SET
2631   0EFF CB 1B       	RR	E	;AND SHIFT THEM ONTO D0
2632   0F01 CB 1C       	RR	H	;AND INTO THE SMARTWATCH
2633   0F03 CB 1D       	RR	L
2634   0F05 17          	RLA
2635   0F06 32 64 3F    	LD	(DALLAS),A
2636   0F09 10 F2       	DJNZ	WWACH6
2637   0F0B E1          	POP	HL
2638   0F0C D1          	POP	DE
2639   0F0D C1          	POP	BC
2640   0F0E F1          	POP	AF
2641   0F0F C9          	RET
2642   0F10             ;-----------------
2643   0F10             ; ONE SECOND DELAY
2644   0F10             ;-----------------
2645   0F10             ; USES SMARTWATCH TO DELAY FOR 1 SECOND
2646   0F10             ; BY WAITING FOR SECONDS REGISTER TO ROLLOVER
2647   0F10             ;
2648   0F10             ; FIRST READ GETS A REFERENCE, SUBSEQUENT READS
2649   0F10             ; WAIT UNTIL THE SECONDS COUNTER NO LONGER
2650   0F10             ; READS THE SAME AS THE REFERENCE VALUE,
2651   0F10             ; THEN THE ROUTINE RETURNS
2652   0F10             ;
2653   0F10             ; ENTRY : NONE
2654   0F10             ; EXIT : NONE MODIFIED
2655   0F10             ;
2656   0F10 F5          ONESEC	PUSH	AF
2657   0F11 C5          	PUSH	BC
2658   0F12 CD 26 0E    	CALL	RWATCH	;READ WATCH
2659   0F15 3A 1E 3F    	LD	A,(SWREG1)
2660   0F18 47          	LD	B,A	;SAVE REF COUNT
2661   0F19 CD 26 0E    ONESC1	CALL	RWATCH
2662   0F1C 3A 1E 3F    	LD	A,(SWREG1)
2663   0F1F B8          	CP	B	;SAME AS REF?
2664   0F20 CA 19 0F    	JP	Z,ONESC1	;YES SO WAIT AGAIN
2665   0F23 C1          	POP	BC
2666   0F24 F1          	POP	AF
2667   0F25 C9          	RET
2668   0F26             ;---------------
2669   0F26             ; SERIAL MONITOR
2670   0F26             ;---------------
2671   0F26             ; PRESS THE FUNCTION KEY TWICE TO START THE MONITOR
2672   0F26             ; COMMS PARAMETERS ARE 4800,n,8,2
2673   0F26             ;
2674   0F26             ;------------
2675   0F26             ; ASCII CODES
2676   0F26             ;------------
2677   0F26             ESC	.EQU	1BH
2678   0F26             CR	.EQU	0DH
2679   0F26             LF	.EQU	0AH
2680   0F26             
2681   0F26 3E 40       SCBUG	LD	A,40H
2682   0F28 D3 85       	OUT	(SCAN),A	;TURN OFF THE DISPLAY MAKE SERIAL TX HIGH
2683   0F2A             ;
2684   0F2A             ; START UP THE MONITOR
2685   0F2A             ;
2686   0F2A ED 73 14 3F COLD	LD	(SPSAVE),SP	;SAVE STACK POINTER
2687   0F2E 21 8B 12    	LD	HL,SSSTEP
2688   0F31 22 5F 3F    	LD	(RST38),HL	;HIJACK THE SINGLE STEPPER
2689   0F34 CD F3 0B    	CALL	DELONE	;WAIT A SEC SO THE HOST SEES TX HIGH
2690   0F37 21 06 08    	LD	HL,TXDATA
2691   0F3A 22 10 3F    	LD	(PUTCH),HL	;USE THE BITBANG SERIAL TRANSMIT
2692   0F3D 21 31 08    	LD	HL,RXDATA
2693   0F40 22 12 3F    	LD	(GETCH),HL	;USE THE BITBANG SERIAL RECEIVE
2694   0F43 21 FA 13    	LD	HL,INITSZ	;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
2695   0F46 CD 7D 12    	CALL	SNDMSG	;INITIALISE THE TERMINAL
2696   0F49 CD 92 03    	CALL	TYPE
2697   0F4C CD 7D 12    	CALL	SNDMSG	;BOARD TYPE
2698   0F4F 21 2B 13    	LD	HL,SIGNON
2699   0F52 CD 7D 12    	CALL	SNDMSG	;SEND THE SIGNON
2700   0F55 CD 8E 03    	CALL	VERS
2701   0F58 CD 7D 12    	CALL	SNDMSG	;MONITOR VERSION
2702   0F5B 21 4B 13    	LD	HL,CMDLST
2703   0F5E CD 7D 12    	CALL	SNDMSG
2704   0F61             ;
2705   0F61             ; DISPLAY THE PROMPT AND WAIT FOR COMMANDS
2706   0F61             ;
2707   0F61 3E 3E       START2	LD	A,'>'
2708   0F63 CD DE 0F    	CALL	OUTCH	;DISPLAY THE PROMPT
2709   0F66 CD E4 0F    START3	CALL	INCH	;GET A CHARACTER FROM THE CONSOLE
2710   0F69 4F          	LD	C,A	;SAVE FOR LATER
2711   0F6A E6 DF       	AND	0DFH	;TURN LOWER CASE INTO UPPER CASE
2712   0F6C             ;
2713   0F6C             ; IF THE COMMAND IS NOT IN THE COMMAND LIST REJECT IT
2714   0F6C             ;
2715   0F6C 21 8B 0F    	LD	HL,MONMENU
2716   0F6F 46          	LD	B,(HL)	;NUMBER OF COMMANDS
2717   0F70 23          	INC	HL
2718   0F71 BE          START4	CP	(HL)	;IN THE LIST?
2719   0F72 28 05       	JR	Z,START5	;OK DO IT
2720   0F74 23          	INC	HL
2721   0F75 10 FA       	DJNZ	START4	;KEEP LOOKING
2722   0F77 18 ED       	JR	START3
2723   0F79 79          START5	LD	A,C	;GET ORIGINAL CHAR BACK
2724   0F7A CD DE 0F    	CALL	OUTCH	;TO ECHO IT
2725   0F7D E6 DF       	AND	0DFH	;AND TURN BACK INTO UPPER CASE
2726   0F7F 21 8B 0F    	LD	HL,MONMENU	;USE THE MENU HANDLER
2727   0F82 CD 95 04    	CALL	MENU	;KEY IN A, EXECUTE MENU
2728   0F85             ;
2729   0F85             ; THE MENU FUNCTION CALL LEAVES THE RETURN ADDRESS OF THE MENU CALL
2730   0F85             ; ON THE STACK SO ANY CALLED SUBROUTINES CAN COME BACK HERE WITH A RET
2731   0F85             ;
2732   0F85 CD D7 0F    WARM	CALL	TXCRLF	;START ON A NEW LINE
2733   0F88 C3 61 0F    	JP	START2
2734   0F8B             ;
2735   0F8B             ; SCBUG MONITOR COMMANDS
2736   0F8B             ;
2737   0F8B 07          MONMENU	.DB 7
2738   0F8C 44 48 54 4D 	.DB	'D','H','T','M','G','I','X'
2738   0F90 47 49 58 
2739   0F93 BD 11 0D 10 	.DW	DSPLAY,HELP,SSTOGL,MODIFY
2739   0F97 09 11 12 11 
2740   0F9B EA 0F 65 11 	.DW	GOJUMP,INTHEX,EXIT
2740   0F9F 7E 11 
2741   0FA1             ;-----------------------------
2742   0FA1             ; GET A BYTE FROM THE TERMINAL
2743   0FA1             ;-----------------------------
2744   0FA1 CD E4 0F    GETCHR	CALL	INCH
2745   0FA4 FE 1B       	CP	ESC
2746   0FA6 28 27       	JR	Z,GETOUT
2747   0FA8 47          	LD	B,A	;SAVE TO ECHO
2748   0FA9 CD 91 11    	CALL	ASC2HEX
2749   0FAC 30 F3       	JR	NC,GETCHR	;REJECT NON HEX CHARS
2750   0FAE 21 18 3F    	LD	HL,DATA
2751   0FB1 77          	LD	(HL),A
2752   0FB2 78          	LD	A,B
2753   0FB3 CD DE 0F    	CALL	OUTCH	;ECHO VALID HEX
2754   0FB6 CD E4 0F    GETNYB	CALL	INCH
2755   0FB9 FE 1B       	CP	ESC
2756   0FBB 28 12       	JR	Z,GETOUT
2757   0FBD 47          	LD	B,A	;SAVE TO ECHO
2758   0FBE CD 91 11    	CALL	ASC2HEX
2759   0FC1 30 F3       	JR	NC,GETNYB	;REJECT NON HEX CHARS
2760   0FC3 ED 6F       	RLD
2761   0FC5 78          	LD	A,B
2762   0FC6 CD DE 0F    	CALL	OUTCH	;ECHO VALID HEX
2763   0FC9 7E          	LD	A,(HL)
2764   0FCA CD CF 0F    	CALL	GETOUT	;MAKE SURE WE CLEAR THE CARRY BY SETTING IT,
2765   0FCD 3F          	CCF	;AND THEN COMPLEMENTING IT
2766   0FCE C9          	RET
2767   0FCF 37          GETOUT	SCF	;SET THE CARRY FLAG TO EXIT BACK TO MENU
2768   0FD0 C9          	RET
2769   0FD1             ;---------------
2770   0FD1             ; OUTPUT A SPACE
2771   0FD1             ;---------------
2772   0FD1 3E 20       OUTSP	LD	A,' '
2773   0FD3 CD DE 0F    	CALL	OUTCH
2774   0FD6 C9          	RET
2775   0FD7             ;-------------
2776   0FD7             ; OUTPUT CRLF
2777   0FD7             ;------------
2778   0FD7 3E 0D       TXCRLF	LD	A,CR
2779   0FD9 CD DE 0F    	CALL	OUTCH
2780   0FDC 3E 0A       	LD	A,LF
2781   0FDE             ;-----------------------------------
2782   0FDE             ; OUTPUT A CHARACTER TO THE TERMINAL
2783   0FDE             ;-----------------------------------
2784   0FDE DD 2A 10 3F OUTCH	LD	IX,(PUTCH)
2785   0FE2 DD E9       	JP	(IX)
2786   0FE4             ;------------------------------------
2787   0FE4             ; INPUT A CHARACTER FROM THE TERMINAL
2788   0FE4             ;------------------------------------
2789   0FE4 DD 2A 12 3F INCH	LD	IX,(GETCH)
2790   0FE8 DD E9       	JP	(IX)
2791   0FEA             ;------------------------------
2792   0FEA             ; GO <ADDR>
2793   0FEA             ; TRANSFERS EXECUTION TO <ADDR>
2794   0FEA             ;------------------------------
2795   0FEA CD D1 0F    GOJUMP	CALL	OUTSP
2796   0FED CD A1 0F    	CALL	GETCHR	;GET ADDRESS HIGH BYTE
2797   0FF0 D8          	RET	C
2798   0FF1 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2799   0FF4 CD A1 0F    	CALL	GETCHR	;GET ADDRESS LOW BYTE
2800   0FF7 D8          	RET	C
2801   0FF8 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2802   0FFB             ;
2803   0FFB             ; WAIT FOR A CR OR ESC
2804   0FFB             ;
2805   0FFB CD E4 0F    GOJMP1	CALL	INCH
2806   0FFE FE 1B       	CP	ESC	;ESC KEY?
2807   1000 C8          	RET	Z
2808   1001 FE 0D       	CP	CR
2809   1003 20 F6       	JR	NZ,GOJMP1
2810   1005 CD D7 0F    	CALL	TXCRLF
2811   1008 E1          	POP	HL	;POP THE UNUSED MENU RETURN ADDRESS FROM THE STACK
2812   1009 2A 16 3F    	LD	HL,(ADDR)
2813   100C E9          	JP	(HL)	;GOOD LUCK WITH THAT!
2814   100D             ;---------------------
2815   100D             ; DISPLAY COMMAND HELP
2816   100D             ;---------------------
2817   100D CD 1E 13    HELP	CALL	PRNTSZ
2818   1010 0D 0A 44 20 	.DB	CR,LF,"D AAAA    Display Data at Address AAAA"
2818   1014 41 41 41 41 
2818   1018 20 20 20 20 
2818   101C 44 69 73 70 
2818   1020 6C 61 79 20 
2818   1024 44 61 74 61 
2818   1028 20 61 74 20 
2818   102C 41 64 64 72 
2818   1030 65 73 73 20 
2818   1034 41 41 41 41 
2819   1038 0D 0A 20 20 	.DB	CR,LF,"          SPACE to CONTINUE, ESC to QUIT"
2819   103C 20 20 20 20 
2819   1040 20 20 20 20 
2819   1044 53 50 41 43 
2819   1048 45 20 74 6F 
2819   104C 20 43 4F 4E 
2819   1050 54 49 4E 55 
2819   1054 45 2C 20 45 
2819   1058 53 43 20 74 
2819   105C 6F 20 51 55 
2819   1060 49 54 
2820   1062 0D 0A 54 20 	.DB	CR,LF,"T         Toggle Single Stepper"
2820   1066 20 20 20 20 
2820   106A 20 20 20 20 
2820   106E 54 6F 67 67 
2820   1072 6C 65 20 53 
2820   1076 69 6E 67 6C 
2820   107A 65 20 53 74 
2820   107E 65 70 70 65 
2820   1082 72 
2821   1083 0D 0A 4D 20 	.DB	CR,LF,"M AAAA    Modify Address AAAA"
2821   1087 41 41 41 41 
2821   108B 20 20 20 20 
2821   108F 4D 6F 64 69 
2821   1093 66 79 20 41 
2821   1097 64 64 72 65 
2821   109B 73 73 20 41 
2821   109F 41 41 41 
2822   10A2 0D 0A 47 20 	.DB	CR,LF,"G AAAA    GO from AAAA"
2822   10A6 41 41 41 41 
2822   10AA 20 20 20 20 
2822   10AE 47 4F 20 66 
2822   10B2 72 6F 6D 20 
2822   10B6 41 41 41 41 
2823   10BA 0D 0A 49 20 	.DB	CR,LF,"I         Download INTEL Hex"
2823   10BE 20 20 20 20 
2823   10C2 20 20 20 20 
2823   10C6 44 6F 77 6E 
2823   10CA 6C 6F 61 64 
2823   10CE 20 49 4E 54 
2823   10D2 45 4C 20 48 
2823   10D6 65 78 
2824   10D8 0D 0A 58 20 	.DB	CR,LF,"X         Exit"
2824   10DC 20 20 20 20 
2824   10E0 20 20 20 20 
2824   10E4 45 78 69 74 
2825   10E8 0D 0A 48 20 	.DB	CR,LF,"H         This Help Message",CR,LF,0
2825   10EC 20 20 20 20 
2825   10F0 20 20 20 20 
2825   10F4 54 68 69 73 
2825   10F8 20 48 65 6C 
2825   10FC 70 20 4D 65 
2825   1100 73 73 61 67 
2825   1104 65 0D 0A 00 
2826   1108 C9          	RET
2827   1109             ;-----------------------------------------------
2828   1109             ; T COMMAND TOGGLE SINGLE STEPPER (IF INSTALLED)
2829   1109             ;-----------------------------------------------
2830   1109             ; CAN'T TELL IF THE SINGLE STEPPER IS ON OR OFF
2831   1109             ; SO WE WILL JUST TOGGLE THE FLIP FLOP
2832   1109             ;
2833   1109 21 97 13    SSTOGL	LD	HL,TOGGLE
2834   110C CD 7D 12    	CALL	SNDMSG
2835   110F~            #IFDEF TEC-1F
2836   110F~            	OUT	(PORT7),A	;TOGGLE HARDWARE LATCH
2837   110F             #ELSE
2838   110F D3 87       	OUT	(IO7),A	;TOGGLE HARDWARE LATCH
2839   1111             #ENDIF
2840   1111 C9          	RET
2841   1112             ;----------------------------
2842   1112             ; M DISPLAY AND MODIFY MEMORY
2843   1112             ;----------------------------
2844   1112 CD D1 0F    MODIFY	CALL	OUTSP
2845   1115             ;
2846   1115             ;GET THE ADDRESS
2847   1115             ;
2848   1115 CD A1 0F    	CALL	GETCHR
2849   1118 D8          	RET	C
2850   1119 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2851   111C CD A1 0F    	CALL	GETCHR
2852   111F D8          	RET	C
2853   1120 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2854   1123             ;
2855   1123             ; DISPLAY ON A NEW LINE
2856   1123             ;
2857   1123 CD D7 0F    MDIFY1	CALL	TXCRLF
2858   1126 ED 5B 16 3F 	LD	DE,(ADDR)
2859   112A 21 00 3E    	LD	HL,BUFFER
2860   112D CD 4F 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
2861   1130 21 00 3E    	LD	HL,BUFFER
2862   1133 CD 43 12    	CALL	WRDOUT	;OUTPUT THE ADDRESS
2863   1136 CD D1 0F    	CALL	OUTSP
2864   1139             ;
2865   1139             ;GET THE DATA AT THE ADDRESS
2866   1139             ;
2867   1139 2A 16 3F    	LD	HL,(ADDR)
2868   113C 7E          	LD	A,(HL)
2869   113D             ;
2870   113D             ; DISPLAY THE DATA
2871   113D             ;
2872   113D 21 00 3E    	LD	HL,BUFFER
2873   1140 CD 54 12    	CALL	BYTASC	;CONVERT THE DATA BYTE IN A TO ASCII
2874   1143 21 00 3E    	LD	HL,BUFFER
2875   1146 CD 46 12    	CALL	BYTOUT	;OUTPUT THE BYTE
2876   1149 CD D1 0F    	CALL	OUTSP
2877   114C             ;
2878   114C             ; GET NEW DATA,EXIT OR CONTINUE
2879   114C             ;
2880   114C CD A1 0F    	CALL	GETCHR
2881   114F D8          	RET	C
2882   1150 47          	LD	B,A	;SAVE IT FOR LATER
2883   1151 2A 16 3F    	LD	HL,(ADDR)
2884   1154 77          	LD	(HL),A	;PUT THE BYTE AT THE CURRENT ADDRESS
2885   1155 78          	LD	A,B
2886   1156 BE          	CP	(HL)
2887   1157 28 05       	JR	Z,MDIFY2
2888   1159 3E 3F       	LD	A,'?'
2889   115B CD DE 0F    	CALL	OUTCH	;NOT THE SAME DATA, PROBABLY NO RAM THERE
2890   115E             ;
2891   115E             ; INCREMENT THE ADDRESS
2892   115E             ;
2893   115E 23          MDIFY2	INC	HL
2894   115F 22 16 3F    	LD	(ADDR),HL
2895   1162 C3 23 11    	JP	MDIFY1
2896   1165             ;-----------------------
2897   1165             ; RECEIVE INTEL HEX FILE
2898   1165             ;-----------------------
2899   1165 21 AE 13    INTHEX	LD	HL,TXFILE
2900   1168 CD 7D 12    	CALL	SNDMSG	;SEND FILE
2901   116B CD 75 07    	CALL	INTELH
2902   116E 20 07       	JR	NZ,ITHEX1
2903   1170 21 C7 13    	LD	HL,FILEOK
2904   1173 CD 7D 12    	CALL	SNDMSG	;GOT FILE OK
2905   1176 C9          	RET
2906   1177 21 DC 13    ITHEX1	LD	HL,CSUMERR
2907   117A CD 7D 12    	CALL	SNDMSG	;CHECKSUM ERROR
2908   117D C9          	RET
2909   117E             ;------------------------
2910   117E             ; EXIT BACK TO SC MONITOR
2911   117E             ;------------------------
2912   117E 21 EF 13    EXIT	LD	HL,BYE
2913   1181 CD 7D 12    	CALL	SNDMSG
2914   1184 C3 74 02    	JP	MAIN	;STACK IS RESET TO TOP OF RAM IN MAIN
2915   1187             ;------------------
2916   1187             ; DISPLAY REGISTERS
2917   1187             ;------------------
2918   1187 CD EC 12    REGSTR	CALL	DISREG	;DISPLAY REGISTERS
2919   118A 21 00 3E    	LD	HL,BUFFER
2920   118D CD 7D 12    	CALL	SNDMSG
2921   1190 C9          	RET
2922   1191             ;----------------------------------------
2923   1191             ; CONVERT ASCII CHARACTER INTO HEX NYBBLE
2924   1191             ;----------------------------------------
2925   1191             ; THIS ROUTINE IS FOR MASKING OUT KEYBOARD
2926   1191             ; ENTRY OTHER THAN HEXADECIMAL KEYS
2927   1191             ;
2928   1191             ;CONVERTS ASCII 0-9,A-F INTO HEX LSN
2929   1191             ;ENTRY : A= ASCII 0-9,A-F
2930   1191             ;EXIT  : CARRY =  1
2931   1191             ;          A= HEX 0-F IN LSN
2932   1191             ;      : CARRY = 0
2933   1191             ;          A= OUT OF RANGE CHARACTER & 7FH
2934   1191             ; A AND F REGISTERS MODIFIED
2935   1191             ;
2936   1191 E6 7F       ASC2HEX	AND	7FH	;STRIP OUT PARITY
2937   1193 FE 30       	CP	'0'
2938   1195 38 23       	JR	C,AC2HEX4	;LESS THAN 0
2939   1197 FE 3A       	CP	3AH
2940   1199 30 04       	JR	NC,AC2HEX2	;MORE THAN 9
2941   119B E6 0F       	AND	0FH	;CONVERT TO NYBBLE
2942   119D 37          AC2HEX1	SCF	;SET THE CARRY - IS HEX
2943   119E C9          	RET
2944   119F             ;
2945   119F FE 41       AC2HEX2	CP	'A'
2946   11A1 38 17       	JR	C,AC2HEX4	;LESS THAN A
2947   11A3 FE 47       	CP	47H
2948   11A5 30 04       	JR	NC,AC2HEX3	;MORE THAN F
2949   11A7 D6 07       	SUB	07H	;CONVERT TO NYBBLE
2950   11A9 18 F2       	JR	AC2HEX1
2951   11AB             	
2952   11AB FE 61       AC2HEX3	CP	'a'
2953   11AD DA BA 11    	JP	C,AC2HEX4	;LESS THAN a
2954   11B0 FE 67       	CP	67H
2955   11B2 30 06       	JR	NC,AC2HEX4	;MORE THAN f
2956   11B4 E6 DF       	AND 0DFH
2957   11B6 D6 07       	SUB 07H	;CONVERT TO NYBBLE
2958   11B8 18 E3       	JR	AC2HEX1
2959   11BA E6 FF       AC2HEX4	AND	0FFH	;RESET THE CARRY - NOT HEX
2960   11BC C9          	RET
2961   11BD             ;--------------------------
2962   11BD             ; D DISPLAY MEMORY LOCATION
2963   11BD             ;--------------------------
2964   11BD CD D1 0F    DSPLAY	CALL	OUTSP	;A SPACE
2965   11C0 CD A1 0F    	CALL	GETCHR
2966   11C3 D8          	RET	C
2967   11C4 32 17 3F    	LD	(ADDR+1),A	;SAVE ADDRESS HIGH
2968   11C7 CD A1 0F    	CALL	GETCHR
2969   11CA D8          	RET	C
2970   11CB 32 16 3F    	LD	(ADDR),A	;SAVE ADDRESS LOW
2971   11CE             ;
2972   11CE             ; WAIT FOR CR OR ESC
2973   11CE             ;
2974   11CE CD E4 0F    DPLAY1	CALL	INCH
2975   11D1 FE 1B       	CP	ESC
2976   11D3 C8          	RET	Z
2977   11D4 FE 0D       	CP	CR
2978   11D6 20 F6       	JR	NZ,DPLAY1
2979   11D8 CD D7 0F    	CALL	TXCRLF	;NEWLINE
2980   11DB             ;
2981   11DB             ; DISPLAY THE LINE
2982   11DB             ;
2983   11DB CD F0 11    DPLAY2 CALL  DPLINE
2984   11DE ED 53 16 3F 	LD	(ADDR),DE	;SAVE THE NEW ADDRESS
2985   11E2             ;
2986   11E2             ; DISPLAY MORE LINES OR EXIT
2987   11E2             ;
2988   11E2 CD E4 0F    DPLAY3	CALL	INCH
2989   11E5 38 FB       	JR	C,DPLAY3
2990   11E7 FE 20       	CP	' '	;SPACE DISPLAYS THE NEXT LINE
2991   11E9 28 F0       	JR	Z,DPLAY2
2992   11EB FE 1B       	CP	ESC	;ESC EXITS
2993   11ED 20 F3       	JR	NZ,DPLAY3
2994   11EF C9          	RET
2995   11F0             ;-------------------------
2996   11F0             ; DISPLAY A LINE OF MEMORY
2997   11F0             ;-------------------------
2998   11F0 ED 5B 16 3F DPLINE	LD	DE,(ADDR)	;ADDRESS TO BE DISPLAYED
2999   11F4 21 00 3E    	LD	HL,BUFFER	;HL POINTS TO WHERE THE OUTPUT STRING GOES
3000   11F7             ;
3001   11F7             ; DISPLAY THE ADDRESS
3002   11F7             ;
3003   11F7 CD 4F 12    	CALL	WRDASC	;CONVERT ADDRESS IN DE TO ASCII
3004   11FA CD 33 12    	CALL	SPCBUF
3005   11FD             ;
3006   11FD             ; DISPLAY 16 BYTES
3007   11FD             ;
3008   11FD 06 10       	LD	B,16
3009   11FF 1A          DLINE1	LD	A,(DE)
3010   1200 CD 54 12    	CALL	BYTASC
3011   1203 CD 33 12    	CALL	SPCBUF
3012   1206 13          	INC	DE
3013   1207 10 F6       	DJNZ	DLINE1
3014   1209 CD 33 12    	CALL	SPCBUF
3015   120C             ;
3016   120C             ; NOW DISPLAY THE ASCII CHARACTER
3017   120C             ; IF YOU ARE DISPLAYING NON-MEMORY AREAS THE BYTES READ AND THE ASCII COULD
3018   120C             ; BE DIFFERENT BETWEEN THE TWO PASSES!
3019   120C             ;
3020   120C ED 5B 16 3F 	LD	DE,(ADDR)
3021   1210 06 10       	LD	B,16
3022   1212 1A          DLINE2	LD	A,(DE)
3023   1213 FE 20       	CP	20H
3024   1215 38 07       	JR	C,DOT
3025   1217 FE 7F       	CP	7FH
3026   1219 30 03       	JR	NC,DOT
3027   121B C3 20 12    	JP	NDOT
3028   121E 3E 2E       DOT	LD	A,'.'
3029   1220 CD 35 12    NDOT	CALL	INBUF
3030   1223 13          	INC	DE
3031   1224 10 EC       	DJNZ	DLINE2
3032   1226             ;
3033   1226             ;TERMINATE AND DISPLAY STRING
3034   1226             ;
3035   1226 CD 38 12    	CALL	BCRLF
3036   1229 3E 00       	LD	A,00H
3037   122B 77          	LD	(HL),A
3038   122C 21 00 3E    	LD	HL,BUFFER
3039   122F CD 7D 12    	CALL	SNDMSG
3040   1232 C9          	RET
3041   1233             ;
3042   1233             ; PUT A SPACE IN THE BUFFER
3043   1233             ;
3044   1233 3E 20       SPCBUF	LD	A,' '
3045   1235 77          INBUF	LD	(HL),A
3046   1236 23          	INC	HL
3047   1237 C9          	RET
3048   1238             ;
3049   1238             ; PUT A CR LF IN THE BUFFER
3050   1238             ;
3051   1238 3E 0D       BCRLF	LD	A,CR
3052   123A CD 35 12    	CALL	INBUF
3053   123D 3E 0A       	LD	A,LF
3054   123F CD 35 12    	CALL	INBUF
3055   1242 C9          	RET
3056   1243             ;----------------------
3057   1243             ; SEND ASCII HEX VALUES
3058   1243             ;----------------------
3059   1243             ;
3060   1243             ; OUTPUT THE 4 BYTE, WRDOUT
3061   1243             ; THE 2 BYTE, BYTOUT
3062   1243             ; OR THE SINGLE BYTE, NYBOUT
3063   1243             ; ASCII STRING AT HL TO THE SERIAL PORT
3064   1243             ;
3065   1243 CD 46 12    WRDOUT	CALL	BYTOUT
3066   1246 CD 49 12    BYTOUT	CALL	NYBOUT
3067   1249 7E          NYBOUT	LD	A,(HL)
3068   124A CD DE 0F    	CALL	OUTCH
3069   124D 23          	INC	HL
3070   124E C9          	RET
3071   124F             ;----------------
3072   124F             ;CONVERT TO ASCII
3073   124F             ;----------------
3074   124F             ;
3075   124F             ; CONVERT A WORD,A BYTE OR A NYBBLE TO ASCII
3076   124F             ;
3077   124F             ;        ENTRY :  A = BINARY TO CONVERT
3078   124F             ;                  HL = CHARACTER BUFFER ADDRESS
3079   124F             ;        EXIT   :  HL = POINTS TO LAST CHARACTER+1
3080   124F             ;
3081   124F             ;        MODIFIES : DE
3082   124F             ;
3083   124F 7A          WRDASC	LD	A,D	;CONVERT AND
3084   1250 CD 54 12    	CALL	BYTASC	;OUTPUT D
3085   1253 7B          	LD	A,E	;THEN E
3086   1254             ;
3087   1254             ;CONVERT A BYTE TO ASCII 
3088   1254             ;
3089   1254 F5          BYTASC	PUSH	AF	;SAVE A FOR SECOND NYBBLE
3090   1255 0F          	RRCA	;SHIFT HIGH NYBBLE ACROSS
3091   1256 0F          	RRCA
3092   1257 0F          	RRCA
3093   1258 0F          	RRCA
3094   1259 CD 5D 12    	CALL	NYBASC	;CALL NYBBLE CONVERTER
3095   125C F1          	POP	AF	;RESTORE LOW NYBBLE
3096   125D             ;
3097   125D             ; CONVERT A NYBBLE TO ASCII
3098   125D             ;
3099   125D E6 0F       NYBASC	AND	0FH	;MASK OFF HIGH NYBBLE
3100   125F C6 90       	ADD	A,90H	;CONVERT TO
3101   1261 27          	DAA	;ASCII
3102   1262 CE 40       	ADC	A,40H
3103   1264 27          	DAA
3104   1265             ;
3105   1265             ; SAVE IN STRING
3106   1265             ;
3107   1265 77          INSBUF	LD	(HL),A
3108   1266 23          	INC	HL
3109   1267 C9          	RET
3110   1268             ;------------------------------------------------------
3111   1268             ; CONVERT A BYTE INTO A STRING OF ASCII ONES AND ZEROES
3112   1268             ;------------------------------------------------------
3113   1268             ;
3114   1268             ;        DESCRIPTION : CONVERTS A BYTE, STARTING AT BIT 7,
3115   1268             ;                      INTO A STRING OF ASCII
3116   1268             ;                      ONES AND ZEROES.
3117   1268             ;
3118   1268             ;           ENTRY :  A = BINARY TO CONVERT
3119   1268             ;                   HL = CHARACTER BUFFER ADDRESS
3120   1268             ;           EXIT :  HL = POINTS TO LAST CHARACTER+1
3121   1268             ;
3122   1268             ;        MODIFIES : NONE
3123   1268             ;
3124   1268 C5          BITASC PUSH  BC
3125   1269 06 08       	LD	B,08H	;LOOK AT ALL 8 BITS
3126   126B CB 7F       BTASC1	BIT	7,A	;A 1 OR A 0?
3127   126D 20 05       	JR	NZ,BTASC3
3128   126F 0E 30       	LD	C,30H	;IT'S A ZERO
3129   1271 71          BTASC2	LD	(HL),C
3130   1272 18 03       	JR	BTASC4
3131   1274 0E 31       BTASC3	LD	C,31H	;IT'S A ONE
3132   1276 71          	LD	(HL),C
3133   1277 23          BTASC4	INC	HL
3134   1278 17          	RLA
3135   1279 10 F0       	DJNZ	BTASC1	;NEXT BIT
3136   127B C1          	POP	BC
3137   127C C9          	RET
3138   127D             ;-----------------------------------------
3139   127D             ; SEND AN ASCII STRING OUT THE SERIAL PORT
3140   127D             ;-----------------------------------------
3141   127D             ;
3142   127D             ; SENDS A ZERO TERMINATED STRING OR 
3143   127D             ; 128 CHARACTERS MAX. OUT THE SERIAL PORT
3144   127D             ;
3145   127D             ;      ENTRY : HL = POINTER TO ZERO TERMINATED STRING
3146   127D             ;      EXIT  : NONE
3147   127D             ;
3148   127D             ;       MODIFIES : A,B,C
3149   127D             ;
3150   127D 06 80       SNDMSG	LD	B,128	;128 CHARS MAX
3151   127F 7E          SDMSG1	LD	A,(HL)	;GET THE CHAR
3152   1280 FE 00       	CP	00H	;ZERO TERMINATOR?
3153   1282 28 06       	JR	Z,SDMSG2	;FOUND A ZERO TERMINATOR, EXIT
3154   1284 CD DE 0F    	CALL	OUTCH	;TRANSMIT THE CHAR
3155   1287 23          	INC	HL
3156   1288 10 F5       	DJNZ	SDMSG1	;128 CHARS MAX!
3157   128A C9          SDMSG2	RET
3158   128B             ;----------------------
3159   128B             ; SERIAL SINGLE STEPPER
3160   128B             ;----------------------
3161   128B E1          SSSTEP	POP	HL	;GET HL BACK
3162   128C F5          	PUSH	AF	;SAVE AF FOR LATER
3163   128D 22 4D 3F    	LD	(TMPHL),HL
3164   1290 ED 53 4B 3F 	LD	(TMPDE),DE
3165   1294 ED 43 49 3F 	LD	(TMPBC),BC
3166   1298 DD 22 4F 3F 	LD	(TMPIX),IX
3167   129C FD 22 51 3F 	LD	(TMPIY),IY ;SAVE REGISTERS
3168   12A0 E1          	POP	HL	;GET AF BACK
3169   12A1 22 47 3F    	LD	(TMPAF),HL	;SAVE AF
3170   12A4 E1          	POP	HL	;GET PC RETURN ADDRESS
3171   12A5 22 45 3F    	LD	(TMPPC),HL	;SAVE PC
3172   12A8 ED 73 53 3F 	LD	(TMPSP),SP	;SAVE STACK POINTER
3173   12AC             ;
3174   12AC CD EC 12    	CALL	DISREG	;DISPLAY REGISTERS
3175   12AF 21 00 3E    	LD	HL,BUFFER
3176   12B2 CD 7D 12    	CALL	SNDMSG
3177   12B5             ;
3178   12B5             ; SPACE KEY CONTINUES
3179   12B5             ;
3180   12B5 CD E4 0F    SSTEP3	CALL	INCH
3181   12B8 38 FB       	JR	C,SSTEP3
3182   12BA FE 20       	CP	' '	;IS IT SPACE
3183   12BC 28 0C       	JR	Z,SSTEP4
3184   12BE FE 1B       	CP	ESC	;ESC QUITS
3185   12C0 20 F3       	JR	NZ,SSTEP3
3186   12C2             ;
3187   12C2             ; RETURN TO MONITOR
3188   12C2             ;
3189   12C2 ED 7B 14 3F 	LD	SP,(SPSAVE)	;RESTORE THE STACK POINTER
3190   12C6 FB          	EI	;RE-ENABLE INTERRUPTS
3191   12C7 C3 85 0F    	JP	WARM	;EXIT THE INTERRUPT ROUTINE
3192   12CA             ;
3193   12CA             ; RETURN TO PROGRAM
3194   12CA             ;
3195   12CA ED 7B 53 3F SSTEP4	LD	SP,(TMPSP)	;PUT STACK POINTER BACK
3196   12CE 2A 45 3F    	LD	HL,(TMPPC)	;PUT RETURN
3197   12D1 E5          	PUSH	HL	;ADDRESS BACK ON STACK
3198   12D2 2A 47 3F    	LD	HL,(TMPAF)
3199   12D5 E5          	PUSH	HL	 ;SAVE AF REG FOR LATER
3200   12D6 FD 2A 51 3F 	LD	IY,(TMPIY)
3201   12DA DD 2A 4F 3F 	LD	IX,(TMPIX)
3202   12DE ED 4B 49 3F 	LD	BC,(TMPBC)
3203   12E2 ED 5B 4B 3F 	LD	DE,(TMPDE)	;RESTORE REGISTERS
3204   12E6 F1          	POP	AF	;RESTORE AF
3205   12E7 2A 4D 3F    	LD	HL,(TMPHL)	;RESTORE HL
3206   12EA FB          	EI		;RE-ENABLE INTERRUPTS
3207   12EB C9          	RET		;AND RETURN TO PROGRAM
3208   12EC             ;----------------------------
3209   12EC             ; DISPLAY THE SAVED REGISTERS
3210   12EC             ;----------------------------
3211   12EC 21 62 13    DISREG	LD	HL,REGS
3212   12EF CD 7D 12    	CALL	SNDMSG
3213   12F2             ;
3214   12F2             ; DISPLAY THE REGISTERS
3215   12F2             ;
3216   12F2 06 08       	LD	B,08H
3217   12F4 21 00 3E    	LD	HL,BUFFER
3218   12F7 DD 21 45 3F 	LD	IX,TMPPC
3219   12FB DD 7E 01    DSREG1	LD	A,(IX+1)
3220   12FE CD 54 12    	CALL	BYTASC
3221   1301 DD 7E 00    	LD	A,(IX+0)
3222   1304 CD 54 12    	CALL	BYTASC
3223   1307 DD 23       	INC	IX
3224   1309 DD 23       	INC	IX
3225   130B 3E 20       	LD	A,' '
3226   130D 77          	LD	(HL),A
3227   130E 23          	INC	HL
3228   130F 10 EA       	DJNZ	DSREG1
3229   1311             ;
3230   1311             ; DISPLAY THE FLAGS
3231   1311             ;
3232   1311 3A 47 3F    	LD	A,(TMPAF)	;GET THE FLAGS AND
3233   1314 CD 68 12    	CALL	BITASC	;SHOW THEM AS BITS
3234   1317             
3235   1317 CD 38 12    SZCRLF CALL  BCRLF
3236   131A 3E 00       	LD	A,0
3237   131C 77          	LD	(HL),A	;TERMINATE THE STRING
3238   131D C9          	RET
3239   131E             ;-----------------------------------------
3240   131E             ; PRINT AN-INLINE, ZERO TERMINATED STRING
3241   131E             ;-----------------------------------------
3242   131E             ;
3243   131E             ;      CALL PRINTSZ
3244   131E             ;      .DB  "STRING TO PRINT",0
3245   131E             ;
3246   131E E1          PRNTSZ	POP	HL	;RETURN ADDRESS IS START OF STRING
3247   131F 7E          LOOPSZ	LD	A,(HL)	;GET CHARACTER
3248   1320 CD DE 0F    	CALL	OUTCH	;AND SEND IT
3249   1323 23          	INC	HL	;POINT TO THE NEXT
3250   1324 B7          	OR	A	;CHARACTER AND
3251   1325 20 F8       	JR	NZ,LOOPSZ	;RETURN IF CHAR = 0
3252   1327 E9          	JP	(HL)	;RETURN TO LOCATION AFTER 0 TERMINATOR
3253   1328             ;
3254   1328             ; STRING CONSTANTS
3255   1328             ;
3256   1328 0D 0A 00    CRLF	.DB	CR,LF,0
3257   132B 20 53 6F 75 SIGNON	.DB	" Southern Cross Serial Monitor ",0
3257   132F 74 68 65 72 
3257   1333 6E 20 43 72 
3257   1337 6F 73 73 20 
3257   133B 53 65 72 69 
3257   133F 61 6C 20 4D 
3257   1343 6F 6E 69 74 
3257   1347 6F 72 20 00 
3258   134B 0D 0A 48 20 CMDLST	.DB	CR,LF,"H for command list",CR,LF,0
3258   134F 66 6F 72 20 
3258   1353 63 6F 6D 6D 
3258   1357 61 6E 64 20 
3258   135B 6C 69 73 74 
3258   135F 0D 0A 00 
3259   1362 0D 0A 50 43 REGS 	.DB	CR,LF,"PC   AF   BC   DE   HL   IX   IY   SP   SZ-H-VNC",CR,LF,0
3259   1366 20 20 20 41 
3259   136A 46 20 20 20 
3259   136E 42 43 20 20 
3259   1372 20 44 45 20 
3259   1376 20 20 48 4C 
3259   137A 20 20 20 49 
3259   137E 58 20 20 20 
3259   1382 49 59 20 20 
3259   1386 20 53 50 20 
3259   138A 20 20 53 5A 
3259   138E 2D 48 2D 56 
3259   1392 4E 43 0D 0A 
3259   1396 00 
3260   1397 0D 0A 53 69 TOGGLE	.DB	CR,LF,"Single Step Toggle",CR,LF,0
3260   139B 6E 67 6C 65 
3260   139F 20 53 74 65 
3260   13A3 70 20 54 6F 
3260   13A7 67 67 6C 65 
3260   13AB 0D 0A 00 
3261   13AE 0D 0A 53 65 TXFILE	.DB	CR,LF,"Send INTEL Hex File...",0
3261   13B2 6E 64 20 49 
3261   13B6 4E 54 45 4C 
3261   13BA 20 48 65 78 
3261   13BE 20 46 69 6C 
3261   13C2 65 2E 2E 2E 
3261   13C6 00 
3262   13C7 0D 0A 46 69 FILEOK	.DB	CR,LF,"File Received OK",CR,LF,0
3262   13CB 6C 65 20 52 
3262   13CF 65 63 65 69 
3262   13D3 76 65 64 20 
3262   13D7 4F 4B 0D 0A 
3262   13DB 00 
3263   13DC 0D 0A 43 68 CSUMERR	.DB	CR,LF,"Checksum Error",CR,LF,0
3263   13E0 65 63 6B 73 
3263   13E4 75 6D 20 45 
3263   13E8 72 72 6F 72 
3263   13EC 0D 0A 00 
3264   13EF 0D 0A 42 79 BYE	.DB	CR,LF,"Bye...",CR,LF,0
3264   13F3 65 2E 2E 2E 
3264   13F7 0D 0A 00 
3265   13FA             ;
3266   13FA             ;VT100 TERMINAL COMMANDS FOR CLEAR SCREEN,CURSOR HOME
3267   13FA             ;
3268   13FA 1B 5B 48 1B INITSZ	.DB	27,"[H",27,"[2J",0
3268   13FE 5B 32 4A 00 
3269   1402             	.END



Label        Value      Label        Value      Label        Value
------------------      ------------------      ------------------
ADDR          3F16      ADRESS        3F3F      ADDKEY        0309      
ADMODE        0383      ASCHEX        07FD      ASCHX1        0803      
ADDRA         086B      ADDRB         087D      ASC2HEX       1191      
AC2HEX1       119D      AC2HEX2       119F      AC2HEX3       11AB      
AC2HEX4       11BA      B300          0220      B1200         0080      
B2400         003F      B4800         001B      B9600         000B      
BOTRAM        2000      BUFFER        3E00      BAUD          3F25      
BLKSRT        3F2D      BLKEND        3F2F      BLKDST        3F31      
BEEP          05A4      BEEP1         05B4      BEEP2         05BB      
BEEP3         05CB      BITIME        085E      BITIM1        0863      
BLKMVE        088F      BLKMV1        08AE      BLKMV2        08B1      
BLKMV3        08C3      BLKSUM        08E5      BLKSM1        0901      
BRANCH        0923      BRNCH1        0945      BRNCH2        0950      
BCRLF         1238      BYTOUT        1246      BYTASC        1254      
BITASC        1268      BTASC1        126B      BTASC2        1271      
BTASC3        1274      BTASC4        1277      BYE           13EF      
CALMDE        3F1B      COUNT         3F2B      CONBYT        03BE      
CONVHI        03CB      CONVLO        03CF      CLRBUF        0419      
CLRBF1        0420      CHKSUM        04B8      CHKSM1        04BC      
CANCEL        0716      CANCL1        0719      CHKKEY        0AE2      
CHKKY1        0AF0      CHKKY2        0B19      CHKKY3        0B26      
CHKKY4        0B2E      CHKKY5        0B35      CHKKY6        0B43      
CHKKY7        0B45      CHKKY8        0B4A      CHKKY9        0B6F      
CHKKYA        0B7D      CLKEXT        0CF7      CALKEY        0D01      
CR            000D      COLD          0F2A      CRLF          1328      
CMDLST        134B      CSUMERR       13DC      DISPLY        0084      
DATA          3F18      DISBUF        3F35      DALLAS        3F64      
DECKEY        033F      DECKY1        0342      DECKY2        034F      
DECKY3        0368      DISADD        03A0      DISBYT        03B5      
DECSTP        06C1      DECSP1        06D1      DELONE        0BF3      
DELON1        0BFC      DELON2        0BFE      DSPLAY        11BD      
DPLAY1        11CE      DPLAY2        11DB      DPLAY3        11E2      
DPLINE        11F0      DLINE1        11FF      DLINE2        1212      
DOT           121E      DISREG        12EC      DSREG1        12FB      
EDTKEY        0AB2      ENDKEY        0AD9      ESC           001B      
EXIT          117E      FUNTBL        3F19      FUNJMP        3F33      
FUNKEY        06F7      FUNKY1        06FB      FUNKY2        070A      
FUNLST        0723      FUNFUN        0757      FILEOK        13C7      
GETCH         3F12      GOEXEC        075B      GETBYT        07D1      
GETBT1        07DB      GETBT2        07EF      GETCHR        0FA1      
GETNYB        0FB6      GETOUT        0FCF      GOJUMP        0FEA      
GOJMP1        0FFB      HEXKEY        02D7      HEXKY1        02E2      
HEXKY2        02F0      HELP          100D      IO0           0080      
IO1           0081      IO2           0082      IO3           0083      
IO7           0087      ISTACK        3E00      INCKEY        0315      
INCKY1        0318      INCKY2        0325      INCKY3        033E      
INDEXB        04C8      INDEXW        04CF      INCSTP        06AC      
INCSP1        06BC      INTELFN       0766      INTELH        0775      
INTEL1        0779      INTEL2        07A4      INTEL4        07BF      
INCH          0FE4      INTHEX        1165      ITHEX1        1177      
INBUF         1235      INSBUF        1265      INITSZ        13FA      
KEYBUF        0086      KEYTIM        3F27      KEYDEL        3F41      
KEYIN         0481      KEYREL        048B      KEYRL1        048C      
LENGTH        056B      LOSE          0B96      LF            000A      
LOOPSZ        131F      MODE          3F3D      MAIN          0274      
MAIN1         0285      MAIN2         0288      MENLST        029A      
MENU          0495      MENU1         04A3      MENU2         04AF      
MUL16         04F0      MULT          04F9      MULT1         04FF      
MUSIC         0507      MOVE          08C9      MONMENU       0F8B      
MODIFY        1112      MDIFY1        1123      MDIFY2        115E      
NXTBIT        0817      NDOT          1220      NYBOUT        1249      
NYBASC        125D      ONTIM         3F3B      OFTIM         3F3C      
ONESEC        0F10      ONESC1        0F19      OUTSP         0FD1      
OUTCH         0FDE      PUTCH         3F10      PAUSE         0518      
PERIOD        0553      PLAY1         0968      PLAY2         0977      
PLAY3         0986      PATERN        0E70      PRNTSZ        131E      
RAMSRT        2000      RAMEND        3BFF      REGPNT        3F43      
RST08         3F55      RST10         3F57      RST18         3F59      
RST20         3F5B      RST28         3F5D      RST38         3F5F      
RST66         3F61      RAMSUM        3F63      RSTVEC        0000      
RST30         0030      RESET         0200      RESET1        0214      
RAND          04D8      REGTBL        060C      REGNAM        0649      
REGKEY        0659      RETMON        0680      RETPGM        068A      
RXDATA        0831      RXDAT1        0833      RXDAT2        084B      
RELSQR        0BB0      RLTEST        0BBF      RLSTEP        0BC5      
RELSR1        0BCB      RELSR2        0BDC      RELSR3        0BE4      
RELSR4        0BE9      RWATCH        0E26      RWACH1        0E32      
RWACH2        0E3B      RWACH3        0E4D      REGSTR        1187      
REGS          1362      SCAN          0085      SPSAVE        3F14      
SWREG0        3F1D      SWREG1        3F1E      SWREG2        3F1F      
SWREG3        3F20      SWREG4        3F21      SWREG5        3F22      
SWREG6        3F23      SWREG7        3F24      SPTEMP        3F29      
SYSCALL       006B      SYSJMP        0100      SETDP         0388      
SEGMNT        03DE      SCAND         03EE      SCAND1        03F6      
SCAND2        0400      SCAND3        0409      SCANKEY       0428      
SCANKY1       042B      SCANKY2       0433      SCANKY3       0435      
SCANKY4       0442      SCANKY6       045F      SCANKY7       0463      
SKEYIN        0467      SKEYRL        0474      SKEYL1        0475      
STEP          050D      STEP1         0522      STEP2         052C      
STEP3         0537      SSTEP         05CE      SSTEP1        05FA      
SETREG        06D7      SDELAY        08D7      SDELY1        08DC      
SWBEEP        0995      SECRET        0A2F      SECRT1        0A6C      
SECNUM        0A7B      SPLIT         0B9D      SCOPE         0C09      
SCOPE2        0C1E      SCOPE3        0C26      SCOPE4        0C35      
SCOPE5        0C3C      SCOPE6        0C43      SCOPE7        0C4A      
SCOPE8        0C51      SCOPE9        0C5A      SCOPEA        0C67      
SEED          0C88      SKATE         0C97      SKATE1        0C9C      
SKATE2        0CA4      SKATE3        0CAD      SETCLK        0D88      
SETCK1        0D8E      SETCK2        0DBD      SETCK3        0DD1      
SETCK4        0DDF      SETCK5        0DEE      SETCK6        0DF5      
SETCK7        0E05      SETCK8        0E0C      SCBUG         0F26      
START2        0F61      START3        0F66      START4        0F71      
START5        0F79      SSTOGL        1109      SPCBUF        1233      
SNDMSG        127D      SDMSG1        127F      SDMSG2        128A      
SSSTEP        128B      SSTEP3        12B5      SSTEP4        12CA      
SZCRLF        1317      SIGNON        132B      TOPRAM        3FFF      
TMPPC         3F45      TMPAF         3F47      TMPBC         3F49      
TMPDE         3F4B      TMPHL         3F4D      TMPIX         3F4F      
TMPIY         3F51      TMPSP         3F53      TYPE          0392      
TYPESZ        0396      TONE          0584      TONE1         058E      
TONE2         0593      TONE3         0596      TXDATA        0806      
TRACE         095A      TUNE1         09A3      TUNE2         09E3      
TIME          0CB8      TIME1         0CD0      TIMKEY        0CEA      
TXCRLF        0FD7      TOGGLE        1397      TXFILE        13AE      
UPDATE        0369      UPDBUF        0D10      UPDBF1        0D16      
UPDBF2        0D38      UPDBF3        0D5C      UPDBF4        0D6E      
UPDBF5        0D87      VARBLS        3F00      VARIDX        3F00      
VERS          038E      VERSSZ        039B      WIN           0B8D      
WWATCH        0EB0      WWACH1        0ECA      WWACH2        0ECC      
WWACH3        0EE7      WWACH4        0EEA      WWACH5        0EEC      
WWACH6        0EFD      WARM          0F85      WRDOUT        1243      
WRDASC        124F      

tasm: Number of errors = 0
