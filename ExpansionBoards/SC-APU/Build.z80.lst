0000                          .ENGINE   mycomputer   
0000                             ; 
0000                             ; 
0000                          .ORG   $0000   
0000   C3 00 01     RSTVEC:   JP   start   
0003                             ; 
0100                          .ORG   $0100   
0100                             ; 
0100   31 FF 3F     START:    LD   sp,$3fff   
0103   CD 5F 0A               CALL   InitialiseSerial   
0106   C3 09 01               JP   main   
0109                             ; 
0109                             ; 
0109                             ; 
0109                             ;SC-APU.asm
0109                             ; 
0109                             ; Craig Jones  March 2022
0109                             ; 
0109                             ;------------
0109                             ; ASCII CODES
0109                             ;------------
0109                ESC:      EQU   1BH   
0109                CR:       EQU   0DH   
0109                LF:       EQU   0AH   
0109                             ; 
0109                             ; 
0109                             ; lll floating point package demo
0109                             ;               
0109                MAIN:        
0109   CD 55 03               CALL   printsz   
010C   4C 61 77 72 65 6E 63 65 20 4C 69 76 65 72 6D 6F 72 65 20 4C 61 62 6F 72 61 74 6F 72 79 20 46 6C 6F 61 74 69 6E 67 20 50 6F 69 6E 74 20 50 61 63 6B 61 67 65 0D 0A 00 DB   "Lawrence Livermore Laboratory Floating Point Package",CR,LF,$00   
0143                MAIN1:       
0143   CD 55 03               CALL   printsz   
0146   4F 70 65 72 61 74 69 6F 6E 20 28 2B 20 2D 20 2F 20 78 20 73 28 71 72 74 29 20 63 28 6F 6E 76 65 72 74 29 29 20 0D 0A 00 DB   "Operation (+ - / x s(qrt) c(onvert)) ",CR,LF,$00   
016E   3E 3F                  LD   a,"?"   
0170   CD 68 0A               CALL   TxChar   
0173                MAIN2:       
0173   CD 73 0A               CALL   RxChar   
0176   FE 2B                  CP   "+"   ;addition
0178   CA A7 02               JP   Z,fnadd   
017B   FE 2D                  CP   "-"   ;subtraction
017D   CA 97 01               JP   Z,fnsub   
0180   FE 2F                  CP   "/"   ;division     
0182   CA E5 01               JP   Z,fndivide   
0185   FE 78                  CP   "x"   ;multiplication
0187   CA 2F 02               JP   Z,fnmultiply   
018A   FE 73                  CP   "s"   ;square root
018C   CA 6E 02               JP   Z,fnsqrt   
018F   FE 63                  CP   "c"   ;convert an input string to float and back again
0191   CA E2 02               JP   Z,convert   
0194   C3 73 01               JP   main2   
0197                             ; 
0197                             ;subtraction       
0197                             ;enter minuend
0197                             ;enter subtrahend
0197                             ;difference = minuend - subtrahend
0197                FNSUB:       
0197   CD 68 0A               CALL   TxChar   
019A   CD 4A 03               CALL   CRLF   
019D                             ; 
019D   CD 55 03               CALL   printsz   
01A0   45 6E 74 65 72 20 3A 4D 69 6E 75 65 6E 64 20 3A 53 75 62 74 72 61 68 65 6E 64 0D 0A 00 DB   "Enter :Minuend :Subtrahend",CR,LF,0   
01BD                             ; 
01BD   CD 16 03               CALL   getop1   
01C0   CD 23 03               CALL   getop2   
01C3                             ; 
01C3   CD 55 03               CALL   printsz   
01C6   44 69 66 66 65 72 65 6E 63 65 20 3D 20 00 DB   "Difference = ",0   
01D4                             ; 
01D4   26 34                  LD   H,SCRPG   
01D6   2E 00                  LD   L,OP1   
01D8   06 04                  LD   B,OP2   
01DA   0E 08                  LD   C,RSULT   
01DC                             ; 
01DC   CD F0 03               CALL   LSUB   
01DF   CD 30 03               CALL   putop1   
01E2   C3 43 01               JP   main1   
01E5                             ;division
01E5                             ;enter dividend
01E5                             ;enter divisor
01E5                             ;quotient = dividend divided by divisor
01E5                FNDIVIDE:      
01E5   CD 68 0A               CALL   TxChar   
01E8   CD 4A 03               CALL   CRLF   
01EB                             ; 
01EB   CD 55 03               CALL   printsz   
01EE   45 6E 74 65 72 20 3A 44 69 76 69 64 65 6E 64 20 3A 44 69 76 69 73 6F 72 0D 0A 00 DB   "Enter :Dividend :Divisor",CR,LF,0   
0209                             ; 
0209   CD 16 03               CALL   getop1   
020C   CD 23 03               CALL   getop2   
020F                             ; 
020F   CD 55 03               CALL   printsz   
0212   51 75 6F 74 69 65 6E 74 20 3D 20 00 DB   "Quotient = ",0   
021E                             ; 
021E   26 34                  LD   H,SCRPG   
0220   2E 00                  LD   L,OP1   
0222   06 04                  LD   B,OP2   
0224   0E 08                  LD   C,RSULT   
0226   CD 90 03               CALL   LDIV   
0229   CD 3D 03               CALL   putrsult   
022C   C3 43 01               JP   main1   
022F                             ; 
022F                             ;multiplication
022F                             ;enter factor
022F                             ;enter factor
022F                             ;product = factor x factor
022F                FNMULTIPLY:      
022F   CD 68 0A               CALL   TxChar   ;echo
0232   CD 4A 03               CALL   CRLF   
0235                             ; 
0235   CD 55 03               CALL   printsz   
0238   45 6E 74 65 72 20 3A 46 61 63 74 6F 72 73 0D 0A 00 DB   "Enter :Factors",CR,LF,0   
0249                             ; 
0249   CD 16 03               CALL   getop1   
024C   CD 23 03               CALL   getop2   
024F                             ; 
024F   CD 55 03               CALL   printsz   
0252   50 72 6F 64 75 63 74 20 3D 20 00 DB   "Product = ",0   
025D                             ; 
025D   26 34                  LD   H,SCRPG   
025F   2E 00                  LD   L,OP1   
0261   06 04                  LD   B,OP2   
0263   0E 08                  LD   C,RSULT   
0265   CD EF 04               CALL   LMUL   
0268   CD 3D 03               CALL   putrsult   
026B   C3 43 01               JP   main1   
026E                             ; 
026E                             ;square root
026E                             ;enter square
026E                FNSQRT:      
026E   CD 55 03               CALL   printsz   
0271   45 6E 74 65 72 20 3A 53 71 75 61 72 65 0D 0A 00 DB   "Enter :Square",CR,LF,0   
0281                             ; 
0281   CD 16 03               CALL   getop1   
0284                             ; 
0284   CD 55 03               CALL   printsz   
0287   53 71 75 61 72 65 20 52 6F 6F 74 20 3D 20 00 DB   "Square Root = ",0   
0296                             ; 
0296   26 34                  LD   H,SCRPG   
0298   2E 00                  LD   L,OP1   
029A   06 08                  LD   B,RSULT   
029C   0E 0C                  LD   C,SCR   
029E   CD 2A 07               CALL   DSQRT   
02A1   CD 3D 03               CALL   putrsult   
02A4   C3 43 01               JP   main1   
02A7                             ;addition
02A7                             ;enter addend
02A7                             ;enter addend
02A7                             ;sum = addend + addend
02A7   CD 68 0A     FNADD:    CALL   TxChar   ;echo
02AA   CD 4A 03               CALL   CRLF   
02AD                             ; 
02AD   CD 55 03               CALL   printsz   
02B0   45 6E 74 65 72 20 3A 41 64 64 65 6E 64 73 0D 0A 00 DB   "Enter :Addends",CR,LF,0   
02C1                             ; 
02C1   CD 16 03               CALL   getop1   
02C4   CD 23 03               CALL   getop2   
02C7                             ; 
02C7   CD 55 03               CALL   printsz   
02CA   53 75 6D 20 3D 20 00   DB   "Sum = ",0   
02D1                             ; 
02D1   26 34                  LD   H,SCRPG   
02D3   2E 00                  LD   L,OP1   
02D5   06 04                  LD   B,OP2   
02D7   0E 08                  LD   C,RSULT   
02D9                             ; 
02D9   CD EC 03               CALL   LADD   
02DC   CD 30 03               CALL   putop1   
02DF   C3 43 01               JP   main1   
02E2                             ; 
02E2                             ; convert a string to scientific notation
02E2                             ; 
02E2   CD 68 0A     CONVERT:   CALL   TxChar   ;echo
02E5   CD 4A 03               CALL   CRLF   
02E8                             ; 
02E8   CD 55 03               CALL   printsz   
02EB   43 6F 6E 76 65 72 74 00 DB   "Convert",0   
02F3                             ; 
02F3   CD 16 03               CALL   getop1   
02F6                             ; 
02F6   CD 55 03               CALL   printsz   
02F9   53 63 69 65 6E 74 69 66 69 63 20 4E 6F 74 61 74 69 6F 6E 20 3D 20 00 DB   "Scientific Notation = ",0   
0310                             ; 
0310   CD 30 03               CALL   putop1   
0313   C3 43 01               JP   main1   
0316                             ; 
0316                GETOP1:      
0316   26 34                  LD   H,SCRPG   ;SET H REGISTER TO RAM SCRATCH PAGE
0318   2E 00                  LD   L,OP1   ;POINTER TO OPERAND 1
031A   0E 0C                  LD   C,SCR   ;SCRATCH AREA
031C   CD 42 09               CALL   INPUT   ;INPUT OPERAND 1 FROM TTY
031F   CD 4A 03               CALL   CRLF   
0322   C9                     RET      
0323                             ; 
0323                GETOP2:      
0323   26 34                  LD   H,SCRPG   ;SET H REGISTER TO RAM SCRATCH PAGE
0325   2E 04                  LD   L,OP2   ;POINTER TO OPERAND 2
0327   0E 0C                  LD   C,SCR   ;SCRATCH AREA
0329   CD 42 09               CALL   INPUT   ;INPUT OPERAND 1 FROM TTY
032C   CD 4A 03               CALL   CRLF   
032F   C9                     RET      
0330                             ; 
0330                PUTOP1:      
0330   26 34                  LD   H,SCRPG   ;SET H REGISTER TO RAM SCRATCH PAGE
0332   2E 00                  LD   L,OP1   
0334   0E 0C                  LD   C,SCR   ;SCRATCH AREA
0336   CD B0 07               CALL   CVRT   ;OUTPUT NUMBER STARTING IN LOCATION OP1 TO TTY
0339   CD 4A 03               CALL   CRLF   
033C   C9                     RET      
033D                             ; 
033D                PUTRSULT:      
033D   26 34                  LD   H,SCRPG   ;SET H REGISTER TO RAM SCRATCH PAGE
033F   2E 08                  LD   L,RSULT   
0341   0E 0C                  LD   C,SCR   ;SCRATCH AREA
0343   CD B0 07               CALL   CVRT   ;OUTPUT NUMBER STARTING IN LOCATION OP1 TO TTY
0346   CD 4A 03               CALL   CRLF   
0349   C9                     RET      
034A                             ; 
034A                             ;send a cr lf combo
034A                             ; 
034A   3E 0D        CRLF:     LD   a,CR   
034C   CD 68 0A               CALL   TxChar   
034F   3E 0A                  LD   a,LF   
0351   CD 68 0A               CALL   TxChar   
0354   C9                     RET      
0355                             ;        
0355                             ;inline string print
0355                             ; 
0355                             ;prints the zero terminated string eg.         
0355                             ;         call     printsz
0355                             ;         .db  "stringtoprint",0
0355                PRINTSZ:      
0355   E1                     POP   hl   
0356                LOOPSZ:      
0356   7E                     LD   a,(hl)   
0357   CD 68 0A               CALL   TxChar   
035A   23                     INC   hl   
035B   B7                     OR   a   
035C   20 F8                  JR   nz,loopsz   
035E   E9                     JP   (hl)   
035F                             ; 
035F                             ; 
035F                             ; original LLL code restored Herb Johnson Feb 2015
035F                             ; 
035F                             ; original LLL code from "Floating Point Package for
035F                             ; Intel 8008 and 8080 Microprocessors" by Maples Oct 24 1975
035F                             ; URCL-51940 publication from Lawrence Livermore Laboratory
035F                             ; 171286.PDF 
035F                             ; 
035F                             ; fixes:
035F                             ; 0) many lines had space in column 1! labels become operands!
035F                             ; 1) added LLL square root routine
035F                             ; 2) added missing "CALL SIGN" in CVRT routine
035F                             ; 3) replaced ERR routine with one from LLL document
035F                             ; 4) commented out "ORA A" at end of SAVEN
035F                             ; 
035F                             ; ###S
035F                             ; MODIFIED BY TONY GOLD FOR NON-MACRO ASSEMBLER
035F                             ; CHANGES WITHIN ;###S AND ;###E LINES
035F                             ; ALL ORIGINAL CODE RETAINED AS COMMENTS
035F                             ; ###E
035F                             ; 
035F                             ; //// FLOATING POINT PACKAGE FOR THE MCS8
035F                             ; //// BY DAVID MEAD
035F                             ; //// MODIFIED BY HAL BRAND 9/6/74
035F                             ; //// MODIFIED FOR 24 BIT MANTISSAS
035F                             ; //// PLUS ADDED I/O CONVERSION ROUTINES
035F                             ; //// MODIFIED BY FRANK OLKEN 6/28/75
035F                             ; 
035F                             ; 
035F                             ; Transcribed to Z80 mnemonics by the z88dk/support/8080/toZ80.awk tool.
035F                             ; gawk -f toZ80.awk < 80_lllf.asm > z80_lllf.asm
035F                             ; 
035F                             ; Modified to run on the RC2014 and the YAZ180 by
035F                             ; Phillip Stevens @feilipu https://feilipu.me
035F                             ; February / March 2017
035F                             ; 
035F                             ; Converted to z88dk z80asm for RC2014 and YAZ180 by
035F                             ; Phillip Stevens @feilipu https://feilipu.me
035F                             ; August 2017
035F                             ; 
035F                             ; 
035F                             ; 
035F                             ; 
035F                             ;DEFC    MINCH   =   $C0 ;300Q   ;MINIMUM EXPONENT WITH SIGN EXTENDED
035F                MINCH:    EQU   $C0   
035F                             ; 
035F                             ;DEFC    MAXCH   =   $3F ;077Q   ;MAXIMUM EXPONENT WITH SIGN EXTENDED
035F                MAXCH:    EQU   $3F   
035F                             ; 
035F                             ;******************************************************
035F                             ;       //// PUBLIC FUNCTIONS
035F                             ;******************************************************
035F                             ; 
035F                             ;PUBLIC  INPUT, CVRT
035F                             ;PUBLIC  LADD, LSUB, LMUL, LDIV, DSQRT
035F                             ; 
035F                             ;******************************************************
035F                             ;       //// LIBRARY ORIGIN
035F                             ;******************************************************
035F                             ; 
035F                             ;SECTION     apu_library         ;LIBRARY ORIGIN
035F                             ; 
035F                             ; 
035F                SCRPG:    EQU   $34   ; SCRATCH PAGE IS 3400H  UP FROM   2800H
035F                OP1:      EQU   $00   ; STARTING LOCATION OF OPERAND 1
035F                OP2:      EQU   OP1+$04   ; STARTING LOCATION OF OPERAND 2
035F                RSULT:    EQU   OP2+$04   ; STARTING LOCATION OF RESULT
035F                SCR:      EQU   RSULT+$04   ; STARTING LOCATION OF SCRATCH AREA
035F                             ; 
035F                             ;******************************************************
035F                             ;       //// OUTPUT SUBROUTINE
035F                             ;******************************************************
035F                             ; 
035F                             ; OUTR OUTPUT FROM CVRT INTO TX0 OUTPUT BUFFER
035F                             ; ALL REG'S MAINTAINED
035F                             ; 
035F                OUTR:        
035F   E6 7F                  AND   7FH   ;CLEAR HIGH BIT
0361   CD 68 0A               CALL   TxChar   
0364   C9                     RET      
0365                             ; 
0365                             ; 
0365                             ;******************************************************
0365                             ;       //// INPUT SUBROUTINES
0365                             ;******************************************************
0365                             ; 
0365                             ; 
0365                             ; ROUTINE TO INPUT CHAR FROM INPUT BUFFER
0365                             ; RST 10H LOOPS TILL A CHARACTER IS AVAILABLE
0365                             ; INP RETURNS CHARACTER WITH HIGH BIT SET
0365                             ; IN REGISTER A.
0365                             ; 
0365                             ; ROUTINE PASSES SPACE IF THE INPUT IS NOT A NUMBER.
0365                             ; NUMERICAL CHARACTERS INCLUDE 0 - 9, +, -, AND E.
0365                             ; 
0365                             ; ROUTINE ECHOS THE CHARACTERS FORWARDED
0365                             ; 
0365                INP:         
0365                             ; 
0365   CD 73 0A               CALL   RxChar   
0368   FE 2B                  CP   "+"   ;+?
036A   CA 88 03               JP   Z,INP_DONE   
036D   FE 2D                  CP   "-"   ;-?
036F   CA 88 03               JP   Z,INP_DONE   
0372   FE 2E                  CP   "."   ;DEC. PNT.?           
0374   CA 88 03               JP   Z,INP_DONE   
0377   FE 45                  CP   "E"   ;E?
0379   CA 88 03               JP   Z,INP_DONE   
037C   FE 30                  CP   "0"   ;ASCII CNTRL.?
037E   FA 86 03               JP   M,SPACE   
0381   FE 3A                  CP   ":"   ;DECIMAL NUMBER?
0383   FA 88 03               JP   M,INP_DONE   
0386                SPACE:       
0386   3E 20                  LD   A," "   ;SEND A SPACE
0388                INP_DONE:      
0388   F5                     PUSH   AF   
0389   CD 68 0A               CALL   TxChar   
038C   F1                     POP   AF   
038D   F6 80                  OR   80H   ;SET HIGH BIT
038F   C9                     RET      
0390                             ; 
0390                             ; 
0390                             ;******************************************************
0390                             ;       //// DIVIDE SUBROUTINE
0390                             ;******************************************************
0390                             ; 
0390                LDIV:        
0390   CD F9 06               CALL   CSIGN   ;COMPUTE SIGN OF RESULT
0393   CD 6A 05               CALL   ZCHK   ;CHECK IF DIVIDEND = ZERO
0396   C2 A2 03               JP   NZ,DTST2   ;IF DIVIDEND .NE. 0 CHECK DIVISOR
0399   CD 72 05               CALL   BCHK   ;CHECK FOR ZERO/ZERO
039C   CA 38 06               JP   Z,INDFC   ;ZERO/ZERO = INDEFINITE
039F   C3 3F 06               JP   WZERC   ;ZERO/NONZERO = ZERO
03A2                             ; 
03A2                DTST2:       
03A2   CD 72 05               CALL   BCHK   ;COME HERE IF DIVIDEND .NE. 0
03A5   CA EB 06               JP   Z,OFLWC   ;NONZERO/ZERO = OVERFLOW
03A8                             ;IF WE GET HERE, THINGS LOOK OKAY
03A8   5D                     LD   E,L   ;SAVE BASE IN E
03A9   69                     LD   L,C   ;BASE 6 TO L
03AA   CD AD 05               CALL   DCLR   ;CLEAR QUOTIENT MANTISSA SLOT
03AD   6B                     LD   L,E   ;RESTORE BASE IN L
03AE   CD A0 06               CALL   ENT1   ;DO FIRST CYCLE
03B1   69                     LD   L,C   ;BASE 6 TO L
03B2   CD 79 05               CALL   DLST   ;MOVE QUOTIENT OVER ONE PLACE
03B5   16 17                  LD   D,23   ;NUMBER OF ITERATIONS TO D
03B7                REP3:        
03B7   6B                     LD   L,E   
03B8   CD 9A 06               CALL   ENT2   
03BB   15                     DEC   D   ;DEC D
03BC   CA CB 03               JP   Z,GOON   
03BF   7D                     LD   A,L   
03C0   69                     LD   L,C   ;BASE 6 TO L
03C1   4F                     LD   C,A   
03C2   CD 79 05               CALL   DLST   ;MOVE QUOTIENT MANT OVER
03C5   7D                     LD   A,L   ;CPTR TO A
03C6   59                     LD   E,C   ;LPTR TO E
03C7   4F                     LD   C,A   ;CPTR TO C
03C8   C3 B7 03               JP   REP3   
03CB                             ; 
03CB                GOON:        
03CB   CD 71 06               CALL   AORS   ;CHECK IF RESULT IS NORMALIZED
03CE   FA DD 03               JP   M,CRIN   
03D1   7D                     LD   A,L   ;LPTR TO A
03D2   69                     LD   L,C   ;CPTR TO L
03D3   4F                     LD   C,A   ;LPTR TO C
03D4   CD 79 05               CALL   DLST   ;SHIFT QUOTIENT LEFT
03D7   4D                     LD   C,L   
03D8   6B                     LD   L,E   
03D9   CD C9 06               CALL   LDCP   ;COMPUTE THE EXPONENT OF RESULT
03DC   C9                     RET      
03DD                             ; 
03DD                CRIN:        
03DD   CD DC 05               CALL   CFCHE   ;GET A=CHAR(H,L), E=CHAR(H,B)
03E0   93                     SUB   E   ;NEW CHAR = CHAR(DIVIDEND) - CHAR(DVISIOR)
03E1   FE 7F                  CP   $7F   ;177Q      ;CHECK MAX POSITIVE NUMBER
03E3   CA EB 06               JP   Z,OFLWC   ;JUMP ON OVERFLOW
03E6   C6 01                  ADD   A,1   ;ADD 1 SINCE WE DID NOT LEFTSHIFT
03E8   CD D4 06               CALL   CCHK   ;CHECK AND STORE EXPONENT
03EB   C9                     RET      ;RETURN
03EC                             ; 
03EC                             ; 
03EC                             ;******************************************************
03EC                             ;       //// ADDITION SUBROUTINE
03EC                             ;******************************************************
03EC                             ; 
03EC                             ; 
03EC                LADD:        
03EC   AF                     XOR   A   ;/***SET UP TO ADD
03ED   C3 F2 03               JP   LADS   ;NOW DO IT
03F0                             ; 
03F0                             ; 
03F0                             ;******************************************************
03F0                             ;       //// SUBTRACTION SUBROUTINE
03F0                             ;******************************************************
03F0                             ; 
03F0                             ;       SUBROUTINE LADS
03F0                             ; 
03F0                             ;       FLOATING POINT ADD OR SUB
03F0                             ;       A 128 ON ENTRY SUB
03F0                             ;       A 0 ON ENTRY ADD
03F0                             ;       F-S F,FIRST OPER DESTROYED
03F0                             ;       BASE 11 USED FOR SCRATCH
03F0                             ; 
03F0                LSUB:        
03F0   3E 80                  LD   A,$80   ;200Q    ;/****SET UP TO SUBTRACT
03F2                             ; 
03F2                LADS:        
03F2   CD 7F 06               CALL   ACPR   ;SAVE ENTRY PNT AT BASE 6
03F5   CD 72 05               CALL   BCHK   ;CHECK ADDEND/SUBTRAHEND = ZERO
03F8   C8                     RET   Z   ;IF SO, RESULT=ARG SO RETURN
03F9                             ;THIS WILL PREVENT UNDERFLOW INDICATION ON
03F9                             ;ZERO + OR - ZERO
03F9   CD EB 05               CALL   CCMP   
03FC   CA 2C 04               JP   Z,EQ02   ;IF EQUAL, GO ON
03FF   57                     LD   D,A   ;SAVE LPTR CHAR IN D
0400   DA 0F 04               JP   C,LLTB   
0403   93                     SUB   E   ;L.GT.B IF HERE
0404   E6 7F                  AND   127   
0406   57                     LD   D,A   ;DIFFERENCE TO D
0407   5D                     LD   E,L   ;SAVE BASE IN E
0408   69                     LD   L,C   ;C PTR TO L
0409   2C                     INC   L   ;C PTR 1 TO L
040A   73                     LD   (HL),E   ;SAVE BASE IN C PTR\1
040B   68                     LD   L,B   ;B PTR TO L
040C   C3 14 04               JP   NCHK   
040F                             ; 
040F                LLTB:        
040F   7B                     LD   A,E   ;L.LT.B IF HERE,BPTR TO A
0410   92                     SUB   D   ;SUBTRACT LPTR CHAR FROM BPTR CHAR
0411   E6 7F                  AND   127   
0413   57                     LD   D,A   ;DIFFERENCE TO D
0414                NCHK:        
0414   3E 18                  LD   A,24   
0416   BA                     CP   D   
0417   D2 1C 04               JP   NC,SH10   
041A   16 18                  LD   D,24   
041C                SH10:        
041C   B7                     OR   A   
041D   CD 88 05               CALL   DRST   
0420   15                     DEC   D   
0421   C2 1C 04               JP   NZ,SH10   
0424                EQUL:        
0424   7D                     LD   A,L   
0425   B8                     CP   B   
0426   C2 2C 04               JP   NZ,EQ02   ;F.GT.S IF L.NE.B
0429   69                     LD   L,C   ;C PTR TO L
042A   2C                     INC   L   ;C PTR\1 TO L
042B   6E                     LD   L,(HL)   ;RESTORE L
042C                EQ02:        
042C   CD 92 04               CALL   LASD   ;CHECK WHAT TO
042F   CD 7F 06               CALL   ACPR   ;SAVE ANSWER
0432   FE 02                  CP   2   ;TEST FOR ZERO ANSWER
0434   C2 3A 04               JP   NZ,NOT0   
0437   C3 1D 06               JP   WZER   ;WRITE FLOATING ZERO AND RETURN
043A                             ; 
043A                NOT0:        
043A   16 01                  LD   D,1   ;WILL TEST FOR SUB
043C   A2                     AND   D   
043D   CA 66 04               JP   Z,ADDZ   ;LSB 1 IMPLIES SUB
0440   CD 77 06               CALL   TSTR   ;CHECK NORMAL/REVERSE
0443   CA 49 04               JP   Z,SUBZ   ;IF NORMAL,GO SUBZ
0446   7D                     LD   A,L   ;OTHERWISE REVERSE
0447   68                     LD   L,B   ;ROLES
0448   47                     LD   B,A   ;OF L AND B
0449                SUBZ:        
0449   CD B6 05               CALL   DSUB   ;SUBTRACT SMALLER FROM BIGGER
044C   CD 7F 04               CALL   MANT   ;SET UP SIGN OF RESULT
044F   CD 77 06               CALL   TSTR   ;SEE IF WE NEED TO INTERCHANGE
0452                             ;BPTR AND LPTR
0452   CA 3D 05               JP   Z,NORM   ;NO INTERCHANGE NECESSARY, SO NORMALIZE
0455                             ;AND RETURN
0455   7D                     LD   A,L   ;INTERCHANGE
0456   68                     LD   L,B   ;L
0457   47                     LD   B,A   ;AND B
0458   79                     LD   A,C   ;CPTR  TO A
0459   48                     LD   C,B   ;BPTR TO C
045A   5D                     LD   E,L   ;LPTR TO E
045B   47                     LD   B,A   ;CPTR TO B
045C   CD B4 06               CALL   LXFR   ;MOVE BPTR> TO LPTR>
045F   78                     LD   A,B   
0460   41                     LD   B,C   
0461   4F                     LD   C,A   
0462   6B                     LD   L,E   
0463   C3 3D 05               JP   NORM   ;NORMALIZE RESULT AND RETURN
0466                             ; 
0466                             ;   COPY THE LARGER EXPONENT TO THE RESULT
0466                             ; 
0466                ADDZ:        
0466   CD EB 05               CALL   CCMP   ;COMPARE THE CHARACTERISTICS
0469   D2 6F 04               JP   NC,ADD2   ;IF CHAR(H,L) .GE. CHAR(H,B) CONTINUE
046C   CD 1D 07               CALL   BCTL   ;IF CHAR(H,L) .LT. CHAR(H,B) THE COPY
046F                             ;CHAR(H,B) TO CHAR(H,L)
046F                ADD2:        
046F   CD 7F 04               CALL   MANT   ;COMPUTE SIGN OF RESULT
0472   CD 96 05               CALL   DADD   ;ADD MANTISSAS
0475   D2 62 06               JP   NC,SCCFG   ;IF THERE IS NO OVFLW - DONE
0478   CD 88 05               CALL   DRST   ;IF OVERFLOW SHIFT RIGHT
047B   CD 46 06               CALL   INCR   ;AND INCREMENT EXPONENT
047E   C9                     RET      ;ALL DONE, SO RETURN
047F                             ; 
047F                             ;   THIS ROUTINE STORES THE MANTISSA SIGN IN THE RESULT
047F                             ;   THE SIGN HAS PREVIOUSLY BEEN COMPUTED BY LASD.
047F                             ; 
047F                MANT:        
047F   5D                     LD   E,L   ;SAVE L PTR
0480   69                     LD   L,C   ;C PTR TO L
0481   7E                     LD   A,(HL)   ;LOAD INDEX WORD
0482   E6 80                  AND   128   ;SCARF SIGN
0484   6B                     LD   L,E   ;RESTORE L PTR
0485   2C                     INC   L   ;L PTR 2
0486   2C                     INC   L   
0487   2C                     INC   L   ;TO L
0488   5F                     LD   E,A   ;SAVE SIGN IN E
0489   7E                     LD   A,(HL)   
048A   E6 7F                  AND   127   ;SCARF CHAR
048C   83                     ADD   A,E   ;ADD SIGN
048D   77                     LD   (HL),A   ;STORE IT
048E   2D                     DEC   L   ;RESTORE
048F   2D                     DEC   L   
0490   2D                     DEC   L   ;L PTR
0491   C9                     RET      
0492                             ; 
0492                             ; 
0492                             ;   SUBROUTINE LASD
0492                             ; 
0492                             ;       UTILITY ROUTINE FOR LADS
0492                             ;       CALCULATES TRUE OPER AND SGN
0492                             ;       RETURNS ANSWER IN
0492                             ; 
0492                LASD:        
0492   CD 09 07               CALL   MSFH   ;FETCH MANT SIGNS, F IN A,D
0495   BB                     CP   E   ;COMPARE SIGNS
0496   DA C4 04               JP   C,ABCH   ;F\,S- MEANS GO TO A BRANCH
0499   C2 CD 04               JP   NZ,BBCH   ;F- S\ MEANS GO TO B BRANCH
049C   83                     ADD   A,E   ;SAME SIGN IF HERE, ADD SIGNS
049D   DA B2 04               JP   C,BMIN   ;IF BOTH MINUS, WILL OVERFLOW
04A0   CD 71 06               CALL   AORS   ;BOTH POS IF HERE
04A3   F2 D6 04               JP   P,L000   ;IF AN ADD, LOAD 0
04A6                             ; 
04A6                COM1:        
04A6   CD 84 06               CALL   DCMP   ;COMPARE F WITH S
04A9   DA E4 04               JP   C,L131   ;S.GT.F,SO LOAD 131
04AC   C2 D8 04               JP   NZ,L001   ;F.GT.S,SO LOAD 1
04AF                L002:        
04AF   3E 02                  LD   A,2   ;ERROR CONDITION, ZERO ANSWER
04B1   C9                     RET      
04B2                             ; 
04B2                BMIN:        
04B2   CD 71 06               CALL   AORS   ;CHECK FOR ADD OR SUB
04B5   F2 DE 04               JP   P,L128   ;ADD, SO LOAD 128
04B8                             ; 
04B8                COM2:        
04B8   CD 84 06               CALL   DCMP   ;COMPARE F WITH S
04BB   DA DB 04               JP   C,L003   ;S.GT.F,SO LOAD 3
04BE   C2 E1 04               JP   NZ,L129   ;FGT.S.SO LOAD 129
04C1   C3 AF 04               JP   L002   ;ERROR
04C4                             ; 
04C4                ABCH:        
04C4   CD 71 06               CALL   AORS   ;FT,S- SO TEST FOR A/S
04C7   FA D6 04               JP   M,L000   ;SUBTRACT, SO LOAD 0
04CA   C3 A6 04               JP   COM1   ;ADD, SO GO TO DCMP
04CD                             ; 
04CD                BBCH:        
04CD   CD 71 06               CALL   AORS   ;F-,S\,SO TEST FOR A/S
04D0   FA DE 04               JP   M,L128   ;SUB
04D3   C3 B8 04               JP   COM2   ;ADD
04D6                             ; 
04D6                L000:        
04D6   AF                     XOR   A   
04D7   C9                     RET      
04D8                             ; 
04D8                L001:        
04D8   3E 01                  LD   A,1   
04DA   C9                     RET      
04DB                             ; 
04DB                L003:        
04DB   3E 03                  LD   A,3   
04DD   C9                     RET      
04DE                             ; 
04DE                L128:        
04DE   3E 80                  LD   A,128   
04E0   C9                     RET      
04E1                             ; 
04E1                L129:        
04E1   3E 81                  LD   A,129   
04E3   C9                     RET      
04E4                             ; 
04E4                L131:        
04E4   3E 83                  LD   A,131   
04E6   C9                     RET      
04E7                             ; 
04E7                             ;       SUBROUTINE LMCM
04E7                             ;       COMPARES THE MAGNITUDE OF
04E7                             ;       TWO FLOATING PNT NUMBERS
04E7                             ;       Z[1 IF [,C[1 IF F.LT.S.
04E7                             ; 
04E7                LMCM:        
04E7   CD EB 05               CALL   CCMP   ;CHECK CHARS
04EA   C0                     RET   NZ   ;RETURN IF NOT EQUAL
04EB   CD 84 06               CALL   DCMP   ;IF EQUAL, CHECK MANTS
04EE   C9                     RET      
04EF                             ; 
04EF                             ; 
04EF                             ; 
04EF                             ;***************************************************
04EF                             ;       //// MULTIPLY SUBROUTINE
04EF                             ;***************************************************
04EF                             ; 
04EF                             ;   SUBROUTINE LMUL
04EF                             ; 
04EF                             ;       FLOATING POINT MULTIPLY
04EF                             ;       L PTR X B PTR TO C PTR
04EF                             ; 
04EF                LMUL:        
04EF   CD F9 06               CALL   CSIGN   ;COMPUTE SIGN OF RESULT AND STORE IT
04F2   CD 6A 05               CALL   ZCHK   ;CHECK FIRST OPERAND FOR ZERO
04F5   CA 3F 06               JP   Z,WZERC   ;ZERO * ANYTHING = ZERO
04F8   CD 72 05               CALL   BCHK   ;CHECK SECOND OPERAND FOR ZERO
04FB   CA 3F 06               JP   Z,WZERC   ;ANYTHING * ZERO = ZERO
04FE   5D                     LD   E,L   ;SAVE L PTR
04FF   69                     LD   L,C   ;C PTR TO L
0500   CD AD 05               CALL   DCLR   ;CLR PRODUCT MANT LOCS
0503   6B                     LD   L,E   ;L PTR TO L
0504   16 18                  LD   D,24   ;LOAD NUMBER ITERATIONS
0506                KPGO:        
0506   CD 88 05               CALL   DRST   ;SHIFT L PTR RIGHT
0509   DA 34 05               JP   C,MADD   ;WILL ADD B PTR IF C[1
050C   7D                     LD   A,L   ;INTERCHANGE
050D   69                     LD   L,C   ;L AND
050E   4F                     LD   C,A   ;C PTRS
050F                INTR:        
050F   CD 88 05               CALL   DRST   ;SHIFT PRODUCT OVER
0512   7D                     LD   A,L   ;INTERCHANGE
0513   69                     LD   L,C   ;L AND C PTRS_BACK TO
0514   4F                     LD   C,A   ;ORIGINAL>
0515   15                     DEC   D   
0516   C2 06 05               JP   NZ,KPGO   ;MORE CYCLES IF Z[0
0519   CD 71 06               CALL   AORS   ;TEST IF RESULT IS NORMALIZED
051C   FA D0 06               JP   M,LMCP   ;IF NORMALIZED GO COMPUTE CHAR
051F   5D                     LD   E,L   ;SAVE LPTR IN E
0520   69                     LD   L,C   ;SET L=CPTR
0521   CD 79 05               CALL   DLST   ;LEFT SHIFT RESULT TO NORMALIZE
0524   6B                     LD   L,E   ;RESTORE LPTR
0525   CD DC 05               CALL   CFCHE   ;OTHERWISE SET A=CHAR(H,L), E=CHAR(H,B)
0528   83                     ADD   A,E   ;CHAR(RESULT) = CHAR(H,L) + CHAR(H,B)
0529   FE 80                  CP   $80   ;200Q      ;CHECK FOR SMALLEST NEGATIVE NUMBER
052B   CA F2 06               JP   Z,UFLWC   ;IF SO THEN UNDERFLOW
052E   D6 01                  SUB   1   ;SUBTRACT 1 TO COMPENSATE FOR NORMALIZE
0530   CD D4 06               CALL   CCHK   ;CHECK EXPONENT AND STORE IT
0533   C9                     RET      ;RETURN
0534                             ; 
0534                MADD:        
0534   7D                     LD   A,L   ;INTERCHANGE
0535   69                     LD   L,C   ;L AND
0536   4F                     LD   C,A   ;C PTRS
0537   CD 96 05               CALL   DADD   ;ACCUMULATE PRODUCT
053A   C3 0F 05               JP   INTR   
053D                             ; 
053D                             ;   SUBROUTINE NORM
053D                             ; 
053D                             ;       THIS SUBROUTINE WILL NORMALIZE A FLOATING POINT
053D                             ;       NUMBER, PRESERVING ITS ORIGINAL SIGN.
053D                             ;       WE CHECK FOR UNDERFLOW AND SET THE CONDITION
053D                             ;       FLAG APPROPRIATELY.  (SEE ERROR RETURNS).
053D                             ;       THERE IS AN ENTRY POINT TO FLOAT A SIGNED INTEGER
053D                             ;       (FLOAT) AND AN ENTRY POINT TO FLOAT AN UNSIGNED
053D                             ;       INTEGER.
053D                             ; 
053D                             ;   ENTRY POINTS:
053D                             ; 
053D                             ;       NORM  - NORMALIZE FLOATING PT NUMBER AT (H,L)
053D                             ;       FLOAT - FLOAT TRIPLE PRECISION INTEGER AT (H,L)
053D                             ;               PRESERVING SIGN BIT IN (H,L)+3
053D                             ;       DFXL  - FLOAT UNSIGNED (POSITIVE) TRIPLE PRECISION
053D                             ;               AT (H,L)
053D                             ; 
053D                             ;   REGISTERS ON EXIT:
053D                             ; 
053D                             ;       A = CONDITION FLAG (SEE ERROR RETURNS)
053D                             ;       D,E = GARBAGE
053D                             ;       B,C,H,L = SAME AS ON ENTRY
053D                             ; 
053D                NORM:        
053D   5D                     LD   E,L   ;SAVE L IN E
053E                NORM1:       
053E   CD D1 05               CALL   GCHAR   ;GET CHAR(H,L) IN A WITH SIGN EXTENDED
0541   57                     LD   D,A   ;SAVE CHAR IN D
0542                FXL1:        
0542   6B                     LD   L,E   ;RESTORE L
0543                FXL2:        
0543   CD 6A 05               CALL   ZMCHK   ;CHECK FOR ZERO MANTISSA
0546   CA 1D 06               JP   Z,WZER   ;IF ZERO MANTISSA THEN ZERO RESULT
0549                REP6:        
0549   7E                     LD   A,(HL)   ;GET MOST SIGNIFICANT BYTE OF
054A                             ;MANTISSA
054A   B7                     OR   A   ;SET FLAGS
054B   FA 5B 05               JP   M,SCHAR   ;IF MOST SIGNIFICANT BIT = 1 THEN
054E                             ;NUMBER IS NORMALIZED AND WE GO TO
054E                             ;STORE THE EXPONENT
054E   7A                     LD   A,D   ;OTHERWISE CHECK FOR UNDERFLOW
054F   FE C0                  CP   MINCH   ;COMPARE WITH MINIMUM CHAR
0551   CA F3 05               JP   Z,WUND   ;IF EQUAL THEN UNDERFLOW
0554   CD 79 05               CALL   DLST   ;SHIFT MANTISSA LEFT
0557   15                     DEC   D   ;DECREMENT EXPONENT
0558   C3 49 05               JP   REP6   ;LOOP AN TEST NEXT BIT
055B                             ; 
055B                SCHAR:       
055B   C3 53 06               JP   INCR3   ;STORE THE EXPONENT USING
055E                             ;THE SAME CODE AS THE INCREMENT
055E                             ; 
055E                DFXL:        
055E   5D                     LD   E,L   ;ENTER HERE TO FLOAT UNSIGNED
055F                             ;INTEGER
055F                             ;FIRST SAVE L IN E
055F   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
0560   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
0561   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
0562   AF                     XOR   A   ;ZERO ACCUMULATOR
0563   77                     LD   (HL),A   ;STORE A PLUS (+) SIGN
0564   6B                     LD   L,E   ;RESTORE L
0565                FLOAT:       
0565   16 18                  LD   D,24   ;ENTER HERE TO FLOAT INTEGER
0567                             ;PRESERVING ORIGINAL SIGN IN (H,L)+3
0567                             ;SET UP EXPONENT
0567   C3 43 05               JP   FXL2   ;GO FLOAT THE NUMBER
056A                             ; 
056A                             ; 
056A                             ; 
056A                             ; 
056A                             ;   SUBROUTINE ZCHK
056A                             ; 
056A                             ;       THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS
056A                             ;       A FLOATING ZERO AT (H,L).
056A                             ; 
056A                             ;   SUBROUTINE ZMCHK
056A                             ; 
056A                             ;       THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS A
056A                             ;       ZERO MANTISSA AT (H,L)
056A                             ; 
056A                ZCHK:        
056A                ZMCHK:       
056A   2C                     INC   L   ;SET L TO POINT LAST BYTE OF MANTISSA
056B   2C                     INC   L   ;SET L TO POINT TO LAST BYTE OF MANTISSA
056C   7E                     LD   A,(HL)   ;LOAD LEAST SIGNIFICANT BYTE
056D   2D                     DEC   L   ;L POINTS TO MIDDLE BYTE
056E   B6                     OR   (HL)   ;OR WITH LEAST SIGNIFICANT BYTE
056F   2D                     DEC   L   ;L POINTS TO MOST SIGNIFICANT BYTE
0570                             ;OF MANTISSA (ORIGINAL VALUE)
0570   B6                     OR   (HL)   ;OR IN MOST SIGNIFICANT BYTE
0571   C9                     RET      ;RETURNS WITH ZERO FLAG SET APPROPRIATELY
0572                             ; 
0572                             ;  SUBROUTINE BCHK
0572                             ; 
0572                             ;       THIS ROUTINE CHECKS (H,B) FOR FLOATING PT ZERO
0572                             ; 
0572                BCHK:        
0572   5D                     LD   E,L   ;SAVE LPTR IN E
0573   68                     LD   L,B   ;SET L=BPTR
0574   CD 6A 05               CALL   ZCHK   ;CHECK FOR ZERO
0577   6B                     LD   L,E   ;RESTORE L=LPTR
0578   C9                     RET      ;RETURN
0579                             ; 
0579                             ; 
0579                             ;   SUBROUTINE DLST
0579                             ; 
0579                             ;       SHIFTS DBL WORD ONE PLACE LF
0579                DLST:        
0579   2C                     INC   L   
057A   2C                     INC   L   ;/***TP
057B   7E                     LD   A,(HL)   ;LOAD IT
057C   B7                     OR   A   ;KILL CARRY
057D   17                     RLA      ;SHIFT IT LEFT
057E   77                     LD   (HL),A   ;STORE IT
057F   2D                     DEC   L   
0580   7E                     LD   A,(HL)   ;LOAD IT
0581   17                     RLA      ;SHIFT IT LEFT
0582                             ;       IF CARRY SET BY FIRST SHIFT
0582                             ;       IT WILL BE IN LSB OF SECOND
0582   77                     LD   (HL),A   
0583   2D                     DEC   L   ;/***TP EXTENSION
0584   7E                     LD   A,(HL)   
0585   17                     RLA      
0586   77                     LD   (HL),A   ;/***ALL DONE TP
0587   C9                     RET      
0588                             ; 
0588                             ; 
0588                             ;   SUBROUTINE DRST
0588                             ; 
0588                             ;       SHIFTS DOUBLE WORD ONE PLACE
0588                             ;       TO THE RIGHT
0588                             ;           DOES NOT AFFECT D
0588                             ; 
0588                DRST:        
0588   5D                     LD   E,L   ;/***TP MODIFIED RIGHT SHIFT TP
0589   7E                     LD   A,(HL)   ;LOAD FIRST WORD
058A   1F                     RRA      ;ROTATE IT RIGHT
058B   77                     LD   (HL),A   ;STORE IT
058C   2C                     INC   L   ;/*** TP
058D   7E                     LD   A,(HL)   ;LOAD SECOND WORD
058E   1F                     RRA      ;SHIFT IT RIGHT
058F   77                     LD   (HL),A   ;STORE IT
0590   2C                     INC   L   ;/*** TP EXTENSION
0591   7E                     LD   A,(HL)   
0592   1F                     RRA      
0593   77                     LD   (HL),A   
0594   6B                     LD   L,E   ;/***TP - ALL DONE TP
0595   C9                     RET      
0596                             ; 
0596                             ; 
0596                             ;   SUBROUTINE DADD
0596                             ; 
0596                             ;       ADDS TWO DOUBLE PRECISION
0596                             ;       WORDS, C=1 IF THERE IS OVRFLW
0596                             ; 
0596                DADD:        
0596   5D                     LD   E,L   ;SAVE BASE IN E
0597   68                     LD   L,B   ;BASE \3 TO L
0598   2C                     INC   L   ;BASE \4 TO L
0599   2C                     INC   L   ;/***TP
059A   7E                     LD   A,(HL)   ;LOAD S MANTB
059B   6B                     LD   L,E   ;BASE TO L
059C   2C                     INC   L   ;BASE \1 TO L
059D   2C                     INC   L   ;/***TP
059E   86                     ADD   A,(HL)   ;ADD TWO MANTB]S
059F   77                     LD   (HL),A   ;STORE ANSWER
05A0   68                     LD   L,B   ;/***TP EXTENSION
05A1   2C                     INC   L   
05A2   7E                     LD   A,(HL)   
05A3   6B                     LD   L,E   
05A4   2C                     INC   L   
05A5   8E                     ADC   A,(HL)   
05A6   77                     LD   (HL),A   ;/***TP - ALL DONE
05A7   68                     LD   L,B   ;BASE \3 TO L
05A8   7E                     LD   A,(HL)   ;MANTA OF S TO A
05A9   6B                     LD   L,E   ;BASE TO L
05AA   8E                     ADC   A,(HL)   ;ADD WITH CARRY
05AB   77                     LD   (HL),A   ;STORE ANSWER
05AC   C9                     RET      
05AD                             ; 
05AD                             ; 
05AD                             ;   SUBROUTINE DCLR
05AD                             ; 
05AD                             ;       CLEARS TWO SUCCESSIVE
05AD                             ;       LOCATIONS OF MEMORY
05AD                             ; 
05AD                DCLR:        
05AD   AF                     XOR   A   
05AE   77                     LD   (HL),A   
05AF   2C                     INC   L   
05B0   77                     LD   (HL),A   
05B1   2C                     INC   L   ;/***TP EXTENSION
05B2   77                     LD   (HL),A   ;/***TP ZERO 3
05B3   2D                     DEC   L   ;/***TP - ALL DONE
05B4   2D                     DEC   L   
05B5   C9                     RET      
05B6                             ; 
05B6                             ; 
05B6                             ;       /*****ALL NEW DSUB - SHORTER***
05B6                             ; 
05B6                             ;   SUBROUTINE DSUB
05B6                             ; 
05B6                             ;       DOUBLE PRECISION SUBTRACT
05B6                             ; 
05B6                DSUB:        
05B6   5D                     LD   E,L   ;SAVE BASE IN E
05B7   2C                     INC   L   ;/***TP EXTENSION
05B8   2C                     INC   L   ;/START WITH LOWS
05B9   7E                     LD   A,(HL)   ;/GET ARG
05BA   68                     LD   L,B   ;/NOW SET UP TO SUB
05BB   2C                     INC   L   
05BC   2C                     INC   L   
05BD   96                     SUB   (HL)   ;/NOW DO IT
05BE   6B                     LD   L,E   ;/NOW MUST PUT IT BACK
05BF   2C                     INC   L   
05C0   2C                     INC   L   
05C1   77                     LD   (HL),A   ;/PUT BACK
05C2   2D                     DEC   L   ;/***TP - ALL DONE
05C3   7E                     LD   A,(HL)   ;/GET LOW OF LOP
05C4   68                     LD   L,B   ;/SET TO BOP
05C5   2C                     INC   L   ;/SET TO BOP LOW
05C6   9E                     SBC   A,(HL)   ;/GET DIFF. OF LOWS
05C7   6B                     LD   L,E   ;/SAVE IN LOP LOW
05C8   2C                     INC   L   ;/TO LOP LOW
05C9   77                     LD   (HL),A   ;/INTO RAM
05CA   2D                     DEC   L   ;/BACK UP TO LOP HIGH
05CB   7E                     LD   A,(HL)   ;/GET LOP HIGH
05CC   68                     LD   L,B   ;/SET TO BOP HIGH
05CD   9E                     SBC   A,(HL)   ;/SUB. WITH CARRY
05CE   6B                     LD   L,E   ;/SAVE IN LOP HIGH
05CF   77                     LD   (HL),A   ;/INTO RAM
05D0   C9                     RET      ;/ALL DONE - MUCH SHORTER
05D1                             ; 
05D1                             ;   SUBROUTINE GCHAR
05D1                             ; 
05D1                             ;       THIS SUBROUTINE RETURNS THE EXPONENT OF
05D1                             ;       THE FLOATING POINT NUMBER POINTED TO BY (H,L)
05D1                             ;       IN THE A REGISTER WITH ITS SIGN EXTENDED INTO THE
05D1                             ;       LEFTMOST BIT.
05D1                             ; 
05D1                             ;   REGISTERS ON EXIT:
05D1                             ; 
05D1                             ;       A = EXPONENT OF (H,L) WITH SIGN EXTENDED
05D1                             ;       L = (ORIGINAL L) + 3
05D1                             ;       B,C,D,E,H = SAME AS ON ENTRY
05D1                             ; 
05D1                GCHAR:       
05D1   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
05D2   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
05D3   2C                     INC   L   ;MAKE (H,L) POINT TO CHAR
05D4   7E                     LD   A,(HL)   ;SET A=CHAR + MANTISSA SIGN
05D5   E6 7F                  AND   $7F   ;177Q      ;GET RID OF MANTISSA SIGN BIT
05D7   C6 40                  ADD   A,$40   ;100Q    ;PROPAGATE CHAR SIGN INTO LEFTMOST BIT
05D9   EE 40                  XOR   $40   ;100Q      ;RESTORE ORIGINAL CHAR SIGN BIT
05DB   C9                     RET      ;RETURN WITH (H,L) POINTING TO THE
05DC                             ;CHAR = ORIGINAL (H,L)+3
05DC                             ;SOMEONE ELSE WILL CLEAN UP
05DC                             ; 
05DC                             ; 
05DC                             ;   SUBROUTINE CFCHE
05DC                             ; 
05DC                             ;       THIS SUBROUTINE RETURNS THE CHARACTERISTICS OF THE
05DC                             ;       FLOATING POINT NUMBERS POINTED TO BY (H,L) AND
05DC                             ;       (H,B) IN THE A AND E REGISTERS RESPECTIVELY,
05DC                             ;       WITH THEIR SIGNS EXTENDED INTO THE LEFTMOST BIT.
05DC                             ; 
05DC                             ;   REGISTERS ON EXIT:
05DC                             ; 
05DC                             ;       A = EXPONENT OF (H,L) WITH SIGN EXTENDED
05DC                             ;       E = EXPONENT OF (H,B) WITH SIGN EXTENDED
05DC                             ;       B,C,H,L = SAME AS ON ENTRY
05DC                             ;       D = A
05DC                             ; 
05DC                CFCHE:       
05DC   5D                     LD   E,L   ;SAVE LPTR IN E
05DD   68                     LD   L,B   ;SET L = BPTR
05DE   CD D1 05               CALL   GCHAR   ;GET CHAR(H,B) WITH SIGN EXTENDED IN A
05E1   6B                     LD   L,E   ;RESTORE L = LPTR
05E2   5F                     LD   E,A   ;SET E=CHAR(H,B) WITH SIGN EXTENDED
05E3   CD D1 05               CALL   GCHAR   ;SET A=CHAR(H,L) WITH SIGN EXTENDED
05E6   2D                     DEC   L   ;RESTORE L = LPTR
05E7   2D                     DEC   L   ;RESTORE L = LPTR
05E8   2D                     DEC   L   ;RESTORE L = LPTR
05E9   57                     LD   D,A   ;SET D=A=CHAR(H,L) WITH SIGN EXTENDED
05EA   C9                     RET      
05EB                             ; 
05EB                             ; 
05EB                             ;   SUBROUTINE CCMP
05EB                             ; 
05EB                             ;       THIS SUBROUTINE COMPARES THE CHARACTERISTICS OF
05EB                             ;       FLOATING POINT NUMBERS POINTED TO BY (H,L) AND (H,B).
05EB                             ;       THE ZERO FLIP-FLOP IS SET IF CHAR(H,L) EQUALS
05EB                             ;       CHAR(H,B).  IF CHAR(H,L) IS LESS THAN CHAR(H,B) THEN
05EB                             ;       THE CARRY BIT WILL BE SET.
05EB                             ; 
05EB                             ;   REGISTERS ON EXIT:
05EB                             ; 
05EB                             ;       A = EXPONENT OF (H,L) WITH SIGN EXTENDED
05EB                             ;       E = EXPONENT OF (H,B) WITH SIGN EXTENDED
05EB                             ;       D = A
05EB                             ;       B,C,H,L = SAME AS ON ENTRY
05EB                             ; 
05EB                CCMP:        
05EB   CD DC 05               CALL   CFCHE   ;FETCH CHARACTERISTICS WITH SIGN EXTENDED
05EE                             ;INTO A (CHAR(H,L)) AND E (CHAR(H,B)) REGISTERS
05EE   57                     LD   D,A   ;SAVE CHAR (H,L)
05EF   93                     SUB   E   ;SUBTRACT E (CHAR(H,B))
05F0   17                     RLA      ;ROTATE SIGN BIT INTO CARRY BIT
05F1   7A                     LD   A,D   ;RESTORE A=CHAR(H,L)
05F2   C9                     RET      ;RETURN
05F3                             ; 
05F3                             ;   ERROR RETURNS
05F3                             ; 
05F3                             ;       THE FOLLOWING CODE IS USED TO RETURN VARIOUS
05F3                             ;       ERROR CONDITIONS.  IN EACH CASE A FLOATING POINT
05F3                             ;       NUMBER IS STORED IN  THE 4 WORDS POINTED TO BY (H,L)
05F3                             ;       AND A FLAG IS STORED IN THE ACCUMULATOR.
05F3                             ; 
05F3                             ;       CONDITION   FLAG   RESULT (+)        RESULT (-)
05F3                             ; 
05F3                             ;       UNDERFLOW    377   000 000 000 100   000 000 000 300
05F3                             ;       OVERFLOW     177   377 377 377 077   377 377 377 277
05F3                             ;       INDEFINITE   077   377 377 377 077   377 377 377 277
05F3                             ;       NORMAL       000   XXX XXX XXX XXX   XXX XXX XXX XXX
05F3                             ;       NORMAL ZERO  000   000 000 000 100   (ALWAYS RETURNS +0)
05F3                             ; 
05F3                             ;   ENTRY POINTS:
05F3                             ; 
05F3                             ;       WUND - WRITE UNDERFLOW
05F3                             ;       WOVR - WRITE OVERFLOW
05F3                             ;       WIND - WRITE INDEFINITE
05F3                             ;       WZER - WRITE NORMAL ZERO
05F3                             ; 
05F3                             ; 
05F3                WUND:        
05F3   16 40                  LD   D,$40   ;100Q    ;LOAD EXPONENT INTO D REGISTER
05F5   CD 2F 06               CALL   WCHAR   ;WRITE EXPONENT
05F8                UFLW1:       
05F8   3E 00                  LD   A,0   ;LOAD MANTISSA VALUE
05FA                             ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
05FA                             ;ARE THE SAME
05FA   CD 28 06               CALL   WMANT   ;WRITE THE MANTISSA
05FD   3E FF                  LD   A,$FF   ;377Q    ;SET ACCUMULATOR TO FLAG
05FF   B7                     OR   A   ;SET FLAGS PROPERLY
0600   C9                     RET      ;RETURN (WMANT RESTORED (H,L))
0601                             ; 
0601                WOVR:        
0601   16 3F                  LD   D,$3F   ;77Q     ;LOAD EXPONENT INTO D REGISTER
0603   CD 2F 06               CALL   WCHAR   ;WRITE EXPONENT
0606                OFLW1:       
0606   3E FF                  LD   A,$FF   ;377Q    ;LOAD MANTISSA VALUE
0608                             ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
0608                             ;ARE THE SAME
0608   CD 28 06               CALL   WMANT   ;WRITE THE MANTISSA
060B   3E 7F                  LD   A,$7F   ;177Q    ;SET ACCUMULATOR TO FLAG
060D   B7                     OR   A   ;SET FLAGS PROPERLY
060E   C9                     RET      ;RETURN (WMANT RESTORED (H,L))
060F                             ; 
060F                WIND:        
060F   16 3F                  LD   D,$3F   ;77Q     ;LOAD EXPONENT INTO D REGISTER
0611   CD 2F 06               CALL   WCHAR   ;WRITE EXPONENT
0614                INDF1:       
0614   3E FF                  LD   A,$FF   ;377Q    ;LOAD MANTISSA VALUE
0616                             ;WE ASSUME HERE THAT ALL BYTES OF MANTISSA
0616                             ;ARE THE SAME
0616   CD 28 06               CALL   WMANT   ;WRITE THE MANTISSA
0619   3E 3F                  LD   A,$3F   ;77Q     ;SET ACCUMULATOR TO FLAG
061B   B7                     OR   A   ;SET FLAGS PROPERLY
061C   C9                     RET      ;RETURN (WMANT RESTORED (H,L))
061D                             ; 
061D                WZER:        
061D   2C                     INC   L   ;WRITE NORMAL ZERO
061E   2C                     INC   L   ; 
061F   2C                     INC   L   ; 
0620   36 40                  LD   (HL),$40   ;100Q ;STORE EXPONENT FOR ZERO
0622   AF                     XOR   A   ;ZERO ACCUMULATOR
0623   CD 28 06               CALL   WMANT   ;STORE ZERO MANTISSA
0626   B7                     OR   A   ;SET FLAGS PROPERLY
0627   C9                     RET      ;RETURN
0628                             ; 
0628                             ; ROUTINE TO WRITE MANTISSA FOR ERROR RETURNS
0628                             ; 
0628                WMANT:       
0628   2D                     DEC   L   ;POINT LEAST SIGNIFICANT BYTE
0629                             ;OF MANTISSA
0629   77                     LD   (HL),A   ;STORE LSBYTE OF MANTISSA
062A   2D                     DEC   L   ;POINT TO NEXT LEAST SIGNIFICANT BYTE
062B                             ;OF MANTISSA
062B   77                     LD   (HL),A   ;STORE NLSBYTE OF MANTISSA
062C   2D                     DEC   L   ;POINT TO MOST SIGNIFICANT BYTE
062D                             ;OF MANTISSA
062D   77                     LD   (HL),A   ;STORE MSBYTE OF MANTISSA
062E   C9                     RET      ;RETURN (H,L) POINTS TO BEGINNING OF
062F                             ;FLOATING POINT RESULT
062F                             ; 
062F                             ; ROUTINE TO WRITE EXPONENT FOR ERROR RETURNS
062F                             ; NOTE:  WE PRESERVE ORIGINAL MANTISSA SIGN
062F                             ; ON ENTRY D CONTAINS NEW EXPONENT TO BE STORED.
062F                             ; 
062F                WCHAR:       
062F   2C                     INC   L   ;SET (H,L) TO POINT TO EXPONENT
0630   2C                     INC   L   ;PART OF ABOVE
0631   2C                     INC   L   ;PART OF ABOVE
0632   7E                     LD   A,(HL)   ;LOAD EXPONENT A
0633                             ;AND MANTISSA SIGN
0633   E6 80                  AND   $80   ;200Q      ;JUST KEEP MANTISSA SIGN
0635   B2                     OR   D   ;OR IN NEW EXPONENT
0636   77                     LD   (HL),A   ;STORE IT BACK
0637   C9                     RET      ;RETURN WITH (H,L) POINT TO EXPONENT
0638                             ;OF RESULT
0638                             ;SOMEONE ELSE WILL FIX UP (H,L)
0638                             ; 
0638                             ;   SUBROUTINE INDFC
0638                             ; 
0638                             ;       THIS ROUTINE WRITES A FLOATING INDEFINITE, SETS
0638                             ;       THIS WRITES WRITES A FLOATING POINT INDEFINITE
0638                             ;       AT (H,C), SETS THE CONDITION FLAG AND RETURNS
0638                             ; 
0638                             ; 
0638                INDFC:       
0638   5D                     LD   E,L   ;SAVE LPTR IN E
0639   69                     LD   L,C   ;SET L=CPTR SO (H,L)-ADDR OF RESULT
063A   CD 0F 06               CALL   WIND   ;WRITE INDEFINITE
063D   6B                     LD   L,E   ;RESTORE L=LPTR
063E   C9                     RET      ;RETURN
063F                             ; 
063F                             ; 
063F                             ;   SUBROUTINE WZERC
063F                             ; 
063F                             ;       THIS ROUTINE WRITES A NORMAL FLOATING POINT ZERO
063F                             ;       AT (H,C), SETS THE CONDITION FLAG AND RETURNS
063F                             ; 
063F                WZERC:       
063F   5D                     LD   E,L   ;SAVE LPTR IN E
0640   69                     LD   L,C   ;SETL=CPTR SO (H,L)=ADDR OF RESULT
0641   CD 1D 06               CALL   WZER   ;WRITE NORMAL ZERO
0644   6B                     LD   L,E   ;RESTORE L=LPTR
0645   C9                     RET      ;RETURN
0646                             ; 
0646                             ;   SUBROUTINE INCR
0646                             ; 
0646                             ;       THIS SUBROUTINE INCREMENTS THE EXPONENT
0646                             ;       OF THE FLOATING POINT NUMBER POINTED TO BY (H,L).
0646                             ;       WE TEST FOR OVERFLOW AND SET APPROPRIATE FLAG.
0646                             ;       (SEE ERROR RETURNS).
0646                             ; 
0646                             ;   REGISTERS ON EXIT:
0646                             ; 
0646                             ;        A = CONDITION FLAG (SEE ERROR RETURNS)
0646                             ;        D = CLOBBERED
0646                             ;        B,C,H,L = SAME AS ON ENTRY
0646                             ; 
0646                INCR:        
0646   CD D1 05               CALL   GCHAR   ;GET CHAR WITH SIGN EXTENDED
0649   FE 3F                  CP   MAXCH   ;COMPARE WITH MAX CHAR PERMITTED
064B   CA 06 06               JP   Z,OFLW1   ;INCREMENT WOULD CAUSE OVERFLOW
064E   57                     LD   D,A   ;SAVE IT IN D
064F   14                     INC   D   ;INCREMENT IT
0650   C3 56 06               JP   INCR2   ;JUMP AROUND ALTERNATE ENTRY POINT
0653                             ; 
0653                INCR3:       
0653   2C                     INC   L   ;COME HERE TO STORE EXPONENT
0654   2C                     INC   L   ;POINT (H,L) TO CHAR
0655   2C                     INC   L   ;POINT (H,L) TO CHAR
0656                INCR2:       
0656   3E 7F                  LD   A,$7F   ;177Q
0658   A2                     AND   D   ;KILL SIGN BIT
0659   57                     LD   D,A   ;BACK TO D
065A   7E                     LD   A,(HL)   ;NOW SIGN IT
065B   E6 80                  AND   $80   ;200Q      ;GET MANTISSA SIGN
065D   B2                     OR   D   ;PUT TOGETHER
065E   77                     LD   (HL),A   ;STORE IT BACK
065F   2D                     DEC   L   ;NOW BACK TO BASE
0660   2D                     DEC   L   ;/***TP
0661   2D                     DEC   L   
0662                SCCFG:       
0662   AF                     XOR   A   ;SET SUCCESS FLAG
0663   C9                     RET      
0664                             ; 
0664                             ;   SUBROUTINE DECR
0664                             ; 
0664                             ;       THIS SUBROUTINE DECREMENTS THE EXPONENT
0664                             ;       OF THE FLOATING POINT NUMBER POINTED TO BY (H,L).
0664                             ;       WE TEST FOR UNDERFLOW AND SET APPROPRIATE FLAG.
0664                             ;       (SEE ERROR RETURNS).
0664                             ; 
0664                             ;   REGISTERS ON EXIT:
0664                             ; 
0664                             ;        A = CONDITION FLAG (SEE ERROR RETURNS)
0664                             ;        D = CLOBBERED
0664                             ;        B,C,H,L = SAME AS ON ENTRY
0664                             ; 
0664                DECR:        
0664   CD D1 05               CALL   GCHAR   ;GET CHAR WITH SIGN EXTENDED
0667   FE C0                  CP   MINCH   ;COMPARE WITH MIN CHAR PERMITTED
0669   CA F8 05               JP   Z,UFLW1   ;DECREMENT WOULD CAUSE UNDERFLOW
066C   57                     LD   D,A   ;SAVE EXPONENT IN D
066D   15                     DEC   D   ;DECREMENT EXPONENT
066E   C3 56 06               JP   INCR2   ;GO STORE IT BACK
0671                             ; 
0671                             ;   SUBROUTINE AORS
0671                             ; 
0671                             ;       RETURN S=1 IF BASE 6
0671                             ;       HAS A 1 IN MSB
0671                             ; 
0671                AORS:        
0671   5D                     LD   E,L   ;SAVE BASE
0672   69                     LD   L,C   ;BASE 6 TO L
0673   7E                     LD   A,(HL)   ;LOAD IT
0674   B7                     OR   A   ;SET FLAGS
0675   6B                     LD   L,E   ;RESTORE BASE
0676   C9                     RET      
0677                             ; 
0677                             ; 
0677                             ;   SUBROUTINE TSTR
0677                             ; 
0677                             ;       CHECKS C PTR TO SEE IF
0677                             ;       NLSB !
0677                             ;       RETURNS Z=1 IF NOT
0677                             ;       DESTROYS E,D
0677                             ; 
0677                TSTR:        
0677   5D                     LD   E,L   ;SAVE BASE
0678   69                     LD   L,C   ;C PTR TO L
0679   16 02                  LD   D,2   ;MASK TO D
067B   7E                     LD   A,(HL)   ;LOAD VALUE
067C   6B                     LD   L,E   ;RESTORE BASE
067D   A2                     AND   D   ;AND VALUE WITH MASK
067E   C9                     RET      
067F                             ; 
067F                             ; 
067F                             ;   SUBROUTINE ACPR
067F                             ; 
067F                             ;       STORES A IN LOCATION OF CPTR
067F                             ;       LPTR IN E
067F                             ; 
067F                ACPR:        
067F   5D                     LD   E,L   ;SAVE LPTR
0680   69                     LD   L,C   ;CPTR TO L
0681   77                     LD   (HL),A   ;STORE A
0682   6B                     LD   L,E   ;RESTORE BASE
0683   C9                     RET      
0684                             ; 
0684                             ; 
0684                             ;   SUBROUTINE DCMP
0684                             ; 
0684                             ;       COMPARES TWO DOUBLE LENGTH
0684                             ;       WORDS
0684                             ; 
0684                DCMP:        
0684   7E                     LD   A,(HL)   ;NUM MANTA TO A
0685   5D                     LD   E,L   ;SAVE BASE IN E
0686   68                     LD   L,B   ;BASE 3 TO L
0687   BE                     CP   (HL)   ;COMPARE WITH DEN MANTA
0688   6B                     LD   L,E   ;RETURN BASE TO L
0689   C0                     RET   NZ   ;RETURN IF NOT THE SAME
068A   2C                     INC   L   ;L TO NUM MANTB
068B   7E                     LD   A,(HL)   ;LOAD IT
068C   68                     LD   L,B   ;DEN MANTB ADD TO L
068D   2C                     INC   L   ;BASE 4 TO L
068E   BE                     CP   (HL)   
068F   6B                     LD   L,E   
0690   C0                     RET   NZ   ;/***TP EXTENSION
0691   2C                     INC   L   ;NOW CHECK BYTE 3
0692   2C                     INC   L   
0693   7E                     LD   A,(HL)   ;GET FOR COMPARE
0694   68                     LD   L,B   
0695   2C                     INC   L   
0696   2C                     INC   L   ;BYTE 3 NOW
0697   BE                     CP   (HL)   ;COMPARE
0698   6B                     LD   L,E   ;/***TP - ALL DONE
0699   C9                     RET      
069A                             ; 
069A                             ; 
069A                             ;   SUBROUTINE DIVC
069A                             ; 
069A                             ;       PERFORMS ONE CYCLE OF DOUBLE
069A                             ;       PRECISION FLOATING PT DIVIDE
069A                             ;       ENTER AT ENT1 ON FIRST CYCLE
069A                             ;       ENTER AT ENT2 ALL THEREAFTER
069A                             ; 
069A                ENT2:        
069A   CD 79 05               CALL   DLST   ;SHIFT MOVING DIVIDEND
069D   DA A7 06               JP   C,OVER   ;IF CARRY=1,NUM.GT.D
06A0                ENT1:        
06A0   CD 84 06               CALL   DCMP   ;COMPARE NUM WITH DEN
06A3   D2 A7 06               JP   NC,OVER   ;IF CARRY NOT SET,NUM.GE.DEN
06A6   C9                     RET      
06A7                OVER:        
06A7   CD B6 05               CALL   DSUB   ;CALL DOUBLE SUBTRACT
06AA   5D                     LD   E,L   ;SAVE BASE IN E
06AB   69                     LD   L,C   ;BASE 6 TO L
06AC   2C                     INC   L   ;BASE 7 TO L
06AD   2C                     INC   L   ;/***TP
06AE   7E                     LD   A,(HL)   
06AF   C6 01                  ADD   A,1   ;ADD 1
06B1   77                     LD   (HL),A   ;PUT IT BACK
06B2   6B                     LD   L,E   ;RESTORE BASE TO L
06B3   C9                     RET      
06B4                             ; 
06B4                             ; 
06B4                             ;   SUBROUTINE LXFR
06B4                             ; 
06B4                             ;       MOVES CPTR TO EPTR
06B4                             ;       MOVES 3 WORDS IF ENTER AT LXFR
06B4                             ; 
06B4                LXFR:        
06B4   16 04                  LD   D,4   ;MOVE 4 WORDS
06B6                REP5:        
06B6   69                     LD   L,C   ;CPTR TO L
06B7   7E                     LD   A,(HL)   ;CPTR> TO A
06B8   6B                     LD   L,E   ;EPTR TO L
06B9   77                     LD   (HL),A   
06BA   0C                     INC   C   ;INCREMENT C
06BB   1C                     INC   E   ;INCREMENT E TO NEXT
06BC   15                     DEC   D   ;TEST FOR DONE
06BD   C2 B6 06               JP   NZ,REP5   ;GO FOR FOR TILL D=0
06C0   7B                     LD   A,E   ;NOW RESET C AND E
06C1   D6 04                  SUB   4   ;RESET BACK BY 4
06C3   5F                     LD   E,A   ;PUT BACK IN E
06C4   79                     LD   A,C   ;NOW RESET C
06C5   D6 04                  SUB   4   ;BY 4
06C7   4F                     LD   C,A   ;BACK TO C
06C8   C9                     RET      ;DONE
06C9                             ; 
06C9                             ;   SUBROUTINE LDCP
06C9                             ; 
06C9                             ;       THIS SUBROUTINE COMPUTES THE EXPONENT
06C9                             ;       FOR THE FLOATING DIVIDE ROUTINE
06C9                             ; 
06C9                             ;   REGISTERS ON EXIT:
06C9                             ; 
06C9                             ;       A = CONDITION FLAG (SEE ERROR RETURNS)
06C9                             ;       D,E = GARBAGE
06C9                             ;       B,C,H,L = SAME AS ON ENTRY
06C9                             ; 
06C9                             ;   REGISTERS ON ENTRY:
06C9                             ; 
06C9                             ;       (H,B) = ADDRESS OFF DIVISOR
06C9                             ;       (H,C) = ADDRESS OF QUOTIENT
06C9                             ;       (H,L) = ADDRESS OF DIVIDEND
06C9                             ; 
06C9                LDCP:        
06C9   CD DC 05               CALL   CFCHE   ;SET E=CHAR(H,B), A=CHAR(H,L)
06CC   93                     SUB   E   ;SUBTRACT TO GET NEW EXPONENT
06CD   C3 D4 06               JP   CCHK   ;GO CHECK FOR OVER/UNDERFLOW
06D0                             ;AND STORE EXPONENT
06D0                             ; 
06D0                             ; 
06D0                             ;   SUBROUTINE LMCP
06D0                             ; 
06D0                             ;       THIS SUBROUTINE COMPUTES THE EXPONENT
06D0                             ;       FOR THE FLOATING MULTIPLY ROUTINE.
06D0                             ; 
06D0                             ;   REGISTERS ON EXIT:
06D0                             ; 
06D0                             ;       A = CONDITION FLAG (SEE ERROR RETURNS)
06D0                             ;       D,E = GARBAGE
06D0                             ;       B,C,H,L = SAME AS ON ENTRY
06D0                             ; 
06D0                             ;   REGISTERS ON ENTRY:
06D0                             ; 
06D0                             ;       (H,B) = ADDRESS OFF MULTIPLICAND
06D0                             ;       (H,C) = ADDRESS OF PRODUCT
06D0                             ;       (H,L) = ADDRESS OF MULTIPLIER
06D0                             ; 
06D0                LMCP:        
06D0   CD DC 05               CALL   CFCHE   ;SET E=CHAR(H,B), A=CHAR(H,L)
06D3   83                     ADD   A,E   ;ADD TO GET NEW EXPONENT
06D4                             ;NOW FALL INTO THE ROUTINE
06D4                             ;WHICH CHECKS FOR OVER/UNDERFLOW
06D4                             ;AND STORE EXPONENT
06D4                             ; 
06D4                             ; 
06D4                             ;   SUBROUTINE CCHK
06D4                             ; 
06D4                             ;       THIS SUBROUTINE CHECKS A EXPONENT IN
06D4                             ;       THE ACCUMULATOR FOR OVERFLOW OR UNDERFLOW.
06D4                             ;       IT THEN STORES THE EXPONENT, PRESERVING
06D4                             ;       THE PREVIOUSLY COMPUTED MANTISSA SIGN.
06D4                             ; 
06D4                             ;  REGISTERS ON ENTRY:
06D4                             ; 
06D4                             ;       (H,L) = ADDRESS OF ONE OPERAND
06D4                             ;       (H,B) = ADDRESS OF OTHER OPERAND
06D4                             ;       (H,C) = ADDRESS OF RESULT
06D4                             ;       A     = NEW EXPONENT OF  RESULT
06D4                             ; 
06D4                             ;   REGISTERS ON EXIT:
06D4                             ; 
06D4                             ;       A = CONDITION FLAG (SEE ERROR RETURNS)
06D4                             ;       D,E = GARBAGE
06D4                             ;       B,C,H,L = SAME AS ON ENTRY
06D4                             ; 
06D4                CCHK:        ;ENTER HERE TO CHECK EXPONENT
06D4   FE 40                  CP   $40   ;100Q      ;CHECK FOR 0 TO +63
06D6   DA E3 06               JP   C,STORC   ;JUMP IF OKAY
06D9   FE 80                  CP   $80   ;200Q      ;CHECK FOR +64 TO +127
06DB   DA EB 06               JP   C,OFLWC   ;JUMP IF OVERFLOW
06DE   FE C0                  CP   $C0   ;300Q      ;CHECK FOR -128 TO -65
06E0   DA F2 06               JP   C,UFLWC   ;JUMP IF UNDERFLOW
06E3                STORC:       
06E3   5D                     LD   E,L   ;SAVE L IN E
06E4   69                     LD   L,C   ;LET L POINT TO RESULT
06E5   57                     LD   D,A   ;SAVE EXPONENT IN D
06E6   CD 53 06               CALL   INCR3   ;STORE EXPONENT
06E9   6B                     LD   L,E   ;RESTORE L
06EA   C9                     RET      ;RETURN
06EB                             ; 
06EB                             ;   SUBROUTINE OFLWC
06EB                             ; 
06EB                             ;       THIS ROUTINE WRITES A FLOATING POINT OVERFLOW AT (H,C)
06EB                             ;       SETS THE CONDITION FLAG, AND RETURNS.
06EB                             ; 
06EB                OFLWC:       
06EB   5D                     LD   E,L   ;SAVE L IN E
06EC   69                     LD   L,C   ;SET L=CPTR, SO (H,L)=ADDR OF RESULT
06ED   CD 01 06               CALL   WOVR   ;WRITE OUT OVERFLOW
06F0   6B                     LD   L,E   ;RESTORE L
06F1   C9                     RET      ;RETURN
06F2                             ; 
06F2                             ;   SUBROUTINE UFLWC
06F2                             ; 
06F2                             ;       THIS ROUTINE WRITES A FLOATING POINT UNDERFLOW AT (H,C)
06F2                             ;       SETS THE CONDITION FLAG, AND RETURNS.
06F2                             ; 
06F2                UFLWC:       
06F2   5D                     LD   E,L   ;SAVE L IN E
06F3   69                     LD   L,C   ;SET L=CPTR, SO (H,L)=ADDR OF RESULT
06F4   CD F3 05               CALL   WUND   ;WRITE OUT UNDERFLOW
06F7   6B                     LD   L,E   ;RESTORE L
06F8   C9                     RET      ;RETURN
06F9                             ; 
06F9                             ; 
06F9                             ;   SUBROUTINE CSIGN
06F9                             ; 
06F9                             ;       THIS SUBROUTINE COMPUTES AND STORE THE MANTISSA
06F9                             ;       SIGN FOR THE FLOATING MULTIPLY AND DIVIDE ROUTINES
06F9                             ; 
06F9                             ;   REGISTERS ON ENTRY:
06F9                             ; 
06F9                             ;       (H,L) = ADDRESS OF ONE OPERAND
06F9                             ;       (H,B) = ADDRESS OF OTHER OPERAND
06F9                             ;       (H,C) = ADDRESS OF RESULT
06F9                             ; 
06F9                             ;   REGISTERS ON EXIT:
06F9                             ; 
06F9                             ;       A,D,E = GARBAGE
06F9                             ;       B,C,H,L = SAME AS ON ENTRY
06F9                             ; 
06F9                             ; 
06F9                CSIGN:       
06F9   CD 09 07               CALL   MSFH   ;SET A=SIGN(H,L), E=SIGN(H,B)
06FC   AB                     XOR   E   ;EXCLUSIVE OR SIGNS TO GET NEW SIGN
06FD   CD 01 07               CALL   CSTR   ;STORE SIGN INTO RESULT
0700   C9                     RET      ;RETURN
0701                             ; 
0701                             ; 
0701                             ;   SUBROUTINE CSTR
0701                             ; 
0701                             ;       STORES VALUE IN A IN
0701                             ;       CPTR 2
0701                             ;       PUTS LPTR IN E
0701                             ; 
0701                CSTR:        
0701   5D                     LD   E,L   ;SAVE LPTR IN E
0702   69                     LD   L,C   ;CPTR TO L
0703   2C                     INC   L   ;CPTR\2
0704   2C                     INC   L   ;TO L
0705   2C                     INC   L   ;/***TP
0706   77                     LD   (HL),A   ;STORE ANSWER
0707   6B                     LD   L,E   ;LPTR BACK TO L
0708   C9                     RET      
0709                             ; 
0709                             ;   SUBROUTINE MSFH
0709                             ; 
0709                             ;       THIS SUBROUTINE FETCHES THE SIGNS OF THE MANTISSAS
0709                             ;       OF THE FLOATING POINT NUMBERS POINTED TO BY (H,L)
0709                             ;       AND (H,B) INTO THE A AND E REGISTERS RESPECTIVELY.
0709                             ; 
0709                             ;   REGISTERS ON EXIT:
0709                             ; 
0709                             ;       A = SIGN  OF MANTISSA OF (H,L)
0709                             ;       E = SIGN OF MANTISSA OF (H,B)
0709                             ;       B,C,D,H,L = SAME AS ON ENTRY
0709                             ; 
0709                MSFH:        
0709   5D                     LD   E,L   ;SAVE LPTR
070A   68                     LD   L,B   ;BPTR TO L
070B   2C                     INC   L   ;BPTR\2
070C   2C                     INC   L   ;/***TP
070D   2C                     INC   L   ;TO L
070E   7E                     LD   A,(HL)   ;BPTR 2>TO A
070F   E6 80                  AND   128   ;SAVE MANT SIGN
0711   6B                     LD   L,E   ;LPTR BACK TO L
0712   5F                     LD   E,A   ;STORE BPTR MANT SIGN
0713   2C                     INC   L   ;LPTR\2
0714   2C                     INC   L   ;/***TP
0715   2C                     INC   L   ;TO L
0716   7E                     LD   A,(HL)   ;LPTR\2>TO A
0717   E6 80                  AND   128   ;SAVE LPTR MANT SIGN
0719   2D                     DEC   L   ;LPTR BACK
071A   2D                     DEC   L   ;TO L
071B   2D                     DEC   L   ;/***TP
071C   C9                     RET      
071D                             ; 
071D                             ; 
071D                             ;   SUBROUTINE BCTL
071D                             ; 
071D                             ;           MOVES BPTR CHAR TO LPTR CHAR
071D                             ;           DESTROYS E
071D                             ; 
071D                BCTL:        
071D   5D                     LD   E,L   ;LPTR TO E
071E   68                     LD   L,B   ;BPTR TO L
071F   2C                     INC   L   ;BPTR 2
0720   2C                     INC   L   ;/***TP
0721   2C                     INC   L   ;TO L
0722   7E                     LD   A,(HL)   ;BPTR CHAR TO A
0723   6B                     LD   L,E   ;LPTR TO L
0724   2C                     INC   L   ;LPTR 2
0725   2C                     INC   L   ;TO L
0726   2C                     INC   L   ;/***TP
0727   77                     LD   (HL),A   ;STORE BPTR CHAR IN LPTR CHAR
0728   6B                     LD   L,E   ;LPTR TO L
0729   C9                     RET      
072A                             ; 
072A                             ;HRJ for some reason the square root routine was not included
072A                             ; 
072A                             ; 
072A                             ;       SUBROUTINE DSQRT
072A                             ; 
072A                             ;       THE L REG PTS TO THE    TO BE
072A                             ;       OPERATED ON.
072A                             ;       THE B REG PTS TO THE LOC WHERE
072A                             ;       THE RESULT IS TO BE STORED
072A                             ;       THE C REG PTS TO 17(10) SCRATCH 
072A                             ;       AREA.
072A                             ;       WHERE:
072A                             ;       C = ITERATION COUNT
072A                             ;       C+1 = L REG
072A                             ;       C+2 = B REG
072A                             ;       C+3 TO C+6 = INTRL REG 1
072A                             ;       C+7 TO C+10 = INTRL REG 2
072A                             ;       C+11 TO C+14 = INTRL REG 3
072A                             ;       C+15 = 
072A                             ; 
072A                DSQRT:       
072A   7D                     LD   A,L   ;STORE L IN
072B   69                     LD   L,C   ;2ND WRD SCRATCH
072C   36 00                  LD   (HL),0   ;INITIALIZE ITER COUNT
072E   2C                     INC   L   
072F   77                     LD   (HL),A   
0730   2C                     INC   L   ;STR B IN 3RD
0731   70                     LD   (HL),B   ;WRD OF SCRATCH
0732   2C                     INC   L   ;SET C TO INTRL
0733   4D                     LD   C,L   ;REG I
0734   6F                     LD   L,A   ;SET L PRT AT
0735   7C                     LD   A,H   ;SET REGS FOR COPY
0736   CD 18 09               CALL   COPY   ;COPY TC INTRL REG1
0739   CD B6 08               CALL   GCHR   ;PUT CHR IN A
073C   47                     LD   B,A   ;MAKE COPY
073D   E6 80                  AND   $80   ;200Q      ;OK NEG
073F   C2 A9 07               JP   NZ,ERSQ   
0742   78                     LD   A,B   
0743   E6 40                  AND   $40   ;100Q      ;OK NEG EXP
0745   78                     LD   A,B   
0746   CA 52 07               JP   Z,EPOS   
0749   1F                     RRA      ;DIV BY 2
074A   E6 7F                  AND   $7F   ;177Q
074C   F6 40                  OR   $40   ;100Q      ;SET SIGN BIT
074E   77                     LD   (HL),A   ;SAVE 1ST APPROX
074F   C3 56 07               JP   AGN4   
0752                             ; 
0752                EPOS:        
0752   1F                     RRA      ;DIV BY 2
0753   E6 7F                  AND   $7F   ;177Q
0755   77                     LD   (HL),A   ;SAVE 1ST APPROX
0756                AGN4:        
0756   69                     LD   L,C   ;SET REGS
0757   79                     LD   A,C   ;TO COPY 1ST
0758   C6 04                  ADD   A,4   ;APPROX
075A   4F                     LD   C,A   ;INTO INTRL REG 2
075B   7C                     LD   A,H   ;FRM INTRL REG1
075C   CD 18 09               CALL   COPY   
075F   79                     LD   A,C   
0760   D6 04                  SUB   4   ;MULTIPLY INTRL REG 1
0762   6F                     LD   L,A   
0763   41                     LD   B,C   ;TIME INTRL REG2
0764   C6 08                  ADD   A,$8   ;10Q      ;PLACE RESULT IN
0766   4F                     LD   C,A   ;INMTRL REG 3
0767   CD EF 04               CALL   LMUL   
076A   79                     LD   A,C   
076B   D6 08                  SUB   $8   ;10Q        ;COPY ORG INTO
076D   4F                     LD   C,A   ;INTRL REG 1
076E   D6 02                  SUB   2   
0770   6F                     LD   L,A   
0771   6E                     LD   L,(HL)   
0772   7C                     LD   A,H   
0773   CD 18 09               CALL   COPY   
0776   79                     LD   A,C   
0777   C6 08                  ADD   A,$8   ;10Q      ;ADD INTRL
0779   6F                     LD   L,A   ;REG3 OT
077A   41                     LD   B,C   ;INTRL REG1
077B   C6 04                  ADD   A,4   ;ANS TO INTRL
077D   4F                     LD   C,A   ;REG3
077E   CD EC 03               CALL   LADD   
0781   7D                     LD   A,L   
0782   D6 04                  SUB   4   ;DIV INTRL REG 3
0784   47                     LD   B,A   ;BY INTRL REG 2
0785   D6 04                  SUB   4   ;PUT ANSR IN INTRL
0787   4F                     LD   C,A   ;REG1
0788   CD 90 03               CALL   LDIV   
078B   CD B6 08               CALL   GCHR   
078E   D6 01                  SUB   1   
0790   E6 7F                  AND   $7F   ;177Q
0792   77                     LD   (HL),A   
0793   79                     LD   A,C   
0794   D6 03                  SUB   3   ;C PTS TO INTRL REG 1
0796   6F                     LD   L,A   ;GET INTR
0797   46                     LD   B,(HL)   ;COUNT NOW INCR
0798   04                     INC   B   
0799   70                     LD   (HL),B   
079A   78                     LD   A,B   
079B   FE 05                  CP   5   ;IF = 5 RTN ANS
079D   C2 56 07               JP   NZ,AGN4   ;OTHERWISE CONT
07A0   69                     LD   L,C   
07A1                ALDN:        
07A1   2D                     DEC   L   ;COPY ANS INTO
07A2   4E                     LD   C,(HL)   ;LOC REQUESTED
07A3   2C                     INC   L   
07A4   7C                     LD   A,H   
07A5   CD 18 09               CALL   COPY   
07A8   C9                     RET      
07A9                             ; 
07A9                ERSQ:        
07A9   69                     LD   L,C   
07AA   CD 1D 06               CALL   WZER   ;WRITE A FLOATING ZERO
07AD   C3 A1 07               JP   ALDN   
07B0                             ;                        ; C+1 = L REG
07B0                             ; 
07B0                             ;******************************************************
07B0                             ;       //// 5 DIGIT FLOATING PT. OUTPUT
07B0                             ;******************************************************
07B0                             ; 
07B0                             ; 
07B0                             ;       ROUTINE TO CONVERT FLOATING PT.
07B0                             ;       NUMBERS TO ASCII AND OUTPUT THEM VIA A SUBROUTINE
07B0                             ;       CALLED OUTR  -  NOTE: THIS IS CURRENTLY SET
07B0                             ;       TO ODT'S OUTPUT ROUTINE
07B0                             ; 
07B0                CVRT:        
07B0   CD 6A 05               CALL   ZCHK   ;CHECK FOR NEW ZERO
07B3   C2 C8 07               JP   NZ,NNZRO   ;NOT ZERO
07B6   0C                     INC   C   ;IT WAS, OFFSET C BY 2
07B7   0C                     INC   C   
07B8   69                     LD   L,C   
07B9   CD 1D 06               CALL   WZER   ;WRITE ZERO
07BC   CD A9 08               CALL   SIGN   ;SEND SPACE ON POS ZERO [HRJ: was missing]
07BF   2C                     INC   L   ;PNT TO DECIMAL EXPONENT
07C0   2C                     INC   L   
07C1   2C                     INC   L   
07C2   2C                     INC   L   
07C3   AF                     XOR   A   ;SET IT TO ZERO
07C4   77                     LD   (HL),A   
07C5   C3 27 08               JP   MDSKP   ;OUTPUT IT
07C8                             ; 
07C8                NNZRO:       
07C8   56                     LD   D,(HL)   ;GET THE NUMBER TO CONVERT
07C9   2C                     INC   L   
07CA   46                     LD   B,(HL)   
07CB   2C                     INC   L   
07CC   5E                     LD   E,(HL)   
07CD   2C                     INC   L   ;4 WORD***TP
07CE   7E                     LD   A,(HL)   ;/***TP
07CF   0C                     INC   C   ;OFFSET SCRATCH POINTER BY 2
07D0   0C                     INC   C   
07D1   69                     LD   L,C   ;L NOT NEEDED ANY MORE
07D2   72                     LD   (HL),D   ;SAVE NUMBER IN SCRATCH
07D3   2C                     INC   L   
07D4   70                     LD   (HL),B   
07D5   2C                     INC   L   
07D6   73                     LD   (HL),E   ;/***TP
07D7   2C                     INC   L   ;/***TP
07D8   47                     LD   B,A   ;SAVE COPY OF CHAR & SIGN
07D9   E6 7F                  AND   $7F   ;177Q      ;GET ONLY CHAR.
07DB   77                     LD   (HL),A   ;SAVE ABS(NUMBER)
07DC   FE 40                  CP   $40   ;100Q      ;CK FOR ZERO
07DE   CA E5 07               JP   Z,NZRO   
07E1   D6 01                  SUB   1   ;GET SIGN OF DEC. EXP
07E3   E6 40                  AND   $40   ;100Q      ;GET SIGN OF CHAR.
07E5                NZRO:        
07E5   07                     RLCA      ;MOVE IT TO SIGN POSITION
07E6   2C                     INC   L   ;MOVE TO DECIMAL EXP.
07E7   77                     LD   (HL),A   ;SAVE SIGN OF EXP.
07E8   78                     LD   A,B   ;GET MANT. SIGH BACK
07E9   CD A9 08               CALL   SIGN   ;OUTPUT SIGN
07EC   2E 2D                  LD   L,TEN5 & $FF   ;377Q  ;TRY MULT. OR DIV. BY 100000 FIRST
07EE   CD 0A 09               CALL   COPT   ;MAKE A COPY IN RAM
07F1                TST8:        
07F1   CD B6 08               CALL   GCHR   ;GET CHAR. OF NUMBER
07F4   47                     LD   B,A   ;SAVE A COPY
07F5   E6 40                  AND   $40   ;100Q      ;GET ABSOLUTE VALUE OF CHAR
07F7   78                     LD   A,B   ;IN CASE PLUS
07F8   CA FE 07               JP   Z,GOTV   ;ALREADY PLUS
07FB   3E 80                  LD   A,$80   ;200Q    ;MAKE MINUS INTO PLUS
07FD   90                     SUB   B   ;PLUS=200B-CHAR
07FE                GOTV:        
07FE   FE 12                  CP   $12   ;22Q       ;TEST FOR USE OF 100000
0800   FA 0C 08               JP   M,TRY1   ;WONT GO
0803   CD BC 08               CALL   MORD   ;WILL GO SO DO IT
0806   C6 05                  ADD   A,5   ;INCREMENT DEC. EXPONENT BY 5
0808   77                     LD   (HL),A   ;UPDATE MEM
0809   C3 F1 07               JP   TST8   ;GO TRY AGAIN
080C                             ; 
080C                TRY1:        
080C   2E 31                  LD   L,TEN & $FF   ;377Q  ;NOW USE JUST TEN
080E   CD 0A 09               CALL   COPT   ;PUT IT IN RAM
0811                TST1:        
0811   CD B6 08               CALL   GCHR   ;GET EXPONENT
0814   FE 01                  CP   1   ;MUST GET IN RANGE 1 TO 6
0816   F2 22 08               JP   P,OK1   ;AT LEAST ITS 1 OR BIGGER
0819                             ; 
0819                MDGN:        
0819   CD BC 08               CALL   MORD   ;MUST MUL OF DIV BY 10
081C   C6 01                  ADD   A,1   ;INCREMENT DECIMAL EXP.
081E   77                     LD   (HL),A   ;UPDATE MEM
081F   C3 11 08               JP   TST1   ;NOW TRY AGAIN
0822                             ; 
0822                OK1:         
0822   FE 07                  CP   7   ;TEST FOR LESS THAN 7
0824   F2 19 08               JP   P,MDGN   ;NOPE - 7 OR GREATER
0827                             ; 
0827                MDSKP:       
0827   69                     LD   L,C   ;SET UP DIGIT COUNT
0828   2D                     DEC   L   
0829   2D                     DEC   L   ;IN 1ST WORD OF SCRATCH
082A   36 05                  LD   (HL),5   ;5 DIGITS
082C   5F                     LD   E,A   ;SAVE CHAR. AS LEFT SHIFT COUNT
082D   CD 8F 08               CALL   LSFT   ;SHIFT LEFT PROPER NUMBER
0830   FE 0A                  CP   $0A   ;12Q       ;TEST FOR 2 DIGITS HERE
0832   F2 E2 08               JP   P,TWOD   ;JMP IF 2 DIGITS TO OUTPUT
0835   CD 53 08               CALL   DIGO   ;OUTPUT FIRST DIGIT
0838                POPD:        
0838   CD 67 08               CALL   MULTT   ;MULTIPLY THE NUMBER BY 10
083B                INPOP:       
083B   CD 53 08               CALL   DIGO   ;PRINT DIGIT IN A
083E   C2 38 08               JP   NZ,POPD   ;MORE DIGITS?
0841   3E C5                  LD   A,$C5   ;305Q    ;NO SO PRINT E
0843   CD 5F 03               CALL   OUTR   ;BASIC CALL TO OUTPUT
0846   CD D7 08               CALL   GETEX   ;GET DECIMAL EXP
0849   47                     LD   B,A   ;SAVE A COPY
084A   CD A9 08               CALL   SIGN   ;OUTPUT SIGN
084D   78                     LD   A,B   ;GET EXP BACK
084E   E6 3F                  AND   $3F   ;77Q       ;GET GOOD BITS
0850   CD F9 08               CALL   CTWO   ;GO CONVERT 2 DIGITS
0853                DIGO:        
0853   C6 B0                  ADD   A,$B0   ;260Q    ;MAKE A INTO ASCII
0855   CD 5F 03               CALL   OUTR   ;OUTPUT DIGIT
0858   69                     LD   L,C   ;GET DIGIT COUNT
0859   2D                     DEC   L   ;BACK UP TO DIGIT COUNT
085A   2D                     DEC   L   
085B   7E                     LD   A,(HL)   ;TEST FOR DECIMAL PT
085C   FE 05                  CP   5   ;PRINT . AFTER 1ST DIGIT
085E   3E AE                  LD   A,$AE   ;256Q    ;JUST IN CASE
0860   CC 5F 03               CALL   Z,OUTR   ;OUTPUT . IF 1ST DIGIT
0863   56                     LD   D,(HL)   ;NOW DECREMENT DIGIT COUNT
0864   15                     DEC   D   
0865   72                     LD   (HL),D   ;UPDATE MEM AND LEAVE FLOPS SET
0866   C9                     RET      ;SERVES AS TERM FOR DIGO & CVRT
0867                             ; 
0867                MULTT:       
0867   1E 01                  LD   E,1   ;MULT. BY 10 (START WITH X2)
0869   CD 8F 08               CALL   LSFT   ;LEFT SHIFT 1 = X2
086C   69                     LD   L,C   ;SAVE X2 IN "RESULT"
086D   2D                     DEC   L   ;SET TO TOP OF NUMBER
086E   79                     LD   A,C   ;SET C TO RESULT
086F   C6 09                  ADD   A,$09   ;11Q
0871   4F                     LD   C,A   ;NOW C SET RIGHT
0872   7C                     LD   A,H   ;SHOW RAM TO RAM TRANSFER
0873   CD 18 09               CALL   COPY   ;SAVE X2 FINALLY
0876   79                     LD   A,C   ;MUST RESET C
0877   D6 09                  SUB   $09   ;11Q       ;BACK TO NORMAL
0879   4F                     LD   C,A   
087A   1E 02                  LD   E,2   ;NOW GET (X2)X4=X8
087C   69                     LD   L,C   ;BUT MUST SAVE OVERFLOW
087D   2D                     DEC   L   
087E   CD 93 08               CALL   TLP2   ;GET X8
0881   69                     LD   L,C   ;SET UP TO CALL DADD
0882   79                     LD   A,C   ;SET B TO X2
0883   C6 0A                  ADD   A,$0A   ;12Q     ;TO X2
0885   47                     LD   B,A   
0886   CD 96 05               CALL   DADD   ;ADD TWO LOW WORDS
0889   2D                     DEC   L   ;BACK UP TO OVERFLOW
088A   7E                     LD   A,(HL)   ;GET IT
088B   68                     LD   L,B   ;NOW SET TO X2 OVERFLOW
088C   2D                     DEC   L   ;ITS AT B-1
088D   8E                     ADC   A,(HL)   ;ADD WITH CARRY - CARRY WAS PRESERVED
088E   C9                     RET      ;ALL DONE, RETURN OVERFLOW IN A
088F                             ; 
088F                LSFT:        
088F   69                     LD   L,C   ;SET PTR FOR LEFT SHIFT OF NUMBER
0890   2D                     DEC   L   ;BACK UP TO OVERFLOW
0891   AF                     XOR   A   ;OVERFLOW=0 1ST TIME
0892                TLOOP:       
0892   77                     LD   (HL),A   ;SAVE OVERFLOW
0893                TLP2:        
0893   1D                     DEC   E   ;TEST FOR DONE
0894   F8                     RET   M   ;DONE WHEN E MINUS
0895   2C                     INC   L   ;MOVE TO LOW
0896   2C                     INC   L   
0897   2C                     INC   L   ;/***TP EXTENSION
0898   7E                     LD   A,(HL)   ;SHIFT LEFT 4 BYTES
0899   17                     RLA      
089A   77                     LD   (HL),A   ;PUT BACK
089B   2D                     DEC   L   ;/***TP - ALL DONE
089C   7E                     LD   A,(HL)   ;GET LOW
089D   17                     RLA      ;SHIFT LEFT 1
089E   77                     LD   (HL),A   ;RESTORE IT
089F   2D                     DEC   L   ;BACK UP TO HIGH
08A0   7E                     LD   A,(HL)   ;GET HIGH
08A1   17                     RLA      ;SHIFT IT LEFT WITH CARRY
08A2   77                     LD   (HL),A   ;PUT IT BACK
08A3   2D                     DEC   L   ;BACK UP TO OVERFLOW
08A4   7E                     LD   A,(HL)   ;GET OVERFLOW
08A5   17                     RLA      ;SHIFT IT LEFT
08A6   C3 92 08               JP   TLOOP   ;GO FOR MORE
08A9                             ; 
08A9                SIGN:        
08A9   E6 80                  AND   $80   ;200Q      ;GET SIGN BIT
08AB   3E A0                  LD   A,$A0   ;240Q    ;SPACE INSTEAD OF PLUS
08AD   CA B2 08               JP   Z,PLSV   ;TEST FOR +
08B0   3E AD                  LD   A,$AD   ;255Q    ;NEGATIVE
08B2                PLSV:        
08B2   CD 5F 03               CALL   OUTR   ;OUTPUT SIGN
08B5   C9                     RET      
08B6                             ; 
08B6                GCHR:        
08B6   69                     LD   L,C   ;GET EXPONENT
08B7                GETA:        
08B7   2C                     INC   L   ;MOVE TO IT
08B8   2C                     INC   L   
08B9   2C                     INC   L   ;/***TP
08BA   7E                     LD   A,(HL)   ;FETCH INTO A
08BB   C9                     RET      ;DONE
08BC                             ; 
08BC                MORD:        
08BC   CD D7 08               CALL   GETEX   ;MUL OR DIV DEPENDING ON EXP
08BF   5F                     LD   E,A   ;SAVE DECIMAL EXP
08C0   45                     LD   B,L   ;SET UP TO MULT OR DIV
08C1   04                     INC   B   ;NOW BOP POINTER SET
08C2   69                     LD   L,C   ;L POINTS TO NUMBER TO CONVERT
08C3   79                     LD   A,C   ;POINT C AT "RESULT" AREA
08C4   C6 09                  ADD   A,$09   ;11Q     ;IN SCRATCH
08C6   4F                     LD   C,A   ;NOW C SET RIGHT
08C7   7B                     LD   A,E   ;NOW TEST FOR MUL
08C8   E6 80                  AND   $80   ;200Q      ;TEST NEGATIVE DEC. EXP.
08CA   CA DC 08               JP   Z,DIVIT   ;IF EXP IS + THEN DIVIDE
08CD   CD EF 04               CALL   LMUL   ;MULT.
08D0                FINUP:       
08D0   79                     LD   A,C   ;SAVE LOC. OF RESULT
08D1   4D                     LD   C,L   ;C=LOC OF NUMBER (IT WAS DESTROYED)
08D2   6F                     LD   L,A   ;SET L TO LOC. OF RESULT
08D3   7C                     LD   A,H   ;SHOW RAM TO RAM TRANSFER
08D4   CD 18 09               CALL   COPY   ;MOVE RESULT TO NUMBER
08D7                GETEX:       
08D7   69                     LD   L,C   ;NOW GET DECIMAL EXP
08D8   2C                     INC   L   
08D9   C3 B7 08               JP   GETA   ;USE PART OF GCHR
08DC                             ; 
08DC                DIVIT:       
08DC   CD 90 03               CALL   LDIV   ;DIVIDE
08DF   C3 D0 08               JP   FINUP   
08E2                             ; 
08E2                TWOD:        
08E2   CD F9 08               CALL   CTWO   ;CONVERT TO 2 DIGITS
08E5   47                     LD   B,A   ;SAVE ONES DIGIT
08E6   CD D7 08               CALL   GETEX   ;GET DECIMAL EXP
08E9   5F                     LD   E,A   ;SAVE A COPY
08EA   E6 80                  AND   $80   ;200Q      ;TEST FOR NEGATIVE
08EC   CA F5 08               JP   Z,ADD1   ;BUMP EXP BY 1 SINCE 2 DIGITS
08EF   1D                     DEC   E   ;DECREMENT NEGATIVE EXP SINCE 2 DIGITS
08F0                FINIT:       
08F0   73                     LD   (HL),E   ;RESTORE EXP WITH NEW VALUE
08F1   78                     LD   A,B   ;NOW DO 2ND DIGIT
08F2   C3 3B 08               JP   INPOP   ;GO OUT 2ND AND REST OF DIGITS
08F5                             ; 
08F5                ADD1:        
08F5   1C                     INC   E   ;COMPENSATE FOR 2 DIGITS
08F6   C3 F0 08               JP   FINIT   
08F9                             ; 
08F9                CTWO:        
08F9   1E FF                  LD   E,$FF   ;377Q    ;CONVERT 2 DIGIT BIN TO BCD
08FB                LOOP:        
08FB   1C                     INC   E   ;ADD UP TENS DIGIT
08FC   D6 0A                  SUB   $0A   ;12Q       ;SUBTRACT 10
08FE   F2 FB 08               JP   P,LOOP   ;TILL NEGATIVE RESULT
0901   C6 0A                  ADD   A,$0A   ;12Q     ;RESTORE ONES DIGIT
0903   47                     LD   B,A   ;SAVE ONES DIGIT
0904   7B                     LD   A,E   ;GET TENS DIGIT
0905   CD 53 08               CALL   DIGO   ;OUTPUT IT
0908   78                     LD   A,B   ;SET A TO 2ND DIGIT
0909   C9                     RET      
090A                             ; 
090A                COPT:        
090A   79                     LD   A,C   ;COPY FROM 10N TO RAM
090B   C6 05                  ADD   A,5   
090D   4F                     LD   C,A   ;SET C TO PLACE TO PUT
090E   3E 09                  LD   A,TEN5/256   
0910   CD 18 09               CALL   COPY   ;COPY IT
0913   79                     LD   A,C   ;NOW RESET C
0914   D6 05                  SUB   5   
0916   4F                     LD   C,A   ;ITS RESET
0917   C9                     RET      
0918                             ; 
0918                COPY:        
0918   44                     LD   B,H   ;SAVE RAM H
0919   67                     LD   H,A   ;SET TO SOURCE H
091A   7E                     LD   A,(HL)   ;GET 4 WORDS INTO THE REGS.
091B   2C                     INC   L   
091C   56                     LD   D,(HL)   
091D   2C                     INC   L   
091E   5E                     LD   E,(HL)   
091F   2C                     INC   L   
0920   6E                     LD   L,(HL)   ;LAST ONE ERASES L
0921   60                     LD   H,B   ;SET TO DESTINATION RAM
0922   45                     LD   B,L   ;SAVE 4TH WORD IN B
0923   69                     LD   L,C   ;SET TO DESTINATION
0924   77                     LD   (HL),A   ;SAVE FIRST WORD
0925   2C                     INC   L   
0926   7E                     LD   A,(HL)   ;SAVE THIS WORD IN A (INPUT SAVES C HERE
0927   72                     LD   (HL),D   ;NOW PUT 2ND WORD
0928   2C                     INC   L   
0929   73                     LD   (HL),E   
092A   2C                     INC   L   
092B   70                     LD   (HL),B   ;ALL 4  COPIED NOW
092C   C9                     RET      ;ALL DONE
092D                             ; 
092D                             ;SECTION     apu_data
092D                             ; 
092D                             ;TEN5:  .DB     303Q,120Q,0Q,21Q    ;303240(8) = 100000.
092D                             ;TEN:   .DB     240Q,0Q,0Q,4Q       ;12(8) = 10
092D                             ; 
092D                             ;TEN5:   DEFB    $C3,$50,$00,$11 ;303240(8) = 100000.
092D                             ;TEN:    DEFB    $A0,$00,$00,$04 ;12(8) = 10
092D                             ; 
092D   C3 50 00 11  TEN5:     DB   $C3,$50,$00,$11   ;303240(8) = 100000.
0931   A0 00 00 04  TEN:      DB   $A0,$00,$00,$04   ;12(8) = 10
0935                             ; 
0935                             ; 
0935                             ; 
0935                             ;SECTION     apu_library         ;LIBRARY ORIGIN
0935                             ; 
0935                             ; 
0935                             ;       SCRATCH MAP FOR I/O CONVERSION ROUTINES
0935                             ; 
0935                             ;       RELATIVE TO (C+2)USE
0935                             ;       C-2             DIGIT COUNT
0935                             ;       C-1             OVERFLOW
0935                             ;       C               HIGH NUMBER - MANTISSA
0935                             ;       C+1             LOW NUMBER
0935                             ;       C+2             EXPONENT
0935                             ;       C+3             DECIMAL EXPONENT (SIGN & MAG.)
0935                             ;       C+4             TEN**N
0935                             ;       C+5             TEN**N
0935                             ;       C+6             TEN**N
0935                             ;       C+7             RESULT OF MULT & DIV
0935                             ;       C+8             AND TEMP FOR X2
0935                             ;       C+9             "       "
0935                             ;       C+10            L FOR NUMBER TO GO INTO (INPUT ONLY)
0935                             ;       C+11            DIGIT JUST INPUT (INPUT ONLY)
0935                             ; 
0935                             ; 
0935                             ;       /*****BEGIN INPUT*************
0935                             ; 
0935                             ; 
0935                             ;HRJ was:
0935                             ;ERR:
0935                             ;       STC                     ;ERROR FLAG
0935                             ;       RET                     ;AND RETURN
0935                             ; replaced with code in (PDF) document HRJ
0935                             ; 
0935                             ; 
0935                             ; 
0935                             ;   SUBROUTINE ERR
0935                             ; 
0935                ERR:         
0935   3E BF                  LD   A,$BF   ;277Q    ;ERROR IN INPUT
0937   CD 5F 03               CALL   OUTR   ;SEND A ?(SPACE)
093A   3E A0                  LD   A,$A0   ;240Q    ;
093C   CD 5F 03               CALL   OUTR   ;OUTPUT SPACE
093F   C3 4A 09               JP   PRMT   ;GO PROMPT USER AND RESTART
0942                             ;HRJ  end replacing code
0942                             ; 
0942                             ;********************************************************
0942                             ;       //// 4 1/2 DIGIT INPUT ROUTINE
0942                             ;*******************************************************
0942                             ; 
0942                             ; 
0942                             ;       /L POINTS TO WHERE TO PUT INPUT NUMBER
0942                             ;       /C POINTS TO 13(10) WORDS OF SCRATCH
0942                             ; 
0942                INPUT:       
0942   45                     LD   B,L   ;SAVE ADDRESS WHERE DATA IS TO GO
0943   79                     LD   A,C   ;IN SCRATCH
0944   C6 0F                  ADD   A,$0F   ;17Q     ;COMPUTE LOC. IN SCRATCH
0946   6F                     LD   L,A   
0947   70                     LD   (HL),B   ;PUT IT
0948   0C                     INC   C   ;OFFSET SCRATCH POINTER
0949   0C                     INC   C   ;BY 2
094A                PRMT:        
094A   3E BA                  LD   A,$BA   ;272Q    ;PROMPT USER WITH :
094C   CD 5F 03               CALL   OUTR   ;OUTPUT :
094F   CD 55 0A               CALL   ZROIT   ;ZERO NUMBER
0952   2C                     INC   L   ;AND ZERO
0953   77                     LD   (HL),A   ;DECIMAL EXPONENT
0954   CD F2 09               CALL   GNUM   ;GET INTEGER PART OF NUM
0957   FE FE                  CP   $FE   ;376Q      ;TERM=.?
0959   CA AC 09               JP   Z,DECPT   ;YES
095C                TSTEX:       
095C   FE 15                  CP   $15   ;25Q       ;TEST FOR E
095E   CA C1 09               JP   Z,INEXP   ;YES - HANDLE EXP
0961   FE F0                  CP   $F0   ;360Q      ;TEST FOR SPACE TERM (240B-260B)
0963   C2 35 09               JP   NZ,ERR   ;NOT LEGAL TERM
0966   CD 3B 0A               CALL   FLTSGN   ;FLOAT # AND SIGN IT
0969                SCALE:       
0969   CD D7 08               CALL   GETEX   ;GET DECIMAL EXP
096C   E6 7F                  AND   $7F   ;177Q      ;GET GOOD BITS
096E   5F                     LD   E,A   ;SAVE COPY
096F   E6 40                  AND   $40   ;100Q      ;GET SIGN OF EXP
0971   07                     RLCA      ;INTO SIGN BIT
0972   B7                     OR   A   ;SET FLOPS
0973   47                     LD   B,A   ;SAVE SIGN
0974   7B                     LD   A,E   ;GET EXP BACK
0975   CA 7B 09               JP   Z,APLS   ;JMP IS +
0978   3E 80                  LD   A,$80   ;200Q    ;MAKE MINUS +
097A   93                     SUB   E   ;NOW ITS +
097B                APLS:        
097B   80                     ADD   A,B   ;SIGN NUMBER
097C   77                     LD   (HL),A   ;SAVE EXP (SIGN & MAG.)
097D   2E 2D                  LD   L,TEN5 & $FF   ;377Q  ;TRY MORD WITH 10**5 FIRST
097F   CD 0A 09               CALL   COPT   ;TRANSFER TO RAM
0982   CD D7 08               CALL   GETEX   ;GET DECIMAL EXP
0985                INT5:        
0985   E6 3F                  AND   $3F   ;77Q       ;GET MAG. OF EXP
0987   FE 05                  CP   $05   ;5Q        ;TEST FOR USE OF 10**5
0989   FA 95 09               JP   M,TRYTN   ;WONT GO - TRY 10
098C   CD BC 08               CALL   MORD   ;WILL GO SO DO IT
098F   D6 05                  SUB   $05   ;5Q        ;MAG = MAG -5
0991   77                     LD   (HL),A   ;UPDATE DEC. EXP IN MEM
0992   C3 85 09               JP   INT5   ;GO TRY AGAIN
0995                             ; 
0995                TRYTN:       
0995   2E 31                  LD   L,TEN & $FF   ;377Q  ;PUT TEN IN RAM
0997   CD 0A 09               CALL   COPT   
099A   CD D7 08               CALL   GETEX   ;SET UP FOR LOOP
099D                INT1:        
099D   E6 3F                  AND   $3F   ;77Q       ;GET MAGNITUDE
099F   B7                     OR   A   ;TEST FOR 0
09A0   CA 3F 0A               JP   Z,SAVEN   ;DONE, MOVE NUM OUT AND GET OUT
09A3   CD BC 08               CALL   MORD   ;NOT DONE - DO 10
09A6   D6 01                  SUB   $01   ;1Q        ;EXP = EXP -1
09A8   77                     LD   (HL),A   ;UPDATE MEM
09A9   C3 9D 09               JP   INT1   ;TRY AGAIN
09AC                             ; 
09AC                DECPT:       
09AC   69                     LD   L,C   ;ZERO DIGIT COUNT
09AD   2D                     DEC   L   ;SINCE ITS NECESSARY
09AE   2D                     DEC   L   ;TO COMPUTE EXP.
09AF   36 00                  LD   (HL),0   ;ZEROED
09B1   CD 35 0A               CALL   EP1   ;GNUM IN MIDDLE
09B4   5F                     LD   E,A   ;SAVE TERMINATOR
09B5   69                     LD   L,C   ;MOVE DIGIT COUNT TO EXP
09B6   2D                     DEC   L   ;BACK UP TO DIGIT COUNT
09B7   2D                     DEC   L   
09B8   46                     LD   B,(HL)   ;GOT DIGIT COUNT
09B9   CD D7 08               CALL   GETEX   ;SET L TO DEC. EXP
09BC   70                     LD   (HL),B   ;PUT EXP
09BD   7B                     LD   A,E   ;TERM BACK TO A
09BE   C3 5C 09               JP   TSTEX   ;TEST FOR E+OR-XX
09C1                             ; 
09C1                INEXP:       
09C1   CD 3B 0A               CALL   FLTSGN   ;FLOAT AND SIGN NUMBER
09C4   CD 3F 0A               CALL   SAVEN   ;SAVE NUMBER IN (L) TEMP
09C7   CD 55 0A               CALL   ZROIT   ;ZERO OUT NUM. FOR INPUTTING EXP
09CA   CD F2 09               CALL   GNUM   ;NOW INPUT EXPONENT
09CD   FE F0                  CP   $F0   ;360Q      ;TEST FOR SPACE TERM.
09CF   C2 35 09               JP   NZ,ERR   ;NOT LEGAL - TRY AGAIN
09D2   69                     LD   L,C   ;GET EXP OUT OF MEM
09D3   2C                     INC   L   ;/***TP
09D4   2C                     INC   L   ;EXP LIMITED TO 5 BITS
09D5   7E                     LD   A,(HL)   ;GET LOWEST 8 BITS
09D6   E6 1F                  AND   $1F   ;37Q       ;GET GOOD BITS
09D8   47                     LD   B,A   ;SAVE THEM
09D9   2C                     INC   L   ;GET SIGN OF EXP
09DA   7E                     LD   A,(HL)   ;INTO A
09DB   B7                     OR   A   ;SET FLOPS
09DC   78                     LD   A,B   ;IN CASE NOTHING TO DO
09DD   FA E3 09               JP   M,USEIT   ;IF NEG. USE AS +
09E0   3E 00                  LD   A,$00   ;0Q      ;IF + MAKE -
09E2   90                     SUB   B   ;0-X = -X
09E3                USEIT:       
09E3   2C                     INC   L   ;POINT AT EXP
09E4   86                     ADD   A,(HL)   ;GET REAL DEC. EXP
09E5   77                     LD   (HL),A   ;PUT IN MEM
09E6   79                     LD   A,C   ;NOW GET NUMBER BACK
09E7   C6 0D                  ADD   A,$0D   ;15Q     ;GET ADD OF L
09E9   6F                     LD   L,A   ;L POINTS TO L OF NUMBER
09EA   6E                     LD   L,(HL)   ;NOW L POINTS TO NUMBER
09EB   7C                     LD   A,H   ;RAM TO RAM COPY
09EC   CD 18 09               CALL   COPY   ;COPY IT BACK
09EF   C3 69 09               JP   SCALE   ;NOW ADJUST FOR EXP
09F2                             ; 
09F2                GNUM:        
09F2   CD 65 03               CALL   INP   ;GET A CHAR
09F5   FE A0                  CP   $A0   ;240Q      ;IGNORE LEADING SPACES
09F7   CA F2 09               JP   Z,GNUM   
09FA   FE AD                  CP   $AD   ;255Q      ;TEST FOR -
09FC   C2 08 0A               JP   NZ,TRYP   ;NOT MINUS
09FF   69                     LD   L,C   ;MINUS SO SET SIGN
0A00   2C                     INC   L   ;IN CHAR LOC.
0A01   2C                     INC   L   ;/***TP
0A02   2C                     INC   L   
0A03   36 80                  LD   (HL),$80   ;200Q ;SET - SIGN
0A05   C3 F2 09               JP   GNUM   
0A08                             ; 
0A08                TRYP:        
0A08   FE AB                  CP   $AB   ;253Q      ;IGNORE +
0A0A   CA F2 09               JP   Z,GNUM   
0A0D                TSTN:        
0A0D   D6 B0                  SUB   $B0   ;260Q      ;STRIP ASCII
0A0F   F8                     RET   M   ;RETURN IF TERM
0A10   FE 0A                  CP   $0A   ;12Q       ;TEST FOR NUMBER
0A12   F0                     RET   P   ;ILLEGAL
0A13   5F                     LD   E,A   ;SAVE DIGIT
0A14   CD 4F 0A               CALL   GETN   ;LOC. OF DIGIT STORAGE TO L
0A17   73                     LD   (HL),E   ;SAVE DIGIT
0A18   CD 67 08               CALL   MULTT   ;MULT NUMBER BY 10
0A1B   B7                     OR   A   ;TEST FOR TOO MANY DIGITS
0A1C   C0                     RET   NZ   ;TOO MANY DIGITS
0A1D   CD 4F 0A               CALL   GETN   ;GET DIGIT
0A20   69                     LD   L,C   ;SET L TO NUMBER
0A21   2C                     INC   L   
0A22   2C                     INC   L   ;/***TP
0A23   86                     ADD   A,(HL)   ;ADD IN THE DIGIT
0A24   77                     LD   (HL),A   ;PUT RESULT BACK
0A25   2D                     DEC   L   ;NOW DO HIGH
0A26   7E                     LD   A,(HL)   ;GET HIGH TO ADD IN CARRY
0A27   CE 00                  ADC   A,$00   ;0Q      ;ADD IN CARRY
0A29   77                     LD   (HL),A   ;UPDATE HIGH
0A2A   2D                     DEC   L   ;/***TP EXTENSION
0A2B   7E                     LD   A,(HL)   
0A2C   CE 00                  ADC   A,$00   ;0Q      ;ADD IN CARRY
0A2E   77                     LD   (HL),A   ;/***TP ALL DONE
0A2F   D8                     RET   C   ;OVERFLOW ERROR
0A30   2D                     DEC   L   ;BUMP DIGIT COUNT NOW
0A31   2D                     DEC   L   
0A32   46                     LD   B,(HL)   ;GET DIGIT COUNT
0A33   04                     INC   B   ;BUMP DIGIT COUNT
0A34   70                     LD   (HL),B   ;UPDATE DIGIT COUNT
0A35                EP1:         
0A35   CD 65 03               CALL   INP   ;GET NEXT CHAR
0A38   C3 0D 0A               JP   TSTN   ;MUST BE NUM. OR TERM
0A3B                             ; 
0A3B                FLTSGN:      
0A3B   69                     LD   L,C   ;POINT L AT NUMBER TO FLOAT
0A3C   C3 65 05               JP   FLOAT   ;GO FLOAT IT
0A3F                             ; 
0A3F                SAVEN:       
0A3F   79                     LD   A,C   ;PUT NUMBER IN (L)
0A40   C6 0D                  ADD   A,$0D   ;15Q     ;GET ADD OF L
0A42   6F                     LD   L,A   
0A43   5E                     LD   E,(HL)   ;GET L OF RESULT
0A44   6B                     LD   L,E   ;POINT L AT (L)
0A45   2C                     INC   L   ;SET TO 2ND WORD TO SAVE C
0A46   71                     LD   (HL),C   ;SAVE C IN (L) +1 SINCE IT WILL BE DESTROYED
0A47   69                     LD   L,C   ;SET UP TO CALL COPY
0A48   4B                     LD   C,E   ;NOW L&C SET
0A49   7C                     LD   A,H   ;RAM TO RAM COPY
0A4A   CD 18 09               CALL   COPY   ;COPY TO L
0A4D   4F                     LD   C,A   ;(L)+1 RETURNED HERE SO SET AS C
0A4E                             ;ORA    A               ;MAKE SURE CY=0 (NO ERROR) 
0A4E                             ;HRJ ORA above not in LLL document
0A4E   C9                     RET      ;NOW EVERYTHING HUNKY-DORRY
0A4F                             ; 
0A4F                GETN:        
0A4F   79                     LD   A,C   ;GET DIGIT
0A50   C6 0E                  ADD   A,$0E   ;16Q     ;LAST LOC. IN SCRATCH
0A52   6F                     LD   L,A   ;PUT IN L
0A53   7E                     LD   A,(HL)   ;GET DIGIT
0A54   C9                     RET      
0A55                             ; 
0A55                ZROIT:       
0A55   69                     LD   L,C   ;ZERO NUMBER
0A56   AF                     XOR   A   
0A57   77                     LD   (HL),A   ;/***TP
0A58   2C                     INC   L   ;/***TP
0A59   77                     LD   (HL),A   
0A5A   2C                     INC   L   
0A5B   77                     LD   (HL),A   
0A5C   2C                     INC   L   ;NOW SET SIGN TO +
0A5D   77                     LD   (HL),A   
0A5E   C9                     RET      ;DONE
0A5F                             ; 
0A5F                             ; 
0A5F                             ; END of code from LLNL PDF document
0A5F                             ; 
0A5F                             ; *************************************************************************
0A5F                             ; 
0A5F                             ;       MINT Minimal Interpreter for the Z80
0A5F                             ; 
0A5F                             ;       Ken Boak, John Hardy and Craig Jones.
0A5F                             ; 
0A5F                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0A5F                             ; 
0A5F                             ;       see the LICENSE file in this repo for more information
0A5F                             ; 
0A5F                             ; *****************************************************************************
0A5F                             ; 
0A5F                             ; 6850 ACIA registers
0A5F                             ;----------------------
0A5F                CONTROL:   EQU   $80   ;(write)
0A5F                STATUS:   EQU   $80   ;(read)
0A5F                TDR:      EQU   $81   ;(write)
0A5F                RDR:      EQU   $81   ;(read)
0A5F                             ; 
0A5F                             ; control register bits
0A5F                             ;----------------------
0A5F                             ; 
0A5F                             ;clock divisor
0A5F                             ; 
0A5F                MRESET:   EQU   $03   ;master reset the ACIA
0A5F                CLKDIV_0:   EQU   $00   ;CLOCK/1
0A5F                CLKDIV_16:   EQU   $01   ;CLOCK/16
0A5F                CLKDIV_64:   EQU   $02   ;CLOCK/64
0A5F                             ; 
0A5F                             ; format select
0A5F                             ; 
0A5F                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0A5F                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0A5F                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0A5F                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0A5F                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0A5F                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0A5F                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0A5F                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0A5F                             ; 
0A5F                             ; transmitter control
0A5F                             ; 
0A5F                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0A5F                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0A5F                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0A5F                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0A5F                             ; 
0A5F                             ; receiver interrupt
0A5F                             ; 
0A5F                RIE:      EQU   $80   ;receiver interrupt enabled
0A5F                             ; 
0A5F                             ; status register bits
0A5F                             ;---------------------
0A5F                RDRF:     EQU   0   ;receive data register full
0A5F                TDRE:     EQU   1   ;transmit data register empty
0A5F                DCD:      EQU   2   ;data carrier detect
0A5F                CTS:      EQU   3   ;clear to send
0A5F                FE:       EQU   4   ;framing error
0A5F                OVRN:     EQU   5   ;overrun
0A5F                PE:       EQU   6   ;parity error
0A5F                IRQ:      EQU   7   ;interrupt request
0A5F                             ; 
0A5F                             ; initialise ACIA
0A5F                             ;----------------
0A5F                INITIALISESERIAL:      
0A5F   3E 03                  LD   a,MRESET   
0A61   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
0A63                             ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
0A63   3E 12                  LD   a,RTSLID+F8N2+CLKDIV_64   
0A65   D3 80                  OUT   (CONTROL),a   
0A67   C9                     RET      
0A68                             ; 
0A68                             ; transmit a character in a
0A68                             ;--------------------------
0A68                TXCHAR:      
0A68   F5                     PUSH   af   ;save the character for later
0A69                TXCHAR1:      
0A69   DB 80                  IN   a,(STATUS)   ;get the ACIA status
0A6B   CB 4F                  BIT   1,a   ;bit   TDRE,a is the TDRE bit high?
0A6D   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0A6F   F1                     POP   af   ;yes, get the character back
0A70   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0A72   C9                     RET      
0A73                             ; 
0A73                             ; receive  a character in a
0A73                             ;---------------------------------
0A73                RXCHAR:      
0A73   DB 80                  IN   a,(STATUS)   ;get the ACIA status
0A75   CB 47                  BIT   0,a   ;bit   RDRF,a is the RDRF bit high?
0A77   28 FA                  JR   z,RxChar   ;no, the RDR is empty
0A79   DB 81                  IN   a,(RDR)   ;yes, read the received char
0A7B   C9                     RET      


RSTVEC:             0000 DEFINED AT LINE 5
START:              0100 DEFINED AT LINE 9
                    > USED AT LINE 5
ESC:                001B DEFINED AT LINE 9 IN LLL-FP-Example.z80
CR:                 000D DEFINED AT LINE 10 IN LLL-FP-Example.z80
                    > USED AT LINE 18 IN LLL-FP-Example.z80
                    > USED AT LINE 21 IN LLL-FP-Example.z80
                    > USED AT LINE 49 IN LLL-FP-Example.z80
                    > USED AT LINE 74 IN LLL-FP-Example.z80
                    > USED AT LINE 99 IN LLL-FP-Example.z80
                    > USED AT LINE 119 IN LLL-FP-Example.z80
                    > USED AT LINE 141 IN LLL-FP-Example.z80
                    > USED AT LINE 208 IN LLL-FP-Example.z80
LF:                 000A DEFINED AT LINE 11 IN LLL-FP-Example.z80
                    > USED AT LINE 210 IN LLL-FP-Example.z80
MAIN:               0109 DEFINED AT LINE 16 IN LLL-FP-Example.z80
                    > USED AT LINE 11
MAIN1:              0143 DEFINED AT LINE 19 IN LLL-FP-Example.z80
                    > USED AT LINE 64 IN LLL-FP-Example.z80
                    > USED AT LINE 88 IN LLL-FP-Example.z80
                    > USED AT LINE 113 IN LLL-FP-Example.z80
                    > USED AT LINE 132 IN LLL-FP-Example.z80
                    > USED AT LINE 156 IN LLL-FP-Example.z80
                    > USED AT LINE 172 IN LLL-FP-Example.z80
MAIN2:              0173 DEFINED AT LINE 24 IN LLL-FP-Example.z80
                    > USED AT LINE 38 IN LLL-FP-Example.z80
FNSUB:              0197 DEFINED AT LINE 44 IN LLL-FP-Example.z80
                    > USED AT LINE 29 IN LLL-FP-Example.z80
FNDIVIDE:           01E5 DEFINED AT LINE 69 IN LLL-FP-Example.z80
                    > USED AT LINE 31 IN LLL-FP-Example.z80
FNMULTIPLY:         022F DEFINED AT LINE 94 IN LLL-FP-Example.z80
                    > USED AT LINE 33 IN LLL-FP-Example.z80
FNSQRT:             026E DEFINED AT LINE 117 IN LLL-FP-Example.z80
                    > USED AT LINE 35 IN LLL-FP-Example.z80
FNADD:              02A7 DEFINED AT LINE 137 IN LLL-FP-Example.z80
                    > USED AT LINE 27 IN LLL-FP-Example.z80
CONVERT:            02E2 DEFINED AT LINE 160 IN LLL-FP-Example.z80
                    > USED AT LINE 37 IN LLL-FP-Example.z80
GETOP1:             0316 DEFINED AT LINE 174 IN LLL-FP-Example.z80
                    > USED AT LINE 51 IN LLL-FP-Example.z80
                    > USED AT LINE 76 IN LLL-FP-Example.z80
                    > USED AT LINE 101 IN LLL-FP-Example.z80
                    > USED AT LINE 121 IN LLL-FP-Example.z80
                    > USED AT LINE 143 IN LLL-FP-Example.z80
                    > USED AT LINE 166 IN LLL-FP-Example.z80
GETOP2:             0323 DEFINED AT LINE 182 IN LLL-FP-Example.z80
                    > USED AT LINE 52 IN LLL-FP-Example.z80
                    > USED AT LINE 77 IN LLL-FP-Example.z80
                    > USED AT LINE 102 IN LLL-FP-Example.z80
                    > USED AT LINE 144 IN LLL-FP-Example.z80
PUTOP1:             0330 DEFINED AT LINE 190 IN LLL-FP-Example.z80
                    > USED AT LINE 63 IN LLL-FP-Example.z80
                    > USED AT LINE 155 IN LLL-FP-Example.z80
                    > USED AT LINE 171 IN LLL-FP-Example.z80
PUTRSULT:           033D DEFINED AT LINE 198 IN LLL-FP-Example.z80
                    > USED AT LINE 87 IN LLL-FP-Example.z80
                    > USED AT LINE 112 IN LLL-FP-Example.z80
                    > USED AT LINE 131 IN LLL-FP-Example.z80
CRLF:               034A DEFINED AT LINE 208 IN LLL-FP-Example.z80
                    > USED AT LINE 46 IN LLL-FP-Example.z80
                    > USED AT LINE 71 IN LLL-FP-Example.z80
                    > USED AT LINE 96 IN LLL-FP-Example.z80
                    > USED AT LINE 138 IN LLL-FP-Example.z80
                    > USED AT LINE 161 IN LLL-FP-Example.z80
                    > USED AT LINE 179 IN LLL-FP-Example.z80
                    > USED AT LINE 187 IN LLL-FP-Example.z80
                    > USED AT LINE 195 IN LLL-FP-Example.z80
                    > USED AT LINE 203 IN LLL-FP-Example.z80
PRINTSZ:            0355 DEFINED AT LINE 219 IN LLL-FP-Example.z80
                    > USED AT LINE 17 IN LLL-FP-Example.z80
                    > USED AT LINE 20 IN LLL-FP-Example.z80
                    > USED AT LINE 48 IN LLL-FP-Example.z80
                    > USED AT LINE 54 IN LLL-FP-Example.z80
                    > USED AT LINE 73 IN LLL-FP-Example.z80
                    > USED AT LINE 79 IN LLL-FP-Example.z80
                    > USED AT LINE 98 IN LLL-FP-Example.z80
                    > USED AT LINE 104 IN LLL-FP-Example.z80
                    > USED AT LINE 118 IN LLL-FP-Example.z80
                    > USED AT LINE 123 IN LLL-FP-Example.z80
                    > USED AT LINE 140 IN LLL-FP-Example.z80
                    > USED AT LINE 146 IN LLL-FP-Example.z80
                    > USED AT LINE 163 IN LLL-FP-Example.z80
                    > USED AT LINE 168 IN LLL-FP-Example.z80
LOOPSZ:             0356 DEFINED AT LINE 221 IN LLL-FP-Example.z80
                    > USED AT LINE 226 IN LLL-FP-Example.z80
MINCH:              00C0 DEFINED AT LINE 273 IN LLL-FP-Example.z80
                    > USED AT LINE 730 IN LLL-FP-Example.z80
                    > USED AT LINE 1183 IN LLL-FP-Example.z80
MAXCH:              003F DEFINED AT LINE 276 IN LLL-FP-Example.z80
                    > USED AT LINE 1143 IN LLL-FP-Example.z80
SCRPG:              0034 DEFINED AT LINE 292 IN LLL-FP-Example.z80
                    > USED AT LINE 57 IN LLL-FP-Example.z80
                    > USED AT LINE 82 IN LLL-FP-Example.z80
                    > USED AT LINE 107 IN LLL-FP-Example.z80
                    > USED AT LINE 126 IN LLL-FP-Example.z80
                    > USED AT LINE 149 IN LLL-FP-Example.z80
                    > USED AT LINE 175 IN LLL-FP-Example.z80
                    > USED AT LINE 183 IN LLL-FP-Example.z80
                    > USED AT LINE 191 IN LLL-FP-Example.z80
                    > USED AT LINE 199 IN LLL-FP-Example.z80
OP1:                0000 DEFINED AT LINE 293 IN LLL-FP-Example.z80
                    > USED AT LINE 58 IN LLL-FP-Example.z80
                    > USED AT LINE 83 IN LLL-FP-Example.z80
                    > USED AT LINE 108 IN LLL-FP-Example.z80
                    > USED AT LINE 127 IN LLL-FP-Example.z80
                    > USED AT LINE 150 IN LLL-FP-Example.z80
                    > USED AT LINE 176 IN LLL-FP-Example.z80
                    > USED AT LINE 192 IN LLL-FP-Example.z80
                    > USED AT LINE 294 IN LLL-FP-Example.z80
OP2:                0004 DEFINED AT LINE 294 IN LLL-FP-Example.z80
                    > USED AT LINE 59 IN LLL-FP-Example.z80
                    > USED AT LINE 84 IN LLL-FP-Example.z80
                    > USED AT LINE 109 IN LLL-FP-Example.z80
                    > USED AT LINE 151 IN LLL-FP-Example.z80
                    > USED AT LINE 184 IN LLL-FP-Example.z80
                    > USED AT LINE 295 IN LLL-FP-Example.z80
RSULT:              0008 DEFINED AT LINE 295 IN LLL-FP-Example.z80
                    > USED AT LINE 60 IN LLL-FP-Example.z80
                    > USED AT LINE 85 IN LLL-FP-Example.z80
                    > USED AT LINE 110 IN LLL-FP-Example.z80
                    > USED AT LINE 128 IN LLL-FP-Example.z80
                    > USED AT LINE 152 IN LLL-FP-Example.z80
                    > USED AT LINE 200 IN LLL-FP-Example.z80
                    > USED AT LINE 296 IN LLL-FP-Example.z80
SCR:                000C DEFINED AT LINE 296 IN LLL-FP-Example.z80
                    > USED AT LINE 129 IN LLL-FP-Example.z80
                    > USED AT LINE 177 IN LLL-FP-Example.z80
                    > USED AT LINE 185 IN LLL-FP-Example.z80
                    > USED AT LINE 193 IN LLL-FP-Example.z80
                    > USED AT LINE 201 IN LLL-FP-Example.z80
OUTR:               035F DEFINED AT LINE 305 IN LLL-FP-Example.z80
                    > USED AT LINE 1738 IN LLL-FP-Example.z80
                    > USED AT LINE 1747 IN LLL-FP-Example.z80
                    > USED AT LINE 1754 IN LLL-FP-Example.z80
                    > USED AT LINE 1823 IN LLL-FP-Example.z80
                    > USED AT LINE 1977 IN LLL-FP-Example.z80
                    > USED AT LINE 1979 IN LLL-FP-Example.z80
                    > USED AT LINE 2001 IN LLL-FP-Example.z80
INP:                0365 DEFINED AT LINE 326 IN LLL-FP-Example.z80
                    > USED AT LINE 2103 IN LLL-FP-Example.z80
                    > USED AT LINE 2150 IN LLL-FP-Example.z80
SPACE:              0386 DEFINED AT LINE 341 IN LLL-FP-Example.z80
                    > USED AT LINE 338 IN LLL-FP-Example.z80
INP_DONE:           0388 DEFINED AT LINE 343 IN LLL-FP-Example.z80
                    > USED AT LINE 330 IN LLL-FP-Example.z80
                    > USED AT LINE 332 IN LLL-FP-Example.z80
                    > USED AT LINE 334 IN LLL-FP-Example.z80
                    > USED AT LINE 336 IN LLL-FP-Example.z80
                    > USED AT LINE 340 IN LLL-FP-Example.z80
LDIV:               0390 DEFINED AT LINE 355 IN LLL-FP-Example.z80
                    > USED AT LINE 86 IN LLL-FP-Example.z80
                    > USED AT LINE 1601 IN LLL-FP-Example.z80
                    > USED AT LINE 1860 IN LLL-FP-Example.z80
DTST2:              03A2 DEFINED AT LINE 363 IN LLL-FP-Example.z80
                    > USED AT LINE 358 IN LLL-FP-Example.z80
REP3:               03B7 DEFINED AT LINE 375 IN LLL-FP-Example.z80
                    > USED AT LINE 387 IN LLL-FP-Example.z80
GOON:               03CB DEFINED AT LINE 389 IN LLL-FP-Example.z80
                    > USED AT LINE 379 IN LLL-FP-Example.z80
CRIN:               03DD DEFINED AT LINE 401 IN LLL-FP-Example.z80
                    > USED AT LINE 391 IN LLL-FP-Example.z80
LADD:               03EC DEFINED AT LINE 416 IN LLL-FP-Example.z80
                    > USED AT LINE 154 IN LLL-FP-Example.z80
                    > USED AT LINE 1595 IN LLL-FP-Example.z80
LSUB:               03F0 DEFINED AT LINE 433 IN LLL-FP-Example.z80
                    > USED AT LINE 62 IN LLL-FP-Example.z80
LADS:               03F2 DEFINED AT LINE 436 IN LLL-FP-Example.z80
                    > USED AT LINE 418 IN LLL-FP-Example.z80
LLTB:               040F DEFINED AT LINE 456 IN LLL-FP-Example.z80
                    > USED AT LINE 445 IN LLL-FP-Example.z80
NCHK:               0414 DEFINED AT LINE 461 IN LLL-FP-Example.z80
                    > USED AT LINE 454 IN LLL-FP-Example.z80
SH10:               041C DEFINED AT LINE 466 IN LLL-FP-Example.z80
                    > USED AT LINE 464 IN LLL-FP-Example.z80
                    > USED AT LINE 470 IN LLL-FP-Example.z80
EQUL:               0424 DEFINED AT LINE 471 IN LLL-FP-Example.z80
EQ02:               042C DEFINED AT LINE 478 IN LLL-FP-Example.z80
                    > USED AT LINE 443 IN LLL-FP-Example.z80
                    > USED AT LINE 474 IN LLL-FP-Example.z80
NOT0:               043A DEFINED AT LINE 485 IN LLL-FP-Example.z80
                    > USED AT LINE 482 IN LLL-FP-Example.z80
SUBZ:               0449 DEFINED AT LINE 494 IN LLL-FP-Example.z80
                    > USED AT LINE 490 IN LLL-FP-Example.z80
ADDZ:               0466 DEFINED AT LINE 517 IN LLL-FP-Example.z80
                    > USED AT LINE 488 IN LLL-FP-Example.z80
ADD2:               046F DEFINED AT LINE 522 IN LLL-FP-Example.z80
                    > USED AT LINE 519 IN LLL-FP-Example.z80
MANT:               047F DEFINED AT LINE 533 IN LLL-FP-Example.z80
                    > USED AT LINE 496 IN LLL-FP-Example.z80
                    > USED AT LINE 523 IN LLL-FP-Example.z80
LASD:               0492 DEFINED AT LINE 559 IN LLL-FP-Example.z80
                    > USED AT LINE 479 IN LLL-FP-Example.z80
COM1:               04A6 DEFINED AT LINE 569 IN LLL-FP-Example.z80
                    > USED AT LINE 590 IN LLL-FP-Example.z80
L002:               04AF DEFINED AT LINE 573 IN LLL-FP-Example.z80
                    > USED AT LINE 585 IN LLL-FP-Example.z80
BMIN:               04B2 DEFINED AT LINE 577 IN LLL-FP-Example.z80
                    > USED AT LINE 565 IN LLL-FP-Example.z80
COM2:               04B8 DEFINED AT LINE 581 IN LLL-FP-Example.z80
                    > USED AT LINE 595 IN LLL-FP-Example.z80
ABCH:               04C4 DEFINED AT LINE 587 IN LLL-FP-Example.z80
                    > USED AT LINE 562 IN LLL-FP-Example.z80
BBCH:               04CD DEFINED AT LINE 592 IN LLL-FP-Example.z80
                    > USED AT LINE 563 IN LLL-FP-Example.z80
L000:               04D6 DEFINED AT LINE 597 IN LLL-FP-Example.z80
                    > USED AT LINE 567 IN LLL-FP-Example.z80
                    > USED AT LINE 589 IN LLL-FP-Example.z80
L001:               04D8 DEFINED AT LINE 601 IN LLL-FP-Example.z80
                    > USED AT LINE 572 IN LLL-FP-Example.z80
L003:               04DB DEFINED AT LINE 605 IN LLL-FP-Example.z80
                    > USED AT LINE 583 IN LLL-FP-Example.z80
L128:               04DE DEFINED AT LINE 609 IN LLL-FP-Example.z80
                    > USED AT LINE 579 IN LLL-FP-Example.z80
                    > USED AT LINE 594 IN LLL-FP-Example.z80
L129:               04E1 DEFINED AT LINE 613 IN LLL-FP-Example.z80
                    > USED AT LINE 584 IN LLL-FP-Example.z80
L131:               04E4 DEFINED AT LINE 617 IN LLL-FP-Example.z80
                    > USED AT LINE 571 IN LLL-FP-Example.z80
LMCM:               04E7 DEFINED AT LINE 626 IN LLL-FP-Example.z80
LMUL:               04EF DEFINED AT LINE 643 IN LLL-FP-Example.z80
                    > USED AT LINE 111 IN LLL-FP-Example.z80
                    > USED AT LINE 1580 IN LLL-FP-Example.z80
                    > USED AT LINE 1847 IN LLL-FP-Example.z80
KPGO:               0506 DEFINED AT LINE 654 IN LLL-FP-Example.z80
                    > USED AT LINE 666 IN LLL-FP-Example.z80
INTR:               050F DEFINED AT LINE 660 IN LLL-FP-Example.z80
                    > USED AT LINE 686 IN LLL-FP-Example.z80
MADD:               0534 DEFINED AT LINE 681 IN LLL-FP-Example.z80
                    > USED AT LINE 656 IN LLL-FP-Example.z80
NORM:               053D DEFINED AT LINE 712 IN LLL-FP-Example.z80
                    > USED AT LINE 499 IN LLL-FP-Example.z80
                    > USED AT LINE 513 IN LLL-FP-Example.z80
NORM1:              053E DEFINED AT LINE 714 IN LLL-FP-Example.z80
FXL1:               0542 DEFINED AT LINE 717 IN LLL-FP-Example.z80
FXL2:               0543 DEFINED AT LINE 719 IN LLL-FP-Example.z80
                    > USED AT LINE 754 IN LLL-FP-Example.z80
REP6:               0549 DEFINED AT LINE 722 IN LLL-FP-Example.z80
                    > USED AT LINE 734 IN LLL-FP-Example.z80
SCHAR:              055B DEFINED AT LINE 736 IN LLL-FP-Example.z80
                    > USED AT LINE 726 IN LLL-FP-Example.z80
DFXL:               055E DEFINED AT LINE 740 IN LLL-FP-Example.z80
FLOAT:              0565 DEFINED AT LINE 750 IN LLL-FP-Example.z80
                    > USED AT LINE 2155 IN LLL-FP-Example.z80
ZCHK:               056A DEFINED AT LINE 769 IN LLL-FP-Example.z80
                    > USED AT LINE 357 IN LLL-FP-Example.z80
                    > USED AT LINE 645 IN LLL-FP-Example.z80
                    > USED AT LINE 788 IN LLL-FP-Example.z80
                    > USED AT LINE 1641 IN LLL-FP-Example.z80
ZMCHK:              056A DEFINED AT LINE 770 IN LLL-FP-Example.z80
                    > USED AT LINE 720 IN LLL-FP-Example.z80
BCHK:               0572 DEFINED AT LINE 785 IN LLL-FP-Example.z80
                    > USED AT LINE 359 IN LLL-FP-Example.z80
                    > USED AT LINE 364 IN LLL-FP-Example.z80
                    > USED AT LINE 438 IN LLL-FP-Example.z80
                    > USED AT LINE 647 IN LLL-FP-Example.z80
DLST:               0579 DEFINED AT LINE 796 IN LLL-FP-Example.z80
                    > USED AT LINE 373 IN LLL-FP-Example.z80
                    > USED AT LINE 383 IN LLL-FP-Example.z80
                    > USED AT LINE 395 IN LLL-FP-Example.z80
                    > USED AT LINE 671 IN LLL-FP-Example.z80
                    > USED AT LINE 732 IN LLL-FP-Example.z80
                    > USED AT LINE 1271 IN LLL-FP-Example.z80
DRST:               0588 DEFINED AT LINE 822 IN LLL-FP-Example.z80
                    > USED AT LINE 468 IN LLL-FP-Example.z80
                    > USED AT LINE 526 IN LLL-FP-Example.z80
                    > USED AT LINE 655 IN LLL-FP-Example.z80
                    > USED AT LINE 661 IN LLL-FP-Example.z80
DADD:               0596 DEFINED AT LINE 844 IN LLL-FP-Example.z80
                    > USED AT LINE 524 IN LLL-FP-Example.z80
                    > USED AT LINE 685 IN LLL-FP-Example.z80
                    > USED AT LINE 1781 IN LLL-FP-Example.z80
DCLR:               05AD DEFINED AT LINE 875 IN LLL-FP-Example.z80
                    > USED AT LINE 369 IN LLL-FP-Example.z80
                    > USED AT LINE 651 IN LLL-FP-Example.z80
DSUB:               05B6 DEFINED AT LINE 893 IN LLL-FP-Example.z80
                    > USED AT LINE 495 IN LLL-FP-Example.z80
                    > USED AT LINE 1278 IN LLL-FP-Example.z80
GCHAR:              05D1 DEFINED AT LINE 935 IN LLL-FP-Example.z80
                    > USED AT LINE 715 IN LLL-FP-Example.z80
                    > USED AT LINE 965 IN LLL-FP-Example.z80
                    > USED AT LINE 968 IN LLL-FP-Example.z80
                    > USED AT LINE 1142 IN LLL-FP-Example.z80
                    > USED AT LINE 1182 IN LLL-FP-Example.z80
CFCHE:              05DC DEFINED AT LINE 962 IN LLL-FP-Example.z80
                    > USED AT LINE 402 IN LLL-FP-Example.z80
                    > USED AT LINE 673 IN LLL-FP-Example.z80
                    > USED AT LINE 992 IN LLL-FP-Example.z80
                    > USED AT LINE 1332 IN LLL-FP-Example.z80
                    > USED AT LINE 1356 IN LLL-FP-Example.z80
CCMP:               05EB DEFINED AT LINE 991 IN LLL-FP-Example.z80
                    > USED AT LINE 442 IN LLL-FP-Example.z80
                    > USED AT LINE 518 IN LLL-FP-Example.z80
                    > USED AT LINE 627 IN LLL-FP-Example.z80
WUND:               05F3 DEFINED AT LINE 1023 IN LLL-FP-Example.z80
                    > USED AT LINE 731 IN LLL-FP-Example.z80
                    > USED AT LINE 1418 IN LLL-FP-Example.z80
UFLW1:              05F8 DEFINED AT LINE 1026 IN LLL-FP-Example.z80
                    > USED AT LINE 1184 IN LLL-FP-Example.z80
WOVR:               0601 DEFINED AT LINE 1035 IN LLL-FP-Example.z80
                    > USED AT LINE 1406 IN LLL-FP-Example.z80
OFLW1:              0606 DEFINED AT LINE 1038 IN LLL-FP-Example.z80
                    > USED AT LINE 1144 IN LLL-FP-Example.z80
WIND:               060F DEFINED AT LINE 1047 IN LLL-FP-Example.z80
                    > USED AT LINE 1111 IN LLL-FP-Example.z80
INDF1:              0614 DEFINED AT LINE 1050 IN LLL-FP-Example.z80
WZER:               061D DEFINED AT LINE 1059 IN LLL-FP-Example.z80
                    > USED AT LINE 483 IN LLL-FP-Example.z80
                    > USED AT LINE 721 IN LLL-FP-Example.z80
                    > USED AT LINE 1124 IN LLL-FP-Example.z80
                    > USED AT LINE 1626 IN LLL-FP-Example.z80
                    > USED AT LINE 1646 IN LLL-FP-Example.z80
WMANT:              0628 DEFINED AT LINE 1071 IN LLL-FP-Example.z80
                    > USED AT LINE 1030 IN LLL-FP-Example.z80
                    > USED AT LINE 1042 IN LLL-FP-Example.z80
                    > USED AT LINE 1054 IN LLL-FP-Example.z80
                    > USED AT LINE 1065 IN LLL-FP-Example.z80
WCHAR:              062F DEFINED AT LINE 1088 IN LLL-FP-Example.z80
                    > USED AT LINE 1025 IN LLL-FP-Example.z80
                    > USED AT LINE 1037 IN LLL-FP-Example.z80
                    > USED AT LINE 1049 IN LLL-FP-Example.z80
INDFC:              0638 DEFINED AT LINE 1108 IN LLL-FP-Example.z80
                    > USED AT LINE 360 IN LLL-FP-Example.z80
WZERC:              063F DEFINED AT LINE 1121 IN LLL-FP-Example.z80
                    > USED AT LINE 361 IN LLL-FP-Example.z80
                    > USED AT LINE 646 IN LLL-FP-Example.z80
                    > USED AT LINE 648 IN LLL-FP-Example.z80
INCR:               0646 DEFINED AT LINE 1141 IN LLL-FP-Example.z80
                    > USED AT LINE 527 IN LLL-FP-Example.z80
INCR3:              0653 DEFINED AT LINE 1149 IN LLL-FP-Example.z80
                    > USED AT LINE 737 IN LLL-FP-Example.z80
                    > USED AT LINE 1394 IN LLL-FP-Example.z80
INCR2:              0656 DEFINED AT LINE 1153 IN LLL-FP-Example.z80
                    > USED AT LINE 1147 IN LLL-FP-Example.z80
                    > USED AT LINE 1187 IN LLL-FP-Example.z80
SCCFG:              0662 DEFINED AT LINE 1164 IN LLL-FP-Example.z80
                    > USED AT LINE 525 IN LLL-FP-Example.z80
DECR:               0664 DEFINED AT LINE 1181 IN LLL-FP-Example.z80
AORS:               0671 DEFINED AT LINE 1194 IN LLL-FP-Example.z80
                    > USED AT LINE 390 IN LLL-FP-Example.z80
                    > USED AT LINE 566 IN LLL-FP-Example.z80
                    > USED AT LINE 578 IN LLL-FP-Example.z80
                    > USED AT LINE 588 IN LLL-FP-Example.z80
                    > USED AT LINE 593 IN LLL-FP-Example.z80
                    > USED AT LINE 667 IN LLL-FP-Example.z80
TSTR:               0677 DEFINED AT LINE 1210 IN LLL-FP-Example.z80
                    > USED AT LINE 489 IN LLL-FP-Example.z80
                    > USED AT LINE 497 IN LLL-FP-Example.z80
ACPR:               067F DEFINED AT LINE 1225 IN LLL-FP-Example.z80
                    > USED AT LINE 437 IN LLL-FP-Example.z80
                    > USED AT LINE 480 IN LLL-FP-Example.z80
DCMP:               0684 DEFINED AT LINE 1238 IN LLL-FP-Example.z80
                    > USED AT LINE 570 IN LLL-FP-Example.z80
                    > USED AT LINE 582 IN LLL-FP-Example.z80
                    > USED AT LINE 629 IN LLL-FP-Example.z80
                    > USED AT LINE 1274 IN LLL-FP-Example.z80
ENT2:               069A DEFINED AT LINE 1270 IN LLL-FP-Example.z80
                    > USED AT LINE 377 IN LLL-FP-Example.z80
ENT1:               06A0 DEFINED AT LINE 1273 IN LLL-FP-Example.z80
                    > USED AT LINE 371 IN LLL-FP-Example.z80
OVER:               06A7 DEFINED AT LINE 1277 IN LLL-FP-Example.z80
                    > USED AT LINE 1272 IN LLL-FP-Example.z80
                    > USED AT LINE 1275 IN LLL-FP-Example.z80
LXFR:               06B4 DEFINED AT LINE 1295 IN LLL-FP-Example.z80
                    > USED AT LINE 508 IN LLL-FP-Example.z80
REP5:               06B6 DEFINED AT LINE 1297 IN LLL-FP-Example.z80
                    > USED AT LINE 1305 IN LLL-FP-Example.z80
LDCP:               06C9 DEFINED AT LINE 1331 IN LLL-FP-Example.z80
                    > USED AT LINE 398 IN LLL-FP-Example.z80
LMCP:               06D0 DEFINED AT LINE 1355 IN LLL-FP-Example.z80
                    > USED AT LINE 668 IN LLL-FP-Example.z80
CCHK:               06D4 DEFINED AT LINE 1383 IN LLL-FP-Example.z80
                    > USED AT LINE 407 IN LLL-FP-Example.z80
                    > USED AT LINE 678 IN LLL-FP-Example.z80
                    > USED AT LINE 1334 IN LLL-FP-Example.z80
STORC:              06E3 DEFINED AT LINE 1390 IN LLL-FP-Example.z80
                    > USED AT LINE 1385 IN LLL-FP-Example.z80
OFLWC:              06EB DEFINED AT LINE 1403 IN LLL-FP-Example.z80
                    > USED AT LINE 365 IN LLL-FP-Example.z80
                    > USED AT LINE 405 IN LLL-FP-Example.z80
                    > USED AT LINE 1387 IN LLL-FP-Example.z80
UFLWC:              06F2 DEFINED AT LINE 1415 IN LLL-FP-Example.z80
                    > USED AT LINE 676 IN LLL-FP-Example.z80
                    > USED AT LINE 1389 IN LLL-FP-Example.z80
CSIGN:              06F9 DEFINED AT LINE 1440 IN LLL-FP-Example.z80
                    > USED AT LINE 356 IN LLL-FP-Example.z80
                    > USED AT LINE 644 IN LLL-FP-Example.z80
CSTR:               0701 DEFINED AT LINE 1453 IN LLL-FP-Example.z80
                    > USED AT LINE 1443 IN LLL-FP-Example.z80
MSFH:               0709 DEFINED AT LINE 1475 IN LLL-FP-Example.z80
                    > USED AT LINE 560 IN LLL-FP-Example.z80
                    > USED AT LINE 1441 IN LLL-FP-Example.z80
BCTL:               071D DEFINED AT LINE 1501 IN LLL-FP-Example.z80
                    > USED AT LINE 520 IN LLL-FP-Example.z80
DSQRT:              072A DEFINED AT LINE 1536 IN LLL-FP-Example.z80
                    > USED AT LINE 130 IN LLL-FP-Example.z80
EPOS:               0752 DEFINED AT LINE 1563 IN LLL-FP-Example.z80
                    > USED AT LINE 1556 IN LLL-FP-Example.z80
AGN4:               0756 DEFINED AT LINE 1567 IN LLL-FP-Example.z80
                    > USED AT LINE 1561 IN LLL-FP-Example.z80
                    > USED AT LINE 1614 IN LLL-FP-Example.z80
ALDN:               07A1 DEFINED AT LINE 1616 IN LLL-FP-Example.z80
                    > USED AT LINE 1627 IN LLL-FP-Example.z80
ERSQ:               07A9 DEFINED AT LINE 1624 IN LLL-FP-Example.z80
                    > USED AT LINE 1552 IN LLL-FP-Example.z80
CVRT:               07B0 DEFINED AT LINE 1640 IN LLL-FP-Example.z80
                    > USED AT LINE 194 IN LLL-FP-Example.z80
                    > USED AT LINE 202 IN LLL-FP-Example.z80
NNZRO:              07C8 DEFINED AT LINE 1656 IN LLL-FP-Example.z80
                    > USED AT LINE 1642 IN LLL-FP-Example.z80
NZRO:               07E5 DEFINED AT LINE 1680 IN LLL-FP-Example.z80
                    > USED AT LINE 1677 IN LLL-FP-Example.z80
TST8:               07F1 DEFINED AT LINE 1688 IN LLL-FP-Example.z80
                    > USED AT LINE 1702 IN LLL-FP-Example.z80
GOTV:               07FE DEFINED AT LINE 1696 IN LLL-FP-Example.z80
                    > USED AT LINE 1693 IN LLL-FP-Example.z80
TRY1:               080C DEFINED AT LINE 1704 IN LLL-FP-Example.z80
                    > USED AT LINE 1698 IN LLL-FP-Example.z80
TST1:               0811 DEFINED AT LINE 1707 IN LLL-FP-Example.z80
                    > USED AT LINE 1716 IN LLL-FP-Example.z80
MDGN:               0819 DEFINED AT LINE 1712 IN LLL-FP-Example.z80
                    > USED AT LINE 1720 IN LLL-FP-Example.z80
OK1:                0822 DEFINED AT LINE 1718 IN LLL-FP-Example.z80
                    > USED AT LINE 1710 IN LLL-FP-Example.z80
MDSKP:              0827 DEFINED AT LINE 1722 IN LLL-FP-Example.z80
                    > USED AT LINE 1654 IN LLL-FP-Example.z80
POPD:               0838 DEFINED AT LINE 1732 IN LLL-FP-Example.z80
                    > USED AT LINE 1736 IN LLL-FP-Example.z80
INPOP:              083B DEFINED AT LINE 1734 IN LLL-FP-Example.z80
                    > USED AT LINE 1874 IN LLL-FP-Example.z80
DIGO:               0853 DEFINED AT LINE 1745 IN LLL-FP-Example.z80
                    > USED AT LINE 1731 IN LLL-FP-Example.z80
                    > USED AT LINE 1735 IN LLL-FP-Example.z80
                    > USED AT LINE 1889 IN LLL-FP-Example.z80
MULTT:              0867 DEFINED AT LINE 1760 IN LLL-FP-Example.z80
                    > USED AT LINE 1733 IN LLL-FP-Example.z80
                    > USED AT LINE 2126 IN LLL-FP-Example.z80
LSFT:               088F DEFINED AT LINE 1789 IN LLL-FP-Example.z80
                    > USED AT LINE 1728 IN LLL-FP-Example.z80
                    > USED AT LINE 1762 IN LLL-FP-Example.z80
TLOOP:              0892 DEFINED AT LINE 1793 IN LLL-FP-Example.z80
                    > USED AT LINE 1815 IN LLL-FP-Example.z80
TLP2:               0893 DEFINED AT LINE 1795 IN LLL-FP-Example.z80
                    > USED AT LINE 1776 IN LLL-FP-Example.z80
SIGN:               08A9 DEFINED AT LINE 1817 IN LLL-FP-Example.z80
                    > USED AT LINE 1647 IN LLL-FP-Example.z80
                    > USED AT LINE 1685 IN LLL-FP-Example.z80
                    > USED AT LINE 1741 IN LLL-FP-Example.z80
PLSV:               08B2 DEFINED AT LINE 1822 IN LLL-FP-Example.z80
                    > USED AT LINE 1820 IN LLL-FP-Example.z80
GCHR:               08B6 DEFINED AT LINE 1826 IN LLL-FP-Example.z80
                    > USED AT LINE 1549 IN LLL-FP-Example.z80
                    > USED AT LINE 1602 IN LLL-FP-Example.z80
                    > USED AT LINE 1689 IN LLL-FP-Example.z80
                    > USED AT LINE 1708 IN LLL-FP-Example.z80
GETA:               08B7 DEFINED AT LINE 1828 IN LLL-FP-Example.z80
                    > USED AT LINE 1857 IN LLL-FP-Example.z80
MORD:               08BC DEFINED AT LINE 1835 IN LLL-FP-Example.z80
                    > USED AT LINE 1699 IN LLL-FP-Example.z80
                    > USED AT LINE 1713 IN LLL-FP-Example.z80
                    > USED AT LINE 2036 IN LLL-FP-Example.z80
                    > USED AT LINE 2049 IN LLL-FP-Example.z80
FINUP:              08D0 DEFINED AT LINE 1848 IN LLL-FP-Example.z80
                    > USED AT LINE 1861 IN LLL-FP-Example.z80
GETEX:              08D7 DEFINED AT LINE 1854 IN LLL-FP-Example.z80
                    > USED AT LINE 1739 IN LLL-FP-Example.z80
                    > USED AT LINE 1836 IN LLL-FP-Example.z80
                    > USED AT LINE 1866 IN LLL-FP-Example.z80
                    > USED AT LINE 2015 IN LLL-FP-Example.z80
                    > USED AT LINE 2031 IN LLL-FP-Example.z80
                    > USED AT LINE 2044 IN LLL-FP-Example.z80
                    > USED AT LINE 2065 IN LLL-FP-Example.z80
DIVIT:              08DC DEFINED AT LINE 1859 IN LLL-FP-Example.z80
                    > USED AT LINE 1846 IN LLL-FP-Example.z80
TWOD:               08E2 DEFINED AT LINE 1863 IN LLL-FP-Example.z80
                    > USED AT LINE 1730 IN LLL-FP-Example.z80
FINIT:              08F0 DEFINED AT LINE 1871 IN LLL-FP-Example.z80
                    > USED AT LINE 1878 IN LLL-FP-Example.z80
ADD1:               08F5 DEFINED AT LINE 1876 IN LLL-FP-Example.z80
                    > USED AT LINE 1869 IN LLL-FP-Example.z80
CTWO:               08F9 DEFINED AT LINE 1880 IN LLL-FP-Example.z80
                    > USED AT LINE 1744 IN LLL-FP-Example.z80
                    > USED AT LINE 1864 IN LLL-FP-Example.z80
LOOP:               08FB DEFINED AT LINE 1882 IN LLL-FP-Example.z80
                    > USED AT LINE 1885 IN LLL-FP-Example.z80
COPT:               090A DEFINED AT LINE 1893 IN LLL-FP-Example.z80
                    > USED AT LINE 1687 IN LLL-FP-Example.z80
                    > USED AT LINE 1706 IN LLL-FP-Example.z80
                    > USED AT LINE 2030 IN LLL-FP-Example.z80
                    > USED AT LINE 2043 IN LLL-FP-Example.z80
COPY:               0918 DEFINED AT LINE 1904 IN LLL-FP-Example.z80
                    > USED AT LINE 1548 IN LLL-FP-Example.z80
                    > USED AT LINE 1573 IN LLL-FP-Example.z80
                    > USED AT LINE 1588 IN LLL-FP-Example.z80
                    > USED AT LINE 1621 IN LLL-FP-Example.z80
                    > USED AT LINE 1769 IN LLL-FP-Example.z80
                    > USED AT LINE 1853 IN LLL-FP-Example.z80
                    > USED AT LINE 1898 IN LLL-FP-Example.z80
                    > USED AT LINE 2099 IN LLL-FP-Example.z80
                    > USED AT LINE 2168 IN LLL-FP-Example.z80
TEN5:               092D DEFINED AT LINE 1935 IN LLL-FP-Example.z80
                    > USED AT LINE 1686 IN LLL-FP-Example.z80
                    > USED AT LINE 1897 IN LLL-FP-Example.z80
                    > USED AT LINE 2029 IN LLL-FP-Example.z80
TEN:                0931 DEFINED AT LINE 1936 IN LLL-FP-Example.z80
                    > USED AT LINE 1705 IN LLL-FP-Example.z80
                    > USED AT LINE 2042 IN LLL-FP-Example.z80
ERR:                0935 DEFINED AT LINE 1975 IN LLL-FP-Example.z80
                    > USED AT LINE 2012 IN LLL-FP-Example.z80
                    > USED AT LINE 2076 IN LLL-FP-Example.z80
INPUT:              0942 DEFINED AT LINE 1991 IN LLL-FP-Example.z80
                    > USED AT LINE 178 IN LLL-FP-Example.z80
                    > USED AT LINE 186 IN LLL-FP-Example.z80
PRMT:               094A DEFINED AT LINE 1999 IN LLL-FP-Example.z80
                    > USED AT LINE 1980 IN LLL-FP-Example.z80
TSTEX:              095C DEFINED AT LINE 2008 IN LLL-FP-Example.z80
                    > USED AT LINE 2068 IN LLL-FP-Example.z80
SCALE:              0969 DEFINED AT LINE 2014 IN LLL-FP-Example.z80
                    > USED AT LINE 2100 IN LLL-FP-Example.z80
APLS:               097B DEFINED AT LINE 2026 IN LLL-FP-Example.z80
                    > USED AT LINE 2023 IN LLL-FP-Example.z80
INT5:               0985 DEFINED AT LINE 2032 IN LLL-FP-Example.z80
                    > USED AT LINE 2039 IN LLL-FP-Example.z80
TRYTN:              0995 DEFINED AT LINE 2041 IN LLL-FP-Example.z80
                    > USED AT LINE 2035 IN LLL-FP-Example.z80
INT1:               099D DEFINED AT LINE 2045 IN LLL-FP-Example.z80
                    > USED AT LINE 2052 IN LLL-FP-Example.z80
DECPT:              09AC DEFINED AT LINE 2054 IN LLL-FP-Example.z80
                    > USED AT LINE 2007 IN LLL-FP-Example.z80
INEXP:              09C1 DEFINED AT LINE 2070 IN LLL-FP-Example.z80
                    > USED AT LINE 2010 IN LLL-FP-Example.z80
USEIT:              09E3 DEFINED AT LINE 2090 IN LLL-FP-Example.z80
                    > USED AT LINE 2087 IN LLL-FP-Example.z80
GNUM:               09F2 DEFINED AT LINE 2102 IN LLL-FP-Example.z80
                    > USED AT LINE 2005 IN LLL-FP-Example.z80
                    > USED AT LINE 2074 IN LLL-FP-Example.z80
                    > USED AT LINE 2105 IN LLL-FP-Example.z80
                    > USED AT LINE 2113 IN LLL-FP-Example.z80
                    > USED AT LINE 2117 IN LLL-FP-Example.z80
TRYP:               0A08 DEFINED AT LINE 2115 IN LLL-FP-Example.z80
                    > USED AT LINE 2107 IN LLL-FP-Example.z80
TSTN:               0A0D DEFINED AT LINE 2118 IN LLL-FP-Example.z80
                    > USED AT LINE 2151 IN LLL-FP-Example.z80
EP1:                0A35 DEFINED AT LINE 2149 IN LLL-FP-Example.z80
                    > USED AT LINE 2059 IN LLL-FP-Example.z80
FLTSGN:             0A3B DEFINED AT LINE 2153 IN LLL-FP-Example.z80
                    > USED AT LINE 2013 IN LLL-FP-Example.z80
                    > USED AT LINE 2071 IN LLL-FP-Example.z80
SAVEN:              0A3F DEFINED AT LINE 2157 IN LLL-FP-Example.z80
                    > USED AT LINE 2048 IN LLL-FP-Example.z80
                    > USED AT LINE 2072 IN LLL-FP-Example.z80
GETN:               0A4F DEFINED AT LINE 2174 IN LLL-FP-Example.z80
                    > USED AT LINE 2124 IN LLL-FP-Example.z80
                    > USED AT LINE 2129 IN LLL-FP-Example.z80
ZROIT:              0A55 DEFINED AT LINE 2181 IN LLL-FP-Example.z80
                    > USED AT LINE 2002 IN LLL-FP-Example.z80
                    > USED AT LINE 2073 IN LLL-FP-Example.z80
CONTROL:            0080 DEFINED AT LINE 16 IN Char-6850.z80
                    > USED AT LINE 69 IN Char-6850.z80
                    > USED AT LINE 72 IN Char-6850.z80
STATUS:             0080 DEFINED AT LINE 17 IN Char-6850.z80
                    > USED AT LINE 80 IN Char-6850.z80
                    > USED AT LINE 90 IN Char-6850.z80
TDR:                0081 DEFINED AT LINE 18 IN Char-6850.z80
                    > USED AT LINE 84 IN Char-6850.z80
RDR:                0081 DEFINED AT LINE 19 IN Char-6850.z80
                    > USED AT LINE 93 IN Char-6850.z80
MRESET:             0003 DEFINED AT LINE 26 IN Char-6850.z80
                    > USED AT LINE 68 IN Char-6850.z80
CLKDIV_0:           0000 DEFINED AT LINE 27 IN Char-6850.z80
CLKDIV_16:          0001 DEFINED AT LINE 28 IN Char-6850.z80
CLKDIV_64:          0002 DEFINED AT LINE 29 IN Char-6850.z80
                    > USED AT LINE 71 IN Char-6850.z80
F7E2:               0000 DEFINED AT LINE 33 IN Char-6850.z80
F7O2:               0004 DEFINED AT LINE 34 IN Char-6850.z80
F7E1:               0008 DEFINED AT LINE 35 IN Char-6850.z80
F7O1:               000C DEFINED AT LINE 36 IN Char-6850.z80
F8N2:               0010 DEFINED AT LINE 37 IN Char-6850.z80
                    > USED AT LINE 71 IN Char-6850.z80
F8N1:               0014 DEFINED AT LINE 38 IN Char-6850.z80
F8E1:               0018 DEFINED AT LINE 39 IN Char-6850.z80
F8O1:               001C DEFINED AT LINE 40 IN Char-6850.z80
RTSLID:             0000 DEFINED AT LINE 44 IN Char-6850.z80
                    > USED AT LINE 71 IN Char-6850.z80
RTSLIE:             0020 DEFINED AT LINE 45 IN Char-6850.z80
RTSHID:             0040 DEFINED AT LINE 46 IN Char-6850.z80
RTSLIDB:            0060 DEFINED AT LINE 47 IN Char-6850.z80
RIE:                0080 DEFINED AT LINE 51 IN Char-6850.z80
RDRF:               0000 DEFINED AT LINE 55 IN Char-6850.z80
TDRE:               0001 DEFINED AT LINE 56 IN Char-6850.z80
DCD:                0002 DEFINED AT LINE 57 IN Char-6850.z80
CTS:                0003 DEFINED AT LINE 58 IN Char-6850.z80
FE:                 0004 DEFINED AT LINE 59 IN Char-6850.z80
OVRN:               0005 DEFINED AT LINE 60 IN Char-6850.z80
PE:                 0006 DEFINED AT LINE 61 IN Char-6850.z80
IRQ:                0007 DEFINED AT LINE 62 IN Char-6850.z80
INITIALISESERIAL:   0A5F DEFINED AT LINE 67 IN Char-6850.z80
                    > USED AT LINE 10
TXCHAR:             0A68 DEFINED AT LINE 77 IN Char-6850.z80
                    > USED AT LINE 23 IN LLL-FP-Example.z80
                    > USED AT LINE 45 IN LLL-FP-Example.z80
                    > USED AT LINE 70 IN LLL-FP-Example.z80
                    > USED AT LINE 95 IN LLL-FP-Example.z80
                    > USED AT LINE 137 IN LLL-FP-Example.z80
                    > USED AT LINE 160 IN LLL-FP-Example.z80
                    > USED AT LINE 209 IN LLL-FP-Example.z80
                    > USED AT LINE 211 IN LLL-FP-Example.z80
                    > USED AT LINE 223 IN LLL-FP-Example.z80
                    > USED AT LINE 307 IN LLL-FP-Example.z80
                    > USED AT LINE 345 IN LLL-FP-Example.z80
TXCHAR1:            0A69 DEFINED AT LINE 79 IN Char-6850.z80
                    > USED AT LINE 82 IN Char-6850.z80
RXCHAR:             0A73 DEFINED AT LINE 89 IN Char-6850.z80
                    > USED AT LINE 25 IN LLL-FP-Example.z80
                    > USED AT LINE 328 IN LLL-FP-Example.z80
                    > USED AT LINE 92 IN Char-6850.z80
