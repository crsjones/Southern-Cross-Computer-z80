;---------------------------
; 8 X 8 DISPLAY MAZE PROGRAM
;---------------------------
;
; BY CRAIG R.S.JONES  01/93  VERSION 1.0
; QUASAR ELECTRONICS, UNIT 14 SUNNINGDALE, BISHOPS STORTFORD, HERTS, CM23 2PA, UK
;
; THE MAZE CONSISTS OF A MATRIX OF 8 BYTE 'VIEWS' WHICH
; ARE DISPLAYED ON THE 8X8 DISPLAY.
; AS THE PLAYER MOVES HIS 'CURSOR' OFF THE CURRENT VIEW A
; NEW VIEW IS DISPLAYED DEPENDING ON THE DIRECTION OF TRAVEL.
;
; USE THE '2' KEY FOR UP, 'A' IS DOWN, '5' LEFT AND '7' RIGHT.
; THE FUNCTION KEY WILL RETURN YOU TO THE MONITOR.
;
; THE EXIT IS SHOWN AS A LED WHICH FLASHES HALF AS FAST AS THE
; PLAYER'S CURSOR.
;
; I/O PORT
;
KEYBUF  EQU     86H     ;KEYBOARD BUFFER
;
; SYSTEM CALLS
;
MAIN    EQU     00H     ;RESTART MONITOR
KEYREL  EQU     0CH     ;WAIT FOR KEY RELEASE
MENU    EQU     0DH     ;SELECT ENTRY FROM MENU
BEEP    EQU     15H     ;KEY ENTRY BEEP
SKATE   EQU     16H     ;SCAN 8X8 DISPLAY
;
; MAZE PROGRAM  VARIABLES
;
BUFFER  EQU     3F00H           ;8X8 DISPLAY BUFFER
VIEW    EQU     3F08H           ;MAZE VIEW ADDRESS
XREG    EQU     3F0AH           ;CURSOR X AXIS
YREG    EQU     3F0BH           ;CURSOR Y AXIS
DIM     EQU     3F0CH           ;MAZE DIMENSION
EXVIEW  EQU     3F0EH           ;EXIT VIEW ADDRESS
EXYREG  EQU     3F10H           ;EXIT Y
EXXREG  EQU     3F11H           ;EXIT X
;---------------------
; 8 X 8 DISPLAY - MAZE
;---------------------
	ORG     2000H
;
;SET UP THE ENTRY VIEW
;
SETUP   LD      HL,ENTRY
	LD      (VIEW),HL      ;ENTRY VIEW
	LD      A,06H
	LD      (YREG),A       ;Y ENTRY POSITION
	LD      A,10H
	LD      (XREG),A       ;X ENTRY POSITION
;
; SET UP THE EXIT VIEW
;
	LD      HL,EXIT
	LD      (EXVIEW),HL     ;EXIT VIEW
	LD      A,03H
	LD      (EXYREG),A      ;Y EXIT POSITION
	LD      A,02H
	LD      (EXXREG),A      ;X EXIT POSITION
;
; DIMENSION MAZE SIZE
;
	LD      DE,0030H
	LD      (DIM),DE        ;MAZE SIZE
;---------------
; MAIN MAZE LOOP
;---------------
MAZE    CALL    MOVBUF
MAZE1   CALL    CURSOR          ;TOGGLE THE CURSOR
	CALL    TOGEXT          ;CHECK EXIT
	LD      B,0E0H
MAZE2   LD      HL,BUFFER       ;POINT TO 8X8 BUFFER
	LD      C,SKATE
	RST     30H             ;SCAN 8X8 DISPLAY
	DJNZ    MAZE2           ;FOR A WHILE
	CALL    CURSOR          ;TOGGLE THE CURSOR
	LD      B,0E0H
MAZE3   LD      HL,BUFFER       ;POINT TO 8X8 BUFFER
	LD      C,SKATE
	RST     30H             ;SCAN 8X8 DISPLAY
	IN      A,(KEYBUF)
	BIT     5,A
	JR      NZ,MAZE4        ;DA HIGH, PROCESS KEY
	DJNZ    MAZE3           ;FOR A WHILE
	JP      MAZE1           ;NO KEY SO TOGGLE CURSOR
;
; GOT A KEY
;
MAZE4   LD      B,0FFH          ;DO A KEY ENTRY DELAY
MAZE5   DJNZ    MAZE5
	AND     1FH             ;STRIP UNUSED BITS
	CALL    CURSOFF         ;TURN CURSOR OFF
	LD      HL,MAZKEY
	LD      C,MENU          ;DO KEY PROCESSING
	RST     30H
;
; HAVE WE FOUND THE EXIT?
;
	LD      HL,(VIEW)
	LD      A,(EXVIEW)
	CP      L
	JR      NZ,MAZE1        ;NOT RIGHT VIEW
	LD      A,(EXVIEW+1)
	CP      H
	JR      NZ,MAZE1        ;NOT RIGHT VIEW
	LD      A,(YREG)
	LD      B,A
	LD      A,(EXYREG)
	CP      B
	JR      NZ,MAZE1        ;NOT RIGHT Y REG
	LD      A,(XREG)
	LD      B,A
	LD      A,(EXXREG)
	CP      B
	JR      NZ,MAZE1        ;NOT RIGHT X REG
;
; FOUND THE EXIT!!
;
	LD      C,BEEP
	RST     30H
	LD      C,KEYREL
	RST     30H
MAZE6   LD      HL,EXIT1
	LD      (VIEW),HL
	CALL    MOVBUF          ;PUT INTO BUFFER
	CALL    KEYATE          ;DISPLAY EXIT1 A WHILE
	LD      HL,EXIT2
	LD      (VIEW),HL
	CALL    MOVBUF          ;PUT INTO BUFFER
	CALL    KEYATE          ;DISPLAY EXIT2 A WHILE
	IN      A,(KEYBUF)
	BIT     5,A
	JR      Z,MAZE6         ;NO KEY KEEP GOING
	LD      C,BEEP
	RST     30H
	LD      C,KEYREL
	RST     30H
	LD      C,MAIN          ;EXIT TO MONITOR
	RST     30H
;
; SCAN 8X8 AND WAIT FOR KEY
;
KEYATE  LD      B,0FFH
KEYAT1  LD      HL,BUFFER       ;POINT TO 8X8 BUFFER
	LD      C,SKATE
	RST     30H             ;SCAN 8X8 DISPLAY
	DJNZ    KEYAT1          ;FOR A WHILE
	RET
;
; MAZE KEY TABLE
;
MAZKEY  DEFB    05
	DEFB    02H,0AH,05H,07H
	DEFB    10H
	DEFW    UPKEY,DWNKEY,LFTKEY,RHTKEY
	DEFW    ENDKEY
;
; EXIT DISPLAY PATTERNS
;
EXIT1   DEFB    0FFH,081H,0BDH,0A5H,0A5H,0BDH,081H,0FFH
EXIT2   DEFB    000H,07EH,042H,05AH,05AH,042H,07EH,000H
;----------
; QUIT MAZE
;----------
ENDKEY  LD      C,KEYREL
	RST     30H
	LD      C,MAIN
	RST     30H
;-----------------
; MOVE CURSOR LEFT
;-----------------
LFTKEY  LD      A,(XREG)        ;ARE WE AT THE LEFT EDGE
	RL      A               ;OF THE DISPLAY?
	JR      C,LFTKY1        ;YES, SO GET NEXT VIEW
;
; IS THERE A WALL IN THE WAY?
;
	LD      HL,BUFFER
	LD      A,(YREG)        ;HL POINTS TO THE BYTE
	LD      L,A             ;THE CURSOR IS ON IN
	LD      A,(XREG)        ;THE 8X8 BUFFER
	RL      A               ;IF THERE IS A MAZE
	AND     (HL)            ;WALL IN THE WAY
	RET     NZ              ;THEN RETURN
	LD      A,(XREG)
	RL      A               ;NO WALL IN THE WAY
	LD      (XREG),A        ;SO MOVE CURSOR TO LEFT
	RET
;
; CAN WE MOVE INTO THE NEXT VIEW?
;
LFTKY1  LD      HL,(VIEW)       ;CHECK THE NEXT
	LD      DE,0008H        ;VIEW TO ENSURE THAT
	AND     A               ;THERE IS NOT
	SBC     HL,DE           ;A WALL IN THE
	LD      A,(YREG)        ;POSITION WHERE THE
	LD      E,A             ;CURSOR SHOULD APPEAR
	ADD     HL,DE
	LD      A,01H           ;STAY IN THE CURRENT
	AND     (HL)            ;VIEW IF A WALL
	RET     NZ              ;IS IN THE WAY
;
; MOVE NEXT VIEW INTO BUFFER
;
	LD      HL,(VIEW)       ;GET THE VIEW
	LD      DE,0008H        ;TO THE LEFT
	AND     A               ;OF THE CURRENT ONE
	SBC     HL,DE           ;AND MOVE IT
	LD      (VIEW),HL       ;INTO THE 8X8
	LD      A,01H           ;DISPLAY BUFFER
	LD      (XREG),A        ;PUT THE CURSOR ON THE
	CALL    MOVBUF          ;RIGHT OF THE DISPLAY
	RET
;------------------
; MOVE CURSOR RIGHT
;------------------
RHTKEY  LD      A,(XREG)        ;ARE WE AT THE RIGHT EDGE
	RR      A               ;OF THE DISPLAY?
	JR      C,RHTKY1        ;YES, SO GET NEXT VIEW
;
; IS THERE A WALL IN THE WAY?
;
	LD      HL,BUFFER
	LD      A,(YREG)
	LD      L,A
	LD      A,(XREG)
	RR      A
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
	LD      A,(XREG)
	RR      A               ;MOVE CURSOR RIGHT
	LD      (XREG),A
	RET
;
; CAN WE MOVE INTO THE NEXT VIEW?
;
RHTKY1  LD      HL,(VIEW)
	LD      DE,0008H
	ADD     HL,DE
	LD      A,(YREG)
	LD      E,A
	ADD     HL,DE
	LD      A,80H
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
;
; MOVE NEXT VIEW INTO BUFFER
;
	LD      HL,(VIEW)
	LD      DE,0008H
	ADD     HL,DE
	LD      (VIEW),HL
	LD      A,80H           ;PUT CURSOR ON LEFT
	LD      (XREG),A
	CALL    MOVBUF
	RET
;---------------
; MOVE CURSOR UP
;---------------
UPKEY   LD      A,(YREG)        ;ARE WE AT THE TOP
	CP      00H             ;OF THE DISPLAY?
	JR      Z,UPKY1         ;YES, SO GET NEXT VIEW
;
; IS THERE A WALL IN THE WAY?
;
	LD      HL,BUFFER
	LD      A,(YREG)
	LD      L,A
	DEC     L
	LD      A,(XREG)
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
	LD      A,(YREG)
	DEC     A               ;MOVE CURSOR UP
	LD      (YREG),A
	RET
;
; CAN WE MOVE INTO THE NEXT VIEW?
;
UPKY1   LD      HL,(VIEW)
	LD      DE,(DIM)
	AND     A
	SBC     HL,DE
	LD      E,07H
	ADD     HL,DE
	LD      A,(XREG)
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
;
; MOVE NEXT VIEW INTO BUFFER
;
	LD      HL,(VIEW)
	LD      DE,(DIM)
	AND     A
	SBC     HL,DE
	LD      (VIEW),HL
	LD      A,07H           ;PUT CURSOR ON BOTTOM
	LD      (YREG),A
	CALL    MOVBUF
	RET
;-----------------
; MOVE CURSOR DOWN
;-----------------
DWNKEY  LD      A,(YREG)        ;ARE WE AT THE BOTTOM
	CP      07H             ;OF THE DISPLAY?
	JR      Z,DWNKY1        ;YES, SO GET NEXT VIEW
;
; IS THERE A WALL IN THE WAY?
;
	LD      HL,BUFFER
	LD      A,(YREG)
	LD      L,A
	INC     L
	LD      A,(XREG)
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
	LD      A,(YREG)
	INC     A               ;MOVE CURSOR DOWN
	LD      (YREG),A
	RET
;
; CAN WE MOVE INTO THE NEXT VIEW?
;
DWNKY1  LD      HL,(VIEW)
	LD      DE,(DIM)
	ADD     HL,DE
	LD      A,(XREG)
	AND     (HL)
	RET     NZ              ;WALL IN THE WAY
;
; MOVE NEXT VIEW INTO BUFFER
;
	LD      HL,(VIEW)
	LD      DE,(DIM)
	ADD     HL,DE
	LD      (VIEW),HL
	LD      A,00H           ;PUT CURSOR UP TOP
	LD      (YREG),A
	CALL    MOVBUF
	RET
;------------------
; TOGGLE THE CURSOR
;------------------
CURSOR  LD      HL,BUFFER
	LD      A,(YREG)        ;HL POINTS TO
	LD      L,A             ;CURSOR BUFFER ADDRESS
	LD      A,(XREG)
	XOR     A,(HL)          ;TOGGLE THE CURSOR
	LD      (HL),A
	RET
;----------------------
; CHECK AND TOGGLE EXIT
;----------------------
TOGEXT  LD      HL,(VIEW)
	LD      A,(EXVIEW)
	CP      L
	RET     NZ              ;NOT RIGHT VIEW
	LD      A,(EXVIEW+1)
	CP      H
	RET     NZ              ;NOT RIGHT VIEW
	LD      HL,BUFFER
	LD      A,(EXYREG)
	LD      L,A
	LD      A,(EXXREG)      ;X REG
	XOR     A,(HL)          ;TOGGLE THE EXIT
	LD      (HL),A
	RET
;----------------
; TURN CURSOR OFF
;----------------
CURSOFF PUSH    AF
	PUSH    HL
	LD      HL,BUFFER
	LD      A,(YREG)        ;HL POINTS TO ADDRESS
	LD      L,A             ;OF CURSOR IN BUFFER
	LD      A,(XREG)
	CPL                     ;TURN OFF
	AND     A,(HL)          ;CURSOR IN BUFFER
	LD      (HL),A
	POP     HL
	POP     AF
	RET
;----------------------
; MOVE VIEW INTO BUFFER
;----------------------
MOVBUF  LD      HL,(VIEW)
	LD      DE,BUFFER
	LD      BC,0008H
	LDIR
	RET
;----------
; MAZE DATA
;----------
;THE MAZE IS ORGANISED INTO 6 ROWS OF 6 COLUMNS EACH.
;EACH VIEW HAS EIGHT BYTES,FIRST BYTE IS THE DATA FOR
;THE TOP LINE OF THE 8X8 DISPLAY.
;                           COLUMN
;          1       2       3       4       5       6
;     1
;     2
;     3
; ROW 4
;     5
;     6
;
; FIRST ROW
;
	DEFB    0FFH,088H,0A2H,0BEH,0A2H,0AAH,08AH,0BAH  ;1ST COLUMN
	DEFB    0FFH,011H,0D5H,094H,0B7H,084H,0D1H,01DH  ;2
	DEFB    0FFH,001H,05DH,051H,0D4H,055H,055H,055H  ;3
	DEFB    0FFH,010H,055H,055H,045H,0DDH,011H,055H  ;4
	DEFB    0FFH,008H,0EBH,00AH,07BH,040H,05FH,051H  ;5
	DEFB    0FFH,011H,0D5H,005H,0FDH,005H,0F5H,015H  ;6
;
; SECOND ROW
;
	DEFB    088H,0EBH,088H,0BFH,082H,0BAH,0A2H,0AFH
	DEFB    050H,0D7H,042H,07AH,042H,0DEH,010H,0D7H
	DEFB    055H,0D5H,004H,0BFH,0A2H,0AAH,088H,0FEH
	DEFB    055H,054H,057H,0D1H,004H,0BFH,0A0H,0AFH
	DEFB    055H,055H,055H,054H,057H,0C4H,01DH,0C4H
	DEFB    055H,045H,07DH,001H,0FFH,001H,0F7H,015H
;
; THIRD ROW
;
	DEFB    0A2H,0BAH,0A0H,0AEH,082H,0FBH,080H,0BEH
	DEFB    014H,0F5H,080H,0BEH,010H,0D5H,015H,0D4H
	DEFB    002H,0FAH,000H,0BFH,0A0H,0AFH,0A0H,02FH
	DEFB    0A8H,0ABH,02AH,0EAH,000H,0EFH,028H,0AAH
	DEFB    07FH,000H,0FFH,020H,03FH,0A2H,0AAH,0AAH
EXIT    DEFB    0D5H,015H,0F5H,005H,0DDH,051H,015H,0F5H
;
; FOURTH ROW
;
	DEFB    082H,0FBH,081H,0BFH,081H,0BDH,084H,0B7H
	DEFB    055H,054H,055H,054H,011H,057H,054H,0D5H
	DEFB    0E8H,00AH,0FAH,012H,0D7H,040H,05FH,040H
	DEFB    0AAH,0AAH,0A2H,03FH,0A0H,02FH,0E8H,00AH
	DEFB    08AH,0FAH,00AH,0EAH,02AH,0AAH,0AAH,0AAH
	DEFB    085H,03DH,085H,0F1H,09FH,0B1H,095H,0D5H
;
; FIFTH ROW
;
	DEFB    0A0H,0AFH,081H,0ADH,0A8H,0ABH,0A0H,0AFH
	DEFB    055H,055H,015H,0F5H,004H,0DDH,011H,0F7H
	DEFB    07FH,044H,055H,055H,011H,0FFH,000H,05FH
	DEFB    0FAH,042H,05AH,05AH,002H,0EFH,020H,0BEH
	DEFB    0A2H,0BFH,080H,0FFH,000H,0FFH,080H,0BFH
	DEFB    015H,0F5H,005H,0FDH,005H,0F5H,015H,055H
;
; SIXTH ROW
;
	DEFB    0A8H,0AAH,0AAH,0ABH,0A0H,0BFH,080H,0FFH
	DEFB    004H,0F5H,011H,0D5H,014H,0D7H,010H,0FFH
	DEFB    042H,0FAH,002H,05EH,040H,0FFH,000H,0FFH
ENTRY   DEFB    020H,0AFH,0A0H,0BFH,080H,0FFH,000H,0FFH
	DEFB    081H,0BDH,020H,0EDH,005H,0F5H,004H,0FFH
	DEFB    055H,055H,045H,0F5H,015H,055H,041H,0FFH
	END
